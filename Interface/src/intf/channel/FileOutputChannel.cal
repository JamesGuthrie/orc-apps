/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Richard Thavot <richard.thavot@epfl.ch>

package intf.channel;

/**
 *  This unit contains some needed functions to support management of a file.
 */
unit FileOutputChannel :

	/**
	 * Creates a file output stream to read from, the file specified by the File path.
	 * If the path is empty, the path is replaced by the input stimulus file.
	 * No mode options
	 */
	@native function open(String path, String mode) --> int end
	
	/**
	 * Tests whether the file or directory denoted by this pathname exists. 
	 */
	@native function exists(int desc) --> bool end
	
	/**
	 * Closes this rfile output stream and releases any system resources associated with the stream.
	 */
	@native procedure close(int desc) end
	
	/**
	 * Returns false (Unidirectional Stream)
	 */
	@native function isInputShutdown(int desc) --> bool end
	
	/**
	 * Reads the default value 0 (Unidirectional Stream)
	 */
	@native function readByte(int desc) --> int(size=8) end
	
	/**
	 * Returns true whether the specified file is writable
	 */
	@native function isOutputShutdown(int desc) --> bool end
	
	/**
	 * Writes to the output stream.
	 */
	@native procedure writeByte(int desc, int(size=8) byte) end

	/**
	 * No options available
	 */
	@native procedure setOption(int desc, String name, String value) end
	
	/**
	 * No options available
	 */
	@native function getOption(int desc, String name) --> String end


end