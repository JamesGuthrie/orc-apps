/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Richard Thavot <richard.thavot@epfl.ch>

package system.io;

/**
 *  This unit contains some needed functions to support management of an Image.
 */
unit AccessImage :


	int IRSIZE = 2; // Determines the size of the image resolution.
	int IWSIZE = 1024; // Determines the size the width of the image.
	int IHSIZE = 1024; // Determines the size the height of the image.
	int ICSIZE = 3; // Determines the size of the components of the image
	
	/* *************************
	 *    Color spaces
	 *************************** */
	int CS_RGB = 0; // Standard RGB. Tile Format: R - G - B. The RGB color space defined at http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html .
	//int CS_LINEAR_RGB = 1; // Tile format: R - G - B.
	//int CS_GRAY = 2; // Tile format: Gray.
	//int CS_YCrCb = 3; // Tile format: Y - Cr - Cb.
	//int CS_YCrCb_444 = CS_YCrCb;
	//int CS_YCrCb_422 = 4; // Tile format: Y0 - Cr - Y1 - Cb.
	//int CS_YCrCb_420 = 5; // Tile format: Y0 - Y1 - Cr - Y2 - Y4 - Cb.
	
	/* *************************
	 *    Image access 
	 *************************** */
	@native function openImage(String fileName, int ColorSpace) --> int end // Opens the image whose name is specified in the parameter filename with. Returns the file descriptor.
	@native function closeImage(int desc) --> int end // Closes the image associated with the descriptor and disassociates it.
	
	/* *************************
	 *    Image input/output 
	 *************************** */
	@native procedure readImage(int desc, int image[IWSIZE][IHSIZE][ICSIZE]) end
	@native procedure writeImage(int desc, int image[IWSIZE][IHSIZE][ICSIZE]) end
	
	/* *************************
	 *    Image positioning 
	 *************************** */
	@native procedure getImageResolution(int desc, int resolution[IRSIZE]) end // Returns the real resolution of an image.
	@native procedure setImageResolution(int desc, int resolution[IRSIZE]) end
	

	

end