/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.system;

import org.epfl.processing.ColorSpace.*;

actor Mire ()
	==> 
	uint(size=16) Width,
	uint(size=16) Height,
	uint(size=24) Picture
	:
	
	int N = 1;
	int i := 0;
	
	uint(size=16) width = 128;
	uint(size=16) height = 128;
	
	uint(size=16) w := width;
	uint(size=16) h := height;
	
	bool eof := true;
	
	function percent(uint(size=16) s,uint rate) --> uint(size=16) :
		s * rate / 100
	end
	
	function perthousand(uint(size=16) s,uint rate) --> uint(size=16) :
		s * rate / 1000
	end
	
	
	/**
	 * Iterate
	 */
	Iterator.inf: action ==>
	guard N = -1
	end
	
	Iterator.exit: action ==>
	guard i >= N
	
	end
	
	Iterator.loop: action ==>
	do
		i := i + 1;
	end
	
	/**
	 * Give Resolution
	 */
	Resolution: action ==>  Width:[ width ], Height:[ height ]
	do
		w := 0;
		h := 0;
		eof := false;
	end
	
	/**
	 * FIRST PORTION
	 */
	Image.First.C1 : action ==> Picture:[ Anthracite ]
	guard (h < percent( height, 55)) and (w < perthousand(width,115))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C2 : action ==> Picture:[ Grey ]
	guard (h < percent( height, 55)) and (w < perthousand(width,225))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C3 : action ==> Picture:[ Yellow ]
	guard (h < percent( height, 55) ) and (w < perthousand(width,335))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C4 : action ==> Picture:[ Cyan ]
	guard (h < percent( height, 55)) and (w < perthousand(width,445))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C5 : action ==> Picture:[ Green ]
	guard (h < percent( height, 55)) and (w < perthousand(width,555))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C6 : action ==> Picture:[ Magenta ]
	guard (h < percent( height, 55)) and (w < perthousand(width,665))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C7 : action ==> Picture:[ Red ]
	guard (h < percent( height, 55) ) and (w < perthousand(width,775))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C8 : action ==> Picture:[ Blue ]
	guard (h < percent( height, 55)) and (w < perthousand(width,885))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.First.C9 : action ==> Picture:[ Anthracite ]
	guard h < percent( height, 55) 
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	/**
	 * SECOND PORTION
	 */
	Image.Second.C1 : action ==> Picture:[ LightCyan ]
	guard (h < percent( height, 65)) and (w < perthousand(width,115))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Second.C2 : action ==> Picture:[ DarkBlue ]
	guard (h < percent( height, 65)) and (w < perthousand(width,225))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Second.C3 : action ==> Picture:[ Grey ]
	guard h < percent( height, 65) 
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	/**
	 * THIRD PORTION
	 */
	Image.Third.C1 : action ==> Picture:[ LightYellow ]
	guard (h < percent( height, 75)) and (w < perthousand(width,115))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Third.C2 : action ==> Picture:[ DarkPurpule ]
	guard (h < percent( height, 75)) and (w < perthousand(width,225))
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	//uint(size=16) pp = 255 * 16 / perthousand(width,775);
	uint(size=16) pp = 255 * 16 / (width * 775 / 1000);
	uint(size=16) px := 0;
	
	Image.Third.C3 : action ==> Picture:[ rgb ]
	guard h < percent( height, 75)
	var uint(size=24) rgb = toRGB(px/16, px/16, px/16)
	do
		px := px + pp;
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
		if(w=0) then px := 0; end
	end

	/**
	 * FOURTH PORTION
	 */
	Image.Fourth.C1 : action ==> Picture:[ Anthracite ]
	guard w < perthousand(width,115)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C2 : action ==> Picture:[ Black ]
	guard w < perthousand(width,285)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C3 : action ==> Picture:[ White ]
	guard w < perthousand(width,500)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C4 : action ==> Picture:[ Black ]
	guard w < perthousand(width,600)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C5 : action ==> Picture:[ DarkBlack ]
	guard w < perthousand(width,630)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C6 : action ==> Picture:[ Black ]
	guard w < perthousand(width,660)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C7 : action ==> Picture:[ LightBlack ]
	guard w < perthousand(width,690)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C8 : action ==> Picture:[ Black ]
	guard w < perthousand(width,720)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C9 : action ==> Picture:[ VividBlack ]
	guard w < perthousand(width,750)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C10 : action ==> Picture:[ Black ]
	guard w < perthousand(width,775)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C11 : action ==> Picture:[ DarkBlack ]
	guard w < perthousand(width,885)
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Image.Fourth.C12 : action ==> Picture:[ Anthracite ]
	do
		w := w + 1;
		if(w >=  width) then 
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	Next : action ==>
	guard eof
	end
	
	Exit : action ==>
	guard eof
	do
		println("exit");
		eof := false;
	end
	
	schedule fsm Loop :
		Loop ( Iterator.exit ) --> Exit;
		Loop ( Iterator.loop ) --> Res;
		Loop ( Iterator.inf  ) --> Res;
		Res  ( Resolution    ) --> Pic;
		Pic  ( Image         ) --> Pic;
		Pic  ( Next          ) --> Loop;
		Exit ( Exit          ) --> Exit;
	end
	
	
	/**
	 * Priority
	 */
	priority
		Iterator.inf > Iterator.exit > Iterator.loop;
		Next > Image;
		Image.First > Image.Second > Image.Third > Image.Fourth;
		Image.First.C1 > Image.First.C2 > Image.First.C3 > Image.First.C4 > 
			Image.First.C5 > Image.First.C6 > Image.First.C7 > Image.First.C8 > 
			Image.First.C9;
		Image.Second.C1 > Image.Second.C2 > Image.Second.C3;
		Image.Third.C1 > Image.Third.C2 > Image.Third.C3;
		Image.Fourth.C1 > Image.Fourth.C2 > Image.Fourth.C3 > Image.Fourth.C4 > 
			Image.Fourth.C5 > Image.Fourth.C6 > Image.Fourth.C7 > Image.Fourth.C8 > 
			Image.Fourth.C9 > Image.Fourth.C10 > Image.Fourth.C11 >Image.Fourth.C12;
	end


end


