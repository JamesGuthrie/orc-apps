/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.system;

import org.epfl.processing.ColorSpace.*;
import std.util.BitOps.*;

actor MonolithicMire ()
	==> 
	uint(size=16) Width,
	uint(size=16) Height,
	uint(size=24) Picture
	:
	
	uint(size=16) width = 128;
	uint(size=16) height = 128;
	
	uint(size=16) w := width;
	uint(size=16) h := height;
	
	bool eof := true;
	
	function percent(uint(size=16) s,uint rate) --> uint(size=16) :
		s * rate / 100
	end
	
	function perthousand(uint(size=16) s,uint rate) --> uint(size=16) :
		s * rate / 1000
	end
	
	//uint(size=16) pp = 255 * 16 / perthousand(width,775);
	uint(size=16) pp = 255 * 16 / (width * 775 / 1000);
	uint(size=16) px := 0;
	
	/**
	 * Give Resolution
	 */
	Resolution: action ==>  Width:[ width ], Height:[ height ]
	guard eof
	do
		eof := false;
		w := 0;
		h := 0;
		//println("New frame");
	end
	
	Image : action ==> Picture:[ color ]
	var uint(size=24) color
	do
		// First Portion
		if(h < percent( height, 55)) then
			if(w < perthousand(width,115)) then
				color := Anthracite;
			else if (w < perthousand(width,225)) then
				color := Grey;
			else if (w < perthousand(width,335)) then
				color := Yellow;
			else if (w < perthousand(width,445)) then
				color := Cyan;
			else if (w < perthousand(width,555)) then
				color := Green;
			else if (w < perthousand(width,665)) then
				color := Magenta;
			else if (w < perthousand(width,775)) then
				color := Red;
			else if (w < perthousand(width,885)) then
				color := Blue;
			else
				color := Anthracite;
			end end end end end end end end 
		// Second Portion
		else if (h < percent( height, 65)) then
			if (w < perthousand(width,115)) then
				color := LightCyan;
			else if (w < perthousand(width,225)) then
				color := DarkBlue;
			else
				color := Grey;
			end end
		// Third Portion
		else if (h < percent( height, 75)) then
			if (w < perthousand(width,115)) then
				color := LightYellow;
			else if (w < perthousand(width,225)) then
				color := DarkPurpule;
			else
				color := toRGB(px/16, px/16, px/16);
				px := px + pp;
			end end
		// Fourth Portion
		else
			if (w < perthousand(width,115)) then
				color := Anthracite;
			else if (w < perthousand(width,285)) then
				color := Black;
			else if (w < perthousand(width,500)) then
				color := White;
			else if (w < perthousand(width,600)) then
				color := Black;
			else if (w < perthousand(width,630)) then
				color := DarkBlack;
			else if (w < perthousand(width,660)) then
				color := Black;
			else if (w < perthousand(width,690)) then
				color := LightBlack;
			else if (w < perthousand(width,720)) then
				color := Black;
			else if (w < perthousand(width,750)) then
				color := VividBlack;
			else if (w < perthousand(width,775)) then
				color := Black;
			else if (w < perthousand(width,885)) then
				color := DarkBlack;
			else
				color := Anthracite;
			end end end end end end end end end end end
		end end end
		// Move
		w := w + 1;
		if(w >=  width) then 
			px := 0; // Reset px each new line
			w := 0;
			h := h + 1;
			if(h >= height) then
				eof := true;
			end
		end
	end
	
	
	/**
	 * Priority
	 */
	priority 
		Resolution > Image ;
	end


end


