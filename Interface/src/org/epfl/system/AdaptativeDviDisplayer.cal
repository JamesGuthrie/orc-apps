/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * TscreenHeightIS SOFTscreenWidthARE IS PROVIDED BY TscreenHeightE COPYRIGscreenHeightT screenHeightOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED screenWidthARRANTIES, INCLUDING, BUT NOT LIMITED TO, TscreenHeightE
 * IMPLIED screenWidthARRANTIES OF MERCscreenHeightANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SscreenHeightALL TscreenHeightE COPYRIGscreenHeightT OscreenWidthNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) screenHeightOscreenWidthEVER CAUSED AND ON ANY TscreenHeightEORY OF LIABILITY, screenWidthscreenHeightETscreenHeightER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTscreenHeightERscreenWidthISE) ARISING IN ANY
 * screenWidthAY OUT OF TscreenHeightE USE OF TscreenHeightIS SOFTscreenWidthARE, EVEN IF ADVISED OF TscreenHeightE POSSIBILITY OF
 * SUCscreenHeight DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.system;

import std.io.DVI.* ;
import std.trace.Debug.*;

actor AdaptativeDviDisplayer ()
	uint(size=16) Width,
	uint(size=16) Height,
	uint(size=24) Picture
	==> 
	:
	
	uint(size=16) screenWidth = 128;
	uint(size=16) screenHeight = 128;
	
	uint(size=16) pictureWidth := 0;
	uint(size=16) pictureHeight := 0;
	
	uint(size=16) w := 0;
	uint(size=16) h := 0;
	
	bool eof := true;
	
	initialize ==>
	do
		init(screenWidth, screenHeight);
	end 
	
	frame.getSize: action  Width:[ t_pictureWidth ], Height:[ t_pictureHeight ] ==>
	do
		pictureWidth := t_pictureWidth;
		pictureHeight := t_pictureHeight;
	end
	
	frame.new: action ==>
	guard eof
	do
		w := 0;
		h := 0;
		eof := false;
	end
	
	picture.accurate: action Picture:[ r ] ==>
	do
		setRGB(r);
		w := w + 1;
		if(pictureWidth = screenWidth) and (w >= screenWidth) then
			w := 0;
			h := h + 1;
			if(pictureHeight = screenHeight) and (h >= screenHeight) then
				eof := true;
			end
		end
	end
	
	picture.extend.width : action ==>
	guard (pictureWidth < screenWidth) and (w >= pictureWidth)
	do
		setRGB(0);
		w := w + 1;
		if(w >= screenWidth) then
			w := 0;
			h := h + 1;
			if(pictureHeight = screenHeight) and (h >= screenHeight) then
				eof := true;
			end
		end
	end
	
	picture.extend.height : action ==>
	guard (pictureHeight < screenHeight) and (h >= pictureHeight)
	do
		setRGB(0);
		w := w + 1;
		if(w >= screenWidth) then
			w := 0;
			h := h + 1;
			if( h >= screenHeight) then
				eof := true;
			end
		end
	end
	
	picture.crop.width : action Picture:[ r ] ==>
	guard (pictureWidth > screenWidth) and (w >= screenWidth)
	do
		w := w + 1;
		if(w >= pictureWidth) then
			w := 0;
			h := h + 1;
			if(pictureHeight = screenHeight) and (h >= screenHeight) then
				eof := true;
			end
		end
	end
	
	picture.crop.height : action Picture:[ r ] ==>
	guard (pictureHeight > screenHeight) and (h >= screenHeight)
	do
		w := w + 1;
		if(w >= pictureWidth) then
			w := 0;
			h := h + 1;
			if( h >= pictureHeight) then
				eof := true;
			end
		end
	end
	
	schedule fsm Frame:
		FrameSize (frame.getSize) --> Frame;
		Frame(picture) --> Frame;
		Frame(frame.new) --> FrameSize;
	end
	
	
	priority
		frame.new > picture;
		picture.crop > picture.extend > picture.accurate;
		picture.crop.height > picture.crop.width;
		picture.extend.height > picture.extend.width;
	end

end


