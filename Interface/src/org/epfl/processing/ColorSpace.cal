/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.processing;

import std.util.BitOps.*;

unit ColorSpace  :
	
	function toRGB(uint(size=8) R, uint(size=8) G, uint(size=8) B) --> uint(size=24) :
		concatBits( concatBits(R, 8, G, 8), 16, B, 8 )
	end
	
	uint(size=24) DarkGrey    = 0x2B2B2B;
	uint(size=24) DarkBlue    = 0x052550;
	uint(size=24) DarkPurpule = 0x36056D;
	uint(size=24) DarkBlack   = 0x000000;
	
	uint(size=24) LightCyan   = 0x00FFFF;
	uint(size=24) LightYellow = 0xFFFF00;
	uint(size=24) LightBlack  = 0x0A0A0A;
	
	uint(size=24) VividBlack  = 0x0D0D0D;
		
	uint(size=24) Anthracite  = 0x696969;
	uint(size=24) Grey        = 0xC1C1C1;
	uint(size=24) Yellow      = 0xC1C100;
	uint(size=24) Cyan        = 0x00C1C1;
	uint(size=24) Green       = 0x00C100;
	uint(size=24) Magenta     = 0xC100C1;
	uint(size=24) Red         = 0xC10000;
	uint(size=24) Blue        = 0x0000C1;
	uint(size=24) Black       = 0x050505;
	uint(size=24) White       = 0xFFFFFF;

end