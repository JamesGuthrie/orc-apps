/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.processing;

import std.util.BitOps.*;

unit ColorSpace  :

	function AsRGB(uint(size=8) color[3]) --> uint(size=24) :
		concatBits( concatBits(color[0], 8, color[1], 8), 16, color[2], 8 )
	end
	
	function ToRGB(uint(size=8) R, uint(size=8) G, uint(size=8) B) --> uint(size=24) :
		concatBits( concatBits(R, 8, G, 8), 16, B, 8 )
	end
	
	uint(size=8) DarkGrey[3]    = [43,43,43];
	uint(size=8) DarkBlue[3]    = [5,37,80];
	uint(size=8) DarkPurpule[3] = [54,5,109];
	uint(size=8) DarkBlack[3]   = [0,0,0];
	
	uint(size=8) LightCyan[3]   = [0,255,255];
	uint(size=8) LightYellow[3] = [255,255,0];
	uint(size=8) LightBlack[3]  = [10,10,10];
	
	uint(size=8) VividBlack[3]  = [13,13,13];
		
	uint(size=8) Anthracite[3] = [105,105,105];
	uint(size=8) Grey[3]       = [193,193,193];
	uint(size=8) Yellow[3]     = [193,193,0];
	uint(size=8) Cyan[3]       = [0,193,193];
	uint(size=8) Green[3]      = [0,193,0];
	uint(size=8) Magenta[3]    = [193,0,193];
	uint(size=8) Red[3]        = [193,0,0];
	uint(size=8) Blue[3]       = [0,0,193];
	uint(size=8) Black[3]      = [5,5,5];
	uint(size=8) White[3]      = [255,255,255];

	

end