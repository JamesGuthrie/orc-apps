/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.memory;

import org.epfl.memory.pragma.StdMemory.*;

actor ZBT ()
	uint(size=18) Address,
	uint(size=8)  Command,
	uint(size=24) WriteData,
	native uint(size=32) Din
	==>
	uint(size=24) ReadData,
	native uint(size=32) Dout,
	native uint(size=18) A,
	native bool CEn,
	native bool WE,
	native bool CE
	:

	
	uint(size=32) t_data[2];
	uint(size=2) t_i;
	
	uint(size=8) doing[2] := [NOP, NOP];
	
	AD.RW : action  Command:[cmd], Address:[a], WriteData:[d] ==> A:[a], Dout:[d], CEn:[true], WE:[false], CE:[true]
	guard cmd=READ and doing[0]=WRITE
	do
		doing[0] := doing[1];
		doing[1] := READ;
		//println("AD.RW: d[1]=" + doing[1] + " d[0]=" + doing[0]);
	end
	
	AD.RR : action  Command:[cmd], Address:[a], Din:[d] ==> ReadData:[d], A:[a], CEn:[true], WE:[false], CE:[true]
	guard cmd=READ and doing[0]=READ
	do
		doing[0] := doing[1];
		doing[1] := READ;
		//println("AD.RR");
	end
	
	AD.WW : action  Command:[cmd], Address:[a], WriteData:[d] ==> A:[a], Dout:[d], CEn:[true], WE:[true], CE:[true]
	guard cmd=WRITE and doing[0]=WRITE
	do
		doing[0] := doing[1];
		doing[1] := WRITE;
		//println("AD.WW");
	end
	
	AD.WR : action  Command:[cmd], Address:[a], Din:[d] ==> ReadData:[d], A:[a], CEn:[true], WE:[true], CE:[true]
	guard cmd=WRITE and doing[0]=READ
	do
		doing[0] := doing[1];
		doing[1] := WRITE;
		//println("AD.WR");
	end
	
	D.W : action WriteData:[d] ==> Dout:[d], CEn:[true], CE:[false]
	guard doing[0]=WRITE
	do
		doing[0] := doing[1];
		doing[1] := NOP;
		//println("D.W");
	end

	D.R.done : action Din:[d] ==> ReadData:[d], CEn:[true], CE:[false]
	guard doing[0]=READ
	do
		doing[0] := doing[1];
		doing[1] := NOP;
		//println("D.R.done");
	end
	
	D.R.save : action Din:[d] ==> CEn:[false]
	guard doing[0]=READ
	do
		t_data[t_i] := d;
		t_i := t_i + 1;
		doing[0] := doing[1];
		doing[1] := NOP;
		//println("D.R.save");
	end
	
	D.R.provide : action  ==> ReadData:[d]
	var uint(size=32) d=t_data[0]
	do
		t_data[0] := t_data[1];
		t_i := 0;
		//println("D.R.provide");
	end
	
	A.R : action Command:[cmd], Address:[a] ==> A:[a], CEn:[true], WE:[false], CE:[true]
	guard cmd=READ and ( (doing[0] = NOP) or (doing[1] = NOP) ) 
	do
		doing[0] := doing[1];
		doing[1] := READ;
		//println("A.R");
	end
	
	A.W : action  Command:[cmd], Address:[a] ==>A:[a], CEn:[true], WE:[true], CE:[true]
	guard cmd=WRITE and ( (doing[0] = NOP) or (doing[1] = NOP) ) 
	do
		doing[0] := doing[1];
		doing[1] := WRITE;
		//println("A.W");
	end
	
	Continue : action ==> CEn:[true], CE:[false]
	guard (doing[1]!=NOP) and (doing[0]=NOP)
	do
		doing[0] := doing[1];
		doing[1] := NOP;
		//println("Continue");
	end
	
	Bind : action ==> CEn:[false]
	do
		doing[0] := doing[1];
		doing[1] := NOP;
		//println("Bind");
	end
	
	schedule fsm Begin :
		Begin ( Bind ) --> L10;
		
		L10 ( AD ) --> L20;
		L10 ( D.W ) --> Begin;
		L10 ( D.R.done ) --> Begin;
		L10 ( D.R.save ) --> L11;
		L10 ( A ) --> L20;
		
		L20 ( AD ) --> L20;
		L20 ( D.W ) --> L10;
		L20 ( D.R.done ) --> L10;
		L20 ( D.R.save ) --> L21;
		L20 ( A ) --> L20;
		L20 ( Continue ) --> L10;

		L11 ( D.R.provide ) --> Begin;
		
		L21 ( D.W ) --> L11;
		L21 ( D.R.provide ) --> L11;
	end
	
	priority
		AD > D > A > Continue;
		D.W > D.R;
		D.R.done > D.R.save;
	end
	
end


