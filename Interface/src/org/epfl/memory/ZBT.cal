/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.memory;

import org.epfl.memory.pragma.StdMemory.*;

actor ZBT ()
	uint(size=18) Address,
	uint(size=8)  Command,
	uint(size=24) WriteData,
	native uint(size=32) Din
	==>
	uint(size=24) ReadData,
	native uint(size=32) Dout,
	native uint(size=18) A,
	native bool CEn,
	native bool WE,
	native bool CE
	:

	
	bool r0 := false;
	bool r1 := false;
	bool r2 := false;
	bool r3 := false;
	
	Bind : action ==> CE:[false]
	guard (r3=false) and (r2=false) and (r0 = false) and (r1 = false)
	do
		//println("Bind");
	end

	
	Continue : action ==> CE:[false]
	guard (r3=false) and ( (r2 = true) or (r0 = true) or (r1 = true))
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := false;
		//println("Continue");
	end
	
	A.Write : action  Command:[cmd], Address:[a], WriteData:[d] ==> A:[a], CE:[true], WE:[true], Dout:[d]
	guard (r3=false) and cmd=WRITE
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := false;
		//println("AWrite");
	end
	
	A.Read : action Command:[cmd], Address:[a] ==> A:[a], CE:[true], WE:[false]
	guard (r3=false) and cmd=READ
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := true;
		//println("ARead");
	end
	
	DRead.Only : action Din:[d] ==> ReadData:[d]
	guard (r3 = true) 
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := false;
		//println("DRead.Only");
	end
	
	DRead.A.Write : action Din:[d], Command:[cmd], Address:[a], WriteData:[newd] ==> ReadData:[d] , A:[a], CE:[true], WE:[true], Dout:[newd]
	guard (r3 = true) and cmd=WRITE
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := false;
		//println("DRead.AWrite");
	end
	
	DRead.A.Read : action Din:[d], Command:[cmd], Address:[a] ==> ReadData:[d], A:[a], CE:[true], WE:[false]
	guard (r3 = true) and cmd=READ
	do
		r3 := r2;
		r2 := r1;
		r1 := r0;
		r0 := true;
		//println("DRead.ARead");
	end
	
	schedule fsm Begin :
		Begin (Bind) --> L0;
		
		L0 ( A.Write ) --> LX0;
		L0 ( A.Read ) --> LX0;
		
		LX0 ( A.Write ) --> LX0;
		LX0 ( A.Read ) --> LX0;
		LX0 ( Continue ) --> LX0;
		LX0 ( DRead ) --> LX0;
		LX0 ( Bind ) --> L0;
	end 
	
	priority
		DRead > A > Continue > Bind;
		DRead.A > DRead.Only;
	end
	
	
	
end


