/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.memory;

import org.epfl.graphic.pragma.GraphicsResolution.*;

actor MemoryTest ()
	uint(size=32) ReadData
	==>
	uint(size=18) Address,
	uint(size=8)  Command,
	uint(size=32) WriteData
	
	:
	
	//uint(size=8) NOP = 0;
	uint(size=8) READ = 1;
	uint(size=8) WRITE = 2;
	

	A0 : action ==> Address:[0], Command:[WRITE], WriteData:[500]
	end
	
	A1 : action ==> Address:[0], Command:[READ]
	end
	
	A2 : action ReadData:[data] ==> 
	do
		println(data);
	end

	Break : action ==>
	guard 0=1
	end
	
	Continue : action ==>
	end

	schedule fsm A:
		A (A0) --> B;
		B (Continue) --> C;
		C (A1) --> D;
		D (A1) --> E;
		E (A2) --> F;
		F (A2) --> Exit;
		Exit (Break) --> Exit;
	end
	
end


