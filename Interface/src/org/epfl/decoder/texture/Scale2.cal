/*
*	author:			alhadi.abrahman@epfl.ch
*	description: 	IDCT input scaling
*	parameters:		-			
*	input: 			SIn - IDCT input
*	output: 		SOut - scaled output
*/

package org.epfl.decoder.texture;

actor Scale2 () int (size=SIN_SZ) SIn ==> int (size=SOUT_SZ) SOut :

int (size = 8) SIN_SZ = 13;
int (size = 8) SOUT_SZ = 23;


int (size = 13) A = 1024;
int (size = 13) B = 1138;
int (size = 13) C = 1730;
int (size = 13) D = 1609;
int (size = 13) E = 1264;
int (size = 13) F = 1922;
int (size = 13) G = 1788;
int (size = 13) H = 2923;
int (size = 13) I = 2718;
int (size = 13) J = 2528;


int(size=9) count := 0;

int p := 4096;


  List (type: int (size=13), size=64) scale_factor =
[
  A, B, C, D, A, D, C, B,
  B, E, F, G, B, G, F, E,
  C, F, H, I, C, I, H, F,
  D, G, I, J, D, J, I, G,
  A, B, C, D, A, D, C, B,
  D, G, I, J, D, J, I, G,
  C, F, H, I, C, I, H, F,
  B, E, F, G, B, G, F, E
];

  dc0: action SIn: [x] ==> SOut: [y]
  var int y
  do
  	y := (x * scale_factor[count]) + p;
    count := count + 1;
    if (count >= 64) then
    	count := 0;
    	p := 4096;
    else
    	p := 0;
    end
    
  end
  
end