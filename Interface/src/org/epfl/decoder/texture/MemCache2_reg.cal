/*
*	author:			alhadi.abrahman@epfl.ch
*	description: 	Temporary memory to store 1st stage 1D IDCT
					The actor first stores all parallel column output of 1st stage IDCT,
					then outputs each row in parallel
*	parameters:		-			
*	input: 			inData0 to inData7 - parallel input of one column after 1st stage IDCT
*	output: 		outData0 to outData7 - parallel output of all 8 pixels in a row
*/

package org.epfl.decoder.texture;

actor MemCache2_reg () int (size = 26) inData0, int (size = 26) inData1, int (size = 26) inData2, int (size = 26) inData3,
				int (size = 26) inData4, int (size = 26) inData5, int (size = 26) inData6, int (size = 26) inData7 ==>
				int (size = 26) outData0, int (size = 26) outData1, int (size = 26) outData2, int (size = 26) outData3, 
				int (size = 26) outData4, int (size = 26) outData5, int (size = 26) outData6, int (size = 26) outData7/* , int(size=32) out_test */:

	int (size = 26) outd0 := 0;
	int (size = 26) outd1 := 0;
	int (size = 26) outd2 := 0;
	int (size = 26) outd3 := 0;
	int (size = 26) outd4 := 0;
	int (size = 26) outd5 := 0;
	int (size = 26) outd6 := 0;
	int (size = 26) outd7 := 0;
	int (size = 23) ind0 := 0;
	int (size = 23) ind1 := 0;
	int (size = 23) ind2 := 0;
	int (size = 23) ind3 := 0;
	int (size = 23) ind4 := 0;
	int (size = 23) ind5 := 0;
	int (size = 23) ind6 := 0;
	int (size = 23) ind7 := 0;
	int (size = 23) ind8 := 0;
	int (size = 23) ind9 := 0;
	int (size = 23) ind10 := 0;
	int (size = 23) ind11 := 0;
	int (size = 23) ind12 := 0;
	int (size = 23) ind13 := 0;
	int (size = 23) ind14 := 0;
	int (size = 23) ind15 := 0;
	int (size = 23) ind16 := 0;
	int (size = 23) ind17 := 0;
	int (size = 23) ind18 := 0;
	int (size = 23) ind19 := 0;
	int (size = 23) ind20 := 0;
	int (size = 23) ind21 := 0;
	int (size = 23) ind22 := 0;
	int (size = 23) ind23 := 0;
	int (size = 23) ind24 := 0;
	int (size = 23) ind25 := 0;
	int (size = 23) ind26 := 0;
	int (size = 23) ind27 := 0;
	int (size = 23) ind28 := 0;
	int (size = 23) ind29 := 0;
	int (size = 23) ind30 := 0;
	int (size = 23) ind31 := 0;
	int (size = 23) ind32 := 0;
	int (size = 23) ind33 := 0;
	int (size = 23) ind34 := 0;
	int (size = 23) ind35 := 0;
	int (size = 23) ind36 := 0;
	int (size = 23) ind37 := 0;
	int (size = 23) ind38 := 0;
	int (size = 23) ind39 := 0;
	int (size = 23) ind40 := 0;
	int (size = 23) ind41 := 0;
	int (size = 23) ind42 := 0;
	int (size = 23) ind43 := 0;
	int (size = 23) ind44 := 0;
	int (size = 23) ind45 := 0;
	int (size = 23) ind46 := 0;
	int (size = 23) ind47 := 0;
	int (size = 23) ind48 := 0;
	int (size = 23) ind49 := 0;
	int (size = 23) ind50 := 0;
	int (size = 23) ind51 := 0;
	int (size = 23) ind52 := 0;
	int (size = 23) ind53 := 0;
	int (size = 23) ind54 := 0;
	int (size = 23) ind55 := 0;
	int (size = 23) ind56 := 0;
	int (size = 23) ind57 := 0;
	int (size = 23) ind58 := 0;
	int (size = 23) ind59 := 0;
	int (size = 23) ind60 := 0;
	int (size = 23) ind61 := 0;
	int (size = 23) ind62 := 0;
	int (size = 23) ind63 := 0;
		
	inp0: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind0 := in0;
		ind8 := in1;
		ind16 := in2;
		ind24 := in3;
		ind32 := in4;
		ind40 := in5;
		ind48 := in6;
		ind56 := in7;
	end
	
	inp1: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind1 := in0;
		ind9 := in1;
		ind17 := in2;
		ind25 := in3;
		ind33 := in4;
		ind41 := in5;
		ind49 := in6;
		ind57 := in7;
	end
	
	inp2: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind2 := in0;
		ind10 := in1;
		ind18 := in2;
		ind26 := in3;
		ind34 := in4;
		ind42 := in5;
		ind50 := in6;
		ind58 := in7;
	end
	
	inp3: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind3 := in0;
		ind11 := in1;
		ind19 := in2;
		ind27 := in3;
		ind35 := in4;
		ind43 := in5;
		ind51 := in6;
		ind59 := in7;
	end
	
	inp4: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind4 := in0;
		ind12 := in1;
		ind20 := in2;
		ind28 := in3;
		ind36 := in4;
		ind44 := in5;
		ind52 := in6;
		ind60 := in7;
	end
	
	inp5: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind5 := in0;
		ind13 := in1;
		ind21 := in2;
		ind29 := in3;
		ind37 := in4;
		ind45 := in5;
		ind53 := in6;
		ind61 := in7;
	end
	
	inp6: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind6 := in0;
		ind14 := in1;
		ind22 := in2;
		ind30 := in3;
		ind38 := in4;
		ind46 := in5;
		ind54 := in6;
		ind62 := in7;
	end
	
	inp7: action inData0: [in0], inData1: [in1], inData2: [in2], inData3: [in3], 
					inData4: [in4], inData5: [in5], inData6: [in6], inData7: [in7] ==> 
	do
		ind7 := in0;
		ind15 := in1;
		ind23 := in2;
		ind31 := in3;
		ind39 := in4;
		ind47 := in5;
		ind55 := in6;
		ind63 := in7;
	end

	//output data
	out0: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[0]
	do
		outd0 := ind0;
		outd1 := ind1;
		outd2 := ind2;
		outd3 := ind3;
		outd4 := ind4;
		outd5 := ind5;
		outd6 := ind6;
		outd7 := ind7;
	end
	
	out1: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[1]
	do
		outd0 := ind8;
		outd1 := ind9;
		outd2 := ind10;
		outd3 := ind11;
		outd4 := ind12;
		outd5 := ind13;
		outd6 := ind14;
		outd7 := ind15;
	end
	
	out2: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[2]
	do
		outd0 := ind16;
		outd1 := ind17;
		outd2 := ind18;
		outd3 := ind19;
		outd4 := ind20;
		outd5 := ind21;
		outd6 := ind22;
		outd7 := ind23;
	end
	
	out3: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[3]
	do
		outd0 := ind24;
		outd1 := ind25;
		outd2 := ind26;
		outd3 := ind27;
		outd4 := ind28;
		outd5 := ind29;
		outd6 := ind30;
		outd7 := ind31;
	end
	
	out4: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[4]
	do
		outd0 := ind32;
		outd1 := ind33;
		outd2 := ind34;
		outd3 := ind35;
		outd4 := ind36;
		outd5 := ind37;
		outd6 := ind38;
		outd7 := ind39;
	end
	
	out5: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[5]
	do
		outd0 := ind40;
		outd1 := ind41;
		outd2 := ind42;
		outd3 := ind43;
		outd4 := ind44;
		outd5 := ind45;
		outd6 := ind46;
		outd7 := ind47;
	end
	
	out6: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[6]
	do
		outd0 := ind48;
		outd1 := ind49;
		outd2 := ind50;
		outd3 := ind51;
		outd4 := ind52;
		outd5 := ind53;
		outd6 := ind54;
		outd7 := ind55;
	end
	
	out7: action ==> outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
						outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]//, out_test:[7]
	do
		outd0 := ind56;
		outd1 := ind57;
		outd2 := ind58;
		outd3 := ind59;
		outd4 := ind60;
		outd5 := ind61;
		outd6 := ind62;
		outd7 := ind63;
	end
	
	
	schedule fsm s0 :
	  s0( inp0 )  --> s1;
	  s1( inp1 )  --> s2;
	  s2( inp2 )  --> s3;
	  s3( inp3 )  --> s4;
	  s4( inp4 )  --> s5;
	  s5( inp5 )  --> s6;
	  s6( inp6 )  --> s7;
	  s7( inp7 )  --> s8;
	  s8( out0 ) --> s9;
	  s9( out1 ) --> s10;
	  s10( out2 ) --> s11;
	  s11( out3 ) --> s12;
	  s12( out4 ) --> s13;
	  s13( out5 ) --> s14;
	  s14( out6 ) --> s15;
	  s15( out7 ) --> s0;
	end
end