/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.graphic;

import org.epfl.graphic.pragma.GraphicsResolution.*;

actor FrameResizer ()
	uint(size=16) Width,
	uint(size=16) Height,
	uint(size=24) Frame
	==> 
	uint(size=24) ResizedFrame
	:
	
	uint(size=16) W = HorizontalDisplayPorch;
	uint(size=16) H = VerticalDisplayPorch;
	
	uint(size=16) iWidth := 0;
	uint(size=16) iHeight := 0;
	
	uint(size=16) i := 0;
	uint(size=16) j := 0;
	
	bool eof := false;
	
	newFrame: action  Width:[ t_width ], Height:[ t_height ] ==>
	do
		iWidth := t_width;
		iHeight := t_height;
		//println("newFrame width=" + iWidth + " height=" + iHeight);
	end
	
	endFrame: action ==>
	guard eof
	do
		i := 0;
		j := 0;
		eof := false;
		//println("endFrame");
	end
	
	newPixel.accurate: action Frame:[ pix ] ==> ResizedFrame:[ pix ]
	do
		i := i + 1;
		if(iWidth = W) and (i >= W) then
			i := 0;
			j := j + 1;
			if(iHeight = H) and (j >= H) then
				eof := true;
			end
		end
		//println("newPixel.accurate");
	end
	
	newPixel.extend.width : action ==> ResizedFrame:[0]
	guard (iWidth < W) and (i >= iWidth)
	do
		i := i + 1;
		if(i >= W) then
			i := 0;
			j := j + 1;
			if(iHeight = H) and (j >= H) then
				eof := true;
			end
		end
		//println("newPixel.extend.width");
	end
	
	newPixel.extend.height : action ==> ResizedFrame:[0]
	guard (iHeight < H) and (j >= iHeight)
	do
		i := i + 1;
		if(i >= W) then
			i := 0;
			j := j + 1;
			if( j >= H) then
				eof := true;
			end
		end
		//println("newPixel.extend.height");
	end
	
	newPixel.crop.width : action Frame:[ pix ] ==>
	guard (iWidth > W) and (i >= W)
	do
		i := i + 1;
		if(i >= iWidth) then
			i := 0;
			j := j + 1;
			if(iHeight = H) and (j >= H) then
				eof := true;
			end
		end
		//println("newPixel.crop.width");
	end
	
	newPixel.crop.height : action Frame:[ pix ] ==>
	guard (iHeight > H) and (j >= H)
	do
		i := i + 1;
		if(i >= iWidth) then
			i := 0;
			j := j + 1;
			if( j >= iHeight) then
				eof := true;
			end
		end
		//println("newPixel.crop.height");
	end
	
	schedule fsm New:
		New (newFrame) --> Inside;
		Inside(newPixel) --> Inside;
		Inside(endFrame) --> New;
	end
	
	
	priority
		endFrame > newPixel;
		newPixel.crop > newPixel.extend > newPixel.accurate;
		newPixel.crop.height > newPixel.crop.width;
		newPixel.extend.height > newPixel.extend.width;
	end
	
end


