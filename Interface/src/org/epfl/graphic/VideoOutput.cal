/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.graphic;

import org.epfl.graphic.pragma.GraphicsResolution.*;
import org.epfl.graphic.pragma.Colors.*;

actor VideoOutput ()
	uint(size=24) Frame
	==>
	uint(size=8) CFrame,
	native bool HSYNC,
	native bool VSYNC,
	native bool DE,
	native uint(size=12) Pa,
	native uint(size=12) Pb
	:
	
	function getPa(uint(size=24) RGB) --> uint(size=12) 
	var 
		uint(size=8) B = getB(RGB),
		uint(size=8) G = getG(RGB)
	:
		(((G & 0x0F)<<8) | B) & 0xFFF
	end
	
	function getPb(uint(size=24) RGB) --> uint(size=12) 
	var 
		uint(size=8) R = getR(RGB),
		uint(size=8) G = getG(RGB)
	:
		((R << 4) | (G >> 4)) & 0xFFF
	end
	
	
	uint(size=16) i := 0;
	uint(size=16) j := 0;
	
	uint(size=4) horizontal := SYNC;// states
	uint(size=4) vertical := SYNC;// states
	
	uint(size=8) FrameConter := 0;
	
	new : action ==> DE:[false], HSYNC:[false], VSYNC:[false], CFrame:[fc]
	guard (i=0) and (j=0) and (horizontal=SYNC) and (vertical=SYNC)
	var uint(size=8) fc = FrameConter
	do
		i := 1;
		j := 0;
		FrameConter := FrameConter + 1;
		if(FrameConter >= FrameRate) then
			FrameConter := 0;
		end
		//println("Start Frame:" + fc);
	end
	
	
	border : action ==> DE:[false], HSYNC:[hs], VSYNC:[vs]
	guard  ( horizontal != DISP ) or ( vertical != DISP )
	var bool hs = if(horizontal = SYNC) then false else true end,
		bool vs = if(vertical = SYNC) then false else true end
	do
		//
		i := i + 1;
		if ( horizontal = SYNC ) and ( i >= HorizontalSyncPulse ) then
			i := 0;
			horizontal := BACK;
		else if ( horizontal = BACK ) and (i >= HorizontalBackPorch ) then
			i := 0;
			horizontal := DISP;
		else if ( horizontal = FRONT ) and ( i >= HorizontalFrontPorch) then
			i := 0;
			horizontal := SYNC;
			j := j + 1;
		else if ( horizontal = DISP ) and ( i >= HorizontalDisplayPorch ) then
			i := 0;
			horizontal := FRONT;
		end end end end
		//
		if ( vertical = SYNC ) and ( j >= VerticalSyncPulse ) then
			j := 0;
			vertical := BACK;
		else if ( vertical = BACK ) and ( j >= VerticalBackPorch ) then
			j := 0;
			vertical := DISP;
		else if ( vertical = FRONT ) and ( j >= VerticalFrontPorch) then
			j := 0;
			vertical := SYNC;
		else if ( vertical = DISP ) and ( j >= VerticalDisplayPorch ) then
			j := 0;
			vertical := FRONT;
		end end end end
		//println("Border");
	end
	
	image : action Frame:[ pix ] ==> DE:[true], HSYNC:[true], VSYNC:[true],  Pa:[getPa(pix)], Pb:[ getPb(pix) ]
	do
		i := i + 1;
		if (i >= HorizontalDisplayPorch) then
			i := 0;
			horizontal := FRONT;
		end
		//println("image");
	end
	
	priority
		new > border > image;
	end
	
end


