/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.graphic;

import org.epfl.graphic.pragma.GraphicsResolution.*;
import org.epfl.memory.pragma.StdMemory.*;
import std.util.BitOps.*;

actor Node2W ()
	uint(size=16) Width,
	uint(size=16) Height,
	bool isWayA,
	uint(size=24) FrameWayA,
	uint(size=24) FrameWayB
	==>
	uint(size=24) Frame
	:
	
	uint(size=16) width := 0;
	uint(size=16) height := 0;
	bool isA := false;
	
	uint(size=16) i := 0;
	uint(size=16) j := 0;
	
	
	Loop : action Height:[h], Width:[w], isWayA:[choice] ==>
	do
		height := h;
		width := w;
		i := 0;
		j := 0;
		isA := choice;
		//println("height:" + height + " width: " + width);
		//println("isWayA " + isA);
	end
	

	WayA : action FrameWayA:[pix] ==> Frame:[pix] 
	guard isA = true
	do
		//print( i + " ");
		i := i + 1;
		if(i >= width) then
			//println("");
			//println(j);
			i := 0;
			j :=j +1;
		end
	end
	
	WayB : action FrameWayB:[pix] ==> Frame:[pix] 
	guard isA = false
	do
		//print( i + " ");
		i := i + 1;
		if(i >= width) then
			//println("");
			//println(j);
			i := 0;
			j :=j +1;
		end
	end

	
	Done : action ==>
	guard j >= height
	end
	
	schedule fsm Init :
		Init ( Loop ) --> Do;
		
		Do ( WayA ) --> Do;
		Do ( WayB ) --> Do;
		Do ( Done ) --> Init;
	end

	priority  
		Done > WayA;
		Done > WayB;
	end
	
end


