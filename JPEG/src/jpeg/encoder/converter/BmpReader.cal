package jpeg.encoder.converter;

actor BmpReader() uint(size=8) In ==> int(size=9) R, int(size=9) G, int(size=9) B, int SOI :
	
	int count := 0;

	int w;
	int h;
	
	List(type:int, size=2048*2048) TempR;
	List(type:int, size=2048*2048) TempG;
	List(type:int, size=2048*2048) TempB;
	// Points to the start of the row to be sent.
	int sendRowIndex := 0; 
	
	header: action In:[ bytes ] repeat 54 ==> SOI:[ w, h ] 
	do
      w := ((((bytes[21] << 24) | (bytes[20] << 16))| (bytes[19] << 8)) | bytes[18]);
      h := ((((bytes[25] << 24) | (bytes[24] << 16))| (bytes[23] << 8)) | bytes[22]);
      sendRowIndex := w * h - w; // Initialize to the start of last row of the bmp image.
    end
    
	data: action In:[ b, g, r ]	==> //R:[ r ], G:[ g ], B:[ b ]
	do
		TempR[count] := r;
		TempG[count] := g;
		TempB[count] := b;
		count := count + 1;
    end
	
	send: action ==> R:[ r ], G:[ g ], B:[ b ]
	guard sendRowIndex >= 0
	var
		int r,
		int g,
		int b
	do
		r := TempR[sendRowIndex + count];
		g := TempG[sendRowIndex + count];
		b := TempB[sendRowIndex + count];
		count := count + 1;
		if(w = count) then // Row sent.
			sendRowIndex := sendRowIndex - w; // Move the index to start of the row above the current row.
			if(sendRowIndex < 0) then
				count := w * h; // Enables 'done' action.
			else
				count := 0;
			end
		end

	end
	
	done: action ==> 
	guard count = w * h
	do
		count := 0;
	end
	
	schedule fsm s0 :
	s0 ( header ) --> s1;
	s1 ( data ) --> s1;
	s1 ( done ) --> s2;
	s2 ( send ) --> s2;
	s2 ( done ) --> s0;
	end
	
	priority
	   done > data;
	   done > send;
	end
end