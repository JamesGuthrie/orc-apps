package jpeg.encoder.converter;


actor ReadRaw()
	uint(size=8) In
		==>
			int(size=32) SOI,
			int(size=10) Y,
			int(size=10) CbCr:

	int Width = 512;
	int Height = 512;

	int Counter := 0;
	int Y_Counter := 0;
	int CbCr_Counter := 0;
	
	List(type:int(size=10), size = Width) Y_Line;
	List(type:int(size=10), size = Width) CbCr_Line;
	
	ReadY: action In:[val] ==> 
	do
		Y_Line[Y_Counter] := val; 
		Y_Counter := Y_Counter + 1;
		Counter := Counter + 1;
	end
	
	ReadCb: action In:[val] ==> 
	do
		CbCr_Line[CbCr_Counter] := val; 
		CbCr_Counter := CbCr_Counter + 1;
		Counter := Counter + 1;
	end			
	
	ReadCr: action In:[val] ==> 
	do
		CbCr_Line[CbCr_Counter] := val; 
		CbCr_Counter := CbCr_Counter + 1;
		Counter := Counter + 1;
	end			
	
	SentYCbCr: action ==> Y:[Y_Line] repeat Width, CbCr:[CbCr_Line] repeat Width
	end
	
	SentY: action ==> Y:[Y_Line] repeat Width
	end
	
	ReadStopYCbCr: action ==>
	guard
		Counter  = Width*2
	do
		Y_Counter := 0;
		CbCr_Counter := 0;
		Counter := 0;
	end
	

	ReadCbCr_dummy: action  In:[val] ==>
	do
		Counter := Counter + 1;
		//println("Raw: " +Counter);
	end
	
	bool once := true;
	
	Sent_SOI: action ==> SOI:[Width, Height] 
	guard
		once
	do
		once := false;
	end
	
	schedule fsm SentSOI:
		SentSOI		(Sent_SOI)		--> s0;
		s0			(ReadY)			--> s01;
		s01			(ReadCb)		--> s02;
		s02			(ReadY)			--> s03;
		s03			(ReadCr)		--> s0;
		
		s0			(ReadStopYCbCr)		--> SentYCbCr;
		
		SentYCbCr	(SentYCbCr)			--> s1;
		
		
		s1			(ReadY)				--> s11;
		s11			(ReadCbCr_dummy)	--> s12;
		s12			(ReadY)				--> s13;
		s13			(ReadCbCr_dummy)	--> s1;
		
		s1			(ReadStopYCbCr)		--> SentY;
		
		SentY		(SentY)				--> s0;
				
	end
	
	priority
		ReadStopYCbCr > ReadY;
	end

end