package jpeg.encoder.converter;

actor RawYCbCr (int width, int height) uint(size=8) In ==> int(size=10) Y, int(size=10) CbCr, int SOI :
		
	List(type:uint(size=8), size=2048*2048) memY;
	List(type:uint(size=8), size=2048*2048/4) memCb;
	List(type:uint(size=8), size=2048*2048/4) memCr;
	
	int count := 0;
		
	soi: action ==> SOI:[width, height]
	end
	
	readY: action In:[y] ==>
	do
		memY[count] := y;
		count := count + 1;
	end
	
	readCb: action In:[y] ==>
	do
		memCb[count] := y;
		count := count + 1;
	end
		
	readCr: action In:[y] ==>
	do
		memCr[count] := y;
		count := count + 1;
	end
	
	doneY: action ==> 
	guard count = width * height
	do
		count := 0;
	end
		
	doneCbCr: action ==> 
	guard count = width * height / 4
	do
		count := 0;
	end
	
	send: action ==> Y:[y0, y1, y2, y3], CbCr:[cr, cb]
	var int y0, int y1, int y2, int y3, int cb, int cr
	do
		y0 := memY[4*count];
		y1 := memY[4*count + 1];
		y2 := memY[4*count + 2];
		y3 := memY[4*count + 3];
		cb := memCb[count];
		cr := memCr[count];
		count := count + 1;
	end
		
	schedule fsm s10 :
		s10 (soi) --> s0;
		s0 ( readY ) --> s0;
		s0 ( doneY ) --> s1;
		s1 ( readCb ) --> s1;
		s1 ( doneCbCr ) --> s2;
		s2 ( readCr ) --> s2;
		s2 ( doneCbCr ) --> s3;
		s3 (send)-->s3;
		s3 (doneCbCr)-->s10;
	end
	
	priority
		doneY > readY;
		doneCbCr > readCb;
		doneCbCr > readCr;
		doneCbCr > send;
	end
end