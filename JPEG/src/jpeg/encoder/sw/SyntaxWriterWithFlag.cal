/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>

package jpeg.encoder.sw;
import jpeg.encoder.common.Tables.QT;
import jpeg.encoder.common.Tables.HT_Bits;
import jpeg.encoder.common.Tables.lumaDCValues;
import jpeg.encoder.common.Tables.lumaACValues;
import jpeg.encoder.common.Tables.chromaDCValues;
import jpeg.encoder.common.Tables.chromaACValues;


actor SyntaxWriterWithFlag(int nbFramesToEncode)
	int(size=1) Bit,
	int(size=32) Count,
	int(size=32) SOI
		==> 
			uint(size=8) BitStream,
			bool pEOF:
	uint count;
	uint bytes_read := 0;
	bool padding := false;
	int qt_count := 0;
	int ht_count := 0;
	int val_count := 0;
	
	int framecount := 0;

	List(type:uint(size=8), size=16) APP0_data = [0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 00, 00];

	List(type:uint(size=8), size=17) SOF0_data := [0x00, 0x11, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x01, 0xFF, 0x00, 0x02, 0xFF, 0x01, 0x03, 0xFF, 0x01];

	List(type:uint(size=8), size=12) SOS_data = [0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00];
	
	SOI.send_marker:action ==> BitStream:[0xFF, 0xD8], pEOF:[false, false]
	do
		framecount := framecount + 1;
	end
	
	APP0.send_marker:action ==> BitStream:[0xFF, 0xE0], pEOF:[false, false]
	end
	
	APP0.send_data:action ==> BitStream:[[APP0_data[i] : for int i in 0 .. 15]] repeat 16, pEOF:[ [false : for int i in 0 .. 15] ] repeat 16
	end
	
	DQT.send_marker:action ==> BitStream:[0xFF, 0xDB], pEOF:[false, false]
	end
	
	DQT.send_data: action  ==> BitStream:[DQT_data] repeat 67, pEOF:[ [false : for int i in 0 .. 66] ] repeat 67
	var
		List(type:uint(size=8), size=67) DQT_data
	do
		DQT_data[0] := 0;
		DQT_data[1] := 67;
		DQT_data[2] := qt_count;
		foreach int i in 1 .. 64
		do
			DQT_data[i + 2] := QT[qt_count][i-1];
		end
		qt_count := qt_count + 1;
	end
	
	receive_dim:action SOI:[soi] repeat 2 ==>
	do
		// Replace fields by actual width and heigth.
		SOF0_data[3] := soi[1] >> 8;
		SOF0_data[4] := soi[1] & 0xFF;
		SOF0_data[5] := soi[0] >> 8;
		SOF0_data[6] := soi[0] & 0xFF;
		SOF0_data[9] := 0x22;
		SOF0_data[12] := 0x11;
		SOF0_data[15] := 0x11;
	end
	
	SOF0.send_marker:action ==> BitStream:[0xFF, 0xC0], pEOF:[ [false : for int i in 0 .. 1] ] repeat 2
	end
	
	SOF0.send_data:action ==> BitStream:[[SOF0_data[i] : for int i in 0 .. 16]] repeat 17,  pEOF:[ [false : for int i in 0 .. 16] ] repeat 17
	end
	
	DHT.send_marker:action ==> BitStream:[0xFF, 0xC4],  pEOF:[ [false : for int i in 0 .. 1] ] repeat 2
	end
	
	uint to_read;
	DHT.len:action  ==> BitStream:[DHT_data] repeat 19,  pEOF:[ [false : for int i in 0 .. 18] ] repeat 19
	var
		List(type:uint(size=8), size=19) DHT_data,
		uint len
	do
		DHT_data[0] := 0;
		DHT_data[2] := HT_Bits[ht_count][0];
		len := 0;
			
		foreach int i in 1 .. 16 
		do
			DHT_data[i + 2] := HT_Bits[ht_count][i];
			len := len + HT_Bits[ht_count][i];
		end
		DHT_data[1] := len + 1 + 2 + 16;
		to_read := len;
		val_count := 0;
	end
	
	DHT.send_data:action  ==> BitStream:[v], pEOF:[ false ]
	guard 
		to_read != 0
	var
		int v
	do
		if ht_count = 0 then
			v := lumaDCValues[val_count];
		else
			if ht_count = 1 then
				v := chromaDCValues[val_count];
			else
				if ht_count = 2 then
					v := lumaACValues[val_count];				
				else
					if ht_count = 3 then
						v := chromaACValues[val_count];
					end
				end
			end
		end
				
		val_count := val_count + 1;	
		to_read := to_read - 1;
	end
	
	DHT.done:action ==>
	guard 
		to_read = 0
	do
		ht_count := ht_count + 1;
	end
	
	SOS.send_marker:action ==> BitStream:[0xFF, 0xDA], pEOF:[ [false : for int i in 0 .. 1] ] repeat 2
	end
	
	SOS.send_data:action ==> BitStream:[[SOS_data[i] : for int i in 0 .. 11]] repeat 12,  pEOF:[ [false : for int i in 0 .. 11] ] repeat 12
	do
		// The number of bytes has not been received yet.
		count := 0xFFFFFFFF;
	end
	
	SCAN.send_data:action Bit:[b] repeat 8 ==> BitStream:[v], pEOF:[ false ]
	guard 
		not padding
	var
		uint(size=8) v
	do
		v := 0;
		foreach int i in 0 .. 7
		do
			v := (v << 1) + b[i];
	 	end
		padding := (v = 0xFF);
		bytes_read := bytes_read + 8;
	end
	
	SCAN.padding:action ==> BitStream:[0x00], pEOF:[ false ]
	guard 
		padding
	do
		padding := false;
	end
	
	SCAN.count:action Count:[c] ==>
	do
		count := c;
		println("count " + c);
	end
	
	// We have received the length of the entropy coded section, we now know when to add EOI.
	SCAN.done:action ==>
	guard 
		bytes_read >= count

	end
	
	EOI.send_marker:action ==> BitStream:[0xFF, 0xD9], pEOF:[ false, false ]
	do
		bytes_read := 0;
		qt_count := 0;
		ht_count := 0;
		
		padding := false;
	end
	
	EOF.send: action ==> pEOF:[ true ] 
	guard framecount = nbFramesToEncode
	end
	
	EOF.nosend: action ==>
	end
	
	
	schedule fsm SOI_marker:
		SOI_marker(SOI.send_marker)-->APP0_marker;
		
		APP0_marker(APP0.send_marker)-->APP0_send;
		APP0_send(APP0.send_data)-->DQT_marker1;
		
		DQT_marker1(DQT.send_marker)-->DQT_send1;
		DQT_send1(DQT.send_data)-->DQT_marker2;
		DQT_marker2(DQT.send_marker)-->DQT_send2;
		DQT_send2(DQT.send_data)-->wait_dim;
		
		wait_dim(receive_dim)-->SOF0_marker;
		SOF0_marker(SOF0.send_marker)-->SOF0_send;
		SOF0_send(SOF0.send_data)-->DHT_marker1;
		
		DHT_marker1(DHT.send_marker)-->DHT_len1;
		DHT_len1(DHT.len)-->DHT_send1;
		DHT_send1(DHT.send_data)-->DHT_send1;
		DHT_send1(DHT.done)-->DHT_marker2;
		
		DHT_marker2(DHT.send_marker)-->DHT_len2;
		DHT_len2(DHT.len)-->DHT_send2;
		DHT_send2(DHT.send_data)-->DHT_send2;
		DHT_send2(DHT.done)-->DHT_marker3;
		
		DHT_marker3(DHT.send_marker)-->DHT_len3;
		DHT_len3(DHT.len)-->DHT_send3;
		DHT_send3(DHT.send_data)-->DHT_send3;
		DHT_send3(DHT.done)-->DHT_marker4;
		
		DHT_marker4(DHT.send_marker)-->DHT_len4;
		DHT_len4(DHT.len)-->DHT_send4;
		DHT_send4(DHT.send_data)-->DHT_send4;
		DHT_send4(DHT.done)-->SOS_marker;
		
		SOS_marker(SOS.send_marker)-->SOS_send;
		SOS_send(SOS.send_data)-->SCAN_send;
		
		SCAN_send(SCAN.send_data)-->SCAN_send;
		SCAN_send(SCAN.done)-->EOI_marker;
		SCAN_send(SCAN.count)-->SCAN_send;
		SCAN_send(SCAN.padding)-->SCAN_send;
		
		EOI_marker(EOI.send_marker)-->sendEOF;
		sendEOF (EOF) --> SOI_marker;
	end
	
	priority
		SCAN.done > SCAN.send_data;
		SCAN.count > SCAN.send_data;
		EOF.send > EOF.nosend;
	end
end