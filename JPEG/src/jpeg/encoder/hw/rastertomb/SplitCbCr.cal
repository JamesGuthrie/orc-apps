package jpeg.encoder.hw.rastertomb;

actor SplitCbCr()
	int(size=10) CbCr,
	int SOI
		==>
			int(size=10) Line0,
			int(size=10) Line1,
			int(size=10) Line2,
			int(size=10) Line3,
			int(size=10) Line4,
			int(size=10) Line5,
			int(size=10) Line6,
			int(size=10) Line7:
	
	
	int MAX_WIDTH = 2048;
	int width;
	int height;
	
	int Counter := 0;
	int Lines := 0;
	
	List(type:int(size=10),size=MAX_WIDTH) RasterLine0 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine1 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine2 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine3 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine4 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine5 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine6 := [0:for int i in 0 .. MAX_WIDTH - 1];
	List(type:int(size=10),size=MAX_WIDTH) RasterLine7 := [0:for int i in 0 .. MAX_WIDTH - 1];
	
	getSzW: action SOI:[soi] ==> 
	do
		width := soi;
	end
	
	getSzH: action SOI:[soi] ==> 
	do
		height := soi;
	end
	
	Stop: action ==>
	guard
		Counter = width
	do
		Counter := 0;
	end
	
	StopSent: action ==>
	guard
		Counter = width
	do
		Counter := 0;
		Lines   := Lines + 8;
	end
	
	// Line 0 
	
	SaveLine0: action CbCr:[token] ==>
	do
		RasterLine0[Counter] := token;
		Counter := Counter + 1;
	end
	

	
	// Line 1
	
	SaveLine1: action CbCr:[token] ==>
	do
		RasterLine1[Counter] := token;
		Counter := Counter + 1;
	end
	

	
	// Line 2
	
	SaveLine2: action CbCr:[token] ==>
	do
		RasterLine2[Counter] := token;
		Counter := Counter + 1;
	end
	
	
	// Line 3
	
	SaveLine3: action CbCr:[token] ==>
	do
		RasterLine3[Counter] := token;
		Counter := Counter + 1;
	end
	
	
	// Line 4
	
	SaveLine4: action CbCr:[token] ==>
	do
		RasterLine4[Counter] := token;
		Counter := Counter + 1;
	end
	
	
	// Line 5
	
	SaveLine5: action CbCr:[token] ==>
	do
		RasterLine5[Counter] := token;
		Counter := Counter + 1;
	end
	
	
	// Line 6
	
	SaveLine6: action CbCr:[token] ==>
	do
		RasterLine6[Counter] := token;
		Counter := Counter + 1;
	end
	

	// Line 7
	
	SaveLine7: action CbCr:[token] ==>
	do
		RasterLine7[Counter] := token;
		Counter := Counter + 1;
	end
	
	
	SentLines: action ==>
							Line0:[token0],
							Line1:[token1],
							Line2:[token2],
							Line3:[token3],
							Line4:[token4],
							Line5:[token5],
							Line6:[token6],
							Line7:[token7]
	var	
		int token0,
		int token1,
		int token2,
		int token3,
		int token4,
		int token5,
		int token6,
		int token7
		
	do
		token0 := RasterLine0[Counter];
		token1 := RasterLine1[Counter];
		token2 := RasterLine2[Counter];
		token3 := RasterLine3[Counter];
		token4 := RasterLine4[Counter];
		token5 := RasterLine5[Counter];
		token6 := RasterLine6[Counter];
		token7 := RasterLine7[Counter];
		Counter := Counter + 1;
	end
	
	
	EOI: action ==>
	guard
		Lines = height >> 1
	do
		Lines := 0;
	end 
		
	schedule fsm sA:
	
		sA		(getSzW)		--> sB;
		sB		(getSzH)		--> save0;
		
		// End Of Image --> Restart
		save0	(EOI)			--> sA;
		
		save0	(SaveLine0)		--> save0;
		save0	(Stop)			--> save1;
		
		save1	(SaveLine1)		--> save1;
		save1	(Stop)			--> save2;
		
		save2	(SaveLine2)		--> save2;
		save2	(Stop)			--> save3;  
		
		save3	(SaveLine3)		--> save3;
		save3	(Stop)			--> save4;      

		save4	(SaveLine4)		--> save4;
		save4	(Stop)			--> save5;
		
		save5	(SaveLine5)		--> save5;
		save5	(Stop)			--> save6;
		
		save6	(SaveLine6)		--> save6;
		save6	(Stop)			--> save7;
		
		save7	(SaveLine7)		--> save7;
		save7	(Stop)			--> sent;
		
		// Sent Tokens
		
		sent	(SentLines)		--> sent;
		sent	(StopSent)		--> save0;
		  		        
	end	
		
	priority 
		EOI > Stop > SaveLine0;
		Stop > SaveLine1;
		Stop > SaveLine2;
		Stop > SaveLine3;
		Stop > SaveLine4;
		Stop > SaveLine5;
		Stop > SaveLine6;
		Stop > SaveLine7;	
		
		StopSent > SentLines;
		
	end
end