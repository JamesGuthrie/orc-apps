package jpeg.encoder.hw.rastertomb;


actor YCbCrMerger()
	int(size=32) Y,
	int(size=32) CbCr
		==>
			int(size=32) YCbCr:

	List(type:int(size=10), size=128) CbCrTmp := [0: for int i in 0 .. 127];
	
	int Counter := 0;
	int CbCounter := 0;
	int CrCounter := 0;
	 
	SaveCbCr: action CbCr:[token] ==>
	do
		if (Counter & 1)  = 1 then
			CbCrTmp[CbCounter] := token;
			CbCounter := CbCounter + 1;
		else
			CbCrTmp[CrCounter + 64] := token;
			CrCounter := CrCounter + 1;
		end
		Counter := Counter + 1;
	end
	
	StopCbCr: action ==>
	guard
		Counter = 128
	do
		Counter := 0;
	end
	
	SentY: action Y:[token] ==> YCbCr:[token]
	do	
		Counter := Counter + 1;
	end
	
	StopSentY: action ==>
	guard
		Counter = 256
	do
		Counter := 0;
	end
	
	SentCbCr: action  ==> YCbCr:[token]
	var
		int token
	do
		token := CbCrTmp[Counter];
		Counter := Counter + 1;
	end
	
	schedule fsm s1:
		//s0		(SaveCbCr)		--> s0;
		//s0		(StopCbCr)		--> s1;
		
		s1		(SentY)			--> s1;
		s1		(StopSentY)		--> s2;
		
		s2		(SentCbCr)		--> s2;
		s2		(StopCbCr)		--> s1;
	end
	
	priority
		//StopCbCr  > SaveCbCr;
		StopCbCr  > SentCbCr;
		StopSentY > SentY;
	end

end		