/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package jpeg.encoder.hw.fast_fdct;

actor FDCT_1D () int (size = 32) inData0, int (size = 32) inData1, int (size = 32) inData2, int (size = 32) inData3,
				int (size = 32) inData4, int (size = 32) inData5, int (size = 32) inData6, int (size = 32) inData7 ==>
				int (size = 32) outData0, int (size = 32) outData1, int (size = 32) outData2, int (size = 32) outData3, 
				int (size = 32) outData4, int (size = 32) outData5, int (size = 32) outData6, int (size = 32) outData7 :

	int outd0 := 0;
	int outd1 := 0;
	int outd2 := 0;
	int outd3 := 0;
	int outd4 := 0;
	int outd5 := 0;
	int outd6 := 0;
	int outd7 := 0;
	
	int x0 := 0;
	int x1 := 0;
	int x2 := 0;
	int x3 := 0;
	int x4 := 0;
	int x5 := 0;
	int x6 := 0;
	int x7 := 0;
	
	int xa := 0;
	int xb := 0;
	
	
	function pmul_1_1(int X) --> int :
		X - (X >> 3) - (X >> 7)
	end

	function pmul_1_2(int X) --> int
	var
		int tmp1 = (X >> 3) - (X >> 7),
		int tmp2 = tmp1 - (X >> 11) :
		tmp1 + (tmp2 >> 1)
	end

	function pmul_2_1(int X) --> int
	var
		int tmp = (X >> 9) - X :
		(tmp >> 2) - tmp
	end

	function pmul_2_2(int X) --> int :
		X >> 1
	end

	function pmul_3_1(int X) --> int
	var
		int tmp = X + (X >> 5) :
		(tmp >> 2) + (X >> 4)
	end

	function pmul_3_2(int X) --> int
	var
		int tmp = X + (X >> 5) :
		tmp - (tmp >> 2)
	end

	action inData0: [ind0], inData1: [ind1], inData2: [ind2], inData3: [ind3], 
			inData4: [ind4], inData5: [ind5], inData6: [ind6], inData7: [ind7] ==> 
			outData0: [outd0], outData1: [outd1], outData2: [outd2], outData3: [outd3],
			outData4: [outd4], outData5: [outd5], outData6: [outd6], outData7: [outd7]
	do
		x0 := ind0 + ind7;
		x1 := ind0 - ind7;
		x4 := ind1 + ind6;
		x5 := ind1 - ind6;
		x2 := ind2 + ind5;
		x3 := ind2 - ind5;
		x6 := ind3 + ind4;
		x7 := ind3 - ind4;
		
		xa := pmul_1_2(x3);
		x3 := pmul_1_1(x3);
		xb := pmul_1_2(x5);
		x5 := pmul_1_1(x5);
		
		x3 := x3 + xb;
		x5 := x5 - xa;
		
		xa := pmul_2_2(x1);
		x1 := pmul_2_1(x1);
		xb := pmul_2_2(x7);
		x7 := pmul_2_1(x7);
		
		x1 := x1 - xb;
		x7 := x7 + xa;
		xa := x1 + x3;
		x3 := x1 - x3;
		xb := x7 + x5;
		x5 := x7 - x5;
		x1 := xa + xb;
		x7 := xa - xb;
		xa := x0 + x6;
		x6 := x0 - x6;
		xb := x4 + x2;
		x2 := x4 - x2;
		x0 := xa + xb;
		x4 := xa - xb;
		
		xa := pmul_3_2(x2);
		x2 := pmul_3_1(x2);
		xb := pmul_3_2(x6);
		x6 := pmul_3_1(x6);
		
		x2 := xb + x2;
		x6 := x6 - xa;
		
		outd0 := x0;
		outd1 := x1;
		outd2 := x2;
		outd3 := x3;
		outd4 := x4;
		outd5 := x5;
		outd6 := x6;
		outd7 := x7;
	end
	
end