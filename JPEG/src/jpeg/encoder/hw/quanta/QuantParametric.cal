/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>

package jpeg.encoder.hw.quanta;

import jpeg.encoder.common.Tables.QT;
import jpeg.encoder.common.Tables.zigzag;

actor QuantParametric(int LumaOrChroma)
	int(size=32) In
		==>
			int(size=32) QT_Out,
			int(size=32) ZZ_Out:
	
	int Counter := 0;
	
	List(type:int(size=32), size=64) data := [0: for int i in 0 .. 63];
	
	
	SaveData: action In:[token]==> 
	do
		data[Counter] := token;
		Counter := Counter + 1;
	end	
	
	
	// Quant.star: Adding this action because the if The Counter := 0 is put in the
	// Input.finish the actor will send only one token (Really Strange !!!) 
	
	
	SendData: action ==> QT_Out:[qt], ZZ_Out:[zz]
	var
		int(size=32) qt := 0,
		int(size=32) zz	:= 0
	do
		qt := QT[LumaOrChroma][Counter];
		zz := data[zigzag[Counter]];
		Counter := Counter + 1;
	end	

	Stop: action ==>
	guard
		Counter = 64
	do
		Counter := 0;
	end

	schedule fsm s0:
		s0	(SaveData)	--> s0;
		s0	(Stop)  	--> s1;
		
		s1	(SendData)	--> s1;
		s1	(Stop)		--> s0;		
	end
	
	priority
		Stop > SaveData;
		Stop > SendData;
	end
end