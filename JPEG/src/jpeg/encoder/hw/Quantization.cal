/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>

package jpeg.encoder.hw;

import jpeg.encoder.common.Tables.QT;
import jpeg.encoder.common.Tables.zigzag;
import jpeg.encoder.common.Tables.DivTab;

actor Quantization()
	int(size=32) In
		==> 
			int(size=32) Out:		
	int Block_Type := 0; // Block_Type = 0,1,2,3 (Luma), Block_Type = 4,5 (Chroma)
	
	function division(int n, int d) --> int:
		if n = 0 then
			0
		else
			if n < 0 then
				-((-n * DivTab[d - 1]) >> 16)
			else
				((n * DivTab[d - 1]) >> 16)
			end
		end 
	end 
	
	int data[64];
	
	int Counter := 0;
	
	read: action In:[token] ==>
	do
		data[Counter] := token;
		Counter := Counter + 1;
	end
	
	finish: action ==>
	guard
		Counter = 64
	do
		Counter := 0;
	end
	
	
	send: action ==> Out:[token]
	var
		int token,
		int qt,
		int dataCounter
	do
		qt := QT[Block_Type >> 2][Counter];
		dataCounter := data[zigzag[Counter]];
		if data[zigzag[Counter]] > 0 then
			dataCounter := data[zigzag[Counter]] + (qt >> 2);
		else
			dataCounter := data[zigzag[Counter]] + (qt >> 2);
		end
		token := division(dataCounter, qt);
		
		Counter := Counter + 1;
		
	end
	
	changeBlock: action ==>
	do
		Block_Type := (Block_Type + 1);
		if Block_Type = 6 then
			Block_Type := 0;
		end
	end
	
	
	schedule fsm s0:
		s0	(read)	--> s0;
		s0	(finish)	--> s1;
		s1	(send)	--> s1;
		s1	(finish)	--> s2;
		s2	(changeBlock)	--> s0;
	end
	
	priority
		finish > read;
		finish > send;
	end
end