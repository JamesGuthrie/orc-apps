
/*
 * Copyright (c) 2010, Regents of the EPFL, Akatech SA
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Author : Endri Bezati <endri.bezati@epfl.ch>
 */
package jpeg.encoder.hw.fdct;

actor Transpose() 
	int(size=32) In 
		==> 
			int(size=32) Out :
			
	List(type: int(size=32), size=64) x := [ 0:for int i in 0 .. 63 ];
	List(type: int(size=32), size=64) y := [ 0:for int i in 0 .. 63 ];
	int Counter := 0;
	
	read.start: action ==>
	do
		Counter := 0;
	end

	read.save: action In:[ val ] ==>
	guard
		Counter < 64
	do
		x[Counter] := val;
		Counter := Counter + 1; 
	end
	
	read.finish: action ==>
	guard
		Counter = 64
	end
	
	transpose.start: action ==>
	do
		y[0] := x[0];
		y[1] := x[8];
		y[2] := x[16];
		y[3] := x[24];
		y[4] := x[32];
		y[5] := x[40];
		y[6] := x[48];
		y[7] := x[56];
		y[8] := x[1];
		y[9] := x[9];
		y[10] := x[17];
		y[11] := x[25];
		y[12] := x[33];
		y[13] := x[41];
		y[14] := x[49];
		y[15] := x[57];
		y[16] := x[2];
		y[17] := x[10];
		y[18] := x[18];
		y[19] := x[26];
		y[20] := x[34];
		y[21] := x[42];
		y[22] := x[50];
		y[23] := x[58];
		y[24] := x[3];
		y[25] := x[11];
		y[26] := x[19];
		y[27] := x[27];
		y[28] := x[35];
		y[29] := x[43];
		y[30] := x[51];
		y[31] := x[59];
		y[32] := x[4];
		y[33] := x[12];
		y[34] := x[20];
		y[35] := x[28];
		y[36] := x[36];
		y[37] := x[44];
		y[38] := x[52];
		y[39] := x[60];
		y[40] := x[5];
		y[41] := x[13];
		y[42] := x[21];
		y[43] := x[29];
		y[44] := x[37];
		y[45] := x[45];
		y[46] := x[53];
		y[47] := x[61];
		y[48] := x[6];
		y[49] := x[14];
		y[50] := x[22];
		y[51] := x[30];
		y[52] := x[38];
		y[53] := x[46];
		y[54] := x[54];
		y[55] := x[62];
		y[56] := x[7];
		y[57] := x[15];
		y[58] := x[23];
		y[59] := x[31];
		y[60] := x[39];
		y[61] := x[47];
		y[62] := x[55];
		y[63] := x[63];
		Counter := 0;
	end	
	
	int(size=32) Data := 0;
	
	transpose.send: action ==> Out:[Data]
	guard
		Counter < 64
	do
		Data := y[Counter];
		Counter := Counter + 1;
	end
	
	transpose.finish: action ==>
	guard
		Counter = 64
	end
	
	schedule fsm read_Start:
		read_Start	(read.start)	--> read_Save;
		read_Save	(read.save)		--> read_Save;
		read_Save	(read.finish)	--> transpose_Start;
		
		transpose_Start		(transpose.start)		--> transpose_Send;
		transpose_Send		(transpose.send)		--> transpose_Send;
		transpose_Send		(transpose.finish)		--> read_Start;
	end
end