/*
 * Copyright (c) 2010, Regents of the EPFL, Akatech SA
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the EPFL, Akatech SA nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Author : Endri Bezati <endri.bezati@epfl.ch>
 */
package jpeg.encoder.hw.fdct;
 
actor r_shift () 
	int(size=32) In 
		==> 
			int(size=32) X_Out,
			int(size=32) Scale_Out :


	int Counter := 0;
	int(size=32) val := 0;
	int(size=32) data := 0;
	List(type: int(size=32), size=64) x := [ 0:for int i in 0 .. 63 ];
	
	List(type: int(size=12), size=64) scale = 
	[ 
		1024, 1138, 1730, 1609, 
		1024, 1609, 1730, 1138, 
		1138, 1264, 1922, 1788, 
		1138, 1788, 1922, 1264, 
		1730, 1922, 2923, 2718, 
		1730, 2718, 2923, 1922, 
		1609, 1788, 2718, 2528, 
		1609, 2528, 2718, 1788, 
		1024, 1138, 1730, 1609, 
		1024, 1609, 1730, 1138,
		1609, 1788, 2718, 2528, 
		1609, 2528, 2718, 1788, 
		1730, 1922, 2923, 2718, 
		1730, 2718, 2923, 1922, 
		1138, 1264, 1922, 1788, 
		1138, 1788, 1922, 1264 
	];
	
	read.start: action ==>
	do
		Counter := 0;
	end

	read.save: action In:[ token ] ==>
	guard
		Counter < 64
	do
		x[Counter] := token;
		Counter := Counter + 1; 
	end
	
	read.finish: action ==>
	guard
		Counter = 64
	end
	
	shift.start: action ==>
	do
		Counter := 0;
	end	
	
	shift.send: action ==>  X_Out:[val], Scale_Out:[data]
	guard
		Counter < 64
	do
		val := x[Counter];
		data := scale[Counter];
		Counter := Counter + 1;
	end
	
	shift.finish: action ==>
	guard
		Counter = 64
	end
		
	schedule fsm read_Start:
		read_Start	(read.start)	--> read_Save;
		read_Save	(read.save)		--> read_Save;
		read_Save	(read.finish)	--> shift_Start;
		
		shift_Start		(shift.start)		--> shift_Send;
		shift_Send		(shift.send)		--> shift_Send;
		shift_Send		(shift.finish)		--> read_Start;
	end

end