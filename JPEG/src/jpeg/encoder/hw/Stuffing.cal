/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Endri Bezati <endri.bezati@epfl.ch>

package jpeg.encoder.hw;

actor Stuffing()
	int(size=32) SOI,
	int(size=4) YCbCrBit,
	int(size=32) YCbCrCount
		==>
			int(size=4) Bit,
			int(size=32) Count:
	
	int maxBlocks := 1;	
	int CountRead := 0;	
	int ReadBits := 0;
	int Stuff := 0;
	int CountBlocks := 0;
	int Block_Type := 0;
	
			
	GetSzW: action SOI:[w]  ==>
	do
		maxBlocks :=((w + 15) >> 4);
	end
	
	GetSzH: action SOI:[h] ==>
	do
		maxBlocks := maxBlocks * ((h + 15) >> 4);
	end
	
	GetYCbCrCounts: action YCbCrCount:[c] ==>
	do
		ReadBits := c;
		CountRead := CountRead + c;
	end
	
	SendYCbCrBit: action YCbCrBit:[ycbcrbit] ==> Bit:[ycbcrbit]		
	do
		ReadBits := ReadBits - 1;
	end
	
	DoneRead: action ==>
	guard
		ReadBits  = 0
	do
		
		if Block_Type = 5 then 
			CountBlocks := CountBlocks + 1;
			Block_Type := 0;
		else
			Block_Type := Block_Type + 1;
		end
		
	end
	
	EOI: action ==> Count:[CountRead]
	guard
		CountBlocks = maxBlocks
	var
		int Modulo
	do
		//Bitsream should by 8-bit aligned, send Stuffing
		Modulo := CountRead & 7;
		if (Modulo != 0)
		then
			Stuff := 8 - Modulo;
		else
			Stuff := 0;
		end
	end	
	
	SendStuffing: action ==> Bit:[0] 
	do
		Stuff := Stuff - 1;
	end	
	
	DoneStuffing: action ==>
	guard
		Stuff = 0
	do
		//Init
		Block_Type := 0;
		CountBlocks := 0;
		CountRead := 0; 
	end		
	
	schedule fsm s0:
		s0			(GetSzW)				--> s01;
		s01			(GetSzH)				--> s1;
		s1			(GetYCbCrCounts)		--> s2;
		
		s2			(SendYCbCrBit)			--> s2;
		s2			(DoneRead)				--> s1;
		
		s1			(EOI)					--> s3;
		
		s3			(SendStuffing)			--> s3;
		s3			(DoneStuffing)			--> s0;
	end
	
	priority
		EOI > GetYCbCrCounts;
		DoneRead > SendYCbCrBit;
		DoneStuffing > SendStuffing;
	end
end