/*
 * Copyright (c) 2010, Regents of the EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 
package jpeg.decoder;
// Author: Christophe Lucarz (christophe.lucarz@epfl.ch)
actor Merger420 () uint(size=8) Y ==> uint(size=8) YCbCr :

	List(type: int(size=9), size=256) out_y;
	
	// Select the Y blocks 
	Y.read:action Y:[y] repeat 256 ==> YCbCr:[out_y] repeat 256
	do
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				out_y[i + j * 16] := y[i + j * 8];
			end
		end
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				out_y[i + 8 + j * 16] := y[i + 64 + j * 8];
			end
		end
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				out_y[i + (j + 8) * 16] := y[i + 2 * 64 + j * 8];
			end
		end
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				out_y[i + 8 + (j + 8) * 16] := y[i + 3 * 64 + j * 8];
			end
		end
	end

	// Select the Cb blocks 
	Cb.read:action Y:[y] repeat 64 ==> YCbCr:[y] repeat 64
	do
	end

	// Select the Cr blocks 
	Cr.read:action Y:[y] repeat 64 ==> YCbCr:[y] repeat 64
	do
	end

	schedule fsm Y :
		Y(Y.read)-->Cb;
		Cb(Cb.read)-->Cr;
		Cr(Cr.read)-->Y;
	end

end