/*
 * Copyright (c) 2010, Regents of the Akatech SA, EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This actor defines a JPEG Parser
 * 
 * @author Felix Abecassis
 * @author Endri BEzati
 */
 
package jpeg.decoder.hw;

actor ParserJPEG() 
	int(size=9) Byte
		==> 
		int(size=8) Bits, 
		int(size=9) QT, 
		int(size=9) HT, 
		int(size=16) SOI:

	// current offset in file
	int offset;
	int toRead := -1;
	int sent := 0;
	bool padding;
	int(size=9) curMarker := 0;
		
	// Actions
	
	
	aSOIb0: action Byte:[b] ==>
	end

	aSOIb1:action Byte:[b] ==>
	do
		toRead := -1;
		sent := 0;
		curMarker := 0;
	
		offset := 2;
	end
		
	//List(type:int, size = 4) markerByte;
	
	int markerByte0 := 0;
	int markerByte1 := 0;
	int markerByte2 := 0;
	int markerByte3 := 0;
	
	int Counter := 0;
	

	
	// Stupid OpenForge Fix
	readMarker0: action Byte:[token] ==>
	do
		markerByte0 := token;
	end
	
	readMarker1: action Byte:[token] ==>
	do
		markerByte1 := token;
	end
	
	readMarker2: action Byte:[token] ==>
	do
		markerByte2 := token;
	end
	
	readMarker3: action Byte:[token] ==>
	do
		markerByte3 := token;
	end
	/* 
	readMarker: action Byte:[token] ==>
	do
		markerByte[Counter] := token;
		Counter := Counter + 1;
	end
	
	finishMarker: action ==>
	guard
		Counter = 4
	do	
		Counter := 0;
	end
*/
	// Format is 0xFF marker_code length_high length_low : 4 bytes
	processMarker:action ==>
	guard 
		markerByte0 = 0xFF
	do
	    toRead := (markerByte2 << 8) + markerByte3 - 2;
	    curMarker := markerByte1;
		offset := offset + 4;
	end
	
	skip:action Byte:[b] ==>
	guard 
		toRead != 0
	do
		toRead := toRead - 1;
		offset := offset + 1;
	end
	
	done:action ==>
	guard 
		toRead = 0
	do
		toRead := -1;
	end
	
	APPn:action ==>
	guard 
		curMarker >= 0xe0 and curMarker <= 0xef
	do
		//print_marker("APPn", "xFFEn", offset - 4);
	end
	
	COMM:action ==>
	guard 
		curMarker = 0xFE
	do
		//print_marker("COMM", "xFFFE", offset - 4);
	end
	
	DQT:action ==>
	guard 
		curMarker = 0xDB
	do
		//print_marker("DQT", "xFFDB", offset - 4);
		offset := offset + toRead;
	end
	
	send_DQT:action Byte:[b] ==> QT:[b]
	guard 
		toRead != 0
	do
		toRead := toRead - 1;
	end
	
	int width;
	int height;
	
	List(type:int(size=9), size=15) readByteSOF0;
	
	readSOF0: action Byte:[token] ==>
	guard 
		curMarker = 0xC0
	do
		readByteSOF0[Counter] := token;
		Counter :=  Counter + 1;
	end
	
	readSofStop: action ==>
	guard
		Counter = 15
	do
		Counter := 0;
	end
	
	sentWidthHeight:action ==>
	do
	//	print_marker("SOF0 (Baseline DCT)", "xFFC0", offset - 4);
		height := (readByteSOF0[1] << 8) + readByteSOF0[2];
		width := (readByteSOF0[3] << 8) + readByteSOF0[4];
	end
	
	sentSoiW: action ==> SOI:[width >> 4]
	end
	
	sentSoiH: action ==> SOI:[height >> 4]
	end
	
	DHT:action ==>
	guard 
		curMarker = 0xC4
	do
		//print_marker("DHT (Define Huffman Table)", "xFFC4", offset - 4);
	end
	
	send_DHT:action Byte:[b] ==> HT:[b]
	guard 
		toRead != 0
	do
		toRead := toRead - 1;
		offset := offset + 1;
	end
	
	SOS:action ==>
	guard 
		curMarker = 0xDA
	do
		//print_marker("SOS (Start of Scan)", "xFFDA", offset - 4);
	end
	
	scan_data:action Byte:[b] ==> Bits:[b]
	guard 
		b != 0xFF
	do
		offset := offset + 1;
		sent := sent + 1;
	end
	
	receive_FF:action Byte:[b] ==>
	guard 
		b = 0xFF
	do
		offset := offset + 1;
	end
	
	// In the entropy-coded data, 0x00 is inserted after 0xFF as a stuffing byte.
	// Therefore if 0x00 is encountered after 0xFF, output 0xFF
	stuffing:action Byte:[b] ==> Bits:[0xff]
	guard 
		b = 0x00
	do
		sent := sent + 1;
		offset := offset + 1;
	end
	
	EOI:action Byte:[b] ==>
	guard 
		b = 0xD9
	do
	//	print_marker("EOI (End of Image)", "xFFD9", offset - 1);
		offset := offset + 1;
		padding := true;
	end
	
	padding16b0: action ==> Bits:[0x00]
	guard 
		padding
	end
	
	padding16b1:action ==> Bits:[0x00]
	do
		// The Huffman need data to be 16 bits aligned.
		padding := false;
	end
	
	done_parse:action ==>
	guard 
		not padding
	end
	
	// Schedule FSM
	schedule fsm s00:
		s00		(aSOIb0)			--> s01;
		s01		(aSOIb1)			--> s11;
		
		//s11		(readMarker)		--> s11;
		//s11		(finishMarker)		--> s12;
		
		s11		(readMarker0)		--> s11_1;
		s11_1	(readMarker1)		--> s11_2;
		s11_2	(readMarker2)		--> s11_3;
		s11_3	(readMarker3)		--> s12;
		
		
		s12		(processMarker)		--> s13;
		
		s14		(skip)				--> s14;
		s14		(done)				--> s11;
		
		s13		(APPn)				--> s14;
		s13		(COMM)				--> s14;
		
		s13		(DQT)				--> s15;
		s15		(send_DQT)			--> s15;
		s15		(done)				--> s11;
		
		
		s13		(readSOF0)			--> s13;
		s13		(readSofStop)		--> s131;
		s131	(sentWidthHeight)	--> s132;
		s132	(sentSoiW)			--> s133;
		s133	(sentSoiH)			--> s11;	
		
		s13		(DHT)				--> s16;
		s16		(send_DHT)			--> s16;
		s16		(done)				--> s11;
		
		s13		(SOS)				--> s17;
		
		s17		(skip)				--> s17;
		s17		(done)				--> s18;
		
		s18		(scan_data)			--> s18;
		s18		(receive_FF)		--> s19;
		
		s19		(stuffing)			--> s18;
		s19		(EOI)				--> s20;
		
		s20		(padding16b0)		--> s201;
		s201	(padding16b1)		--> s00;
		
		s20		(done_parse)		--> s00;
	end

	priority
		readSofStop > readSOF0;
	end
end