/*
 * Copyright (c) 2010, Regents of the Akatech SA, EPFL
 * 
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Akatech SA, EPFL nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
package jpeg.decoder;

actor Dequant() 
	int(size=24) Block, uint(size=8) QT, int(size=32) SOI ==> int(size=32) Out:

	// Reverse zigzag, the ith value give the index of the corresponding
	// coefficient in the quantization table for the ith zigzag value.
	List(type:uint(size=6), size=64) zigzag = 
		[ 0,  1,  5,  6, 14, 15, 27, 28,
	      2,  4,  7, 13, 16, 26, 29, 42,
	      3,  8, 12, 17, 25, 30, 41, 43,
	      9, 11, 18, 24, 31, 40, 44, 53,
	     10, 19, 23, 32, 39, 45, 52, 54,
	     20, 22, 33, 38, 46, 51, 55, 60,
	     21, 34, 37, 47, 50, 56, 59, 61,
	     35, 36, 48, 49, 57, 58, 62, 63];
	
	List(type:List(type:uint(size=8), size=64), size=2) quant;
	
	int count := 0;
	int comp;
	
	receive_QT:action QT:[q] repeat 130, SOI:[w, h] ==>
	guard count = 0
	do
		foreach int i in 0 .. 63 do
			quant[0][i] := q[i + 1];
			quant[1][i] := q[i + 66];
		end
		comp := 0;
		count := 6 * (w >> 4) * (h >> 4);
	end
	
	// Dequant and unzigzag.
	receive_block:action Block:[b] repeat 64 ==> Out:[[ b[zigzag[i]] : for int i in 0 .. 63 ]] repeat 64
	var int compType
	do
		compType := comp >> 2;
		b := [b[i] * quant[compType][i] : for int i in 0 .. 63];	
		count := count - 1;
	
		comp := (comp + 1) mod 6;
	end
	
	priority
		receive_QT > receive_block;
	end
end