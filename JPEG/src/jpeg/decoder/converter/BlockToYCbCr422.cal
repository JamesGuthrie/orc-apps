package jpeg.decoder.converter;

actor BlockToYCbCr422()
	uint SOI,
	uint(size=8) BLOCK
					==>
						uint(size=8) YCbCr:

	uint MAX_WIDTH = 1920;
	uint MAX_HEIGHT = 1088;
	uint MB_SIZE_LUMA = 16;
	uint MB_SIZE_CHROMA = 8;
	
	uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
	uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
	uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
	
	uint(size=8)  raster422[MAX_WIDTH * MAX_HEIGHT * 2];
	
	
	int (size=32) pictureSizeInMb;
	int (size=32) nbBlockGot;
	uint(size=2)  chromaComponent;
	int (size=16) pictureWidthLuma;
	int (size=16) pictureHeightLuma;
	uint(size=12) xIdxLuma;
	uint(size=32) yOffLuma;
	uint(size=12) xIdxChroma;
	uint(size=32) yOffChroma;



	getPictureSize: action SOI:[WidthValue, HeightValue] ==>
	do
		pictureWidthLuma  := WidthValue ;
		pictureHeightLuma := HeightValue;
		pictureSizeInMb   := WidthValue/16 * HeightValue/16;
		nbBlockGot := 0;
		xIdxLuma   := 0;
		xIdxChroma := 0;
		yOffLuma   := 0;
		yOffChroma := 0;
	end

	getPixValue.launch.Luma: action BLOCK :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	var
		uint(size=8)  buf[256],
		uint(size=32) yOff := yOffLuma,
		uint(size=9)  idx  := 0
	do
		nbBlockGot := nbBlockGot + 1;
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				buf[i + j * 16] := Bytes[i + j * 8];
				buf[i + 8 + j * 16] := Bytes[i + 64 + j * 8];
				buf[i + (j + 8) * 16] := Bytes[i + 2 * 64 + j * 8];
				buf[i + 8 + (j + 8) * 16] := Bytes[i + 3 * 64 + j * 8];
			end
		end
			
		foreach int y in 0 .. 15
		do
			foreach int x in xIdxLuma .. xIdxLuma + 15
			do
				pictureBufferY[yOff +x] := buf[idx];
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma;
		end
		xIdxLuma := xIdxLuma + MB_SIZE_LUMA;
		chromaComponent := 0;
	end


	getPixValue.launch.Chroma: action BLOCK :[Bytes] repeat 64 ==>
	var
		uint(size=32) yOff := yOffChroma,
		uint(size=7)  idx  := 0
	do
		foreach int y in 0 .. 7
		do
			foreach int x in xIdxChroma .. xIdxChroma + 7
			do
				if(chromaComponent=0)then
					pictureBufferU[yOff + x] := Bytes[idx];
				else
					pictureBufferV[yOff + x] := Bytes[idx];
				end
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma/2;
		end
		if(chromaComponent != 0)then
			xIdxChroma := xIdxChroma + MB_SIZE_CHROMA;
			if(xIdxLuma = pictureWidthLuma)then
				xIdxLuma   := 0;
				xIdxChroma := 0;
				yOffLuma   := yOffLuma   + MB_SIZE_LUMA   * pictureWidthLuma;
				yOffChroma := yOffChroma + MB_SIZE_CHROMA * pictureWidthLuma/2;
			end
		end
		chromaComponent := 1;
	end

	endGetAndSentPicture: action ==> YCbCr:[raster422] repeat MAX_WIDTH*MAX_HEIGHT*2
	guard
		nbBlockGot >= pictureSizeInMb
	var
		int line := 0
	do
		// Luma
		foreach int i in 0 .. pictureWidthLuma*pictureHeightLuma - 1 do
			raster422[2*i] := pictureBufferY[i];
		end
		
		// Chroma
		foreach int i in 0 .. (pictureWidthLuma*pictureHeightLuma / 4) - 1 do
			raster422[4*i + 1 + 2*pictureWidthLuma * line] := pictureBufferU[i];
			raster422[4*i + 3 + 2*pictureWidthLuma * line] := pictureBufferV[i];
			line := line +  i mod (pictureWidthLuma/4);
		end		
	end

	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize            )--> GetLumaBlock;
		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
		
		GetLumaBlock 	(endGetAndSentPicture	   ) --> GetPictureSize;
	end

	priority
		getPixValue > endGetAndSentPicture;
	end
end