package testBench.common;

import common.CommonConstantHEVC.*;
import interPrediction.NaluType.*;

actor GenIsPicOrSlc()
	uint(size=4)  PartModeIn,
	uint(size=4)  PartModeIn2,
	uint(size=16)  Poc
		==>
	uint(size=4)  PartModeOut,
	bool IsNewPictOrSlc
		:

	bool isPoc := false;
	uint(size=8) pocPrec;

	action PartModeIn:[partMode]/*, PartModeIn2:[partMode2]*/ ==> PartModeOut:[partMode]
	guard
		partMode != NEW_SLICE && partMode != NEW_PICT
	do
		/*if(partMode!= partMode2) then
			println(partMode2+" instead of "+ partMode);
			while true do end
		end*/
	end

	action PartModeIn:[partMode]/*, PartModeIn2:[partMode2]*/, Poc:[poc] ==> PartModeOut:[NEW_SLICE], IsNewPictOrSlc:[false]
	guard
		partMode = NEW_PICT,
		isPoc && pocPrec = poc
	do
		/*if(partMode!= partMode2) then
			println(partMode2+" instead of "+ partMode);
			while true do end
		end*/
	end

	action PartModeIn:[partMode], /*PartModeIn2:[partMode2],*/ Poc:[poc] ==> PartModeOut:[partMode], IsNewPictOrSlc:[true]
	guard
		partMode = NEW_PICT,
		not isPoc || (pocPrec != poc)
	do
		isPoc := true;
		pocPrec := poc;
		/*if(partMode!= partMode2) then
			println(partMode2+" instead of "+ partMode);
			while true do end
		end*/
	end

	action PartModeIn:[partMode]/*, PartModeIn2:[partMode2]*/ ==> PartModeOut:[partMode]
	guard
		partMode = NEW_SLICE
	do
		/*if(partMode!= partMode2) then
			println(partMode2+" instead of "+ partMode);
			while true do end
		end*/
	end
end