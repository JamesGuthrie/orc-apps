/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package inLoopFilter;

import std.util.Math.*;
import interPrediction.NaluType.*;

actor SaoFilter(bool DEBUG)
	uint(size=16) PicSize,
	uint(size=8)  SampleIn
		==>
	//uint(size=8)  FiltSample
		:

	uint(size=16) PIC_WIDTH_MAX=2048;
	uint(size=16) PIC_HEIGHT_MAX=2048;
	uint(size=4)  BIT_DEPTH = 8;

	uint(size=32) numSlice := 0;

	uint(size=6)  picSizeInCu[2];
	uint(size=6)  xIdx := 0;
	uint(size=6)  yIdx := 0;


	isNewPict: action PicSize:[picWidthInPix, picHeightInPix] ==>
	do
		picSizeInCu := [picWidthInPix/64, picHeightInPix/64];
	end

	getCuPix.launch: action SampleIn:[samp] repeat 64*64 + 32*32*2 ==>
	guard
		yIdx < picSizeInCu[1] && xIdx < picSizeInCu[0]
	do
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end


	getCuPix.done: action ==>
	guard
		yIdx = picSizeInCu[1]
	do
		xIdx := 0;
		yIdx := 0;
		if(DEBUG) then
			println("slice num "+numSlice);
			numSlice := numSlice + 1;
		end
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetCuPix;

		GetCuPix  (getCuPix.launch )--> GetCuPix;
		GetCuPix  (getCuPix.done   )--> IsNewPict;
	end
end