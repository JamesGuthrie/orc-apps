/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 package interPrediction;


unit NaluType:

	int PICT_WIDTH  = 4096;
	int LOG2_PICT_WIDTH = 12;
	int PICT_HEIGHT = 2048;
	int MASK_WIDTH  = 4095;
	int MASK_HEIGHT = 2047;

	uint(size=2) LUMA      = 0;
	uint(size=2) CHROMA_CB = 1;
	uint(size=2) CHROMA_CR = 2;

	uint(size=2) PRED_L0 = 0;
	uint(size=2) PRED_L1 = 1;
	uint(size=2) BI_PRED = 2;

	int(size=16) MIN_INT16 = -32768;

	uint(size=2) SLICE_TYPE_I = 0;
	uint(size=2) SLICE_TYPE_P = 1;
	uint(size=2) SLICE_TYPE_B = 2;

	uint(size=3) ST_CURR_BEF = 0;
	uint(size=3) ST_CURR_AFT = 1;
	uint(size=3) ST_FOLL = 2;
	uint(size=3) LT_CURR = 3;
	uint(size=3) LT_FOLL = 4;

	uint(size=4) INTRA = 1;
	uint(size=4) INTER = 0;
	uint(size=4) SKIP  = 2;
	uint(size=4) NO_IN_SAMP = 4;
	uint(size=4) IN_SAMP = 8;
	uint(size=4) OTHER = 15;

	uint(size=2) SAO_NO_MERGE   = 0;
	uint(size=2) SAO_MERGE_LEFT = 1;
	uint(size=2) SAO_MERGE_UP   = 2;

	procedure rasterScanToAbsCoord(uint(size=8) rasterIdx, uint(size=16) coord[2])
	begin
		coord[0] :=  (rasterIdx    &1)* 4 + ((rasterIdx>>2)&1)* 8 +
		            ((rasterIdx>>4)&1)*16 + ((rasterIdx>>6)&1)*32;

		coord[1] := ((rasterIdx>>1)&1)* 4 + ((rasterIdx>>3)&1)* 8 +
		            ((rasterIdx>>5)&1)*16 + ((rasterIdx>>7)&1)*32;
	end

	function absCoordToRasterScan(uint(size=16) addr[2]) --> uint(size=8)
	var
		uint(size=16) addrBlk[2] = [addr[0]>>2, addr[1]>>2]
	:
		 (addrBlk[0]&1)   + ((addrBlk[0]>>1)&1)*4 + ((addrBlk[0]>>2)&1)*16 + ((addrBlk[0]>>3)&1)*64 +
		 (addrBlk[1]&1)*2 + ((addrBlk[1]>>1)&1)*8 + ((addrBlk[1]>>2)&1)*32 + ((addrBlk[1]>>3)&1)*128
	end
end