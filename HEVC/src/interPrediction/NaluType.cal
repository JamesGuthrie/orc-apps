/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 package interPrediction;


unit NaluType:

	int PICT_SIDE = 2048;
	int MASK_WIDTH  = 2047;
	int MASK_HEIGHT = 2047;

	uint(size=8) SLICE_LAYER = 1;
	uint(size=8) SLICE_TLA = 3;
	uint(size=8) SLICE_CRA = 4;
	uint(size=8) SLICE_IDR = 5;
	uint(size=8) SEI = 6;
	uint(size=8) SPS = 7;
	uint(size=8) PPS = 8;
	uint(size=8) AU_DELIMIT = 9;
	uint(size=8) FILLER_DATA = 12;
	uint(size=8) APS = 14;

	function isSliceNal(uint(size=8) naluType) --> bool
	:
		naluType = SLICE_LAYER or naluType = SLICE_TLA or
		naluType = SLICE_CRA or naluType = SLICE_IDR
	end

	uint(size=2) LUMA      = 0;
	uint(size=2) CHROMA_CB = 1;
	uint(size=2) CHROMA_CR = 2;

	uint(size=2) PRED_L0 = 0;
	uint(size=2) PRED_L1 = 1;
	uint(size=2) BI_PRED = 2;

	uint(size=2) B_SLICE = 0;
	uint(size=2) P_SLICE = 1;
	uint(size=2) I_SLICE = 2;

	int(size=16) MIN_INT16 = -32768;

	uint(size=2) SLICE_TYPE_I = 0;
	uint(size=2) SLICE_TYPE_P = 1;
	uint(size=2) SLICE_TYPE_B = 2;

	uint(size=3) ST_CURR_BEF = 0;
	uint(size=3) ST_CURR_AFT = 1;
	uint(size=3) ST_FOLL = 2;
	uint(size=3) LT_CURR = 3;
	uint(size=3) LT_FOLL = 4;

	uint(size=2) INTRA = 0;
	uint(size=2) INTER = 1;
	uint(size=2) SKIP  = 2;
	uint(size=2) OTHER = 3;

	uint(size=4) PART_2Nx2N = 0;
	uint(size=4) PART_2NxN  = 1;
	uint(size=4) PART_Nx2N  = 2;
	uint(size=4) PART_2NxnU = 3;
	uint(size=4) PART_2NxnD = 4;
	uint(size=4) PART_nLx2N = 5;
	uint(size=4) PART_nRx2N = 6;
	uint(size=4) PART_NxN   = 7;
	uint(size=4) NEW_SLICE  = 8;
	uint(size=4) NEW_PICT   = 9;

	String partModeString[8] = [ "PART_2Nx2N", "PART_2NxN", "PART_Nx2N", "PART_2NxnU", "PART_2NxnD", "PART_nLx2N", "PART_nRx2N", "PART_NxN"];
	uint(size=3) partModeToNumPart[8] = [1, 2, 2, 2, 2, 2, 2, 4];

	procedure rasterScanToAbsCoord(uint(size=8) rasterIdx, uint(size=16) coord[2])
	begin
		coord[0] :=  (rasterIdx    &1)* 4 + ((rasterIdx>>2)&1)* 8 +
		            ((rasterIdx>>4)&1)*16 + ((rasterIdx>>6)&1)*32;

		coord[1] := ((rasterIdx>>1)&1)* 4 + ((rasterIdx>>3)&1)* 8 +
		            ((rasterIdx>>5)&1)*16 + ((rasterIdx>>7)&1)*32;
	end
end