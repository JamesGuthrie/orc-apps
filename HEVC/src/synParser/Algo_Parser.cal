package synParser;

import  std.util.Math.*;

import  org.sc29.wg11.common.BitstreamReadUtils.*;
import  synParser.Algo_ParserUtils.*;
import  common.CommonConstantHEVC.*;
import  common.CabacDecodeBinFunction.*;
import  common.CabacContextConstantHEVC.*;
import  common.CabacContextFunctionHEVC.*;
import  common.CabacParserFunctionHEVC.*;

actor Algo_Parser () 
				uint(size= 8) byte
				==>
:
	bool DEBUG_BITSTREAM = false;
	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL];
	uint(size= 2) zeroByte := 0;
	uint(size= 8) se_idx;
	uint(size=32) cnt_i;
	uint(size=10) sps_id;
	uint(size=10) pps_id;
	uint(size=32) wp[2][MAX_NUM_REF][3][WP_MAX_STRUCT];

	/**************************************************************************
	 **************************************************************************
	 ********        Bitstream Reader                     *********************
	 **************************************************************************
	 *************************************************************************/
	
	/**************************************************************************
	 * search_start_code or getByte
	 *************************************************************************/
 	action byte:[ b ] ==>
	guard 
		not isFifoFull(fifo)
	var
		uint(size=4) fifo_idx  =  fifo[FIFO_IDX]
	do
		if b != EPR_VALUE or zeroByte != 3 then
			if b = START_CODE_VALUE and zeroByte = 3 then
				fifo[fifo_idx]      := b + START_CODE_FLAG;
			else
				fifo[fifo_idx]      := b;
			end
			fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] + 8;
			if DEBUG_BITSTREAM then
				println("fifo["+fifo_idx+"] := "+b+" \t "+fifo[FIFO_CPT_BITS]);
			end
			fifo[FIFO_IDX]      := (fifo_idx+1) & (FIFO_SIZE-1);
		end
		if b = 0 then
			zeroByte := ((zeroByte << 1) + 1) & 0x3;
		else
			zeroByte := 0;
		end
	end
	/**************************************************************************
	 **************************************************************************
	 ********        NAL UNIT                             *********************
	 **************************************************************************
	 *************************************************************************/
	/**************************************************************************
	 * byte_align_a
	 *************************************************************************/	
	byte_align_a : action ==>
	guard
		isFifoFull(fifo)
	do
		byte_align(fifo);
	end 	
	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	start_code.search: action ==>
	guard
		not IsStartCode(fifo) and isFifoFull(fifo)
   	do
		flushBits( 8, fifo );
		if DEBUG_BITSTREAM then		
  			println("start_code.search");
   		end
	end
	start_code.done: action ==>
	guard
		IsStartCode(fifo) and isFifoFull(fifo)
	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then
			println("start_code.done");
		end
	end
	/**************************************************************************
	 * read_nal_unit_header
	 *************************************************************************/		
	uint(size= 6) nal_unit_type;
	
	read_nal_unit_header : action ==>
	var
		uint(size=32) res[1]
	do
		if DEBUG_BITSTREAM then
			println("=========== NAL_UNIT ===========");
			flushBits_name( 1, fifo,   "reserved_zero_1bits                     ");
			vld_u_name(  1, fifo, res, "nal_ref_flag                            "); 
			vld_u_name(  6, fifo, res, "nal_unit_type                           "); 
			nal_unit_type := res[0];
		else
			flushBits( 1, fifo );
			vld_u(  1, fifo, res);
			vld_u(  6, fifo, res); nal_unit_type := res[0];
		end
		if DEBUG_BITSTREAM then
			vld_u_name(  3, fifo, res, "temporal_id                             "); 
			flushBits_name( 5, fifo,   "reserved_zero_5bits                     ");
		else
			vld_u(  3, fifo, res); 
			flushBits( 5, fifo  );
		end
		se_idx := 1;
	end
	/**************************************************************************
	 * look_for.VPS_header
	 *************************************************************************/
	look_for.VPS_header: action ==>
	guard
		nal_unit_type = NAL_UNIT_VPS
	do
		if DEBUG_PARSER then
			println("=========== Video Parameter Set ID:   ===========");
		end
	end
	/**************************************************************************
	 * look_for.SPS_header
	 *************************************************************************/
	look_for.SPS_header: action ==>
	guard
		nal_unit_type = NAL_UNIT_SPS
	do
		if DEBUG_PARSER then
			println("=========== Sequence Parameter Set ID:   ===========");
		end
	end
	/**************************************************************************
	 * look_for.PPS_header
	 *************************************************************************/
	look_for.PPS_header: action ==>
	guard
		nal_unit_type = NAL_UNIT_PPS
	do
		if DEBUG_PARSER then
			println("=========== Picture Parameter Set ID:   ===========");
		end
	end
	/**************************************************************************
	 * look_for.Slice_header
	 *************************************************************************/
	look_for.Slice_header: action ==>
	guard
		(nal_unit_type = NAL_UNIT_NON_IDR_AND_NON_CRA or
		 nal_unit_type = NAL_UNIT_CRA                 or
		 nal_unit_type = NAL_UNIT_IDR)
	do
		if DEBUG_PARSER then
			println("=========== Slice ===========");
		end
	end
	/**************************************************************************
	 * look_for.APS_header
	 *************************************************************************/
	look_for.APS_header: action ==>
	guard
		(nal_unit_type = NAL_UNIT_APS)
	do
		if DEBUG_PARSER then
			println("=========== Adaptation Parameter Set ===========");
		end
	end
	/**************************************************************************
	 * look_for_other_header
	 *************************************************************************/
	look_for_other_header: action ==>
	end
	/**************************************************************************
	 **************************************************************************
	 ********        Video Parameter Set HEADER           *********************
	 **************************************************************************
	 *************************************************************************/

	/**************************************************************************
	 * read_VPS_Header.se_idx_1
	 *************************************************************************/
	uint(size= 3) vps_max_temporal_layers_minus1;
	 
	read_VPS_Header.se_idx_1 : action ==>
	guard
		se_idx = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		vld_u_name(  3, fifo, res, "vps_max_temporal_layers_minus1          ");
		vps_max_temporal_layers_minus1 := res[0];
		vld_u_name(  5, fifo, res, "vps_max_layers_minus1                   ");
		vld_ue_name(    fifo, res, "video_parameter_set_id                  ");
		vld_u_name(  1, fifo, res, "vps_temporal_id_nesting_flag            ");
		se_idx := se_idx + 1;
		cnt_i  := 0;
	end
	/**************************************************************************
	 * read_VPS_Header.se_idx_2
	 *************************************************************************/
	read_VPS_Header.se_idx_2.loop : action ==>
	guard
		se_idx = 2 and isFifoFull(fifo),
		cnt_i <= vps_max_temporal_layers_minus1		
	var
		uint(size=32) res[1]
	do
		vld_ue_name(    fifo, res, "vps_max_dec_pic_buffering[i]            ");
		vld_ue_name(    fifo, res, "vps_num_reorder_pics[i]                 ");
		vld_ue_name(    fifo, res, "vps_max_latency_increase[i]             ");
		cnt_i := cnt_i + 1;
	end
	read_VPS_Header.se_idx_2.loopEnd : action ==>
	guard
		se_idx = 2,
		cnt_i = vps_max_temporal_layers_minus1 + 1
	do
		se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_VPS_Header_done
	 *************************************************************************/	
	read_VPS_Header_done : action ==>
	guard
		se_idx = 3 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		vld_u_name(  1, fifo, res, "vps_extension_flag                      ");
		if res[0] = 1 then
			println("moreRBSP data VPS");
		end
	end 	
	/**************************************************************************
	 **************************************************************************
	 ********        Sequence Parameter Set HEADER        *********************
	 **************************************************************************
	 *************************************************************************/

	/**************************************************************************
	 * read_SPS_Header.se_idx_1
	 *************************************************************************/
	uint(size= 8) sps_chroma_format_idc[NB_MAX_SPS];
	uint(size= 1) sps_separate_colour_plane_flag[NB_MAX_SPS];
	uint(size= 4) sps_max_temporal_layers_minus1[NB_MAX_SPS];
	uint(size=16) sps_pic_width_in_luma_samples[NB_MAX_SPS];

	read_SPS_Header.se_idx_1 : action ==>
	guard
		se_idx = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		vld_u_name(  8, fifo, res, "profile_idc                             "); 
		flushBits_name( 8, fifo,   "reserved_zero_8bits                     ");
		vld_u_name(  8, fifo, res, "level_idc                               "); 
		vld_ue_name(    fifo, res, "seq_parameter_set_id                    ");
		sps_id := res[0];
		vld_ue_name(    fifo, res, "video_parameter_set_id                  ");
		vld_ue_name(    fifo, res, "chroma_format_idc                       ");
		sps_chroma_format_idc[sps_id] := res[0];
		if (sps_chroma_format_idc[sps_id] = 3) then
			vld_u_name(  1, fifo, res, "separate_colour_plane_flag              ");
			sps_separate_colour_plane_flag[sps_id]:=res[0];
		end
		vld_u_name(  3, fifo, res, "max_temporal_layers_minus1              ");
		sps_max_temporal_layers_minus1[sps_id] := res[0];
		vld_ue_name(    fifo, res, "pic_width_in_luma_samples               ");
		sps_pic_width_in_luma_samples[sps_id] := res[0];
		se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SPS_Header.se_idx_2
	 *************************************************************************/
	uint(size=16) sps_pic_height_in_luma_samples[NB_MAX_SPS];
	uint(size= 1) sps_pcm_enabled_flag[NB_MAX_SPS];
	uint(size= 8) sps_log2_max_pic_order_cnt_lsb_minus4[NB_MAX_SPS];
	
	read_SPS_Header.se_idx_2 : action ==>
	guard
		se_idx = 2 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size=1)  pic_cropping_flag
	do
		vld_ue_name(    fifo, res, "pic_height_in_luma_samples              "); 
		sps_pic_height_in_luma_samples[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "pic_cropping_flag                       ");
		pic_cropping_flag := res[0];
		if pic_cropping_flag=1 then
			vld_ue_name(    fifo, res, "pic_cropping_left_offset                "); 
			vld_ue_name(    fifo, res, "pic_cropping_right_offset               "); 
			vld_ue_name(    fifo, res, "pic_cropping_top_offset                 "); 
			vld_ue_name(    fifo, res, "pic_cropping_bottom_offset              "); 
		end
		vld_ue_name(    fifo, res, "bit_depth_luma_minus8                   ");
		vld_ue_name(    fifo, res, "bit_depth_chroma_minus8                 ");
		vld_u_name(  1, fifo, res, "pcm_enabled_flag                        ");
		sps_pcm_enabled_flag[sps_id] := res[0];
		if sps_pcm_enabled_flag[sps_id] = 1 then
			vld_u_name(  4, fifo, res, "pcm_sample_bit_depth_luma_minus1               ");
			vld_u_name(  4, fifo, res, "pcm_sample_bit_depth_chroma_minus1             ");
		end
		vld_ue_name(    fifo, res, "log2_max_pic_order_cnt_lsb_minus4       ");
		sps_log2_max_pic_order_cnt_lsb_minus4[sps_id]:=res[0];
		se_idx := se_idx + 1;
		cnt_i := 0;
	end

	/**************************************************************************
	 * read_SPS_Header.se_idx_3
	 *************************************************************************/
	read_SPS_Header.se_idx_3.loop : action ==>
	guard
		se_idx = 3 and isFifoFull(fifo),
		cnt_i <= sps_max_temporal_layers_minus1[sps_id]
	var
		uint(size=32) res[1]
	do
		vld_ue_name(    fifo, res, "max_dec_pic_buffering                   "); 
		vld_ue_name(    fifo, res, "num_reorder_pics                        "); 
		vld_ue_name(    fifo, res, "max_latency_increase                    "); 
		cnt_i := cnt_i + 1;
	end 

	read_SPS_Header.se_idx_3.loopEnd : action ==>
	guard
		se_idx = 3,
		cnt_i = sps_max_temporal_layers_minus1[sps_id] + 1
	do
		se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SPS_Header.se_idx_4
	 *************************************************************************/
	uint(size= 1) sps_lists_modification_present_flag[NB_MAX_SPS];
	uint(size= 8) sps_log2_min_coding_block_size_minus3[NB_MAX_SPS];
	uint(size= 8) sps_log2_diff_max_min_coding_block_size[NB_MAX_SPS];
	uint(size= 8) sps_log2_min_transform_block_size_minus2[NB_MAX_SPS];
	uint(size= 8) sps_log2_diff_max_min_transform_block_size[NB_MAX_SPS];
	uint(size= 8) sps_maxCUWidth[NB_MAX_SPS];
	uint(size= 8) sps_addCUDepth[NB_MAX_SPS];
	uint(size= 8) sps_maxCUDepth[NB_MAX_SPS];

	read_SPS_Header.se_idx_4 : action ==>
	guard
		se_idx = 4 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) restricted_ref_pic_lists_flag
	do
		vld_u_name(  1, fifo, res, "restricted_ref_pic_lists_flag           "); 
		restricted_ref_pic_lists_flag := res[0];
		if restricted_ref_pic_lists_flag = 1 then
			vld_u_name(  1, fifo, res, "lists_modification_present_flag         ");
			sps_lists_modification_present_flag[sps_id] := res[0];
		else
			sps_lists_modification_present_flag[sps_id] := 0;
		end
		vld_ue_name(    fifo, res, "log2_min_coding_block_size_minus3       ");
		sps_log2_min_coding_block_size_minus3[sps_id] := res[0];
		vld_ue_name(    fifo, res, "log2_diff_max_min_coding_block_size     ");
		sps_log2_diff_max_min_coding_block_size[sps_id] := res[0];
		vld_ue_name(    fifo, res, "log2_min_transform_block_size_minus2    ");
		sps_log2_min_transform_block_size_minus2[sps_id] := res[0];
		vld_ue_name(    fifo, res, "log2_diff_max_min_transform_block_size  ");
		sps_log2_diff_max_min_transform_block_size[sps_id] := res[0];
		sps_maxCUWidth[sps_id] := 1 << (sps_log2_min_coding_block_size_minus3[sps_id] + 3 + sps_log2_diff_max_min_coding_block_size[sps_id]); 
    	sps_addCUDepth[sps_id] := 0;
    	while ( ( sps_maxCUWidth[sps_id] >> sps_log2_diff_max_min_coding_block_size[sps_id] ) > 
    		( 1 << ( sps_log2_min_transform_block_size_minus2[sps_id] + 2 + sps_log2_diff_max_min_coding_block_size[sps_id] )  )
    	)
    	do
        	sps_addCUDepth[sps_id] := sps_addCUDepth[sps_id] + 1;
    	end
    	sps_maxCUDepth[sps_id] := sps_log2_diff_max_min_coding_block_size[sps_id] + sps_addCUDepth[sps_id]; 
				
		se_idx := se_idx + 1;
	end 
	/**************************************************************************
	 * read_SPS_Header.se_idx_5
	 *************************************************************************/	 	
	uint(size= 8) sps_max_transform_hierarchy_depth_inter[NB_MAX_SPS];
	uint(size= 8) sps_max_transform_hierarchy_depth_intra[NB_MAX_SPS];
	
	read_SPS_Header.se_idx_5 : action ==>
	guard
		se_idx = 5 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		if sps_pcm_enabled_flag[sps_id] = 1 then
			vld_ue_name(    fifo, res, "log2_min_pcm_coding_block_size_minus3   ");
			vld_ue_name(    fifo, res, "log2_diff_max_min_pcm_coding_block_size ");
		end
		vld_ue_name(    fifo, res, "max_transform_hierarchy_depth_inter     ");
		sps_max_transform_hierarchy_depth_inter[sps_id] := res[0];
		vld_ue_name(    fifo, res, "max_transform_hierarchy_depth_intra     ");
		sps_max_transform_hierarchy_depth_intra[sps_id] := res[0];
		se_idx := se_idx + 1;
	end 
	/**************************************************************************
	 * read_SPS_Header.se_idx_6
	 *************************************************************************/
	uint(size= 1) sps_chroma_pred_from_luma_enabled_flag[NB_MAX_SPS];
	uint(size= 1) sps_transform_skip_enabled_flag[NB_MAX_SPS];
	uint(size= 1) nsrqt_enabled_flag[NB_MAX_SPS];
	uint(size= 1) sps_sample_adaptive_offset_enabled_flag[NB_MAX_SPS];
	uint(size= 1) sps_adaptive_loop_filter_enabled_flag[NB_MAX_SPS];
	uint(size= 8) sps_num_short_term_ref_pic_sets[NB_MAX_SPS];
	uint(size= 1) sps_loop_filter_across_slice_flag[NB_MAX_SPS];
	
	read_SPS_Header.se_idx_6 : action ==>
	guard
		se_idx = 6 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
   	do
		vld_u_name(  1, fifo, res, "scaling_list_enabled_flag               ");
		vld_u_name(  1, fifo, res, "chroma_pred_from_luma_enabled_flag      "); 
		sps_chroma_pred_from_luma_enabled_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "transform_skip_enabled_flag             "); 
		sps_transform_skip_enabled_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "loop_filter_across_slice_flag           ");
		sps_loop_filter_across_slice_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "asymmetric_motion_partitions_enabled_flag"); 
		vld_u_name(  1, fifo, res, "non_square_quadtree_enabled_flag        ");
		nsrqt_enabled_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "sample_adaptive_offset_enabled_flag     ");
		sps_sample_adaptive_offset_enabled_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "adaptive_loop_filter_enabled_flag       ");
		sps_adaptive_loop_filter_enabled_flag[sps_id] := res[0];
		if sps_adaptive_loop_filter_enabled_flag[sps_id] = 1 then
			vld_u_name(  1, fifo, res, "alf_coef_in_slice_flag                  ");
		end
		if sps_pcm_enabled_flag[sps_id] = 1 then
			vld_u_name(  1, fifo, res, "pcm_loop_filter_disable_flag            ");
		end
		vld_u_name(  1, fifo, res, "temporal_id_nesting_flag                ");
		vld_ue_name(    fifo, res, "num_short_term_ref_pic_sets             "); 
		sps_num_short_term_ref_pic_sets[sps_id] := res[0];
		se_idx := se_idx + 1;
		cnt_i  := 0;
	end 
	/**************************************************************************
	 * read_SPS_Header.se_idx_7
	 *************************************************************************/
	uint(size=32) pcRPS[NB_MAX_PPS][PC_RPS_STRUCT_SIZE];	

	read_SPS_Header.se_idx_7.loop : action ==>
	guard
		se_idx = 7 and isFifoFull(fifo),
		cnt_i < sps_num_short_term_ref_pic_sets[sps_id]
   	do
   		parseShortTermRefPicSet(cnt_i, fifo, pcRPS);
		cnt_i := cnt_i + 1;
 	end
 	read_SPS_Header.se_idx_7.loopEnd : action ==>
	guard
		se_idx = 7,
		cnt_i = sps_num_short_term_ref_pic_sets[sps_id]
   	do
		se_idx := se_idx + 1;
		cnt_i  := 0;
	end 
	/**************************************************************************
	 * read_SPS_Header.se_idx_8
	 *************************************************************************/	
	uint(size= 1) sps_long_term_ref_pics_present_flag[NB_MAX_SPS];
	
	read_SPS_Header.se_idx_8 : action ==>
	guard
		se_idx = 8 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		vld_u_name(  1, fifo, res, "long_term_ref_pics_present_flag         "); 
		sps_long_term_ref_pics_present_flag[sps_id] := res[0];
		vld_u_name(  1, fifo, res, "sps_temporal_mvp_enable_flag            ");
		foreach int i in 0 .. sps_maxCUDepth[sps_id] do
			vld_u_name(  1, fifo, res, "AMVP_MODE                               "); 
		end
		se_idx := se_idx + 1;
	end 
	
	/**************************************************************************
	 * read_SPS_Header_done
	 *************************************************************************/	
	read_SPS_Header_done : action ==>
	guard
		se_idx = 9 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) sps_extension_flag
	do
		vld_u_name(  1, fifo, res, "sps_extension_flag                      ");
		sps_extension_flag := res[0];
		if sps_extension_flag = 1 then
			println("moreRBSP data SPS");
		end
	end 
	/**************************************************************************
	 **************************************************************************
	 ********        Picture Parameter Set HEADER         *********************
	 **************************************************************************
	 *************************************************************************/
	  
	/**************************************************************************
	 * read_PPS_Header.se_idx_1
	 *************************************************************************/	
	uint(size= 8) pps_sps_id[NB_MAX_PPS];
	uint(size= 2) pps_tiles_or_entropy_coding_sync_idc[NB_MAX_PPS];

	read_PPS_Header.se_idx_1 : action ==>
	guard
		se_idx = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
   	do
		vld_ue_name(    fifo, res, "pic_parameter_set_id                    "); 
		pps_id := res[0];
		vld_ue_name(    fifo, res, "seq_parameter_set_id                    "); 
		sps_id := res[0];
		pps_sps_id[pps_id] := res[0];
		se_idx := se_idx + 1;
		cnt_i  := 0;
 	end
	/**************************************************************************
	 * read_PPS_Header.se_idx_2
	 *************************************************************************/
	uint(size= 1) pps_sign_data_hiding_flag[NB_MAX_PPS];
	uint(size= 4) pps_sign_hiding_threshold[NB_MAX_PPS];
	uint(size= 1) pps_cabac_init_present_flag[NB_MAX_PPS];
	 int(size=32) pps_pic_init_qp_minus26[NB_MAX_PPS];
	uint(size= 2) pps_SliceGranularity[NB_MAX_PPS];
	uint(size=16) pps_diff_cu_qp_delta_depth[NB_MAX_PPS];
	uint(size= 1) pps_output_flag_present_flag[NB_MAX_PPS];
	uint(size= 1) pps_transquant_bypass_enable_flag[NB_MAX_PPS];
	uint(size= 1) pps_tile_control_present_flag[NB_MAX_PPS];
	uint(size= 8) pps_num_tile_columns_minus1[NB_MAX_PPS];
	uint(size= 8) pps_num_tile_rows_minus1[NB_MAX_PPS];
	uint(size= 1) pps_uniform_spacing_flag[NB_MAX_PPS];

	read_PPS_Header.se_idx_2 : action ==>
	guard
		se_idx = 2 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) tile_info_present_flag
   	do
		vld_u_name(  1, fifo, res, "sign_data_hiding_flag                   ");
		pps_sign_data_hiding_flag[pps_id] := res[0];
		if pps_sign_data_hiding_flag[pps_id] = 1 then
			//FIXME vld_u_name(  4, fifo, res, "sign_hiding_threshold                   ");
		end
		vld_u_name(  1, fifo, res, "cabac_init_present_flag                 ");
		pps_cabac_init_present_flag[pps_id] := res[0];
		vld_u_name(  3, fifo, res, "num_ref_idx_l0_default_active_minus1    ");
		vld_u_name(  3, fifo, res, "num_ref_idx_l1_default_active_minus1    ");
//		vld_ue_name(    fifo, res, "num_ref_idx_l0_default_active_minus1    ");
//		vld_ue_name(    fifo, res, "num_ref_idx_l1_default_active_minus1    ");
		vld_se_name(    fifo, res, "pic_init_qp_minus26                     ");
		pps_pic_init_qp_minus26[pps_id] := res[0]; 
		vld_u_name(  1, fifo, res, "constrained_intra_pred_flag             ");
		vld_u_name(  2, fifo, res, "slice_granularity                       ");
		pps_SliceGranularity[pps_id] := res[0] * 2;
		vld_ue_name(    fifo, res, "diff_cu_qp_delta_depth                  ");
		pps_diff_cu_qp_delta_depth[pps_id] := res[0];
		vld_se_name(    fifo, res, "cb_qp_offset                            ");
		vld_se_name(    fifo, res, "cr_qp_offset                            ");
		vld_u_name(  1, fifo, res, "weighted_pred_flag                      ");
		vld_u_name(  1, fifo, res, "weighted_bipred_flag                    ");
		vld_u_name(  1, fifo, res, "output_flag_present_flag                ");
		pps_output_flag_present_flag[pps_id]:=res[0];
		vld_u_name(  1, fifo, res, "dependent_slices_enabled_flag           ");
		vld_u_name(  1, fifo, res, "transquant_bypass_enable_flag           ");
		pps_transquant_bypass_enable_flag[pps_id]:=res[0];
		vld_u_name(  2, fifo, res, "tiles_or_entropy_coding_sync_idc        ");
		pps_tiles_or_entropy_coding_sync_idc[pps_id]:=res[0];
		if pps_tiles_or_entropy_coding_sync_idc[pps_id] = 1 then
			vld_u_name(  1, fifo, res, "tile_info_present_flag                  ");
			tile_info_present_flag := res[0];
			vld_u_name(  1, fifo, res, "tile_control_present_flag               ");
			pps_tile_control_present_flag[pps_id] := res[0];
			if tile_info_present_flag = 1 then
				vld_ue_name(    fifo, res, "num_tile_columns_minus1                 "); 
				pps_num_tile_columns_minus1[pps_id] := res[0];
				vld_ue_name(    fifo, res, "num_tile_rows_minus1                    ");
				pps_num_tile_rows_minus1[pps_id] := res[0];
				vld_u_name ( 1, fifo, res, "uniform_spacing_flag                    ");
				pps_uniform_spacing_flag[pps_id] :=res[0];
			else
				pps_num_tile_columns_minus1[pps_id] := 0;
				pps_num_tile_rows_minus1[pps_id]    := 0;
				pps_uniform_spacing_flag[pps_id]    := 0;
			end
		end
		se_idx := se_idx + 1;
		cnt_i  := 0;
 	end
	/**************************************************************************
	 * read_PPS_Header.se_idx_3
	 *************************************************************************/	
	uint(size=16) pps_column_width[NB_MAX_PPS][COLUMN_WIDTH_MAX];

  	read_PPS_Header.se_idx_3.loop : action ==>
	guard
		se_idx = 3  and isFifoFull(fifo),
		pps_uniform_spacing_flag[pps_id] = 1 and cnt_i <= pps_num_tile_columns_minus1[pps_id]
	var
		uint(size=32) res[1]
   	do
		vld_ue_name(    fifo, res, "column_width[ ]                         ");
		pps_column_width[pps_id][cnt_i] := res[0];
		if cnt_i >= COLUMN_WIDTH_MAX then
			println("Error read_PPS_Header.se_idx_3.loop : "+cnt_i+" >= "+COLUMN_WIDTH_MAX);
		end		
		cnt_i := cnt_i + 1;
	end 
	read_PPS_Header.se_idx_3.loopEnd : action ==>
	guard
		se_idx = 3,
		pps_uniform_spacing_flag[pps_id] = 1 and cnt_i > pps_num_tile_columns_minus1[pps_id]
   	do
		se_idx := se_idx + 1;
		cnt_i  := 0;
	end 
	read_PPS_Header.se_idx_3.noLoop : action ==>
	guard
		se_idx = 3,
		pps_uniform_spacing_flag[pps_id] = 0
   	do
		se_idx := se_idx + 2;
	end 
	/**************************************************************************
	 * read_PPS_Header.se_idx4
	 *************************************************************************/	
	uint(size=16) pps_row_height[NB_MAX_PPS][COLUMN_WIDTH_MAX];
	
	read_PPS_Header.se_idx_4.loop : action ==>
	guard
		se_idx = 4 and isFifoFull(fifo),
		pps_uniform_spacing_flag[pps_id] = 1 and cnt_i <= pps_num_tile_rows_minus1[pps_id]
	var
		uint(size=32) res[1]
   	do
		vld_ue_name(    fifo, res, "row_height[ ]                           ");
		pps_row_height[pps_id][cnt_i] := res[0];
		if cnt_i >= COLUMN_WIDTH_MAX then
			println("Error read_PPS_Header.se_idx_4.loop : "+cnt_i+" >= "+COLUMN_WIDTH_MAX);
		end
		cnt_i := cnt_i + 1;
	end 
	read_PPS_Header.se_idx_4.loopEnd : action ==>
	guard
		se_idx = 4,
		pps_uniform_spacing_flag[pps_id] = 1 and cnt_i > pps_num_tile_rows_minus1[pps_id]
   	do
		se_idx := se_idx + 1;
	end 
	
	/**************************************************************************
	 * read_PPS_Header.se_idx5
	 *************************************************************************/	
	uint(size=16) pps_num_substreams_minus1[NB_MAX_PPS];
	uint(size= 1) pps_deblocking_filter_control_present_flag[NB_MAX_PPS];
	uint(size =1) deblocking_filter_override_enabled_flag[NB_MAX_PPS];

	read_PPS_Header.se_idx_5 : action ==>
	guard
		se_idx = 5 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) pps_extension_flag
   	do
   		if (pps_tiles_or_entropy_coding_sync_idc[sps_id] = 1) then
			if pps_tile_control_present_flag[pps_id] = 1 then
				vld_u_name(  1, fifo, res, "loop_filter_across_tiles_enabled_flag   ");
			end
		elsif (pps_tiles_or_entropy_coding_sync_idc[sps_id] = 2) then
			vld_ue_name(    fifo, res, "num_substreams_minus1                   ");
			pps_num_substreams_minus1[pps_id] := res[0];
		end
		vld_u_name(  1, fifo, res, "deblocking_filter_control_present_flag  ");
		pps_deblocking_filter_control_present_flag[pps_id] := res[0];
		if pps_deblocking_filter_control_present_flag[pps_id] = 1 then
			vld_u_name(  1, fifo, res, "deblocking_filter_control_present_flag  ");
			deblocking_filter_override_enabled_flag[pps_id] := res[0];
		else
			deblocking_filter_override_enabled_flag[pps_id] := 0;
		end
		vld_u_name(  1, fifo, res, "pps_scaling_list_data_present_flag      ");
		vld_ue_name(    fifo, res, "log2_parallel_merge_level_minus2        ");
		vld_u_name(  1, fifo, res, "pps_extension_flag                      ");
		pps_extension_flag := res[0];
		if pps_extension_flag = 1 then
			println("moreRBSP data PPS");
		end
		se_idx := se_idx + 1;
	end 

	/**************************************************************************
	 * read_PPS_Header_done
	 *************************************************************************/	
	read_PPS_Header_done : action ==>
	guard
		se_idx = 6
	end 	
	/**************************************************************************
	 **************************************************************************
	 ********        APS HEADER                           *********************
	 **************************************************************************
	 *************************************************************************/
	read_APS_Header.se_idx_1 : action ==>
	guard
		se_idx = 1 and isFifoFull(fifo)
	var 
		uint(size=32) res[1]
	do
		vld_ue_name(    fifo, res, "aps_id                                  ");
		vld_u_name(  1, fifo, res, "alf_aps_filter_flag[0]                  ");
		se_idx := se_idx + 1 + (res[0] << 2);
	end
	read_APS_Header.se_idx_2 : action ==>
	guard
		se_idx = 2 and isFifoFull(fifo)
	var 
		uint(size=32) res[1]
	do
		vld_u_name(  1, fifo, res, "alf_aps_filter_flag[1]                  ");
		se_idx := se_idx + 1 + (res[0] << 2);
	end
	read_APS_Header.se_idx_3 : action ==>
	guard
		se_idx = 3 and isFifoFull(fifo)
	var 
		uint(size=32) res[1]
	do
		vld_u_name(  1, fifo, res, "alf_aps_filter_flag[2]                  ");
		se_idx := se_idx + 1 + (res[0] << 2);
	end
	read_APS_Header.goto_alf_picture_info : action ==>
	guard
		se_idx = 6 or se_idx = 7 or se_idx = 8 and isFifoFull(fifo)
	do
		println("TODO alf_picture_info(cIdx)");
		se_idx := se_idx - (1<<2);
	end
	read_APS_Header_done : action ==>
	guard
		se_idx = 4 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		vld_u_name(  1, fifo, res, "aps_extension_flag                      ");
		if(res[0] = 1) then 
			println("APS moreDataflag");
		end
	end 	

	/**************************************************************************
	 **************************************************************************
	 ********        Slice HEADER                         *********************
	 **************************************************************************
	 *************************************************************************/

	/**************************************************************************
	 * read_SliceHeader.se_idx_1
	 *************************************************************************/
	uint(size=32) poc;
	uint(size= 3) slice_type;
	uint(size= 1) entropy_slice_flag;
	uint(size=32) slice_address;
	uint(size= 1) slice_sample_adaptive_offset_flag[3];
	
	procedure compute_POC(int pic_order_cnt_lsb)
	var
	     int iPOClsb = pic_order_cnt_lsb,
	     int iPrevPOC = poc,
	     int iMaxPOClsb := 1 << (sps_log2_max_pic_order_cnt_lsb_minus4[sps_id] + 4),
	     int iPrevPOClsb,
	     int iPrevPOCmsb,
	     int iPOCmsb
	begin
		iPrevPOClsb := iPrevPOC mod iMaxPOClsb;
		iPrevPOCmsb := iPrevPOC-iPrevPOClsb;
	    if( (iPOClsb < iPrevPOClsb) and ( (iPrevPOClsb - iPOClsb) >= (iMaxPOClsb / 2) ) ) then
	    	iPOCmsb := iPrevPOCmsb + iMaxPOClsb;
	    else 
	    	if( (iPOClsb > iPrevPOClsb)  and ( (iPOClsb - iPrevPOClsb) > (iMaxPOClsb / 2) ) ) then
	 			iPOCmsb := iPrevPOCmsb - iMaxPOClsb;
	   		else
				iPOCmsb := iPrevPOCmsb;
			end
		end
	    poc:= iPOCmsb+iPOClsb;
	end
	
	read_SliceHeader.se_idx_1.read : action ==>
	guard
		se_idx = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size=32) prev := 0,
		uint(size=32) j,
		uint(size= 1) first_slice_in_pic_flag,
		uint(size= 1) dependent_slice_flag,
		uint(size= 1) RapPicFlag
   	do	
		vld_u_name(  1, fifo, res, "first_slice_in_pic_flag                 ");
		first_slice_in_pic_flag := res[0];
		vld_ue_name(    fifo, res, "pic_parameter_set_id                    "); 
		pps_id := res[0];
		if first_slice_in_pic_flag = 0 then
			vld_ue_name(    fifo, res, "slice_address                           ");
			slice_address := res[0];
		else
			slice_address := 0;
		end
		vld_ue_name(    fifo, res, "slice_type                              ");
		slice_type := res[0];
		vld_u_name(  1, fifo, res, "dependent_slice_flag                    ");
		dependent_slice_flag := res[0];
		if dependent_slice_flag = 0 then
			sps_id := pps_sps_id[pps_id];
			if(pps_output_flag_present_flag[pps_id] = 1) then	
				vld_u_name(  1, fifo, res, "pic_output_flag                         ");
			end
			if(sps_separate_colour_plane_flag[sps_id] = 1) then
				vld_u_name(  2, fifo, res, "colour_plane_id                         ");
			end
			RapPicFlag := if ( nal_unit_type  >=  4  &&  nal_unit_type  <=  8  )  then  1  else  0 end;
			if RapPicFlag = 1 then
			    vld_ue_name(    fifo, res, "rap_pic_id                              ");
	   			vld_u_name(  1, fifo, res, "no_output_of_prior_pics_flag            ");
	   			poc:=0;
			else
				vld_u_name( sps_log2_max_pic_order_cnt_lsb_minus4[sps_id] + 4, fifo, res, "pic_order_cnt_lsb                       "); 

				//compute the number of POC
				compute_POC(res[0]);
				
				vld_u_name(  1, fifo, res, "short_term_ref_pic_set_pps_flag         ");
				if res[0] = 0 then
			   		parseShortTermRefPicSet(pps_id, fifo, pcRPS);
		   		else
				    vld_ue_name(    fifo, res, "short_term_ref_pic_set_idx              ");
				end
				if sps_long_term_ref_pics_present_flag[sps_id] = 1 then
					vld_ue_name(    fifo, res, "num_long_term_pics                      "); pcRPS[pps_id][NUM_LONG_TERM_PICS]	:= res[0];
				   	j := res[0] + pcRPS[pps_id][NUM_PICS]-1;
			   		foreach uint(size=8) i in 0 .. res[0]-2 do
			    		vld_ue_name(    fifo, res, "delta_poc_lsb_lt                        "); prev := prev + res[0] + 1;
						pcRPS[j][POC] := pcRPS[pps_id][POC] - prev;
						vld_u_name(  1, fifo, res, "delta_poc_msb_present_flag              ");
						if res[0] = 1 then
			    			vld_ue_name(    fifo, res, "delta_poc_msb_cycle_lt_minus1                "); 
						end
						vld_u_name(  1, fifo, res, "used_by_curr_pic_lt_flag                "); pcRPS[pps_id][USED+i]		:= res[0];
					end
					pcRPS[pps_id][NUM_PICS] := pcRPS[pps_id][NUM_PICS] + pcRPS[pps_id][NUM_LONG_TERM_PICS];
				end
			end
			if( sps_sample_adaptive_offset_enabled_flag[sps_id] = 1) then
				//FIXME vld_u_name(  1, fifo, res, "slice_sao_interleaving_flag             ");
				//FIXME slice_sao_interleaving_flag := res[0];
				vld_u_name(  1, fifo, res, "slice_sample_adaptive_offset_flag       "); 
				slice_sample_adaptive_offset_flag[0] := res[0];
				if( /*FIXME: slice_sao_interleaving_flag = 1 && */
					slice_sample_adaptive_offset_flag[0] = 1) then
					vld_u_name(  1, fifo, res, "sao_cb_enable_flag                      ");
					slice_sample_adaptive_offset_flag[1] := res[0];
					vld_u_name(  1, fifo, res, "sao_cr_enable_flag                      "); 
					slice_sample_adaptive_offset_flag[2] := res[0];
				end
			end
			vld_ue_name(    fifo, res, "aps_id                                  "); 
		end
	    se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader.se_idx_2
	 *************************************************************************/
	uint(size= 8) num_ref_idx_l0_active_minus1;
	uint(size= 8) num_ref_idx_l1_active_minus1;
	uint(size= 8) num_ref_idx_lc_active_minus1;
	
	read_SliceHeader.se_idx_2.read : action ==>
	guard
		se_idx = 2 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
   	do
	   	num_ref_idx_l0_active_minus1 := 0;
	   	num_ref_idx_l1_active_minus1 := 0;
	   	num_ref_idx_lc_active_minus1 := 0;
		if entropy_slice_flag = 0 then
			if slice_type = P_SLICE or slice_type = B_SLICE then
				vld_u_name(  1, fifo, res, "num_ref_idx_active_override_flag        ");		
	      		if res[0] = 1 then
					vld_ue_name(    fifo, res, "num_ref_idx_l0_active_minus1            ");
					num_ref_idx_l0_active_minus1 := res[0];
					if slice_type = B_SLICE then
						vld_ue_name(    fifo, res, "num_ref_idx_l1_active_minus1            ");
						num_ref_idx_l1_active_minus1 := res[0];
					end
	      		end
	        end
		    if (sps_lists_modification_present_flag[sps_id] = 1) then
		    	println("TODO ref_pic_list_modification( )");
		    	println("TODO ref_pic_list_combination( )");
		    end
		    if slice_type = B_SLICE then
				vld_u_name(  1, fifo, res, "mvd_l1_zero_flag                        ");		
			end	    
	    end
		se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader.se_idx_3
	 *************************************************************************/
	 int(size=32) slice_qp;
	uint(size= 8) MaxNumMergeCand;
	 	
	read_SliceHeader.se_idx_3 : action ==>
	guard
		se_idx = 3 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) deblocking_filter_override_flag := 0,
		uint(size= 1) slice_header_disable_deblocking_filter_flag := 0
   	do	
	if( pps_cabac_init_present_flag[pps_id] = 1  and  slice_type  !=  I_SLICE )	then
		vld_u_name(  1, fifo, res, "cabac_init_flag                         ");		
	end
	if(entropy_slice_flag = 0) then
		vld_se_name(    fifo, res, "slice_qp_delta                          ");
		slice_qp := pps_pic_init_qp_minus26[pps_id] + 26 +res[0];
		if(pps_deblocking_filter_control_present_flag[pps_id] = 1) then	
 			if(deblocking_filter_override_enabled_flag[pps_id] = 1) then
				vld_u_name(  1, fifo, res, "deblocking_filter_override_flag        ");
				deblocking_filter_override_flag := res[0];	
			end
			if(deblocking_filter_override_flag = 0) then
				vld_u_name(  1, fifo, res, "slice_header_disable_deblocking_filter_flag          ");
				if( slice_header_disable_deblocking_filter_flag = 0) then
					vld_se_name(    fifo, res, "beta_offset_div2                        ");
					vld_se_name(    fifo, res, "tc_offset_div2                          ");
				end
			end
		end	
		if( slice_type = B_SLICE ) then	
			vld_u_name(  1, fifo, res, "collocated_from_l0_flag                 ");
		end
/* 		if( slice_type != I  &&  
			((collocated_from_l0_flag  &&	num_ref_idx_l0_active_minus1 > 0)  | |
			  (!collocated_from_l0_flag  &&  num_ref_idx_l1_active_minus1 > 0) )	
			collocated_ref_idx	ue(v)
		if( ( weighted_pred_flag  &&   slice_type = = P)  | |
			 ( weighted_bipred_idc  = =  1  &&  slice_type  = =  B ) )	
			pred_weight_table( )	
*/	
	end	
	vld_ue_name(    fifo, res, "5_minus_max_num_merge_cand              ");
	MaxNumMergeCand := 5 - res[0];
 	if( sps_loop_filter_across_slice_flag[sps_id] = 1  and  (//TODO add ALF
	 	slice_sample_adaptive_offset_flag[0] = 1 
	 	or slice_sample_adaptive_offset_flag[1] = 1 
	 	or slice_sample_adaptive_offset_flag[2] = 1 
	 	or  slice_header_disable_deblocking_filter_flag = 0)) then
		vld_u_name( 1,  fifo, res, "slice_loop_filter_across_slices_enabled_flag");
 	end
 	
	   se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader.se_idx_4
	 *************************************************************************/	
	read_SliceHeader.se_idx_4 : action ==>
	guard
		se_idx = 4 and isFifoFull(fifo)
	do
	    se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader.se_idx_5
	 *************************************************************************/	
	 procedure initWpScaling()
	 begin
		foreach uint(size=8) e in 0 .. 1 do
			foreach uint(size=8) i in 0 .. MAX_NUM_REF-1 do
				foreach uint(size=8) yuv in 0 .. 2 do
					if wp[e][i][yuv][WP_PRESENT_FLAG] = 1 then
						wp[e][i][yuv][WP_I_WEIGHT] := (1 << wp[e][i][yuv][WP_LOG2_WEIGHT_DENOM]);
						wp[e][i][yuv][WP_I_OFFSET] := 0;
					end
					wp[e][i][yuv][WP_W]     := wp[e][i][yuv][WP_I_WEIGHT];
					wp[e][i][yuv][WP_O]     := wp[e][i][yuv][WP_I_OFFSET] * (1);
					wp[e][i][yuv][WP_SHIFT] := wp[e][i][yuv][WP_LOG2_WEIGHT_DENOM];
					if wp[e][i][yuv][WP_LOG2_WEIGHT_DENOM] >= 1 then
						wp[e][i][yuv][WP_ROUND] := (1 << wp[e][i][yuv][WP_LOG2_WEIGHT_DENOM]) - 1;
					else
						wp[e][i][yuv][WP_ROUND] := 0;
					end
				end
			end
		end
	end
   	read_SliceHeader.se_idx_5 : action ==>
	guard
		se_idx = 5 and isFifoFull(fifo)
	do
	    se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader.se_idx_6
	 *************************************************************************/	
	read_SliceHeader.se_idx_6 : action ==>
	guard
		se_idx = 6 and isFifoFull(fifo)
   	do	
	    se_idx := se_idx + 1;
	end
	/**************************************************************************
	 * read_SliceHeader_done
	 *************************************************************************/	
	read_SliceHeader_done : action ==>
	guard
		se_idx = 7
	do
		println("\tPOC: "+poc);
		sliceData_idx := 1;
	end 	

	/**************************************************************************
	 **************************************************************************
	 ********        Slice Data                           *********************
	 **************************************************************************
	 *************************************************************************/
		
	uint(size= 9) codIRange[1];
	uint(size=16) codIOffset[1];
	uint(size= 9) ctxTable[NB_MAX_SE][NB_MAX_NUM_CTX];
	uint(size= 8) sliceData_idx;

	/**************************************************************************
	 * read_SliceData.init
	 *************************************************************************/	
	uint(size= 8) Log2CtbSize;
	uint(size= 8) Log2MinCbSize;
	uint(size=16) PicWidthInCtbs;
	uint(size=16) PicHeightInCtbs;
	uint(size=16) PicWidthInMinCbs;
	uint(size=16) PicHeightInMinCbs;
	uint(size= 8) Log2MinTrafoSize;
	uint(size= 8) Log2MaxTrafoSize;
	uint(size= 8) Log2MinTrafoSizeC;
	uint(size=16) ColumnWidth[COLUMN_WIDTH_MAX];
	uint(size=16) RowHeight[COLUMN_WIDTH_MAX];
	uint(size=16) ColBd[COLUMN_WIDTH_MAX];
	uint(size=16) RowBd[COLUMN_WIDTH_MAX];
	uint(size=16) CtbAddrTS_tab[CTB_ADDR_TS_MAX];
	uint(size=16) TileId[CTB_ADDR_TS_MAX];
	uint(size=16) MinCbAddrZS[CTB_ADDR_TS_MAX][CTB_ADDR_TS_MAX];
	
	uint(size= 1) skip_flag[CTB_ADDR_TS_MAX][CTB_ADDR_TS_MAX];
	uint(size= 1) inter_pred_flag[CTB_ADDR_TS_MAX][CTB_ADDR_TS_MAX];
	uint(size= 1) merge_flag[CTB_ADDR_TS_MAX][CTB_ADDR_TS_MAX];
	
	uint(size= 8) num_tile_columns_minus1;
	uint(size= 8) num_tile_rows_minus1;
	uint(size= 1) uniform_spacing_flag;
	uint(size=16) column_width[COLUMN_WIDTH_MAX];
	uint(size=16) row_height[COLUMN_WIDTH_MAX];
	
	read_SliceData.init: action ==>
	guard
		sliceData_idx = 1
	var
		uint(size=16) tileX:=0,
		uint(size=16) tileY:=0,
		uint(size=16) tbX,
		uint(size=16) tbY,
		uint(size=16) tileId,
		uint(size=16) ctbAddrRS,
		uint(size=16) m
	do
		Log2MinCbSize     := sps_log2_min_coding_block_size_minus3[sps_id] + 3;
		Log2CtbSize       := Log2MinCbSize + sps_log2_diff_max_min_coding_block_size[sps_id];
		PicWidthInCtbs    := ( sps_pic_width_in_luma_samples[sps_id]  + ( 1 << Log2CtbSize )-1 ) >> Log2CtbSize;
		PicHeightInCtbs   := ( sps_pic_height_in_luma_samples[sps_id] + ( 1 << Log2CtbSize )-1 ) >> Log2CtbSize;
		PicWidthInMinCbs  := sps_pic_width_in_luma_samples[sps_id]  >> Log2MinCbSize;
		PicHeightInMinCbs := sps_pic_height_in_luma_samples[sps_id] >> Log2MinCbSize;
		Log2MinTrafoSize  := sps_log2_min_transform_block_size_minus2[sps_id] + 2;
		Log2MaxTrafoSize  := Log2MinTrafoSize + sps_log2_diff_max_min_transform_block_size[sps_id];
		Log2MinTrafoSizeC := if sps_chroma_format_idc[sps_id] = 1 or sps_chroma_format_idc[sps_id] = 2 then
								max(Log2MinTrafoSize-1, 2)
							else
								Log2MinTrafoSize
							end;
		
		skip_flag		  := [[0	: for int j in 0 .. CTB_ADDR_TS_MAX-1]	: for int i in 0 .. CTB_ADDR_TS_MAX-1];	
		inter_pred_flag   := [[0	: for int j in 0 .. CTB_ADDR_TS_MAX-1]	: for int i in 0 .. CTB_ADDR_TS_MAX-1];
		merge_flag		  := [[0	: for int j in 0 .. CTB_ADDR_TS_MAX-1]	: for int i in 0 .. CTB_ADDR_TS_MAX-1];
		
		
		num_tile_columns_minus1	:= pps_num_tile_columns_minus1[pps_id];
		num_tile_rows_minus1	:= pps_num_tile_rows_minus1[pps_id];
		uniform_spacing_flag	:= pps_uniform_spacing_flag[pps_id];
		column_width			:= [pps_column_width[pps_id][ i ] : for int i in 0 .. COLUMN_WIDTH_MAX-1];
		row_height				:= [pps_row_height[pps_id][ i ] : for int i in 0 .. COLUMN_WIDTH_MAX-1];
		if num_tile_columns_minus1 >= COLUMN_WIDTH_MAX then
			println("Error read_SliceData.init : ColumnWidth : "+num_tile_columns_minus1+" >= "+COLUMN_WIDTH_MAX);
		end
		foreach int i in 0 .. num_tile_columns_minus1 do
			if uniform_spacing_flag = 1 then
				ColumnWidth[ i ] := ((i + 1)*PicWidthInCtbs) / (num_tile_columns_minus1+1) - (i*PicWidthInCtbs) / (num_tile_columns_minus1+1);
			else
				ColumnWidth[ i ] := column_width[ i ];
			end
			//ColumnWidthInLumaSamples[ i ] := ColumnWidth[ i ] << Log2CtbSize;
		end
		if num_tile_rows_minus1 >= COLUMN_WIDTH_MAX then
			println("Error read_SliceData.init : RowHeight : "+num_tile_rows_minus1+" >= "+COLUMN_WIDTH_MAX);
		end
		foreach int i in 0 .. num_tile_rows_minus1 do
			if uniform_spacing_flag = 1 then
				RowHeight[ i ] := ((i+1)*PicHeightInCtbs) / (num_tile_rows_minus1+1) - (i*PicHeightInCtbs) / (num_tile_rows_minus1+1);
			else
				RowHeight[ i ] := row_height[ i ];
			end
		end
		ColBd[ 0 ] := 0;
		foreach int i in 0 .. num_tile_columns_minus1 do
			ColBd[ i + 1 ] := ColBd[ i ] + ColumnWidth[ i ];
		end
		RowBd[ 0 ] := 0;
		foreach int i in 0 .. num_tile_rows_minus1 do
			RowBd[ i + 1 ] := RowBd[ i ] + RowHeight[ i ];
		end
		/*********************************************************************
		 * 6.5 Conversion process for coding tree block address 
		 * in coding tree block raster order to tile scan order
		 ********************************************************************/
		if PicHeightInCtbs * PicWidthInCtbs >= CTB_ADDR_TS_MAX then
			println("Error read_SliceData.init : CtbAddrTS : "+(PicHeightInCtbs * PicWidthInCtbs)+" >= "+CTB_ADDR_TS_MAX);
		end
		foreach int ctbAddrRS_v in 0 .. PicHeightInCtbs * PicWidthInCtbs - 1 do
			tbX := ctbAddrRS_v mod PicWidthInCtbs;
			tbY := ctbAddrRS_v / PicWidthInCtbs;
			foreach int j in 0 .. num_tile_columns_minus1 do
				if tbX < ColBd[j+1] then
					tileX := j;
				end
			end
			foreach int i in 0 .. num_tile_rows_minus1 do
				if tbY < RowBd[i+1] then
					tileY := i;
				end
			end
			CtbAddrTS_tab[ ctbAddrRS_v ] := ctbAddrRS_v - tbX;
			foreach int i in 0 .. tileX-1 do
				CtbAddrTS_tab[ctbAddrRS_v] := CtbAddrTS_tab[ctbAddrRS_v] + RowHeight[ tileY ] * ColumnWidth[ i ];
			end
			CtbAddrTS_tab[ctbAddrRS_v] := CtbAddrTS_tab[ctbAddrRS_v] + ( tbY - RowBd[tileY] ) * ColumnWidth[tileY] + tbX - ColBd[tileX];
		end
		tileId := 0;
		foreach int j in 0 .. num_tile_columns_minus1 do
			foreach int i in 0 .. num_tile_rows_minus1 do
				foreach int y in RowBd[ j ] .. RowBd[ j + 1 ] do
					foreach int x in ColBd[ i ] .. ColBd[ i + 1 ] do
						TileId[ CtbAddrTS_tab[ y*PicWidthInCtbs + x ] ] := tileId;
					end
				end
				tileId := tileId + 1;
			end
		end
		
		if PicHeightInMinCbs >= CTB_ADDR_TS_MAX then
			println("Error read_SliceData.init : MinCbAddrZS y : "+PicHeightInMinCbs+" >= "+CTB_ADDR_TS_MAX);
		end
		if PicWidthInMinCbs >= CTB_ADDR_TS_MAX then
			println("Error read_SliceData.init : MinCbAddrZS x : "+PicWidthInMinCbs+" >= "+CTB_ADDR_TS_MAX);
		end
		foreach int y in 0 .. PicHeightInMinCbs-1 do
			foreach int x in 0 .. PicWidthInMinCbs-1 do
				tbX := ( x << Log2MinCbSize ) >> Log2CtbSize;
				tbY := ( y << Log2MinCbSize ) >> Log2CtbSize;
				ctbAddrRS := PicWidthInCtbs * tbY + tbX;
				MinCbAddrZS[ x ][ y ] := CtbAddrTS_tab[ctbAddrRS]  << sps_log2_diff_max_min_coding_block_size[sps_id];
				foreach int i in 0 .. Log2CtbSize - Log2MinCbSize - 1 do
					m := 1 << i;
					if (m & x) != 0 then
						MinCbAddrZS[x][y] := MinCbAddrZS[x][y] + (1<< (i<<1)); // MinCbAddrZS[x][y] += m*m 
					end
					if (m & y) != 0 then
						MinCbAddrZS[x][y] := MinCbAddrZS[x][y] + ((1<< (i<<1))<<1); // MinCbAddrZS[x][y] += 2*m*m
					end
				end
			end
		end
		//
		sliceData_idx := 2;
	end
	/**************************************************************************
	 * read_SliceData.start
	 *************************************************************************/	
	uint(size=32) CtbAddrRS;
	uint(size=32) CtbAddrTS;
	uint(size= 1) moreDataFlag;
	 int(size= 8) CuQpDelta;
	 
	read_SliceData.start : action ==>
	guard
		sliceData_idx = 2
	var
		uint(size=32) SliceCtbAddrRS = ( slice_address >> pps_SliceGranularity[pps_id] )
	do
		decodeStart(codIRange, codIOffset, fifo);
		contextInit(slice_qp, slice_type, ctxTable);
		//
		CtbAddrRS     := SliceCtbAddrRS;
		CtbAddrTS     := CtbAddrTS_tab[CtbAddrRS];
		moreDataFlag  := 1;
		CuQpDelta     := 0;	
		sliceData_idx := 3;
	end
	/**************************************************************************
	 * read_SliceData.doLoop
	 *************************************************************************/	
	uint(size= 8) xCtb;
	uint(size= 8) yCtb;
	uint(size= 8) NumPCMBlock;
	uint(size=32) CtbAddrInSlice;

	read_SliceData.doLoop : action ==>
	guard
		sliceData_idx = 3 and isFifoFull(fifo)
	var
		uint(size=32) CtbSize        = 1 << Log2CtbSize
	do
		xCtb           := InverseRasterScan( CtbAddrRS, CtbSize, CtbSize, sps_pic_width_in_luma_samples[sps_id], 0 );
		yCtb           := InverseRasterScan( CtbAddrRS, CtbSize, CtbSize, sps_pic_width_in_luma_samples[sps_id], 1 );
		NumPCMBlock    := 0;
		CtbAddrInSlice := CtbAddrRS - ( slice_address >> pps_SliceGranularity[pps_id] );
		//
				foreach int cIdx in 0 ..  2 do
			if slice_sample_adaptive_offset_flag[cIdx] = 1 then 
				sao_param( xCtb >> Log2CtbSize, yCtb >> Log2CtbSize, cIdx ,codIRange, codIOffset, ctxTable, fifo, CtbAddrInSlice, 0);
			end
		end
		sliceData_idx := 6;
		//
//		sao_cIdx       := 0;
//		sao_rx		   := xCtb;
//		sao_ry		   := yCtb;
//		sliceData_idx  := 4;
	end
	/**************************************************************************
	 * read_SliceData_gotoSaoParam
	 *************************************************************************/	
	read_SliceData_gotoSaoParam : action ==>
	guard
		sliceData_idx = 4,
		sao_cIdx     <= 2 and slice_sample_adaptive_offset_flag[sao_cIdx] = 1
	do
		sliceData_idx := 5;
	end
	read_SliceData.noGotoSaoParam_Loop : action ==>
	guard
		sliceData_idx = 4,
		sao_cIdx     <= 2 and slice_sample_adaptive_offset_flag[sao_cIdx] = 0
	do
		sao_cIdx	:= sao_cIdx + 1;
	end
	read_SliceData.noGotoSaoParam_endLoop : action ==>
	guard
		sliceData_idx = 4,
		sao_cIdx      = 3
	do
		sliceData_idx := 6;
	end
	/**************************************************************************
	 * read_SliceData_retSaoParam
	 *************************************************************************/	
	read_SliceData.retSaoParam_Loop : action ==>
	guard
		sliceData_idx = 5,
		sao_cIdx      < 2
	do
		sliceData_idx := 4;
		sao_cIdx	  := sao_cIdx + 1;
	end
	read_SliceData.retSaoParam_endLoop : action ==>
	guard
		sliceData_idx = 5,
		sao_cIdx      = 2
	do
		sliceData_idx := 6;
	end
	/**************************************************************************
	 * read_SliceData_gotoCodingTree
	 *************************************************************************/	
	read_SliceData_gotoCodingTree : action ==>
	guard
		sliceData_idx = 6
	do
		sliceData_idx				:= 7;
		ctStack_idx					:= 0;
		ctStack[0][CT_idx]			:= 1;
		ctStack[0][CT_x0]			:= xCtb;
		ctStack[0][CT_y0]			:= yCtb;
		ctStack[0][CT_log2CbSize]	:= Log2CtbSize;
		ctStack[0][CT_ctDepth]		:= 0;
	end
	/**************************************************************************
	 * read_SliceData.retCodingTree
	 *************************************************************************/	
	read_SliceData.retCodingTree : action ==>
	guard
		sliceData_idx = 7 and isFifoFull(fifo)
	var
		uint(size=32) res[1]
	do
		CtbAddrTS := CtbAddrTS + 1;
		CtbAddrTS := CtbAddrTS_tab[CtbAddrRS];		
		if( moreDataFlag = 1 and ( 
			( pps_tiles_or_entropy_coding_sync_idc[pps_id] = 1 and TileId[ CtbAddrTS ] != TileId[ CtbAddrTS - 1 ] ) or
			( pps_tiles_or_entropy_coding_sync_idc[pps_id] = 2 and CtbAddrTS mod PicWidthInCtbs = 0 ) 
			) ) then
//			rbsp_trailing_bits( )
			showBits (24, fifo, res);
			if( res[0] = 0x000002 ) then
				flushBits(24, fifo);
//			tile_idx_minus_1 u(v)
			end
	 	end
		sliceData_idx := 8;
	end
	/**************************************************************************
	 * read_SliceData.whileLoop
	 *************************************************************************/	
	read_SliceData.whileLoop: action ==>
	guard
		sliceData_idx = 8,
		moreDataFlag = 1
	do
		sliceData_idx := 3;
	end
	/**************************************************************************
	 * read_SliceData_end
	 *************************************************************************/	
	read_SliceData_end: action ==>
	guard
		sliceData_idx = 8,
		moreDataFlag = 0	
	end

	/**************************************************************************
	 **************************************************************************
	 ********        sao_param                            *********************
	 **************************************************************************
	 *************************************************************************/
	uint(size= 3) sao_cIdx;
	uint(size= 8) sao_rx;
	uint(size= 8) sao_ry;
	uint(size= 8) sao_type_idx[3][100][100];
	uint(size= 8) sao_offset[3][100][100][3];
	/**************************************************************************
	 * read_SaoParam.start
	 *************************************************************************/	
	read_SaoParam.start : action ==>
	guard
		isFifoFull(fifo)
	var
		 int(size=32) res[1],
		bool CtbInSlice,
		bool CtbInTile,
		uint(size= 1) sao_merge_left_flag := 0,
		uint(size= 1) sao_merge_up_flag   := 0
	do
		println("read_SaoParam.start "+sao_cIdx);
		if sao_rx > 0 then
			CtbInSlice := CtbAddrInSlice > 0;
			CtbInTile  := TileId[ CtbAddrTS ] = TileId[ CtbAddrTS_tab[ CtbAddrRS - 1 ] ];
			if CtbInSlice and CtbInTile then
				get_SAO_MERGE_LEFT_FLAG(codIRange, codIOffset, ctxTable, fifo, res, sao_cIdx);
				sao_merge_left_flag := res[0];
			end
		end
		if sao_ry > 0 and res[0] != 0 then
			CtbInSlice := (CtbAddrTS - CtbAddrTS_tab[CtbAddrRS - PicWidthInCtbs]) <= CtbAddrInSlice;
			CtbInTile  := TileId[ CtbAddrTS ] = TileId[ CtbAddrTS_tab[ CtbAddrRS - PicWidthInCtbs ] ];
			if CtbInSlice and CtbInTile then
				get_SAO_MERGE_UP_FLAG(codIRange, codIOffset, ctxTable, fifo, res);
				sao_merge_up_flag := res[0];
			end
		end
		if sao_merge_up_flag != 0 and  sao_merge_left_flag != 0 then
			get_SAO_TYPE_IDX(codIRange, codIOffset, ctxTable, fifo, res);
			sao_type_idx[ sao_cIdx ][ sao_rx ][ sao_ry ] := res[0];
			if sao_type_idx[ sao_cIdx ][ sao_rx ][ sao_ry ] = 5 then
				get_SAO_TYPE_IDX(codIRange, codIOffset, ctxTable, fifo, res);
				//sao_band_position[ cIdx ][ rx ][ ry ]
			end
			if sao_type_idx[ sao_cIdx ][ sao_rx ][ sao_ry ] != 0 then
				foreach int i in 0 .. 3 do
					get_SAO_OFFSET_ABS(codIRange, codIOffset, ctxTable, fifo, res);
					sao_offset[ sao_cIdx ][ sao_rx ][ sao_ry ][ i ] := res[0];
				end
			end
			if sao_type_idx[ sao_cIdx ][ sao_rx ][ sao_ry ] = 5 then
				foreach int i in 0 .. 3 do
					if sao_offset[ sao_cIdx ][ sao_rx ][ sao_ry ][ i ] != 0 then
						get_SAO_OFFSET_SIGN(codIRange, codIOffset, ctxTable, fifo, res);
						//sao_offset_sign[ cIdx ][ rx ][ ry ][ i ]
						if res[0] = 1 then
							sao_offset[ sao_cIdx ][ sao_rx ][ sao_ry ][ i ] := -sao_offset[ sao_cIdx ][ sao_rx ][ sao_ry ][ i ];
						end
					end
				end
			end
		end
	end
	/**************************************************************************
	 **************************************************************************
	 ********        Coding Tree                          *********************
	 **************************************************************************
	 *************************************************************************/
	uint(size= 8) ctStack_idx;
	uint(size= 8) ctStack[5][CT_STRUCT_SIZE];
	uint(size= 1) split_coding_unit_flag[CTB_ADDR_TS_MAX][CTB_ADDR_TS_MAX];
	uint(size= 1) IsCuQpDeltaCoded;
	
	/**************************************************************************
	 * read_CodingTree.start
	 *************************************************************************/	
	read_CodingTree.start : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 8) ct_x0		 = ctStack[ctStack_idx][CT_x0],
		uint(size= 8) ct_y0		 = ctStack[ctStack_idx][CT_y0],
		uint(size= 8) ct_log2CbSize = ctStack[ctStack_idx][CT_log2CbSize],
		uint(size= 8) Log2MinCuQpDeltaSize = Log2CtbSize - pps_diff_cu_qp_delta_depth[pps_id] - pps_SliceGranularity[pps_id]
	do
		println("read_CodingTree.start ("+ct_x0+", "+ct_y0+", "+(1<<ct_log2CbSize)+", "+ctStack[ctStack_idx][CT_ctDepth]+")");
		split_coding_unit_flag[ct_x0][ct_y0] := 0;
		if	ct_x0 + ( 1 << ct_log2CbSize ) <= sps_pic_width_in_luma_samples[sps_id] and
			ct_y0 + ( 1 << ct_log2CbSize ) <= sps_pic_height_in_luma_samples[sps_id] and
			ct_log2CbSize > Log2MinCbSize and NumPCMBlock = 0 then
			get_SPLIT_CODING_UNIT_FLAG(codIRange, codIOffset, ctxTable, fifo, res,
										0, false, 0, false, 0);
			split_coding_unit_flag[ct_x0][ct_y0] := res[0];
		end
		IsCuQpDeltaCoded := 1;

		if( (pps_diff_cu_qp_delta_depth[pps_id] > 0 ) and ct_log2CbSize >= Log2MinCuQpDeltaSize ) then
			IsCuQpDeltaCoded := 0; 
			CuQpDelta        := 0;
		end

		if split_coding_unit_flag[ct_x0][ct_y0] = 1 then
			ctStack[ctStack_idx][CT_x1]  := ct_x0 + ( ( 1 << ct_log2CbSize ) >> 1 );
			ctStack[ctStack_idx][CT_y1]  := ct_y0 + ( ( 1 << ct_log2CbSize ) >> 1 );
			ctStack[ctStack_idx][CT_idx] := 2;
		else
			ctStack[ctStack_idx][CT_idx] := 6;
		end
	end
	/**************************************************************************
	 * read_CodingTree.case1
	 *************************************************************************/	
	read_CodingTree.case1 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 2
	var
		uint(size= 8) idx =  ctStack_idx
	do
		ctStack[ctStack_idx][CT_idx]        := 3;
		ctStack_idx							:= ctStack_idx + 1;
		ctStack[ctStack_idx][CT_idx]        := 1;
		ctStack[ctStack_idx][CT_x0]         := ctStack[idx][CT_x0];
		ctStack[ctStack_idx][CT_y0]         := ctStack[idx][CT_y0];
		ctStack[ctStack_idx][CT_log2CbSize] := ctStack[idx][CT_log2CbSize] - 1;
		ctStack[ctStack_idx][CT_ctDepth]    := ctStack[idx][CT_ctDepth] + 1;
	end

	/**************************************************************************
	 * read_CodingTree.case2
	 *************************************************************************/		
	read_CodingTree.case2 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 3,
		ctStack[ctStack_idx][CT_x1] < sps_pic_width_in_luma_samples[sps_id]
	var
		uint(size= 8) idx =  ctStack_idx
	do
		ctStack[ctStack_idx][CT_idx]        := 4;
		ctStack_idx							:= ctStack_idx + 1;
		ctStack[ctStack_idx][CT_idx]        := 1;
		ctStack[ctStack_idx][CT_x0]         := ctStack[idx][CT_x1];
		ctStack[ctStack_idx][CT_y0]         := ctStack[idx][CT_y0];
		ctStack[ctStack_idx][CT_log2CbSize] := ctStack[idx][CT_log2CbSize] - 1;
		ctStack[ctStack_idx][CT_ctDepth]    := ctStack[idx][CT_ctDepth] + 1;
	end
	read_CodingTree.noCase2 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 3,
		ctStack[ctStack_idx][CT_x1] >= sps_pic_width_in_luma_samples[sps_id]
	do
		ctStack[ctStack_idx][CT_idx]        := 4;
	end
	/**************************************************************************
	 * read_CodingTree.case3
	 *************************************************************************/	
	read_CodingTree.case3 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 4,
		ctStack[ctStack_idx][CT_y1] < sps_pic_height_in_luma_samples[sps_id]
	var
		uint(size= 8) idx =  ctStack_idx
	do
		ctStack[ctStack_idx][CT_idx]        := 5;
		ctStack_idx							:= ctStack_idx + 1;
		ctStack[ctStack_idx][CT_idx]        := 1;
		ctStack[ctStack_idx][CT_x0]         := ctStack[idx][CT_x0];
		ctStack[ctStack_idx][CT_y0]         := ctStack[idx][CT_y1];
		ctStack[ctStack_idx][CT_log2CbSize] := ctStack[idx][CT_log2CbSize] - 1;
		ctStack[ctStack_idx][CT_ctDepth]    := ctStack[idx][CT_ctDepth] + 1;
	end
	read_CodingTree.noCase3 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 4,
		ctStack[ctStack_idx][CT_y1] >= sps_pic_height_in_luma_samples[sps_id]
	do
		ctStack[ctStack_idx][CT_idx]        := 5;
	end
	/**************************************************************************
	 * read_CodingTree.case4
	 *************************************************************************/	
	read_CodingTree.case4 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 5,
		ctStack[ctStack_idx][CT_y1] < sps_pic_height_in_luma_samples[sps_id]
	var
		uint(size= 8) idx =  ctStack_idx
	do
		ctStack[ctStack_idx][CT_idx]        := 8;
		ctStack_idx							:= ctStack_idx + 1;
		ctStack[ctStack_idx][CT_idx]        := 1;
		ctStack[ctStack_idx][CT_x0]         := ctStack[idx][CT_x1];
		ctStack[ctStack_idx][CT_y0]         := ctStack[idx][CT_y1];
		ctStack[ctStack_idx][CT_log2CbSize] := ctStack[idx][CT_log2CbSize] - 1;
		ctStack[ctStack_idx][CT_ctDepth]    := ctStack[idx][CT_ctDepth] + 1;
	end
	read_CodingTree.noCase4 : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 5,
		ctStack[ctStack_idx][CT_y1] >= sps_pic_height_in_luma_samples[sps_id]
	do
		ctStack[ctStack_idx][CT_idx]        := 8;
	end
	/**************************************************************************
	 * read_CodingTree_gotoCodingUnit
	 *************************************************************************/	
	read_CodingTree_gotoCodingUnit : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 6,
		NumPCMBlock = 0
	do
		ctStack[ctStack_idx][CT_idx]        := 7;
		cu_idx			:= 1;
		cu_x0			:= ctStack[ctStack_idx][CT_x0];
		cu_y0			:= ctStack[ctStack_idx][CT_y0];
		cu_log2CbSize	:= ctStack[ctStack_idx][CT_log2CbSize];
	end
	/**************************************************************************
	 * read_CodingTree_gotoPCMSample
	 *************************************************************************/	
	read_CodingTree_gotoPCMSample : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 6,
		NumPCMBlock   != 0
	do
		PCMSample_log2CbSize 		 := ctStack[ctStack_idx][CT_log2CbSize];
		ctStack[ctStack_idx][CT_idx] := 7;
	end
	/**************************************************************************
	 * read_CodingTree.endCall
	 *************************************************************************/	
	read_CodingTree.endCall : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 7 and isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 8) ct_x0			= ctStack[ctStack_idx][CT_x0],
		uint(size= 8) ct_y0			= ctStack[ctStack_idx][CT_y0],
		uint(size= 8) ct_log2CbSize = ctStack[ctStack_idx][CT_log2CbSize],
		uint(size= 8) CbSize        = 1 << ct_log2CbSize
	do
		if  ( ( (ct_x0 + CbSize ) & ((1<<pps_SliceGranularity[pps_id])-1) ) != 0 or 
				(ct_x0 + CbSize ) >=  sps_pic_width_in_luma_samples[sps_id]
			) and
			( ( (ct_y0 + CbSize ) & ((1<<pps_SliceGranularity[pps_id])-1) ) != 0 or
				(ct_y0 + CbSize ) >=  sps_pic_height_in_luma_samples[sps_id]
			) and
			NumPCMBlock = 0 then
//			end_of_slice_flag
			moreDataFlag := 1 - res[0];
		end
		ctStack[ctStack_idx][CT_idx] := 8;
	end
	/**************************************************************************
	 * read_CodingTree_end
	 *************************************************************************/
	read_CodingTree.noEnd : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 8,
		ctStack_idx != 0
	do
		ctStack_idx := ctStack_idx - 1;

	end
	read_CodingTree_end : action ==>
	guard
		ctStack[ctStack_idx][CT_idx] = 8,
		ctStack_idx = 0
	do
		println("read_CodingTree_end ");
	end

	/**************************************************************************
	 **************************************************************************
	 ********        Coding Unit                          *********************
	 **************************************************************************
	 *************************************************************************/

	uint(size= 8) cu_idx;
	uint(size= 8) cu_x0;
	uint(size= 8) cu_y0;
	uint(size= 8) cu_x1;
	uint(size= 8) cu_y1;
	uint(size= 8) cu_x2;
	uint(size= 8) cu_y2;
	uint(size= 8) cu_x3;
	uint(size= 8) cu_y3;
	uint(size= 8) cu_log2CbSize;
	uint(size= 8) predMode;
	uint(size= 8) partMode;
	uint(size= 1) IntraSplitFlag;
	uint(size= 8) MaxTrafoDepth;
	uint(size= 1) cu_transquant_bypass_flag;
	
	/**************************************************************************
	 * read_CodingUnit.start
	 *************************************************************************/
	read_CodingUnit.start : action ==>
	guard 
		cu_idx = 1 and isFifoFull(fifo)
	var
		uint(size=32) res[1]//,
//		uint(size=16) CurrCbAddrTS = MinCbAddrZS[ cu_x0 >> Log2MinCbSize ][ cu_y0 >> Log2MinCbSize ]
	do
		println("read_CodingUnit.start ("+cu_x0+", "+cu_y0+", "+cu_log2CbSize+")");
		predMode := MODE_INTRA;
		if pps_transquant_bypass_enable_flag[pps_id] != 0 then
			//cu_transquant_bypass_flag
		end
		if slice_type != I_SLICE then
			// get skip_flag
			if res[0] != 0 then
				predMode := MODE_SKIP;
			end
		end
		cu_idx := 2; 
	end
	/**************************************************************************
	 * read_CodingUnit_gotoPredictionUnit.goto1
	 *************************************************************************/
	read_CodingUnit_gotoPredictionUnit.goto1 : action ==>
	guard 
		cu_idx = 2,
		skip_flag[cu_x0][cu_y0] != 0
	do
		cu_idx			:= 8; 
		pu_idx			:= 1;
		pu_x0			:= cu_x0;
		pu_y0			:= cu_y0;
		pu_log2CbSize	:= cu_log2CbSize;
		predMode		:= MODE_SKIP;
	end
	/**************************************************************************
	 * read_CodingUnit.noGoto1
	 *************************************************************************/
	int(size= 8) prevIntraLumaPredMode[PART_nRx2N+1];
	read_CodingUnit.noGoto1 : action ==>
	guard 
		cu_idx = 2 and isFifoFull(fifo),
		skip_flag[cu_x0][cu_y0] = 0
	var
		uint(size=32) res[1],
		uint(size= 8) Log2MinIPCMCUSize = sps_log2_min_coding_block_size_minus3[sps_id] + 3,
		uint(size= 8) Log2MaxIPCMCUSize = sps_log2_min_coding_block_size_minus3[sps_id] + 3
	do
		partMode := PART_2Nx2N;
		IntraSplitFlag := 0;
		if slice_type != I_SLICE then
			get_PRED_MODE_FLAG(codIRange, codIOffset, ctxTable, fifo, res);
			predMode := res[0];
		end
		if predMode != MODE_INTRA or cu_log2CbSize = Log2MinCbSize then
			get_PART_SIZE(codIRange, codIOffset, ctxTable, fifo, res);
			partMode := res[0];
		end
		cu_x1  := cu_x0 + ( ( 1 << cu_log2CbSize ) >> 1 );
		cu_y1  := cu_y0 + ( ( 1 << cu_log2CbSize ) >> 1 );
		cu_x2  := cu_x1 - ( ( 1 << cu_log2CbSize ) >> 2 );
		cu_y2  := cu_y1 - ( ( 1 << cu_log2CbSize ) >> 2 );
		cu_x3  := cu_x1 + ( ( 1 << cu_log2CbSize ) >> 2 );
		cu_y3  := cu_y1 + ( ( 1 << cu_log2CbSize ) >> 2 );
		cu_idx := 4;
		if( predMode = MODE_INTRA ) then
 			pcm_flag := 0;
			if  partMode = PART_2Nx2N and sps_pcm_enabled_flag[sps_id] = 1 and
				pu_log2CbSize >= Log2MinIPCMCUSize and
				pu_log2CbSize <= Log2MaxIPCMCUSize then
				//pcm_flag := res[0]
			end
			if( pcm_flag = 1) then
				//num_subsequent_pcm
				// NumPCMBlock = res[0] + 1
				byte_align(fifo);
				cu_idx := 3;
			else 
				get_PREV_INTRA_LUMA_PRED(codIRange, codIOffset, ctxTable, fifo, prevIntraLumaPredMode, partMode);
				get_INTRA_CHROMA_PRED_MODE(codIRange, codIOffset, ctxTable, fifo, res, sps_chroma_pred_from_luma_enabled_flag[sps_id]);
				//intra_chroma_pred_mode[pu_x0][pu_y0] := res[0]
/*
 				SignalledAsChromaDC = ( chroma_pred_from_luma_enabled_flag ?
						intra_chroma_pred_mode[pu_x0][pu_y0] = 3 :
						intra_chroma_pred_mode[pu_x0][pu_y0] = 2 )
*/
				cu_idx := 8;
			end
		end
	end
	/**************************************************************************
	 * read_CodingUnit_gotoPCMSample
	 *************************************************************************/
	read_CodingUnit_gotoPCMSample : action ==>
	guard 
		cu_idx = 3
	do
		PCMSample_log2CbSize := cu_log2CbSize;
		cu_idx				 := 8;
	end
	/**************************************************************************
	 * read_CodingUnit_gotoPredictionUnit.goto2
	 *************************************************************************/
	read_CodingUnit_gotoPredictionUnit.goto2 : action ==>
	guard 
		cu_idx = 4 or cu_idx = 5 or
		cu_idx = 6 or cu_idx = 7
	do
		pu_idx		  := 1;
		pu_x0		  := cu_x0;
		pu_y0		  := cu_y0;
		pu_log2CbSize := cu_log2CbSize;
		if cu_idx = 4 then
			cu_idx    := 5;
//	FIXME :		if partMode = PART_2Nx2N then
			if partMode = PART_NxN then
				cu_idx := 8;
			end
		elsif cu_idx = 5 then
			cu_idx := 8;
			if partMode = PART_2NxN then
				pu_y0 := cu_y1;
			elsif partMode = PART_Nx2N then
				pu_x0 := cu_x1;
			elsif partMode = PART_2NxnU then
				pu_y0 := cu_y2;
			elsif partMode = PART_2NxnD then
				pu_y0 := cu_y3;
			elsif partMode = PART_nLx2N then
				pu_x0 := cu_x2;
			elsif partMode = PART_nRx2N then
				pu_x0 := cu_x3;
			else /* PART_NxN */
				cu_idx := 6;
				pu_x0  := cu_x1;
			end
		elsif cu_idx = 6 then
			cu_idx := 7;
			pu_y0  := cu_y1;
		else
			cu_idx := 8;
			pu_x0  := cu_x1;
			pu_y0  := cu_y1;
		end
	end
	/**************************************************************************
	 * read_CodingUnit.endFunction
	 *************************************************************************/
	read_CodingUnit.endFunction : action ==>
	guard 
		cu_idx = 8
	var
		uint(size=32) res[1] := [0]
	do
		cu_idx := 10;
		if pcm_flag = 0 then
			if( predMode != MODE_INTRA and not(partMode = PART_2Nx2N and merge_flag[cu_x0][cu_y0] = 1) ) then
				//no_residual_data_flag
			end
			if res[0] = 0 then
				MaxTrafoDepth := if predMode = MODE_INTRA then
									sps_max_transform_hierarchy_depth_intra[sps_id] + IntraSplitFlag
								else
									sps_max_transform_hierarchy_depth_inter[sps_id]
								end;
				cu_idx	:= 9;				
				//transform_tree( x0, y0, x0, y0, x0, y0, log2CbSize, log2CbSize, log2CbSize, 0, 0 )
			end
		end
	end
	/**************************************************************************
	 * read_CodingUnit_gotoTransformTree
	 *************************************************************************/
	read_CodingUnit_gotoTransformTree : action ==>
	guard 
		cu_idx = 9
	do
		cu_idx							:= 9;
		ttStack_idx						:= 0;
		ttStack[0][TT_idx]				:= 1;
		ttStack[0][TT_x0L]				:= cu_x0;
		ttStack[0][TT_y0L]				:= cu_y0;
		ttStack[0][TT_x0C]				:= cu_x0;
		ttStack[0][TT_y0C]				:= cu_y0;
		ttStack[0][TT_xBase]			:= cu_x0;
		ttStack[0][TT_yBase]			:= cu_y0;
		ttStack[0][TT_log2CbSize]		:= cu_log2CbSize;
		ttStack[0][TT_log2TrafoWidth]	:= cu_log2CbSize;
		ttStack[0][TT_log2TrafoHeight]	:= cu_log2CbSize;
		ttStack[0][TT_trafoDepth]		:= 0;
		ttStack[0][TT_blkIdx]			:= 0;
	end
	/**************************************************************************
	 * read_CodingUnit_end
	 *************************************************************************/
	read_CodingUnit_end : action ==>
	guard 
		 cu_idx = 10
	do
		println("read_CodingUnit_end ");
	end

	/**************************************************************************
	 **************************************************************************
	 ********        Prediction Unit                      *********************
	 **************************************************************************
	 *************************************************************************/

	uint(size= 8) pu_idx;
	uint(size= 8) pu_x0;
	uint(size= 8) pu_y0;
	uint(size= 8) pu_log2CbSize;
	uint(size= 1) pcm_flag;
	
	/**************************************************************************
	 * read_PredictionUnit.start
	 *************************************************************************/
	read_PredictionUnit.start : action ==>
	guard 
		isFifoFull(fifo),
		pu_idx = 1
	var
		uint(size=32) res[1]
	do
		println("read_PredictionUnit.start ("+pu_x0+", "+pu_y0+", "+pu_log2CbSize+")");
		pu_idx := 7;
		if ( skip_flag[pu_x0][pu_y0] = 1) then
			if( MaxNumMergeCand > 1 ) then
				//merge_idx[ x0 ][ y0 ]
			end
			pu_idx := 7;
		else /* MODE_INTER */
			//merge_flag[pu_x0][pu_y0] := res[0]
			if res[0] = 1 then
				if MaxNumMergeCand > 1 then
					//merge_idx[pu_x0][pu_y0] := res[0]
				end
				pu_idx := 7;
			else
				inter_pred_flag[pu_x0][pu_y0] := Pred_L0;
				if( slice_type = B_SLICE ) then
					//inter_pred_flag[pu_x0][pu_y0] := res[0];
				end
				if( inter_pred_flag[pu_x0][pu_y0] = Pred_LC ) then
					if( num_ref_idx_lc_active_minus1 > 0 ) then
						//ref_idx_lc[ x0 ][ y0 ]
					end
				else // Pred_L0 or Pred_BI
					if( num_ref_idx_l0_active_minus1 > 0 ) then
						//ref_idx_l0[ x0 ][ y0 ]
					end
				end	
				pu_idx := 3;
			end
		end
	end
	/**************************************************************************
	 * read_PredictionUnit.retMVDcoding_goto1
	 *************************************************************************/
	read_PredictionUnit.retMVDcoding_goto1 : action ==>
	guard 
		pu_idx = 4
	do
		if( inter_pred_flag[pu_x0][pu_y0] = Pred_LC ) then
			//mvp_lc_flag[ x0 ][ y0 ];
		else // Pred_L0 or Pred_BI
			//mvp_l0_flag[ x0 ][ y0 ]
		end	
		pu_idx := 7;
		if( inter_pred_flag[pu_x0][pu_y0] = Pred_BI ) then
			if( num_ref_idx_l1_active_minus1 > 0 ) then
				//ref_idx_l1[ x0 ][ y0 ]
			end
			if( /*mvd_l1_zero_flag*/ true ) then
				//mvd_l1[ x0 ][ y0 ][ 0 ] = 0
				//mvd_l1[ x0 ][ y0 ][ 1 ] = 0
				pu_idx := 6;
			else
				pu_idx := 5;
			end
		end
	end
	/**************************************************************************
	 * read_PredictionUnit_gotoMVDCoding
	 *************************************************************************/
	read_PredictionUnit_gotoMVDCoding : action ==>
	guard 
		pu_idx = 3 or pu_idx = 5
	do
		pu_idx := pu_idx + 1;
	end
	/**************************************************************************
	 * read_PredictionUnit.retMVDcoding_goto2
	 *************************************************************************/
	read_PredictionUnit.retMVDcoding_goto2 : action ==>
	guard 
		pu_idx = 6
	do
		//mvp_l1_flag[ x0 ][ y0 ]
		pu_idx := 7;
	end
	/**************************************************************************
	 * read_PredictionUnit_end
	 *************************************************************************/
	read_PredictionUnit_end : action ==>
	guard 
		pu_idx = 7
	do
		println("read_PredictionUnit_end");
	end
	
	/**************************************************************************
	 **************************************************************************
	 ********        MVD Coding                           *********************
	 **************************************************************************
	 *************************************************************************/
	uint(size= 8) mvd_x;
	uint(size= 8) mvd_y;
	read_MVDCoding.start : action ==>
	guard
		isFifoFull(fifo)
	var
		uint(size=32) res[1],
		uint(size= 1) abs_mvd_greater0_flag_0,
		uint(size= 1) abs_mvd_greater0_flag_1,
		uint(size= 1) abs_mvd_greater1_flag_0,
		uint(size= 1) abs_mvd_greater1_flag_1,
		 int(size=32) abs_mvd_minus2_0 := 0,
		uint(size= 1) mvd_sign_flag_0  := 0,
		 int(size=32) abs_mvd_minus2_1 := 0,
		uint(size= 1) mvd_sign_flag_1  := 0
	do
		println("read_MVDCoding");
		abs_mvd_greater0_flag_0 := res[0];
		abs_mvd_greater0_flag_1 := res[0];
		if abs_mvd_greater0_flag_0 = 1 then
			abs_mvd_greater1_flag_0 := res[0];
		end
		if abs_mvd_greater0_flag_1 = 1 then
			abs_mvd_greater1_flag_1 := res[0];
		end
		if abs_mvd_greater0_flag_0 = 1 then
			abs_mvd_minus2_0 := -1;
			if abs_mvd_greater1_flag_0 = 1 then
				abs_mvd_minus2_0 := res[0];
			end
			mvd_sign_flag_0 := res[0];
		end
		if abs_mvd_greater0_flag_1 = 1 then
			if abs_mvd_greater1_flag_1 = 1 then
				abs_mvd_minus2_1 := res[0];
			end
			mvd_sign_flag_1 := res[0];
		end
		mvd_x := abs_mvd_greater0_flag_0 * ( abs_mvd_minus2_0 + 2 ) * ( 1 - (mvd_sign_flag_0 << 1) );
		mvd_y := abs_mvd_greater0_flag_1 * ( abs_mvd_minus2_1 + 2 ) * ( 1 - (mvd_sign_flag_1 << 1) );
	end

	/**************************************************************************
	 **************************************************************************
	 ********        PCM Sample                           *********************
	 **************************************************************************
	 *************************************************************************/

	uint(size= 8) PCMSample_log2CbSize;
	read_PCMSample.start : action ==>
	guard
		isFifoFull(fifo)
	var
		uint(size=32) res[1]		
	do
		println("read_PCMSample");
		foreach int i  in 0 .. 1 << ( PCMSample_log2CbSize << 1 ) do
			vld_u_name(  1, fifo, res, "pcm_sample_luma[i]                      ");
			//pcm_sample_luma[ i ];
		end
		foreach int i  in 0 .. 1 << ( PCMSample_log2CbSize << 1 ) do
			vld_u_name(  1, fifo, res, "pcm_sample_chroma[i]                    ");
			//pcm_sample_chroma[ i ]
		end
		NumPCMBlock := NumPCMBlock - 1;
	end
	read_PCMSample2.start : action ==>		
	var
		uint(size=32) res[1]		
	do
		println("read_PCMSample2");
		foreach int i  in 0 .. 1 << ( PCMSample_log2CbSize << 1 ) do
			vld_u_name(  1, fifo, res, "pcm_sample_luma[i]                      ");
			//pcm_sample_luma[ i ];
		end
		foreach int i  in 0 .. 1 << ( PCMSample_log2CbSize << 1 ) do
			vld_u_name(  1, fifo, res, "pcm_sample_chroma[i]                    ");
			//pcm_sample_chroma[ i ]
		end
		NumPCMBlock := NumPCMBlock - 1;
	end

	/**************************************************************************
	 **************************************************************************
	 ********        Transform Tree                       *********************
	 **************************************************************************
	 *************************************************************************/

	uint(size= 8) ttStack_idx;
	uint(size= 8) ttStack[10][TT_STRUCT_SIZE];
	uint(size= 1) split_transform_flag[256][256][256];
	uint(size= 1) cbf_cb[256][256][256];
	uint(size= 1) cbf_cr[256][256][256];
	uint(size= 1) cbf_luma[256][256][256];
		
	function getInterTbSplitDirectionL(uint(size= 8) log2TrafoSize) --> uint(size= 3) :
		if( nsrqt_enabled_flag[sps_id] = 1 
			and ( 
					( log2TrafoSize = Log2MaxTrafoSize or ( log2TrafoSize < Log2MaxTrafoSize and ttStack[ttStack_idx][TT_trafoDepth] = 0 ) )
				and log2TrafoSize > ( Log2MinTrafoSize + 1 )
				and ( partMode = PART_2NxN or partMode = PART_2NxnU or partMode = PART_2NxnD )
				)
			or ( log2TrafoSize = ( Log2MinTrafoSize + 1 )
				and ttStack[ttStack_idx][TT_log2TrafoWidth] < ttStack[ttStack_idx][TT_log2TrafoHeight] )
			) then
			0
		elsif( nsrqt_enabled_flag[sps_id] = 1 
			and (
					( log2TrafoSize = Log2MaxTrafoSize or ( log2TrafoSize < Log2MaxTrafoSize and ttStack[ttStack_idx][TT_trafoDepth] =  0 ) )
				and log2TrafoSize > ( Log2MinTrafoSize + 1 )
				and ( partMode = PART_Nx2N or partMode = PART_nLx2N or partMode = PART_nRx2N ) 
				)
			or  ( log2TrafoSize = ( Log2MinTrafoSize + 1 )
				and ttStack[ttStack_idx][TT_log2TrafoWidth] > ttStack[ttStack_idx][TT_log2TrafoHeight] )
			) then
			1
		else
			2
		end
	end	
	function getInterTbSplitDirectionC(uint(size= 8) log2TrafoSize) --> uint(size= 3) :
		if ( ttStack[ttStack_idx][TT_log2TrafoWidth] + ttStack[ttStack_idx][TT_log2TrafoHeight] ) >> 1 = 4 and
			 ttStack[ttStack_idx][TT_log2TrafoWidth] > ttStack[ttStack_idx][TT_log2TrafoHeight] then
			1
		elsif ( ttStack[ttStack_idx][TT_log2TrafoWidth]  + ttStack[ttStack_idx][TT_log2TrafoHeight] ) >> 1 = 4 and
				 ttStack[ttStack_idx][TT_log2TrafoHeight] > ttStack[ttStack_idx][TT_log2TrafoWidth] then
			0
		elsif ( ttStack[ttStack_idx][TT_log2TrafoWidth]  + ttStack[ttStack_idx][TT_log2TrafoHeight] ) >> 1 = 4 and
				 ttStack[ttStack_idx][TT_log2TrafoHeight] = ttStack[ttStack_idx][TT_log2TrafoWidth] then
			2
		else
			getInterTbSplitDirectionL(log2TrafoSize)
		end
	end
	
	/**************************************************************************
	 * read_TransformTree.start
	 *************************************************************************/
	read_TransformTree.start : action ==>
	guard 
		isFifoFull(fifo),
		ttStack[ttStack_idx][TT_idx] = 1
	var
		uint(size= 8) x0L				= ttStack[ttStack_idx][TT_x0L],
		uint(size= 8) y0L				= ttStack[ttStack_idx][TT_y0L],
		uint(size= 8) x0C				= ttStack[ttStack_idx][TT_x0C],
		uint(size= 8) y0C				= ttStack[ttStack_idx][TT_y0C],
		uint(size= 8) log2TrafoWidth	= ttStack[ttStack_idx][TT_log2TrafoWidth],
		uint(size= 8) log2TrafoHeight	= ttStack[ttStack_idx][TT_log2TrafoHeight],
		uint(size= 8) trafoDepth		= ttStack[ttStack_idx][TT_trafoDepth],
		uint(size= 8) tmpTrafoWidth		= (1<<log2TrafoWidth),
		uint(size= 8) tmpTrafoHeight	= (1<<log2TrafoHeight),
		uint(size=32) res[1] := [0],
		uint(size= 1) IntraSplitFlag   = if predMode = MODE_INTRA and partMode = PART_NxN then 1 else 0 end,
		uint(size= 1) InterSplitFlag   = if sps_max_transform_hierarchy_depth_inter[sps_id] = 0 and predMode = MODE_INTER and partMode = PART_2Nx2N and trafoDepth = 0 then 1 else 0 end,
		uint(size= 8) log2TrafoSize    = ( log2TrafoWidth + log2TrafoHeight ) >> 1,
		uint(size= 8) xBase:=0,
		uint(size= 8) yBase:=0,
		uint(size=3)  interTbSplitDirectionL,
		uint(size=3)  interTbSplitDirectionC
	do	
		println("read_TransformTree.start "+x0L+" "+y0L+" "+x0C+" "+y0C+" "+
			//ttStack[ttStack_idx][TT_xBase]+" "+
			//ttStack[ttStack_idx][TT_yBase]+" "+
			//ttStack[ttStack_idx][TT_log2CbSize]+" "+
			tmpTrafoWidth+" "+tmpTrafoHeight+" "+trafoDepth+" "+
			ttStack[ttStack_idx][TT_blkIdx]
		);
		ttStack[ttStack_idx][TT_idx] := 7;
		split_transform_flag[ x0L ][ y0L ][ trafoDepth ] := 0;
		if( log2TrafoSize <= Log2MaxTrafoSize and log2TrafoSize > Log2MinTrafoSize and
			trafoDepth < MaxTrafoDepth and not(IntraSplitFlag = 1 and trafoDepth = 0) ) then
			get_SPLIT_TRANSFORM_FLAG(codIRange, codIOffset, ctxTable, fifo, res, 1 /*ct_cbDepth + trafoDepth*/ );
			split_transform_flag[ x0L ][ y0L ][ trafoDepth ] := res[0];
		elsif log2TrafoSize > Log2MaxTrafoSize or (IntraSplitFlag = 1 and trafoDepth = 0) or InterSplitFlag = 1 then
			split_transform_flag[ x0L ][ y0L ][ trafoDepth ] := 1;					
		end
		if( trafoDepth = 0) then
				get_CBF_CB_CR(codIRange, codIOffset, ctxTable, fifo, res, trafoDepth);
				cbf_cb[ x0C ][ y0C ][ trafoDepth ] := res[0];
				get_CBF_CB_CR(codIRange, codIOffset, ctxTable, fifo, res, trafoDepth);
				cbf_cr[ x0C ][ y0C ][ trafoDepth ] := res[0];
		end
		if(not (trafoDepth = 0) && log2TrafoSize > 2 ) then
			if(cbf_cb[ xBase ][ yBase ][ trafoDepth - 1] = 1 ) then
				get_CBF_CB_CR(codIRange, codIOffset, ctxTable, fifo, res, trafoDepth);
				cbf_cb[ x0C ][ y0C ][ trafoDepth ] := res[0];
			end
			if(cbf_cr[ xBase ][ yBase ][ trafoDepth - 1] = 1) then
				get_CBF_CB_CR(codIRange, codIOffset, ctxTable, fifo, res, trafoDepth);
				cbf_cr[ x0C ][ y0C ][ trafoDepth ] := res[0];
			end
		end
		
		if split_transform_flag[ x0L ][ y0L ][ trafoDepth ] = 1 then
			interTbSplitDirectionL := getInterTbSplitDirectionL(log2TrafoSize);
			if interTbSplitDirectionL = 2 then
				ttStack[ttStack_idx][TT_x1L] := x0L + ( ( 1 << log2TrafoWidth ) >> 1 );
				ttStack[ttStack_idx][TT_y1L] := y0L;
				ttStack[ttStack_idx][TT_x2L] := x0L;
				ttStack[ttStack_idx][TT_y2L] := y0L + ( ( 1 << log2TrafoHeight ) >> 1 );
				ttStack[ttStack_idx][TT_x3L] := ttStack[ttStack_idx][TT_x1L];
				ttStack[ttStack_idx][TT_y3L] := ttStack[ttStack_idx][TT_y2L];
			else
				ttStack[ttStack_idx][TT_x1L] := x0L + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionL;
				ttStack[ttStack_idx][TT_y1L] := y0L + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionL );
				ttStack[ttStack_idx][TT_x2L] := ttStack[ttStack_idx][TT_x1L] + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionL;
				ttStack[ttStack_idx][TT_y2L] := ttStack[ttStack_idx][TT_y1L] + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionL );
				ttStack[ttStack_idx][TT_x3L] := ttStack[ttStack_idx][TT_x2L] + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionL;
				ttStack[ttStack_idx][TT_y3L] := ttStack[ttStack_idx][TT_y2L] + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionL );
			end
			interTbSplitDirectionC := getInterTbSplitDirectionC(log2TrafoSize);
			if interTbSplitDirectionC = 2 and log2TrafoSize > 3 then
				ttStack[ttStack_idx][TT_x1C] := ttStack[ttStack_idx][TT_x0C] + ( ( 1 << log2TrafoWidth ) >> 1 );
				ttStack[ttStack_idx][TT_y1C] := ttStack[ttStack_idx][TT_y0C];
				ttStack[ttStack_idx][TT_x2C] := ttStack[ttStack_idx][TT_x0C];
				ttStack[ttStack_idx][TT_y2C] := ttStack[ttStack_idx][TT_y0C] + ( ( 1 << log2TrafoHeight ) >> 1 );
				ttStack[ttStack_idx][TT_x3C] := ttStack[ttStack_idx][TT_x1C];
				ttStack[ttStack_idx][TT_y3C] := ttStack[ttStack_idx][TT_y2C];
			elsif log2TrafoSize > 3 then
				ttStack[ttStack_idx][TT_x1C] := ttStack[ttStack_idx][TT_x0C] + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionC;
				ttStack[ttStack_idx][TT_y1C] := ttStack[ttStack_idx][TT_y0C] + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionC );
				ttStack[ttStack_idx][TT_x2C] := ttStack[ttStack_idx][TT_x1C] + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionC;
				ttStack[ttStack_idx][TT_y2C] := ttStack[ttStack_idx][TT_y1C] + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionC );
				ttStack[ttStack_idx][TT_x3C] := ttStack[ttStack_idx][TT_x2C] + ( ( 1 << log2TrafoWidth ) >> 2 ) * interTbSplitDirectionC;
				ttStack[ttStack_idx][TT_y3C] := ttStack[ttStack_idx][TT_y2C] + ( ( 1 << log2TrafoHeight) >> 2 ) * ( 1 - interTbSplitDirectionC );
			else
				ttStack[ttStack_idx][TT_x1C] := ttStack[ttStack_idx][TT_x0C];
				ttStack[ttStack_idx][TT_y1C] := ttStack[ttStack_idx][TT_y0C];
				ttStack[ttStack_idx][TT_x2C] := ttStack[ttStack_idx][TT_x0C];
				ttStack[ttStack_idx][TT_y2C] := ttStack[ttStack_idx][TT_y0C];
				ttStack[ttStack_idx][TT_x3C] := ttStack[ttStack_idx][TT_x0C];
				ttStack[ttStack_idx][TT_y3C] := ttStack[ttStack_idx][TT_y0C];
			end
			if interTbSplitDirectionL != 2 then
				ttStack[ttStack_idx][TT_log2TrafoWidth]  := log2TrafoWidth  - (interTbSplitDirectionL << 1) + 1;
				ttStack[ttStack_idx][TT_log2TrafoHeight] := log2TrafoHeight + (interTbSplitDirectionL << 1) - 1;
			end
			ttStack[ttStack_idx][TT_idx] := 2;
		else
			if predMode = MODE_INTRA or trafoDepth != 0 or
				cbf_cb[ x0C ][ y0C ][ trafoDepth ] = 1 or cbf_cr[ x0C ][ y0C ][ trafoDepth ] = 1 then
				get_CBF_LUMA(codIRange, codIOffset, ctxTable, fifo, res, trafoDepth, log2TrafoSize, Log2MaxTrafoSize);
				cbf_luma[ x0L ][ y0L ][ trafoDepth ] := res[0];
			end
			ttStack[ttStack_idx][TT_idx] := 6;
			//transform_unit (x0L, y0L, x0C, y0C, log2TrafoWidth, log2TrafoHeight, trafoDepth, blkIdx)
		end
	end
	/**************************************************************************
	 * read_TransformTree.gotoTransformTree
	 *************************************************************************/
	read_TransformTree.gotoTransformTree : action ==>
	guard
		ttStack[ttStack_idx][TT_idx] = 2 or ttStack[ttStack_idx][TT_idx] = 3 or
		ttStack[ttStack_idx][TT_idx] = 4 or ttStack[ttStack_idx][TT_idx] = 5
	var
		uint(size= 8) idx = ttStack_idx
	do
		if ttStack[ttStack_idx][TT_idx] = 2 then
			ttStack[ttStack_idx][TT_idx]				:= 3;
			ttStack_idx 								:= ttStack_idx + 1;
			ttStack[ttStack_idx][TT_idx]				:= 1;
			ttStack[ttStack_idx][TT_x0L]				:= ttStack[idx][TT_x0L];
			ttStack[ttStack_idx][TT_y0L]				:= ttStack[idx][TT_y0L];
			ttStack[ttStack_idx][TT_x0C]				:= ttStack[idx][TT_x0C];
			ttStack[ttStack_idx][TT_y0C]				:= ttStack[idx][TT_y0C];
			ttStack[ttStack_idx][TT_xBase]				:= ttStack[idx][TT_x0L];
			ttStack[ttStack_idx][TT_yBase]				:= ttStack[idx][TT_y0L];
			ttStack[ttStack_idx][TT_log2CbSize]			:= ttStack[idx][TT_log2CbSize];
			ttStack[ttStack_idx][TT_log2TrafoWidth]		:= ttStack[idx][TT_log2TrafoWidth]  - 1;
			ttStack[ttStack_idx][TT_log2TrafoHeight]	:= ttStack[idx][TT_log2TrafoHeight] - 1;
			ttStack[ttStack_idx][TT_trafoDepth]			:= ttStack[idx][TT_trafoDepth] + 1;
			ttStack[ttStack_idx][TT_blkIdx]				:= 0;
		elsif ttStack[ttStack_idx][TT_idx] = 3 then
			ttStack[ttStack_idx][TT_idx]				:= 4;
			ttStack_idx 								:= ttStack_idx + 1;
			ttStack[ttStack_idx][TT_idx]				:= 1;
			ttStack[ttStack_idx][TT_x0L]				:= ttStack[idx][TT_x1L];
			ttStack[ttStack_idx][TT_y0L]				:= ttStack[idx][TT_y1L];
			ttStack[ttStack_idx][TT_x0C]				:= ttStack[idx][TT_x1C];
			ttStack[ttStack_idx][TT_y0C]				:= ttStack[idx][TT_y1C];
			ttStack[ttStack_idx][TT_blkIdx]				:= 1;
		elsif ttStack[ttStack_idx][TT_idx] = 4 then
			ttStack[ttStack_idx][TT_idx]				:= 5;
			ttStack_idx 								:= ttStack_idx + 1;
			ttStack[ttStack_idx][TT_idx]				:= 1;
			ttStack[ttStack_idx][TT_x0L]				:= ttStack[idx][TT_x2L];
			ttStack[ttStack_idx][TT_y0L]				:= ttStack[idx][TT_y2L];
			ttStack[ttStack_idx][TT_x0C]				:= ttStack[idx][TT_x2C];
			ttStack[ttStack_idx][TT_y0C]				:= ttStack[idx][TT_y2C];
			ttStack[ttStack_idx][TT_blkIdx]				:= 2;
		else
			ttStack[ttStack_idx][TT_idx]				:= 7;
			ttStack_idx 								:= ttStack_idx + 1;
			ttStack[ttStack_idx][TT_idx]				:= 1;
			ttStack[ttStack_idx][TT_x0L]				:= ttStack[idx][TT_x3L];
			ttStack[ttStack_idx][TT_y0L]				:= ttStack[idx][TT_y3L];
			ttStack[ttStack_idx][TT_x0C]				:= ttStack[idx][TT_x3C];
			ttStack[ttStack_idx][TT_y0C]				:= ttStack[idx][TT_y3C];
			ttStack[ttStack_idx][TT_blkIdx]				:= 3;
		end
	end
	/**************************************************************************
	 * read_TransformTree_gotoTransformUnit
	 *************************************************************************/
	read_TransformTree_gotoTransformUnit : action ==>
	guard
		ttStack[ttStack_idx][TT_idx] = 6
	do
		ttStack[ttStack_idx][TT_idx]	:= 7;
		tu_idx							:= 1;
		tu_x0L							:= ttStack[ttStack_idx][TT_x0L];
		tu_y0L							:= ttStack[ttStack_idx][TT_y0L];
		tu_x0C							:= ttStack[ttStack_idx][TT_x0C];
		tu_y0C							:= ttStack[ttStack_idx][TT_y0C];
		tu_log2TrafoWidth				:= ttStack[ttStack_idx][TT_log2TrafoWidth];
		tu_log2TrafoHeight				:= ttStack[ttStack_idx][TT_log2TrafoHeight];
		tu_trafoDepth					:= ttStack[ttStack_idx][TT_trafoDepth];
		tu_blkIdx						:= ttStack[ttStack_idx][TT_blkIdx];
	end
	/**************************************************************************
	 * read_TransformTree_end
	 *************************************************************************/
	read_TransformTree_end : action ==>
	guard
		ttStack[ttStack_idx][TT_idx] = 7 and ttStack_idx = 0 
	do
		println("read_TransformTree_end ");
	end
	read_TransformTree.endCall : action ==>
	guard
		ttStack[ttStack_idx][TT_idx] = 7 and ttStack_idx != 0 
	do
		ttStack_idx := ttStack_idx - 1;
	end

	/**************************************************************************
	 **************************************************************************
	 ********        Transform Unit                       *********************
	 **************************************************************************
	 *************************************************************************/

	uint(size= 8) tu_idx;
	uint(size= 8) tu_x0L;
	uint(size= 8) tu_y0L;
	uint(size= 8) tu_x0C;
	uint(size= 8) tu_y0C;
	uint(size= 8) tu_log2TrafoWidth;
	uint(size= 8) tu_log2TrafoHeight;
	uint(size= 8) tu_trafoDepth;
	uint(size= 8) tu_blkIdx;
	uint(size= 8) tu_log2TrafoSize;
	uint(size= 2) tu_scanIdx;
	uint(size= 2) tu_scanIdxC;
	
	/**************************************************************************
	 * read_TransformUnit.start
	 *************************************************************************/
	read_TransformUnit.start : action ==>
	guard 
		isFifoFull(fifo),
		tu_idx = 1
	var
		uint(size= 8) tmpTrafoWidth		= (1<<tu_log2TrafoWidth),
		uint(size= 8) tmpTrafoHeight	= (1<<tu_log2TrafoHeight),
		uint(size=32) res[1]
	do
		println("read_TransformUnit.start ("+tu_x0L+", "+tu_y0L+", "+tu_x0C+", "+tu_y0C+", "+
				tmpTrafoWidth+", "+tmpTrafoHeight+", "+tu_trafoDepth+", "+tu_blkIdx+")"
		);
		tu_idx := 7;
		if  cbf_luma[ tu_x0L ][ tu_y0L ][ tu_trafoDepth ] = 1 or
			cbf_cb[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 or
			cbf_cr[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 then
			if pps_diff_cu_qp_delta_depth[pps_id] > 0  and IsCuQpDeltaCoded = 0 then
				//cu_qp_delta
				IsCuQpDeltaCoded := 1;
			end
			tu_log2TrafoSize  := ( tu_log2TrafoWidth + tu_log2TrafoHeight ) >> 1;
			if predMode = MODE_INTRA then
				tu_scanIdx  := ScanType[ tu_log2TrafoSize - 2 ][ prevIntraLumaPredMode[tu_blkIdx]];
				tu_scanIdxC := ScanType[ tu_log2TrafoSize - 2 ][ 0/*IntraPredModeC*/ ];
			else
				tu_scanIdx  := 0;
				tu_scanIdxC := 0;
			end
			tu_idx := 3;
			if cbf_luma[ tu_x0L ][ tu_y0L ][ tu_trafoDepth ] = 1 then
				tu_idx 				:= 2;
				rc_idx 				:= 1;
				rc_x0 				:= tu_x0L;
				rc_y0 				:= tu_y0L;
				rc_log2TrafoWidth	:= tu_log2TrafoWidth;
				rc_log2TrafoHeight	:= tu_log2TrafoHeight;
				rc_scanIdx			:= tu_scanIdx;
				rc_cIdx				:= 0;
				rc_TType			:= TEXT_LUMA;
			end
		end
	end
	/**************************************************************************
	 * read_TransformUnit.retLuma
	 *************************************************************************/
	read_TransformUnit.retLuma : action ==>
	guard 
		tu_idx = 3
	do
		tu_idx 				:= 7;
		rc_idx 				:= 1;
		rc_x0 				:= tu_x0C;
		rc_y0 				:= tu_y0C;
		rc_scanIdx			:= tu_scanIdxC;
		rc_cIdx				:= 1;
		rc_TType			:= TEXT_CHROMA_U;						
		if tu_log2TrafoSize > 2 then
			tu_idx := 5;
			if cbf_cb[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 then
				tu_idx				:= 4;
				rc_log2TrafoWidth	:= tu_log2TrafoWidth  - 1;
				rc_log2TrafoHeight	:= tu_log2TrafoHeight - 1;
			end
		elsif tu_blkIdx = 3 then
			tu_idx := 5;
			if cbf_cb[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 then
				tu_idx				:= 4;
				rc_log2TrafoWidth	:= tu_log2TrafoWidth;
				rc_log2TrafoHeight	:= tu_log2TrafoHeight;
			end
		end
	end
	/**************************************************************************
	 * read_TransformUnit.retCb
	 *************************************************************************/
	read_TransformUnit.retCb : action ==>
	guard 
		tu_idx = 5
	do	
		tu_idx	 := 7;
		rc_idx 	 := 1;
		rc_cIdx	 := 2;
		rc_TType := TEXT_CHROMA_V;						
		if tu_log2TrafoSize > 2 then
			if cbf_cr[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 then
				tu_idx := 6;
			end
		elsif tu_blkIdx = 3 then
			if cbf_cr[ tu_x0C ][ tu_y0C ][ tu_trafoDepth ] = 1 then
				tu_idx := 6;
			end
		end
	end
	/**************************************************************************
	 * read_TransformUnit_gotoResidualCoding
	 *************************************************************************/
	read_TransformUnit_gotoResidualCoding : action ==>
	guard 
		tu_idx = 2 or tu_idx = 4 or tu_idx = 6
	do	
		tu_idx := tu_idx + 1;
	end
	/**************************************************************************
	 * read_TransformUnit_end
	 *************************************************************************/
	read_TransformUnit_end : action ==>
	guard 
		tu_idx = 7
	do
		println("read_TransformUnit_end ");
	end

	/**************************************************************************
	 **************************************************************************
	 ********        Residual Coding                      *********************
	 **************************************************************************
	 *************************************************************************/
	uint(size= 8) rc_idx;
	uint(size= 8) rc_x0;
	uint(size= 8) rc_y0;
	uint(size= 8) rc_log2TrafoWidth;
	uint(size= 8) rc_log2TrafoHeight;
	uint(size= 8) rc_scanIdx;
	uint(size= 8) rc_cIdx;
	uint(size= 4) rc_TType;
	//
	uint(size= 8) ScanOrder[3][BLW_WIDTH_MAX*BLW_HEIGHT_MAX][2];
	uint(size= 1) significant_coeff_flag[BLW_WIDTH_MAX][BLW_HEIGHT_MAX];
	uint(size= 1) significant_coeff_group_flag[BLW_WIDTH_MAX][BLW_HEIGHT_MAX];
	
	/**************************************************************************
	 * read_ResidualCoding.start
	 *************************************************************************/
	uint(size= 8) rc_numLastSubset;
	 int(size= 8) rc_i;
	uint(size= 8) rc_numCoeff;

	read_ResidualCoding.start : action ==>
	guard 
		rc_idx = 1 and isFifoFull(fifo)
	var
		uint(size= 8) tmpTrafoWidth		= (1<<rc_log2TrafoWidth),
		uint(size= 8) tmpTrafoHeight	= (1<<rc_log2TrafoHeight),
		 int(size=32) res[1],
		uint(size= 8) LastSignificantCoeffX,
		uint(size= 8) LastSignificantCoeffY,
		uint(size= 8) xC := 0,
		uint(size= 8) yC := 0
	do	
		if rc_TType = TEXT_LUMA then
			println("read_ResidualCoding.start cbY ("+rc_x0+", "+rc_y0+", "+tmpTrafoWidth+", "+tmpTrafoHeight+", "+rc_scanIdx+", "+rc_cIdx+")");
		elsif rc_TType = TEXT_CHROMA_U then
			println("read_ResidualCoding.start cbU ("+rc_x0+", "+rc_y0+", "+tmpTrafoWidth+", "+tmpTrafoHeight+", "+rc_scanIdx+", "+rc_cIdx+")");
		else
			println("read_ResidualCoding.start cbV ("+rc_x0+", "+rc_y0+", "+tmpTrafoWidth+", "+tmpTrafoHeight+", "+rc_scanIdx+", "+rc_cIdx+")");
		end
		if rc_log2TrafoWidth = 1 or rc_log2TrafoHeight = 1 then
			rc_log2TrafoWidth  := 2;
			rc_log2TrafoHeight := 2;
		end
		if sps_transform_skip_enabled_flag[sps_id] = 1 and cu_transquant_bypass_flag = 0 and
			predMode = MODE_INTRA and
			rc_log2TrafoWidth = 2 and rc_log2TrafoHeight = 2 then
			//transform_skip_flag[ rc_x0 ][ rc_y0 ][ rc_cIdx ] := res[0];
		end
		get_LAST_SIGNIFICANT_COEFF_X_PREFIX(codIRange, codIOffset, ctxTable, fifo, res, rc_log2TrafoWidth, rc_cIdx);
		LastSignificantCoeffX := res[0];
		get_LAST_SIGNIFICANT_COEFF_Y_PREFIX(codIRange, codIOffset, ctxTable, fifo, res, rc_log2TrafoHeight, rc_cIdx);
		LastSignificantCoeffY := res[0];
		if LastSignificantCoeffX > 3 then
			get_LAST_SIGNIFICANT_COEFF_XY_SUFFIX(codIRange, codIOffset, ctxTable, fifo, res, LastSignificantCoeffX);
			LastSignificantCoeffX := (1 << ((LastSignificantCoeffX >> 1) - 1)) *
									 (2  +  (LastSignificantCoeffX & 1 )) + res[0];			
		end
		if LastSignificantCoeffY > 3 then 
			get_LAST_SIGNIFICANT_COEFF_XY_SUFFIX(codIRange, codIOffset, ctxTable, fifo, res, LastSignificantCoeffY);
			LastSignificantCoeffY := (1 << ((LastSignificantCoeffY >> 1) - 1)) *
									 (2  +  (LastSignificantCoeffY & 1 )) + res[0];
		end
		if rc_scanIdx = 2 then
			res[0] 				  := LastSignificantCoeffX;
			LastSignificantCoeffX := LastSignificantCoeffY;
			LastSignificantCoeffY := res[0];
		end
		significant_coeff_flag[LastSignificantCoeffX][LastSignificantCoeffY] := 1;
		
		InitScanningArray(rc_log2TrafoWidth, rc_log2TrafoHeight, ScanOrder);
		rc_numCoeff := 0;
		println("InitScanningArray("+(1<<rc_log2TrafoWidth)+", "+(1<<rc_log2TrafoHeight)+") : rc_scanIdx = "+rc_scanIdx);
		
		while  not( xC = LastSignificantCoeffX and yC = LastSignificantCoeffY) do
			xC := ScanOrder[ rc_scanIdx ][ rc_numCoeff ][ 0 ]; 
			yC := ScanOrder[ rc_scanIdx ][ rc_numCoeff ][ 1 ]; 
			println(xC+" = "+LastSignificantCoeffX+" and "+yC+" = "+LastSignificantCoeffY+", rc_numCoeff = "+rc_numCoeff);
			rc_numCoeff := rc_numCoeff + 1;
		end 
		println("LastSignificantCoeffX = "+LastSignificantCoeffX+", LastSignificantCoeffY = "+LastSignificantCoeffY+", rc_numCoeff = "+(rc_numCoeff-1));
		rc_numLastSubset := (rc_numCoeff - 1) >> 4;
		rc_i			 := rc_numLastSubset;
		rc_idx           := 2;
 	end
	/**************************************************************************
	 * read_ResidualCoding.for_numLastSubset.start
	 *************************************************************************/
	uint(size= 8) rc_numNonZero;
	uint(size=32) rc_offset;
	 		
	read_ResidualCoding.for_numLastSubset.start : action ==>
	guard 
		rc_idx = 2 and isFifoFull(fifo),
		rc_i >= 0
	var
		 int(size=32) res[1],
		int            n,
		uint(size= 8) xC,
		uint(size= 8) yC,
		uint(size= 8) xCG,
		uint(size= 8) yCG,
		uint(size= 1) implicitNonZeroCoeff,
		 int(size= 4) patternSigCtx
	do	
   		rc_offset := rc_i << 4;
   		if rc_scanIdx = 1 and rc_log2TrafoWidth = 3 and rc_log2TrafoHeight = 3 then 
   			xCG := 0;
   			yCG := rc_i;
   		elsif rc_scanIdx = 2 and rc_log2TrafoWidth = 3 and rc_log2TrafoHeight = 3 then 
   			xCG := rc_i;
   			yCG := 0;
   		else 
    		xCG := ScanOrder[ rc_scanIdx ][ rc_offset ][ 0 ] >> 2;
       		yCG := ScanOrder[ rc_scanIdx ][ rc_offset ][ 1 ] >> 2; 
		end
        implicitNonZeroCoeff := 0; 
        significant_coeff_group_flag[ xCG ][ yCG ] := 1; 
        if rc_i < rc_numLastSubset and rc_i > 0 then 
          	//significant_coeff_group_flag[ xCG ][ yCG ] := res[0]; 
           	implicitNonZeroCoeff := 1; 
        end
        calcPatternSigCtx( significant_coeff_group_flag, xCG, yCG, rc_log2TrafoWidth, rc_log2TrafoHeight, res);
        patternSigCtx := res[0];
  		foreach int m in 0 .. 15 do
  			n := 15 - m;  
			xC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 0 ]; 
			yC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 1 ];			
			if  (n + rc_offset) < (rc_numCoeff - 1) and significant_coeff_group_flag[ xCG ][ yCG ] = 1 and 
				( n > 0 or implicitNonZeroCoeff = 0 ) then
				get_SIGNIFICANT_COEFF_FLAG( codIRange, codIOffset, ctxTable, fifo, res, patternSigCtx, xC, yC, 2, rc_TType);
//				get_SIGNIFICANT_COEFF_FLAG( codIRange, codIOffset, ctxTable, fifo, res,
//											rc_log2TrafoWidth-1, rc_log2TrafoHeight-1, xC, yC, rc_cIdx, significant_coeff_flag);
                   significant_coeff_flag[ xC ][ yC ] := res[0];
				if significant_coeff_flag[ xC ][ yC ] = 1 then 
                   	implicitNonZeroCoeff := 0;
               	end
        	else
               	res[0] := 0;
			end
			if res[0] = 1 then
				rc_numNonZero := rc_numNonZero + 1;
			end
		end
		rc_idx := 3;
	end
	/**************************************************************************
	 * read_ResidualCoding_end
	 *************************************************************************/
	read_ResidualCoding_end : action ==>
	guard 
		rc_idx = 2,
		rc_i < 0
	do
		println("read_ResidualCoding_end ");
	end
	/**************************************************************************
	 * read_ResidualCoding.for_numLastSubset.get_Coef
	 *************************************************************************/
	read_ResidualCoding.for_numLastSubset.get_Coef : action ==>
	guard 
		rc_idx = -1 and isFifoFull(fifo)
	var
		 int(size=32) res[1],
		uint(size= 8) firstNZPosInCG			:= 16,
		 int(size= 8) lastNZPosInCG				:= -1,
		uint(size= 8) numSigCoeff				:=  0,
		 int(size= 8) firstGreater1CoeffIdx		:= -1,
		 int            n,
		uint(size= 8) xC,
		uint(size= 8) yC,
		uint(size= 1) signHidden,
		uint(size= 8) sumAbs,
		uint(size= 8) baseLevel
	do	
  		foreach int m in 0 .. 15 do
  			n  := 15 - m;  
			xC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 0 ];
			yC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 1 ];
			if significant_coeff_flag[ xC ][ yC ] = 1 then
				if numSigCoeff < 8 then
					//coeff_abs_level_greater1_flag[ n ]
					numSigCoeff := numSigCoeff + 1; 
					if res[0] = 1 /*coeff_abs_level_greater1_flag[ n ]*/ and firstGreater1CoeffIdx = -1 then
						firstGreater1CoeffIdx := n;
					end
				end
				if lastNZPosInCG = -1 then
					lastNZPosInCG := n;
				end
				firstNZPosInCG := n;
			end
		end
		
		signHidden := if lastNZPosInCG - firstNZPosInCG >= pps_sign_hiding_threshold[pps_id] and cu_transquant_bypass_flag != 0 then 1 else 0 end;
		if firstGreater1CoeffIdx != -1 then 
			//coeff_abs_level_greater2_flag[ firstGreater1CoeffIdx]
		end
  		foreach int m in 0 .. 15 do
  			n  := 15 - m;  
			xC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 0 ];
			yC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 1 ];
			if significant_coeff_flag[ xC ][ yC ] = 1 and
				(pps_sign_data_hiding_flag[pps_id] != 0 or signHidden != 0 or n != firstNZPosInCG) then
				//coeff_sign_flag[ n ]
			end
		end

		numSigCoeff := 0;
		sumAbs      := 0;
  		foreach int m in 0 .. 15 do
  			n  := 15 - m;  
			xC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 0 ];
			yC := ScanOrder[ rc_scanIdx ][ n + rc_offset ][ 1 ];
			if significant_coeff_flag[ xC ][ yC ] = 1 then
				baseLevel := 1 /* + coeff_abs_level_greater1_flag[ n ] + coeff_abs_level_greater2_flag[ n ]*/;
				if baseLevel = if numSigCoeff < 8 then if n = firstGreater1CoeffIdx then 3 else 2 end else 1 end then
					//coeff_abs_level_remaining[ n ]
				end
				//transCoeffLevel[ rc_x0 ][ rc_y0 ][ rc_cIdx ][ xC ][ yC ] := ( coeff_abs_level_remaining[ n ] + baseLevel ) * ( 1 − 2 * coeff_sign_flag[ n ] )
				if pps_sign_data_hiding_flag[pps_id] = 1 and signHidden = 1 then
					sumAbs := sumAbs + ( res[0] /*coeff_abs_level_remaining[ n ] */ + baseLevel );
					if n = firstNZPosInCG and (sumAbs&3) = 1 then
//						transCoeffLevel[ rc_x0 ][ rc_y0 ][ rc_cIdx ][ xC ][ yC ] := -transCoeffLevel[ rc_x0 ][ rc_y0 ][ rc_cIdx ][ xC ][ yC ];
					end
				end
				numSigCoeff := numSigCoeff + 1;
			else
//				transCoeffLevel[ rc_x0 ][ rc_y0 ][ rc_cIdx ][ xC ][ yC ] := 0;
			end
		end
		rc_i	:= rc_i - 1;
		rc_idx  := 2;
	end
	/**************************************************************************
	 * read_ResidualCoding.for_numLastSubset.get_Coef
	 *************************************************************************/
	read_ResidualCoding.for_numLastSubset.get_Coef_save : action ==>
	guard 
		rc_idx = 3 and isFifoFull(fifo)
	var
		 int(size=32) res[1],
		uint(size= 8) numC1Flag,
		uint(size= 8) c1
	do	
		numC1Flag := min(rc_numNonZero, C1FLAG_NUMBER);
		c1 := 1;
  		foreach int m in 0 .. numC1Flag-1 do
			get_ONE_FLAG( codIRange, codIOffset, ctxTable, fifo, res, c1);
			if res[0] = 1 then
        		c1 := 0;
			elsif c1 < 3 and c1 > 0 then
        		c1 := c1 + 1;
			end
		end
		if c1 = 0 then
			get_ABS_FLAG(codIRange, codIOffset, ctxTable, fifo, res);
		end
		res[0] := 0;
		decodeBinsEP(rc_numNonZero, res, codIRange, codIOffset, fifo);
		get_Coef(codIRange, codIOffset, fifo, res, 0);
		get_Coef(codIRange, codIOffset, fifo, res, 1);
		get_Coef(codIRange, codIOffset, fifo, res, 1);
		get_Coef(codIRange, codIOffset, fifo, res, 1);
		get_Coef(codIRange, codIOffset, fifo, res, 1);
		get_Coef(codIRange, codIOffset, fifo, res, 1);
		
		rc_i	:= rc_i - 1;
		rc_idx  := 2;
	end
	
	/**************************************************************************
	 **************************************************************************
	 ********        undefined                            *********************
	 **************************************************************************
	 *************************************************************************/
  	
  	bool actorNotFinished := true;
	
	undefined: action ==>
	guard
		actorNotFinished
	do
		println("Algo_Parser doesn't manage this case yet");
		actorNotFinished := false;
	end

	/**************************************************************************
	 **************************************************************************
	 ********        schedule                             *********************
	 **************************************************************************
	 *************************************************************************/
  	schedule fsm start_code:
		// byte align
		byte_align          			( byte_align_a						) --> start_code;
		// search start code
		start_code          			( start_code.search					) --> start_code;
		start_code			            ( start_code.done					) --> read_Nal_unit_header;
		// read Nal Unit header
		read_Nal_unit_header			( read_nal_unit_header				) --> find_header;
		find_header	  					( look_for.VPS_header	  			) --> read_VPS_Header;
		find_header	  					( look_for.SPS_header	  			) --> read_SPS_Header;
		find_header	  					( look_for.PPS_header	  			) --> read_PPS_Header;
		find_header	  					( look_for.Slice_header	  			) --> read_SliceHeader;
		find_header	  					( look_for.APS_header				) --> read_APS_Header;
		find_header	  					( look_for_other_header				) --> byte_align;
		// read VPS header
		read_VPS_Header	  				( read_VPS_Header	    			) --> read_VPS_Header;
		read_VPS_Header	  				( read_VPS_Header_done    			) --> byte_align;
		// read SPS header
		read_SPS_Header	  				( read_SPS_Header	    			) --> read_SPS_Header;
		read_SPS_Header	  				( read_SPS_Header_done    			) --> byte_align;
		// read PPS header
		read_PPS_Header 				( read_PPS_Header   				) --> read_PPS_Header;
		read_PPS_Header	  				( read_PPS_Header_done    			) --> byte_align;
		// read_SliceHeader
		read_SliceHeader				( read_SliceHeader					) --> read_SliceHeader;
		read_SliceHeader				( read_SliceHeader_done				) --> read_SliceData;
		// read_SliceData
		read_SliceData				    ( read_SliceData	  				) --> read_SliceData;
		read_SliceData				    ( read_SliceData_gotoSaoParam		) --> read_SaoParam;
		read_SliceData				    ( read_SliceData_gotoCodingTree		) --> read_CodingTree;
		read_SliceData				    ( read_SliceData_end	  			) --> byte_align;
		// read_SaoParam
		read_SaoParam					( read_SaoParam						) --> read_SliceData;
		// read_CodingTree
		read_CodingTree				    ( read_CodingTree	  				) --> read_CodingTree;
		read_CodingTree				    ( read_CodingTree_gotoCodingUnit	) --> read_CodingUnit;
		read_CodingTree				    ( read_CodingTree_gotoPCMSample		) --> read_PCMSample;
		read_CodingTree				    ( read_CodingTree_end	 			) --> read_SliceData;
		// read_CodingUint
		read_CodingUnit				    ( read_CodingUnit	  				) --> read_CodingUnit;
		ead_CodingUnit				    ( read_CodingUnit_gotoPCMSample		) --> read_PCMSample2;
		read_CodingUnit				    ( read_CodingUnit_gotoPredictionUnit) --> read_PredictionUnit;
		read_CodingUnit				    ( read_CodingUnit_gotoTransformTree ) --> read_TransformTree;
		read_CodingUnit				    ( read_CodingUnit_end				) --> read_CodingTree;
		// read_PredictionUnit
		read_PredictionUnit			    ( read_PredictionUnit	  			) --> read_PredictionUnit;
		read_PredictionUnit			    ( read_PredictionUnit_gotoMVDCoding ) --> read_MVDCoding;
		read_PredictionUnit			    ( read_PredictionUnit_end			) --> read_CodingUnit;
		// read_MVDCoding
		read_MVDCoding				    ( read_MVDCoding	  				) --> undefined;//read_PredictionUnit;
		// read_PCMSample
		read_PCMSample				    ( read_PCMSample	  				) --> undefined;//read_CodingTree;
		read_PCMSample2				    ( read_PCMSample2	  				) --> undefined;//read_PredictionUnit;
		// read_TransformTree
		read_TransformTree			    ( read_TransformTree	  			) --> read_TransformTree;
		read_TransformTree			    ( read_TransformTree_gotoTransformUnit) --> read_TransformUnit;
		read_TransformTree			    ( read_TransformTree_end	  		) --> read_CodingUnit;
		// read_TransformUnit
		read_TransformUnit			    ( read_TransformUnit	  			) --> read_TransformUnit;
		read_TransformUnit			    ( read_TransformUnit_gotoResidualCoding) --> read_ResidualCoding;
		read_TransformUnit			    ( read_TransformUnit_end			) --> read_TransformTree;
		// read_ResidualCoding
		read_ResidualCoding				( read_ResidualCoding				) --> read_ResidualCoding;
		read_ResidualCoding				( read_ResidualCoding_end			) --> read_TransformUnit;
		// read_APS_Header
		read_APS_Header				    ( read_APS_Header					) --> read_APS_Header;
		read_APS_Header				    ( read_APS_Header_done				) --> byte_align;
		
		
		
		// undefined
		undefined	  					( undefined		    				) --> undefined;
	end
	
	/**************************************************************************
	 * priority
	 *************************************************************************/
	priority
		look_for        > look_for_other_header;
	end
end