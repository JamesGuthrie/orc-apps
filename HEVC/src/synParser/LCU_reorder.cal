// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package synParser;  

actor LCU_reorder()                                        
                   uint(size=8)  Block_in,
                   uint(size=16) PictSize
                   ==>                                    
                   uint(size=8)  Block_out  
                   :
	int curr_lcu_x := 0;
	int curr_lcu_y := 0;
	int w_rem;
	int h_rem;
	int w;
	int h;
	
 	get_pict_size: action PictSize:[width, height] ==>
	do
		w := width;
		h:= height;
		w_rem := width - (width / 64) * 64;
		h_rem := height - (height / 64) * 64;
	end
	
	send64x64: action 	Block_in:[b_in] repeat (16 + 8) * 16 * 16 ==> Block_out:[b_out] repeat 16 * 16 * 16 * 3 / 2
	var
		uint (size=8) b_out [16*16*16 * 3 /2],
		int pos_in := 0
	do
		foreach int o in 0 .. 1 do
			foreach int p in 0 .. 1 do
				foreach int q in 0 .. 1 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 3 do
											foreach int n in 0 .. 3 do
												b_out[n + 64 * m + (l * 4) + (k * 64 * 4) +
													(j * 8) + (i * 64 * 8) + (r * 16) + (q * 64 * 16) + 
													(p * 32) + (o * 64 * 32) 
													] := b_in[pos_in + n + 4 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		pos_in:=16;
		foreach int o in 0 .. 1 do
			foreach int p in 0 .. 1 do
				foreach int q in 0 .. 1 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 1 do
											foreach int n in 0 .. 1 do
												b_out[64 * 64 + n + 32 * m + (l * 2) + (k * 32 * 2) +
													(j * 4) + (i * 32 * 4) + (r * 8) + (q * 32 * 8) + 
													(p * 16) + (o * 32 * 16) 
													] := b_in[pos_in + n + 2 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		pos_in:=20;
		foreach int o in 0 .. 1 do
			foreach int p in 0 .. 1 do
				foreach int q in 0 .. 1 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 1 do
											foreach int n in 0 .. 1 do
												b_out[64 * 64 + 32 * 32 + n + 32 * m + (l * 2) + (k * 32 * 2) +
													(j * 4) + (i * 32 * 4) + (r * 8) + (q * 32 * 8) + 
													(p * 16) + (o * 32 * 16) 
													] := b_in[pos_in + n + 2 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
	end

	send_last32x64: action 	Block_in:[b_in] repeat (16 + 8) * 8 * 16 ==> Block_out:[b_out] repeat 16 * 16 * 16 * 3 / 2
	guard
		w_rem = 32
	var
		uint (size=8) b_out [16*16*16 * 3 /2],
		int pos_in := 0
	do
		foreach int o in 0 .. 1 do
			foreach int p in 0 .. 0 do
				foreach int q in 0 .. 1 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 3 do
											foreach int n in 0 .. 3 do
												b_out[n + 64 * m + (l * 4) + (k * 64 * 4) +
													(j * 8) + (i * 64 * 8) + (r * 16) + (q * 64 * 16) + 
													(p * 32) + (o * 64 * 32) 
													] := b_in[pos_in + n + 4 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		foreach int i in 0 .. 32 * 32 * 2 - 1 do
			b_out[64 * 64 + i] := 128;
		end
	end
	
	send_last64x64: action 	==>
	guard
		w_rem = 0
	end
		
	send_last64x32: action 	Block_in:[b_in] repeat (16 + 8) * 8 * 16 ==> Block_out:[b_out] repeat 16 * 16 * 16 * 3 / 2
	guard
		h_rem = 32
	var
		uint (size=8) b_out [16*16*16 * 3 /2],
		int pos_in := 0
	do
		foreach int o in 0 .. 0 do
			foreach int p in 0 .. 1 do
				foreach int q in 0 .. 1 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 3 do
											foreach int n in 0 .. 3 do
												b_out[n + 64 * m + (l * 4) + (k * 64 * 4) +
													(j * 8) + (i * 64 * 8) + (r * 16) + (q * 64 * 16) + 
													(p * 32) + (o * 64 * 32) 
													] := b_in[pos_in + n + 4 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		foreach int i in 0 .. 32 * 32 * 2 - 1 do
			b_out[64 * 64 + i] := 128;
		end
	end

	send_last64x16: action 	Block_in:[b_in] repeat (16 + 8) * 16 * 16 / 4 ==> Block_out:[b_out] repeat 16 * 16 * 16 * 3 / 2
	guard
		h_rem = 16
	var
		uint (size=8) b_out [16*16*16 * 3 /2],
		int pos_in := 0
	do
		foreach int o in 0 .. 0 do
			foreach int p in 0 .. 1 do
				foreach int q in 0 .. 0 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 3 do
											foreach int n in 0 .. 3 do
												b_out[n + 64 * m + (l * 4) + (k * 64 * 4) +
													(j * 8) + (i * 64 * 8) + (r * 16) + (q * 64 * 16) + 
													(p * 32) + (o * 64 * 32) 
													] := b_in[pos_in + n + 4 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		foreach int i in 0 .. 32 * 32 * 2 - 1 do
			b_out[64 * 64 + i] := 128;
		end
	end

	send_last64x48: action 	Block_in:[b_in] repeat (16 + 8) * 16 * 16 * 3 / 4 ==> Block_out:[b_out] repeat 16 * 16 * 16 * 3 / 2
	guard
		h_rem = 48
	var
		uint (size=8) b_out [16*16*16 * 3 /2],
		int pos_in := 0
	do
		foreach int o in 0 .. 0 do
			foreach int p in 0 .. 0 do
				foreach int q in 0 .. 0 do
					foreach int r in 0 .. 1 do
						foreach int i in 0 .. 1 do
							foreach int j in 0 .. 1 do
								foreach int k in 0 .. 1 do
									foreach int l in 0 .. 1 do
										foreach int m in 0 .. 3 do
											foreach int n in 0 .. 3 do
												b_out[n + 64 * m + (l * 4) + (k * 64 * 4) +
													(j * 8) + (i * 64 * 8) + (r * 16) + (q * 64 * 16) + 
													(p * 32) + (o * 64 * 32) 
													] := b_in[pos_in + n + 4 * m];
											end
										end
										pos_in := pos_in + 24;
									end
								end
							end
						end
					end
				end
			end
		end
		foreach int i in 0 .. 32 * 32 * 2 - 1 do
			b_out[64 * 64 + i] := 128;
		end
	end

 	advance : action ==>
 	do
 		curr_lcu_x := curr_lcu_x + 1;
	end
	
	row_done : action ==>
 	guard
 		curr_lcu_x * 64 + w_rem >= w
 	do
 		curr_lcu_y := curr_lcu_y + 1;
 		curr_lcu_x := 0;
	end

	col_done : action ==>
 	guard
 		curr_lcu_y * 64 + h_rem >= h
	end

	pict_done : action ==>
 	guard
 		curr_lcu_x * 64 + w_rem >= w, curr_lcu_y * 64 + h_rem >= h
 	do
 		curr_lcu_x := 0;
 		curr_lcu_y := 0;
	end

	schedule fsm get_size :
		get_size 		(get_pict_size) --> send_lcu;
		send_lcu 		(send64x64    ) --> advance;
		advance			(advance      ) --> send_lcu;
		send_lcu		(pict_done	  ) --> get_size;
		send_lcu		(row_done	  ) --> send_last_lcu_row;
		send_lcu		(col_done	  ) --> send_last_lcu_col;
		send_last_lcu_col  (send_last64x32) --> advance;
		send_last_lcu_col  (send_last64x16) --> advance;
		send_last_lcu_col  (send_last64x48) --> advance;
		send_last_lcu_row (send_last32x64    ) --> send_lcu;
		send_last_lcu_row (send_last64x64    ) --> send_lcu;
	end
	
	priority
		pict_done > col_done > row_done > send64x64;
	end

end
