/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package synParser;

unit Algo_ParserUtils :
	/**************************************************************************
	 * GLOBAL CONSTANT
 	 *************************************************************************/
 	 uint(size= 8) EPR_VALUE                   = 0x03;
 	 uint(size= 8) START_CODE_VALUE            = 0x01;
 	 uint(size= 9) START_CODE_FLAG             = 0x100;
	/**************************************************************************
	 * GLOBAL NAL UNIT TYPE
 	 *************************************************************************/
 	 uint(size= 6) NAL_UNIT_NON_IDR_AND_NON_CRA =  1;
 	 uint(size= 6) NAL_UNIT_CRA                 =  4;
 	 uint(size= 6) NAL_UNIT_IDR                 =  5;
 	 uint(size= 6) NAL_UNIT_SEI                 =  6;
 	 uint(size= 6) NAL_UNIT_SPS                 =  7;
 	 uint(size= 6) NAL_UNIT_PPS                 =  8;
 	 uint(size= 6) NAL_UNIT_AUD                 =  9;
 	 uint(size= 6) NAL_UNIT_FIL                 = 12;
	/**************************************************************************
	 * GLOBAL SPS
 	 *************************************************************************/
 	 uint(size= 6) NB_MAX_SPS_ID                = 32;
 	 uint(size= 6) MAX_TLAYER                   =  4; 	 
	/**************************************************************************
	 * GLOBAL SLICE HEADER
 	 *************************************************************************/
	 uint(size= 3) P_SLICE                      =  0;
	 uint(size= 3) B_SLICE                      =  1;
	 uint(size= 3) I_SLICE                      =  2;
	 uint(size= 4) MAX_NUM_REF                  =  4;
	 uint(size= 4) MAX_NUM_REF_LC               =  8;
	 /// reference list index
	 uint(size= 3) REF_PIC_LIST_0               =  0;   ///< reference list 0
	 uint(size= 3) REF_PIC_LIST_1               =  1;   ///< reference list 1
  	 uint(size= 3) REF_PIC_LIST_C               =  2;   ///< combined reference list for uni-prediction in B-Slices
  	 /// Weighted prediction struct
  	 uint(size= 1) WP_PRESENT_FLAG              =  0;
  	 uint(size=32) WP_LOG2_WEIGHT_DENOM         =  1;
  	 uint(size=32) WP_I_WEIGHT                  =  2;
  	 uint(size=32) WP_I_OFFSET                  =  3;
	 uint(size=32) WP_W                         =  4;
  	 uint(size=32) WP_O                         =  5;
  	 uint(size=32) WP_OFFSET                    =  6;
  	 uint(size=32) WP_SHIFT                     =  7;
  	 uint(size=32) WP_ROUND                     =  8;
  	 uint(size= 3) WP_MAX_STRUCT                =  9;


	/**************************************************************************
	 * sortDeltaPOC
 	 *************************************************************************/
	procedure sortDeltaPOC( uint(size=32) idx,
							uint(size=32) num_pics,
						    uint(size=32) num_neg_pics,
							 int(size=32) deltaPOC[32][32],
							uint(size= 1) used[32][32])
	var
		 int(size=32) deltaPOC_v,
		 int(size= 1) used_v,
		uint(size=32) k,
		 int(size=32) tmp
	begin
		// sort in increasing order (smallest first)
		if num_pics != 0 then
    		foreach uint(size=8) i in 1 ..  num_pics-1 do
	   			deltaPOC_v := deltaPOC[idx][i];
   				used_v     := used[idx][i];
   				foreach uint(size=8) j in 0 ..  i-1 do
	   				k := i-1-j;
   					tmp := deltaPOC[idx][j];
   					if deltaPOC_v < tmp then
	   					deltaPOC[idx][k+1] := tmp;
   						used[idx][k+1]     := used[idx][k]; 
   						deltaPOC[idx][k]   := deltaPOC_v;
	   					used[idx][k]       := used_v;
   					end
   				end
	   		end
	   	end
	   	if (num_neg_pics>>1) != 0 then
   			k := num_neg_pics - 1;
			// flip the negative values to largest first
    		foreach uint(size=8) i in 0 ..  (num_neg_pics>>1)-1 do
	    		deltaPOC_v       := deltaPOC[idx][i];
   				used_v           := used[idx][i];
   				deltaPOC[idx][i] := deltaPOC[idx][k];
   				used[idx][i]     := used[idx][k]; 
   				deltaPOC[idx][k] := deltaPOC_v;
   				used[idx][k]     := used_v;
   				k := k - 1;
   			end
   		end
	end
	/**************************************************************************
	 * printDeltaPOC
 	 *************************************************************************/
	procedure printDeltaPOC(uint(size=32) idx,
							uint(size=32) num_pics,
							 int(size=32) deltaPOC[32][32],
							uint(size= 1) used[32][32],
							uint(size= 1) inter_RPS_flag,
							uint(size=32) num_ref_idc,
							uint(size=32) ref_idc[32][32]
	)
	begin
		if num_pics != 0 then
  			print("DeltaPOC = { ");
  			foreach uint(size=8) i in 0 ..  num_pics-1 do
	    		print(deltaPOC[idx][i]);
    			if used[idx][i] = 1 then
	    			print("* ");
    			else
	    			print(" ");
    			end
 			end
 		end
 		if inter_RPS_flag = 1 then
 			print("}, RefIdc = { ");
			if num_ref_idc != 0 then
  				foreach uint(size=8) i in 0 ..  num_ref_idc-1 do
	  				print(ref_idc[idx][i]+" ");
  				end
  			end
  		end
  		if num_pics != 0 then
  			println("}");
  		end
	end
end