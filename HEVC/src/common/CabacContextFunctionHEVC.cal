/******************************************************************************
 * Definition of CabacContextFunction
 *****************************************************************************/
package common;

import  std.util.Math.*;
import  common.CabacContextConstantHEVC.*;
import  common.CabacContextTableHEVC.*;

unit CabacContextFunctionHEVC :

	/*************************************************************************
	 * ContextInit
	 *************************************************************************/
	procedure contextInit(uint(size=8) qp, uint(size=8) sliceType, uint(size=9) ctxTable[NB_MAX_SE][NB_MAX_NUM_CTX])
	var
		uint(size= 8) qp_clip3 = clip_i32(qp, 0, 51),
		uint(size= 8) initValue,
		 int(size= 8) slope,
		 int(size= 8) offset,
		uint(size= 8) initState,
		uint(size= 8) mpState,
		uint(size= 8) pStateIdx
	begin
		foreach uint(size=8) i in 0 .. NB_MAX_SE-1 do
			foreach uint(size=8) j in 0 .. NUM_SE_CONTEXT_INDEX[i]-1 do
				initValue	:= InitContextIndex[i][sliceType][j];
				slope		:= (initValue>>4)*5 - 45;
				offset		:= ((initValue & 15) << 3) - 16;
				initState   := clip_i32( ((qp_clip3*slope)>>4)+offset, 1, 126);
				mpState		:= if initState >= 64 then 1 else 0 end;
				pStateIdx	:= if initState >= 64 then initState - 64 else 63 - initState end;
				ctxTable[i][j] := (pStateIdx<<1) + mpState;
				if i = SE_SAO_SVLC then
//					println(" initValue = "+initValue+" slope = "+slope+" offset = "+offset+" state = "+initState+" mps = "+mpState+" ucState = "+ctxTable[i][j]);
				end
			end	
		end
	end
	/*************************************************************************
	 * getCtx_SPLIT_CODING_UNIT_FLAG
	 *************************************************************************/
	function getCtx_SPLIT_CODING_UNIT_FLAG(
		uint(size= 8) depthSubPart,
		bool		  availableA,
		uint(size= 8) depthSubPartA,
		bool		   availableB,
		uint(size= 8) depthSubPartB
	) --> uint(size=2) :
		uint(size=1) condTermA = if depthSubPartA > depthSubPart and availableA = true then 1 else 0 end;
		uint(size=1) condTermB = if depthSubPartB > depthSubPart and availableB = true then 1 else 0 end;
		condTermA + condTermB
	end
	/*************************************************************************
	 * Context_933112
	 *************************************************************************/
	procedure context_933112(
		uint(size= 8) binIdx,
		bool		  availableA,
		bool		  availableB,
		uint(size= 8) NumMergeCand,
		uint(size= 8) ctxIdxInc[1]
	)
	begin
		ctxIdxInc[0] := if binIdx = 0 then
							if availableB = true and availableA = true then
								0
							elsif availableB = true or availableA = true then
								2
							else
								3
							end
						elsif binIdx = 1 and NumMergeCand > 2 then
							if availableA = true then
								2
							else
								3
							end
						elsif binIdx = 2 and NumMergeCand > 3 then
							3
						else
							0
						end;
		//ctxIdxInc[0] := ctxIdxInc[0] âˆ’ availableCollocated;
	end
	/*************************************************************************
	 * Context_933113
	 *************************************************************************/
	uint(size=8) LASTCTX[31] = [
	 	0,  1,  2,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6, 7,
	 	7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10
	 	];
	procedure context_933113(
		uint(size=8) binIdx,
		uint(size=8) cIdx,
		uint(size=8) log2TrafoSize,
		uint(size=8) ctxIdxInc[1]
	)
	begin
		ctxIdxInc[0] := if log2TrafoSize <= 2 then
							LASTCTX[binIdx]
						else
							LASTCTX[(1<<(log2TrafoSize-1)) + binIdx]
						end;
		if cIdx > 0 then
			ctxIdxInc[0] := ctxIdxInc[0] + 19;
		end
	end
	/*************************************************************************
	 * Context_933114
	 *************************************************************************/
	procedure context_933114(
		uint(size= 8) ctxIdxInc[1]
	)
	begin
	end
end