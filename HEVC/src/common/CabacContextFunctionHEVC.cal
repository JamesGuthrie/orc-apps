/******************************************************************************
 * Definition of CabacContextFunction
 *****************************************************************************/
package common;

import  std.util.Math.*;
import  common.CabacContextConstantHEVC.*;
import  common.CabacContextTableHEVC.*;

unit CabacContextFunctionHEVC :

	/*************************************************************************
	 * ContextInit
	 *************************************************************************/
	procedure contextInit(uint(size=8) qp, uint(size=8) sliceType, uint(size=9) ctxTable[NB_MAX_SE][NB_MAX_NUM_CTX])
	var
		uint(size= 8) qp_clip3 = clip_i32(qp, 0, 51),
		uint(size= 8) initValue,
		 int(size= 8) slope,
		 int(size= 8) offset,
		uint(size= 8) initState,
		uint(size= 8) mpState,
		uint(size= 8) pStateIdx
	begin
		foreach uint(size=8) i in 0 .. NB_MAX_SE-1 do
			foreach uint(size=8) j in 0 .. NUM_SE_CONTEXT_INDEX[i]-1 do
				initValue	:= InitContextIndex[i][sliceType][j];
				slope		:= (initValue>>4)*5 - 45;
				offset		:= ((initValue & 15) << 3) - 16;
				initState   := clip_i32( ((qp_clip3*slope)>>4)+offset, 1, 126);
				mpState		:= if initState >= 64 then 1 else 0 end;
				pStateIdx	:= if initState >= 64 then initState - 64 else 63 - initState end;
				ctxTable[i][j] := (pStateIdx<<1) + mpState;
//				if i = SE_LAST_SIGNIFICANT_COEFF_X_PREFIX then
//					println(" initValue = "+initValue+" slope = "+slope+" offset = "+offset+" state = "+initState+" mps = "+mpState+" ucState = "+ctxTable[i][j]);
//				end
			end	
		end
	end
	/*************************************************************************
	 * getCtx_SPLIT_CODING_UNIT_FLAG
	 *************************************************************************/
	function getCtx_SPLIT_CODING_UNIT_FLAG(
		uint(size= 8) depthSubPart,
		bool		  availableA,
		uint(size= 8) depthSubPartA,
		bool		   availableB,
		uint(size= 8) depthSubPartB
	) --> uint(size=2) :
		uint(size=1) condTermA = if depthSubPartA > depthSubPart and availableA = true then 1 else 0 end;
		uint(size=1) condTermB = if depthSubPartB > depthSubPart and availableB = true then 1 else 0 end;
		condTermA + condTermB
	end
	/*************************************************************************
	 * Context_92312
	 *************************************************************************/
	uint(size=8) LASTCTX[28] = [
	 	0,  1,  2,  2,  3,  4,  5,  5,  2,  2,  6,  7,  8,  8,
	 	9,  9,  2,  2, 10, 11, 12, 12, 13, 13, 14, 14,  2,  2
	 	];
	function context_92312(
		uint(size=8) binIdx,
		uint(size=8) log2TrafoSize,
		uint(size=8) cIdx
	) --> uint(size=8) :
		if cIdx > 0 then
			(binIdx >> (log2TrafoSize-2)) + 15
		else
			LASTCTX[( ( log2TrafoSize - 2 )*( log2TrafoSize + 1 ) ) + binIdx]
		end
	end
end