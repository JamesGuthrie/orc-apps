/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package common;

import  org.mpeg4.part10.cbp.MacroBlockInfo.*;

unit BitstreamReadUtils :
	bool DEBUG_PARSER    = true;
	/**************************************************************************
	 * GLOBAL BISTREAM READER
 	 *************************************************************************/
	uint(size= 8) FIFO_SIZE        =  8;
	uint(size= 8) FIFO_DEPTH       =  9;
	uint(size= 8) FIFO_CPT_BITS    =  FIFO_SIZE;
	uint(size= 8) FIFO_IDX         =  FIFO_SIZE+1;
	uint(size= 8) FIFO_SIZE_ALL    =  FIFO_SIZE+2;
	
	/**************************************************************************
	 * function getFifoIdx
	 *************************************************************************/
  	function getFifoIdx (uint(size=4) cptBits,
  						 uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
  	) --> uint(size=4)
  		var 
  			uint(size=4) fifo_idx =  fifo[FIFO_IDX]
  		:
  		if (cptBits & (FIFO_SIZE - 1)) != 0 then
	    	(fifo_idx - 1 - (cptBits>>3)) & (FIFO_SIZE-1)
	    else
	    	(fifo_idx - (cptBits>>3)) & (FIFO_SIZE-1)
	    end
  	end
	/**************************************************************************
	 * function IsStartCode
	 *************************************************************************/
  	function IsStartCode (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool
  		var 
  		uint(size=4) cptBits = fifo[FIFO_CPT_BITS],
  		uint(size=4) idx     = getFifoIdx(cptBits, fifo)
  		:
  		if (fifo[idx] & 0x100) != 0 then
	    	true
	    else
	    	false
	    end
  	end
	/**************************************************************************
	 * procedure flushBits
	 *************************************************************************/
 	procedure flushBits_name (uint(size= 8) nb,
 							  uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 							  String name)
  	begin
  		flushBits( nb, fifo );
  		if DEBUG_PARSER then
			println("          "+name+" u("+nb+") : 0");
		end
  	end
  	procedure flushBits (uint(size= 8) nb,
 						 uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	begin
	    fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] - nb;
  	end
  	/**************************************************************************
	 * procedure byte_align
	 *************************************************************************/
  	procedure byte_align (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	var 
  		uint(size=4) cptBits = fifo[FIFO_CPT_BITS]
   	begin
	    fifo[FIFO_CPT_BITS] := cptBits - (cptBits & 0x7);
  	end
	/**************************************************************************
	 * procedure vld_u
	 *************************************************************************/
  	procedure vld_u_name (uint(size= 8) nb,
 						  uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 						  uint(size=32) res[1],
 						  String name)
  	begin
  		vld_u(nb, fifo, res);
  		if DEBUG_PARSER then
			println("          "+name+" u("+nb+") : "+res[0]);
		end
	end
  	procedure vld_u (uint(size= 8) nb,
 					 uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					 uint(size=32) res[1])
  	var
  		uint(size=8) nb_v    := nb,
  		uint(size=4) cptBits := fifo[FIFO_CPT_BITS],
  		uint(size=4) idx     := getFifoIdx(cptBits, fifo),
  		uint(size=4) cpt     := cptBits & (FIFO_SIZE - 1)
  	begin
  		if nb > cptBits then println(" Error vld_u : out of range !!!"); end
  		res[0] := 0;
	    while nb_v != 0
	    do
	    	if cpt = 0 then cpt := FIFO_SIZE; end
	    	if nb_v > cpt then
	    		res[0]  := (res[0]<<cpt) + (fifo[idx] & ((1<<cpt)-1) );
	    		cptBits := cptBits - cpt;
	    		nb_v    := nb_v - cpt;
	    		idx     := (idx + 1) & (FIFO_SIZE-1); 
	    	else
	    		cpt     := cpt - nb_v;
	    		res[0]  := (res[0]<<nb_v) + ( (fifo[idx]>>cpt) & ((1<<nb_v)-1) );
	    		cptBits := cptBits - nb_v;	    		
	    		nb_v    := 0;
	    	end
	    	cpt := cptBits & (FIFO_SIZE - 1);
	  	end
	  	fifo[FIFO_CPT_BITS] := cptBits;
  	end
	/**************************************************************************
	 * procedure vld_ue
	 *************************************************************************/
  	procedure vld_ue_name (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					 	   uint(size=32) res[1],
 					 	   String name)
  	begin
  		vld_ue(fifo, res);
  		if DEBUG_PARSER then
			println("          "+name+" u(v) : "+res[0]);
		end
	end
	procedure vld_ue (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					  uint(size=32) res[1])
  	var
  		uint(size=4) cptBits := fifo[FIFO_CPT_BITS],
  		uint(size=4) idx     := getFifoIdx(cptBits, fifo),
  		uint(size=4) cpt     := (cptBits-1) & (FIFO_SIZE - 1),
  		uint(size=4) cptSave := cptBits,
  		uint codeLen
  	begin
		while ((fifo[idx] >> cpt) & 0x1) = 0
		do
	  		if cptBits = 0 then println(" Error vld_ue : out of range !!!"); end
			cptBits := cptBits - 1;
			idx     := getFifoIdx(cptBits, fifo);
			cpt     := (cpt - 1) & (FIFO_SIZE - 1);
		end
		codeLen := cptSave - cptBits;
		fifo[FIFO_CPT_BITS] := cptBits - 1;
		vld_u(codeLen, fifo, res);
		res[0]     := (1 << codeLen) + res[0] - 1;
  	end
	/**************************************************************************
	 * vld_se
 	 *************************************************************************/
 	procedure vld_se_name (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					 	    int(size=32) res[1],
 					 	   String name)
  	begin
  		vld_se(fifo, res);
  		if DEBUG_PARSER then
			println("          "+name+" s(v) : "+res[0]);
		end
	end
	procedure vld_se(uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					  int(size=32) res[1])
	begin
		vld_ue(fifo, res);
		if (res[0] & 1) = 0 then
			res[0] := -(res[0] >> 1);
		else
			res[0] :=  (res[0] >> 1) + 1;
		end
	end
	/**************************************************************************
	 * vld_me
 	 *************************************************************************/
 	 uint(size=6) CBP_Table[64][2] = // [codeNum][CBP Intra_4x4,Intra_8x8 / CBP Inter]
		[ // chroma_format_idc is equal to 0
			[15, 0], [ 0, 1], [ 7, 2], [11, 4], [13, 8], [14, 3], [ 3, 5], [ 5,10],
			[10,12], [12,15], [ 1, 7], [ 2,11], [ 4,13], [ 8,14], [ 6, 6], [ 9, 9],
			// chroma_format_idc is not equal to 0
			[47, 0], [31,16], [15, 1], [ 0, 2], [23, 4], [27, 8], [29,32], [30, 3],
			[ 7, 5], [11,10], [13,12], [14,15], [39,47], [43, 7], [45,11], [46,13],
			[16,14], [ 3, 6], [ 5, 9], [10,31], [12,35], [19,37], [21,42], [26,44],
			[28,33], [35,34], [37,36], [42,40], [44,39], [ 1,43], [ 2,45], [ 4,46],
			[ 8,17], [17,18], [18,20], [20,24], [24,19], [ 6,21], [ 9,26], [22,28],
			[25,23], [32,27], [33,29], [34,30], [36,22], [40,25], [38,38], [41,41]    
		];
 	procedure vld_me_name (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					       uint(size=32) res[1],
 					 	   uint(size= 2) chroma_format_idc[32],
					 	   uint(size= 5) sps_id,
					 	   uint(size= 6) mb_type,
					 	   String name)
  	begin
  		vld_me(fifo, res, chroma_format_idc, sps_id, mb_type);
  		if DEBUG_PARSER then
			println("          "+name+" m(v) : "+res[0]);
		end
	end
 	procedure vld_me(uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					 uint(size=32) res[1],
 					 uint(size= 2) chroma_format_idc[32],
					 uint(size= 5) sps_id,
					 uint(size= 6) mb_type)
	begin
		vld_ue(fifo, res);
		if chroma_format_idc[sps_id] = 0 then 
			res[0] := CBP_Table[res[0]][if Is_Intra_NxN(mb_type) then 0 else 1 end];
		else
			res[0] := CBP_Table[16 + res[0]][if Is_Intra_NxN(mb_type) then 0 else 1 end]; 
		end 
	end
end