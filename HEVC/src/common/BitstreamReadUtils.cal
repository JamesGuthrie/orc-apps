/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package common;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;

unit BitstreamReadUtils :
	uint(size= 8) FIFO_SIZE =  8;
	/**************************************************************************
	 * function getFifoIdx
	 *************************************************************************/
  	function getFifoIdx (uint(size= 8) cptBit[1], uint(size= 4) fifo_idx)
  		--> uint(size=4) :
  		if (cptBit[0] & 0x7) != 0 then
	    	(fifo_idx - 1 - (cptBit[0]>>3)) & (FIFO_SIZE-1)
	    else
	    	(fifo_idx - (cptBit[0]>>3)) & (FIFO_SIZE-1)
	    end
  	end
  	
	/**************************************************************************
	 * procedure flushBits
	 *************************************************************************/
  	procedure flushBits (uint(size=8) cptBit[1], uint(size=8) nb)
  	begin
	    cptBit[0] := cptBit[0] - nb;
  	end
  	/**************************************************************************
	 * procedure byte_align
	 *************************************************************************/
  	procedure byte_align (uint(size=8) cptBit[1])
   	begin
	    cptBit[0] := cptBit[0] - (cptBit[0] & 0x7);
  	end
	/**************************************************************************
	 * procedure vld_u
	 *************************************************************************/
  	procedure vld_u (uint(size= 8) cptBit[1],
  		 			 uint(size= 8) nb,
  					 uint(size= 8) fifo[FIFO_SIZE],
  					 uint(size= 4) fifo_idx,
  					 uint(size=32) res[1])
  	var
  		uint(size=4) idx  := getFifoIdx(cptBit, fifo_idx),
  		uint(size=8) nb_v := nb,
  		uint(size=4) cpt  := cptBit[0] & 0x7
  	begin
  		res[0] := 0;
	    while nb_v != 0
	    do
	    	if cpt = 0 then cpt := 8; end
	    	if nb_v > cpt then
	    		res[0]    := res[0] + (fifo[idx] & ((1<<cpt)-1) );
	    		cptBit[0] := cptBit[0]- cpt;
	    		nb_v      := nb_v - cpt;
	    		idx       := (idx + 1) & (FIFO_SIZE-1); 
	    	else
	    		cpt       := cpt - nb;
	    		res[0]    := res[0] + ( (fifo[idx]>>cpt) & ((1<<nb_v)-1) );
	    		cptBit[0] := cptBit[0] - nb_v;	    		
	    		nb_v      := 0;
	    	end
	    	cpt := cptBit[0] & 0x7;
	  	end	    	
  	end
	/**************************************************************************
	 * procedure vld_ue
	 *************************************************************************/
  	procedure vld_ue (uint(size= 8) cptBit[1],
  					  uint(size= 8) fifo[FIFO_SIZE],
  					  uint(size= 4) fifo_idx,
  					  uint(size=32) res[1])
  	var
  		uint(size=4) idx         := getFifoIdx(cptBit, fifo_idx),
  		uint(size=4) cptBit_save := cptBit[0],
  		uint(size=4) cpt         := cptBit[0] & 0x7,
  		uint codeLen,
  		uint codeWord[1]
  	begin
		if cpt = 0 then cpt := 7; end
		while ((fifo[idx] >> cpt) & 0x1) = 0
		do
			cptBit[0] := cptBit[0] - 1;
			idx       := getFifoIdx(cptBit, fifo_idx);
			cpt       := cptBit[0] & 0x7;
			if cpt = 0 then cpt := 7; end
		end
		codeLen   := cptBit_save - cptBit[0];
		vld_u(cptBit, codeLen, fifo, fifo_idx, codeWord);
		cptBit[0] := cptBit[0] - 1;
		res[0]    := (1 << codeLen) + codeWord[0] - 1;
  	end
	/**************************************************************************
	 * vld_se
 	 *************************************************************************/
	procedure vld_se(uint(size= 8) cptBit[1],
  					 uint(size= 8) fifo[FIFO_SIZE],
  					 uint(size= 4) fifo_idx,
  					  int(size=32) res[1])
	var
  		uint ue[1]
	begin
		vld_ue(cptBit, fifo, fifo_idx, ue);
		if (ue[0] & 1) = 0 then
			res[0] := - (ue[0] >> 1);
		else
			res[0] := (ue[0] >> 1) + 1;
		end
	end
	/**************************************************************************
	 * vld_me
 	 *************************************************************************/
 	 uint(size=6) CBP_Table[64][2] = // [codeNum][CBP Intra_4x4,Intra_8x8 / CBP Inter]
		[ // chroma_format_idc is equal to 0
			[15, 0], [ 0, 1], [ 7, 2], [11, 4], [13, 8], [14, 3], [ 3, 5], [ 5,10],
			[10,12], [12,15], [ 1, 7], [ 2,11], [ 4,13], [ 8,14], [ 6, 6], [ 9, 9],
			// chroma_format_idc is not equal to 0
			[47, 0], [31,16], [15, 1], [ 0, 2], [23, 4], [27, 8], [29,32], [30, 3],
			[ 7, 5], [11,10], [13,12], [14,15], [39,47], [43, 7], [45,11], [46,13],
			[16,14], [ 3, 6], [ 5, 9], [10,31], [12,35], [19,37], [21,42], [26,44],
			[28,33], [35,34], [37,36], [42,40], [44,39], [ 1,43], [ 2,45], [ 4,46],
			[ 8,17], [17,18], [18,20], [20,24], [24,19], [ 6,21], [ 9,26], [22,28],
			[25,23], [32,27], [33,29], [34,30], [36,22], [40,25], [38,38], [41,41]    
		];
	procedure vld_me(int Codeword, int CodeLen, uint(size=2) chroma_format_idc[32],
					 uint(size=5) sps_id, uint(size=6) mb_type, uint res)
	var
		uint ue
	begin 
		//vld_ue(Codeword, CodeLen, ue);
		if chroma_format_idc[sps_id] = 0 then 
			res := CBP_Table[ue][if Is_Intra_NxN(mb_type) then 0 else 1 end];
		else
			res := CBP_Table[16 + ue][if Is_Intra_NxN(mb_type) then 0 else 1 end]; 
		end 
	end
 	 
end