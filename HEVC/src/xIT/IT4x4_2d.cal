// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 
// modified by: Ghislain Roquier <ghislain.roquier@epfl.ch>
package xIT;

import devel.org.sc29.wg11.mpegh.part2.xIT.CommonConstant.*;

actor IT4x4_2d () int(size=16) Coeff // 16 bits
                  ==> 
                  int(size=16) Block // 16 bits
                  :

  procedure it4x4_1d(int input[16], int output[16], int shift)
  var    
  	int x0, int x1, int x2, int x3,
	int rounding = 1 << (shift - 1)
  begin
  	foreach int i in 0 .. 3 do
    	x0 := (input[4*i + 0] * g_aiT4[0][0]) + (input[4*i + 2] * g_aiT4[2][0]);
    	x2 := (input[4*i + 0] * g_aiT4[0][1]) + (input[4*i + 2] * g_aiT4[2][1]);        
    	x1 := (input[4*i + 1] * g_aiT4[1][0]) + (input[4*i + 3] * g_aiT4[3][0]);
    	x3 := (input[4*i + 1] * g_aiT4[1][1]) + (input[4*i + 3] * g_aiT4[3][1]);                      
    	output[i +  4*0] := (x0 + x1 + rounding) >> shift;
    	output[i +  4*1] := (x2 + x3 + rounding) >> shift;
    	output[i +  4*2] := (x2 - x3 + rounding) >> shift;
    	output[i +  4*3] := (x0 - x1 + rounding) >> shift;
    end
  end
  
  action Coeff:[ src ] repeat 4*4 ==>  Block:[ out ] repeat 4*4
  var
   int(size=32) x[16],
   int(size=32) y[16],
   int(size=16) out[16]
  do
	foreach int i in 0 .. 15 do
		x[i] := src[i];
	end
	
	it4x4_1d(x, y, 7);
	
	it4x4_1d(y, x, 12);
	
	foreach int i in 0 .. 15 do
		out[i] := x[i];
	end

  end

end
