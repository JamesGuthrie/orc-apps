// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;

import xIT.CommonConstant.*;

actor IT16x16_1d (int shift) int(size=16) Src // 16 bits
                    ==> 
                    int(size=16) Dst // 28 bits
                    :
                  
  action Src:[ src ] repeat 16 // Coefficient matrices are processed column order, least significant first.
         ==> 
         Dst:[ [ (dst[i] + rouding_factor) >> shift : for int i in 0 .. 15] ] repeat 16
  var
   List(type:int(size=25), size=2  ) evenEvenEven, // one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=25), size=2  ) evenEvenOdd,  // one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=26), size=4  ) evenEven,     // one addition of two 25-bit summands =  26 bits
   List(type:int(size=26), size=4  ) evenOdd,      // three additions of four (16-bit + 8-bit) summands = 26 bits
   List(type:int(size=27), size=8  ) even,         // one addition of two 26-bit summands = 27 bits
   List(type:int(size=27), size=8  ) odd,          // seven additions of eight (16-bit + 8-bit) summands = 27 bits
   List(type:int(size=28), size=16 ) dst,           // one addition of two 27-bit summands =  28 bits
   int   							 rouding_factor := 1 << (shift - 1)
  do
    evenEvenEven := [( src[0] * g_aiT16[0][0] ) + ( src[8] * g_aiT16[8][0] ),
                     ( src[0] * g_aiT16[0][1] ) + ( src[8] * g_aiT16[8][1] )
                    ];
                      
    evenEvenOdd  := [( src[4] * g_aiT16[4][0] ) + ( src[12] * g_aiT16[12][0] ),
                     ( src[4] * g_aiT16[4][1] ) + ( src[12] * g_aiT16[12][1] )
                    ]; 
                    
    evenEven := [ evenEvenEven[0] + evenEvenOdd[0],
                  evenEvenEven[1] + evenEvenOdd[1],
                  evenEvenEven[1] - evenEvenOdd[1],
                  evenEvenEven[0] - evenEvenOdd[0]
                ];                                        
                 
    evenOdd  := [( src[2] * g_aiT16[2][0] ) + ( src[6] * g_aiT16[6][0] ) + ( src[10] * g_aiT16[10][0] ) + ( src[14] * g_aiT16[14][0] ),
                 ( src[2] * g_aiT16[2][1] ) + ( src[6] * g_aiT16[6][1] ) + ( src[10] * g_aiT16[10][1] ) + ( src[14] * g_aiT16[14][1] ),
                 ( src[2] * g_aiT16[2][2] ) + ( src[6] * g_aiT16[6][2] ) + ( src[10] * g_aiT16[10][2] ) + ( src[14] * g_aiT16[14][2] ),
                 ( src[2] * g_aiT16[2][3] ) + ( src[6] * g_aiT16[6][3] ) + ( src[10] * g_aiT16[10][3] ) + ( src[14] * g_aiT16[14][3] )
                ]; 
                
    even := [ evenEven[0] + evenOdd[0],
    	      evenEven[1] + evenOdd[1],
    	      evenEven[2] + evenOdd[2],
    	      evenEven[3] + evenOdd[3],
    	      evenEven[3] - evenOdd[3],
    	      evenEven[2] - evenOdd[2],
    	      evenEven[1] - evenOdd[1],
    	      evenEven[0] - evenOdd[0]
            ];                       
         
    odd  := [( src[1] * g_aiT16[1][0] ) + ( src[3]  * g_aiT16[3] [0] ) + ( src[5]  * g_aiT16[5] [0] ) + ( src[7]  * g_aiT16[7] [0] ) +
    	     ( src[9] * g_aiT16[9][0] ) + ( src[11] * g_aiT16[11][0] ) + ( src[13] * g_aiT16[13][0] ) + ( src[15] * g_aiT16[15][0] ),
    	      
             ( src[1] * g_aiT16[1][1] ) + ( src[3]  * g_aiT16[3] [1] ) + ( src[5]  * g_aiT16[5] [1] ) + ( src[7]  * g_aiT16[7] [1] ) +
             ( src[9] * g_aiT16[9][1] ) + ( src[11] * g_aiT16[11][1] ) + ( src[13] * g_aiT16[13][1] ) + ( src[15] * g_aiT16[15][1] ),
                          
             ( src[1] * g_aiT16[1][2] ) + ( src[3]  * g_aiT16[3] [2] ) + ( src[5]  * g_aiT16[5] [2] ) + ( src[7]  * g_aiT16[7] [2] ) +
             ( src[9] * g_aiT16[9][2] ) + ( src[11] * g_aiT16[11][2] ) + ( src[13] * g_aiT16[13][2] ) + ( src[15] * g_aiT16[15][2] ),
             
             ( src[1] * g_aiT16[1][3] ) + ( src[3]  * g_aiT16[3] [3] ) + ( src[5]  * g_aiT16[5] [3] ) + ( src[7]  * g_aiT16[7] [3] ) +
             ( src[9] * g_aiT16[9][3] ) + ( src[11] * g_aiT16[11][3] ) + ( src[13] * g_aiT16[13][3] ) + ( src[15] * g_aiT16[15][3] ),
             
             ( src[1] * g_aiT16[1][4] ) + ( src[3]  * g_aiT16[3] [4] ) + ( src[5]  * g_aiT16[5] [4] ) + ( src[7]  * g_aiT16[7] [4] ) +
             ( src[9] * g_aiT16[9][4] ) + ( src[11] * g_aiT16[11][4] ) + ( src[13] * g_aiT16[13][4] ) + ( src[15] * g_aiT16[15][4] ),
             
             ( src[1] * g_aiT16[1][5] ) + ( src[3]  * g_aiT16[3] [5] ) + ( src[5]  * g_aiT16[5] [5] ) + ( src[7]  * g_aiT16[7] [5] ) +
             ( src[9] * g_aiT16[9][5] ) + ( src[11] * g_aiT16[11][5] ) + ( src[13] * g_aiT16[13][5] ) + ( src[15] * g_aiT16[15][5] ),
             
             ( src[1] * g_aiT16[1][6] ) + ( src[3]  * g_aiT16[3] [6] ) + ( src[5]  * g_aiT16[5] [6] ) + ( src[7]  * g_aiT16[7] [6] ) +
             ( src[9] * g_aiT16[9][6] ) + ( src[11] * g_aiT16[11][6] ) + ( src[13] * g_aiT16[13][6] ) + ( src[15] * g_aiT16[15][6] ),
             
             ( src[1] * g_aiT16[1][7] ) + ( src[3]  * g_aiT16[3] [7] ) + ( src[5]  * g_aiT16[5] [7] ) + ( src[7]  * g_aiT16[7] [7] ) +
             ( src[9] * g_aiT16[9][7] ) + ( src[11] * g_aiT16[11][7] ) + ( src[13] * g_aiT16[13][7] ) + ( src[15] * g_aiT16[15][7] )             
            ];                      

    dst := [ even[0] + odd[0],
             even[1] + odd[1],
             even[2] + odd[2],
             even[3] + odd[3],
             even[4] + odd[4],
             even[5] + odd[5],
             even[6] + odd[6],
             even[7] + odd[7], 
             even[7] - odd[7],
             even[6] - odd[6],
             even[5] - odd[5],
             even[4] - odd[4],                         
             even[3] - odd[3],
             even[2] - odd[2],
             even[1] - odd[1],
             even[0] - odd[0]
            ];
  end

end
