// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 
// modified by: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package xIT;

import devel.org.sc29.wg11.mpegh.part2.xIT.CommonConstant.*;

actor IT32x32_2d (int shift) int(size=16) Src // 16 bits
                    ==> 
                    int(size=16) Dst // 16 bits
                    :

	int(size=16) x[32*32];
	int(size=16) y[32*32];
	int(size=16) dst[32*32];

	procedure it32x32_1d(int(size=16) input[32*32], int(size=16) output[32*32])
	var
		int(size=25) evenEvenEvenEven[2],
		int(size=25) evenEvenEvenOdd[2],
		int(size=26) evenEvenEven[4],
		int(size=26) evenEvenOdd[4],
		int(size=27) evenEven[8],
		int(size=27) evenOdd[8],
		int(size=28) even[16],
		int(size=28) odd[16],
   		int rounding := 1 << (shift - 1)
	begin
		foreach int j in 0 .. 31
		do
			evenEvenEvenEven := [( input[j + 32*0] * g_aiT32[0][0] ) + ( input[j + 32*16] * g_aiT32[16][0] ),
	                         ( input[j + 32*0] * g_aiT32[0][1] ) + ( input[j + 32*16] * g_aiT32[16][1] )
	                        ];
	
			evenEvenEvenOdd  := [( input[j + 32*8] * g_aiT32[8][0] ) + ( input[j + 32*24] * g_aiT32[24][0] ),
	                         ( input[j + 32*8] * g_aiT32[8][1] ) + ( input[j + 32*24] * g_aiT32[24][1] )
	                        ];
	
			evenEvenEven := [ evenEvenEvenEven[0] + evenEvenEvenOdd[0],
	                      evenEvenEvenEven[1] + evenEvenEvenOdd[1],                                  
	                      evenEvenEvenEven[1] - evenEvenEvenOdd[1],
	                      evenEvenEvenEven[0] - evenEvenEvenOdd[0]
	                    ];
	
			evenEvenOdd  := [ ( input[j + 32*4] * g_aiT32[4][i] ) + ( input[j + 32*12] * g_aiT32[12][i] ) + ( input[j + 32*20] * g_aiT32[20][i] ) + ( input[j + 32*28] * g_aiT32[28][i] )
	    	              : for int i in 0 .. 3
	                    ];
	
			evenEven := [ evenEvenEven[0] + evenEvenOdd[0],
	                  evenEvenEven[1] + evenEvenOdd[1],
	                  evenEvenEven[2] + evenEvenOdd[2],
	                  evenEvenEven[3] + evenEvenOdd[3],
	                  evenEvenEven[3] - evenEvenOdd[3],
	                  evenEvenEven[2] - evenEvenOdd[2],                                    
	                  evenEvenEven[1] - evenEvenOdd[1],
	                  evenEvenEven[0] - evenEvenOdd[0]
	                ];
	
			evenOdd  := [( input[j + 32*2]  * g_aiT32[2] [i] ) + ( input[j + 32*6]  * g_aiT32[6] [i] ) + ( input[j + 32*10] * g_aiT32[10][i] ) + ( input[j + 32*14] * g_aiT32[14][i] ) +
	    	         ( input[j + 32*18] * g_aiT32[18][i] ) + ( input[j + 32*22] * g_aiT32[22][i] ) + ( input[j + 32*26] * g_aiT32[26][i] ) + ( input[j + 32*30] * g_aiT32[30][i] )
	    	         : for int i in 0 .. 7
	    	        ];
	
			even := [ evenEven[0] + evenOdd[0],
	    	      evenEven[1] + evenOdd[1],
	    	      evenEven[2] + evenOdd[2],
	    	      evenEven[3] + evenOdd[3],
	    	      evenEven[4] + evenOdd[4],
	    	      evenEven[5] + evenOdd[5],
	    	      evenEven[6] + evenOdd[6],
	    	      evenEven[7] + evenOdd[7],
	    	      evenEven[7] - evenOdd[7],
	    	      evenEven[6] - evenOdd[6],
	    	      evenEven[5] - evenOdd[5],
	    	      evenEven[4] - evenOdd[4],    	      
	    	      evenEven[3] - evenOdd[3],
	    	      evenEven[2] - evenOdd[2],
	    	      evenEven[1] - evenOdd[1],
	    	      evenEven[0] - evenOdd[0]
	            ];
	
			odd  := [( input[j + 32*1]  * g_aiT32[1] [i] ) + ( input[j + 32*3]  * g_aiT32[3] [i] ) + ( input[j + 32*5]  * g_aiT32[5] [i] ) + ( input[j + 32*7]  * g_aiT32[7] [i] ) +
	    	     ( input[j + 32*9]  * g_aiT32[9] [i] ) + ( input[j + 32*11] * g_aiT32[11][i] ) + ( input[j + 32*13] * g_aiT32[13][i] ) + ( input[j + 32*15] * g_aiT32[15][i] ) +
	    	     ( input[j + 32*17] * g_aiT32[17][i] ) + ( input[j + 32*19] * g_aiT32[19][i] ) + ( input[j + 32*21] * g_aiT32[21][i] ) + ( input[j + 32*23] * g_aiT32[23][i] ) +
	    	     ( input[j + 32*25] * g_aiT32[25][i] ) + ( input[j + 32*27] * g_aiT32[27][i] ) + ( input[j + 32*29] * g_aiT32[29][i] ) + ( input[j + 32*31] * g_aiT32[31][i] )
	    	     : for int i in 0 .. 15
	    	    ];
	
			output[32*j +  0] := (even[0]  + odd[0] + rounding) >> shift;
			output[32*j +  1] := (even[1]  + odd[1] + rounding) >> shift;
			output[32*j +  2] := (even[2]  + odd[2] + rounding) >> shift;
			output[32*j +  3] := (even[3]  + odd[3] + rounding) >> shift;
			output[32*j +  4] := (even[4]  + odd[4] + rounding) >> shift;
			output[32*j +  5] := (even[5]  + odd[5] + rounding) >> shift;
			output[32*j +  6] := (even[6]  + odd[6] + rounding) >> shift;
			output[32*j +  7] := (even[7]  + odd[7] + rounding) >> shift;
			output[32*j +  8] := (even[8]  + odd[8] + rounding) >> shift;
			output[32*j +  9] := (even[9]  + odd[9] + rounding) >> shift;
			output[32*j +  10] := (even[10] + odd[10] + rounding) >> shift;
			output[32*j +  11] := (even[11] + odd[11] + rounding) >> shift;
			output[32*j +  12] := (even[12] + odd[12] + rounding) >> shift;
			output[32*j +  13] := (even[13] + odd[13] + rounding) >> shift;
			output[32*j +  14] := (even[14] + odd[14] + rounding) >> shift;
			output[32*j +  15] := (even[15] + odd[15] + rounding) >> shift; 
			output[32*j +  16] := (even[15] - odd[15] + rounding) >> shift;
			output[32*j +  17] := (even[14] - odd[14] + rounding) >> shift;
			output[32*j +  18] := (even[13] - odd[13] + rounding) >> shift;
			output[32*j +  19] := (even[12] - odd[12] + rounding) >> shift;
			output[32*j +  20] := (even[11] - odd[11] + rounding) >> shift;
			output[32*j +  21] := (even[10] - odd[10] + rounding) >> shift;
			output[32*j +  22] := (even[9]  - odd[9] + rounding) >> shift;
			output[32*j +  23] := (even[8]  - odd[8] + rounding) >> shift;
			output[32*j +  24] := (even[7]  - odd[7] + rounding) >> shift;
			output[32*j +  25] := (even[6]  - odd[6] + rounding) >> shift;
			output[32*j +  26] := (even[5]  - odd[5] + rounding) >> shift;
			output[32*j +  27] := (even[4]  - odd[4] + rounding) >> shift;
			output[32*j +  28] := (even[3]  - odd[3] + rounding) >> shift;
			output[32*j +  29] := (even[2]  - odd[2] + rounding) >> shift;
			output[32*j +  30] := (even[1]  - odd[1] + rounding) >> shift;
			output[32*j +  31] := (even[0]  - odd[0] + rounding) >> shift;
		end
	end
              
 	action
 		Src:[ src ] repeat 32*32
 			==>
		Dst:[dst] repeat 32*32
	do
		x := [src[i]: for int i in 0 .. 32*32-1];
		it32x32_1d(x, y);
		dst := [y[i]: for int i in 0 .. 32*32-1];
	end

end
