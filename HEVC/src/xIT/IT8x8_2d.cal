// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 
// modified by: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package xIT;

import devel.org.sc29.wg11.mpegh.part2.xIT.CommonConstant.*;

actor IT8x8_2d ()
	int(size=16) Coeff
		==>
	int(size=16) Block
		:

	procedure it8x8_1d(int(size=16) input[64], int(size=16) output[64], int shift)
	var
		int(size=26) even[4],
		int(size=26) odd[4],
		int(size=26) rounding = 1 << shift - 1
	begin
		foreach int i in 0 .. 7 do
			even[0] := input[i + 8*0] * g_aiT8[0][0] + input[i + 8*4] * g_aiT8[4][0] +
			           input[i + 8*2] * g_aiT8[2][0] + input[i + 8*6] * g_aiT8[6][0];
			even[1] := input[i + 8*0] * g_aiT8[0][1] + input[i + 8*4] * g_aiT8[4][1] +
			           input[i + 8*2] * g_aiT8[2][1] + input[i + 8*6] * g_aiT8[6][1];
			even[2] := input[i + 8*0] * g_aiT8[0][1] + input[i + 8*4] * g_aiT8[4][1] -
			          (input[i + 8*2] * g_aiT8[2][1] + input[i + 8*6] * g_aiT8[6][1]);
			even[3] := input[i + 8*0] * g_aiT8[0][0] + input[i + 8*4] * g_aiT8[4][0] -
			          (input[i + 8*2] * g_aiT8[2][0] + input[i + 8*6] * g_aiT8[6][0]);
	
			odd[0]  := input[i + 8*1] * g_aiT8[1][0] + input[i + 8*3] * g_aiT8[3][0] +
			           input[i + 8*5] * g_aiT8[5][0] + input[i + 8*7] * g_aiT8[7][0];
			odd[1]  := input[i + 8*1] * g_aiT8[1][1] + input[i + 8*3] * g_aiT8[3][1] +
			           input[i + 8*5] * g_aiT8[5][1] + input[i + 8*7] * g_aiT8[7][1];
			odd[2]  := input[i + 8*1] * g_aiT8[1][2] + input[i + 8*3] * g_aiT8[3][2] +
			           input[i + 8*5] * g_aiT8[5][2] + input[i + 8*7] * g_aiT8[7][2];
			odd[3]  := input[i + 8*1] * g_aiT8[1][3] + input[i + 8*3] * g_aiT8[3][3] +
			           input[i + 8*5] * g_aiT8[5][3] + input[i + 8*7] * g_aiT8[7][3];
	
			output[8*i +  0] := (even[0] + odd[0] + rounding) >> shift;
			output[8*i +  1] := (even[1] + odd[1] + rounding) >> shift;
			output[8*i +  2] := (even[2] + odd[2] + rounding) >> shift;
			output[8*i +  3] := (even[3] + odd[3] + rounding) >> shift;
			output[8*i +  4] := (even[3] - odd[3] + rounding) >> shift;
			output[8*i +  5] := (even[2] - odd[2] + rounding) >> shift;
			output[8*i +  6] := (even[1] - odd[1] + rounding) >> shift;
			output[8*i +  7] := (even[0] - odd[0] + rounding) >> shift;
		end
	end
                  
	action
		Coeff:[ src ] repeat 64 // Coefficient matrices are processed column order, least significant first.
			==> 
		Block:[dstVal] repeat 64
	var
		int(size=16) x[64] := [src[i]: for int i in 0 .. 63],
		int(size=16) y[64],
		int(size=16) dstVal[64]
	do
		it8x8_1d(x, y, 7);
		it8x8_1d(y, x, 12);
		dstVal := [x[i]: for int i in 0 .. 63];
	end

end
