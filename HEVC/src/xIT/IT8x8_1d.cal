// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;

import xIT.CommonConstant.*;

actor IT8x8_1d () int(size=16) Src // 16 bits
                  ==> 
                  int(size=27) Dst // 27 bits
                  :
                  
  bool         DEBUG_L1              := false;
  bool         DEBUG_L2              := false;    
  int(size=32) DEBUG_nbTransformUnit := 0;
  int(size=32) DEBUG_nbColumn        := 0;              

  action Src:[ src ] repeat 8 // Coefficient matrices are processed column order, least significant first.
         ==> 
         Dst:[ dst[0], dst[1], dst[2], dst[3], dst[4], dst[5], dst[6], dst[7] ]
  var
   List(type:int(size=25), size=2 ) evenEven, //  one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=25), size=2 ) evenOdd,  //  one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=26), size=4 ) even,     //  one addition of two 25-bit summands = 26 bits
   List(type:int(size=26), size=4 ) odd,      //  three additions of four (16-bit + 8-bit) summands = 26 bits
   List(type:int(size=27), size=8 ) dst       //  one addition of two 26-bit summands =  27 bits
  do
    evenEven := [( src[0] * g_aiT8[0][0] ) + ( src[4] * g_aiT8[4][0] ),
                 ( src[0] * g_aiT8[0][1] ) + ( src[4] * g_aiT8[4][1] )
                ];  
                 
    evenOdd  := [( src[2] * g_aiT8[2][0] ) + ( src[6] * g_aiT8[6][0] ),
                 ( src[2] * g_aiT8[2][1] ) + ( src[6] * g_aiT8[6][1] )
                ]; 
                
    even     := [ evenEven[0] + evenOdd[0],
                  evenEven[1] + evenOdd[1],
                  evenEven[1] - evenOdd[1],
                  evenEven[0] - evenOdd[0]
                ];                           
         
    odd  := [( src[1] * g_aiT8[1][0] ) + ( src[3] * g_aiT8[3][0] ) + ( src[5] * g_aiT8[5][0] ) + ( src[7] * g_aiT8[7][0] ),
             ( src[1] * g_aiT8[1][1] ) + ( src[3] * g_aiT8[3][1] ) + ( src[5] * g_aiT8[5][1] ) + ( src[7] * g_aiT8[7][1] ),
             ( src[1] * g_aiT8[1][2] ) + ( src[3] * g_aiT8[3][2] ) + ( src[5] * g_aiT8[5][2] ) + ( src[7] * g_aiT8[7][2] ),
             ( src[1] * g_aiT8[1][3] ) + ( src[3] * g_aiT8[3][3] ) + ( src[5] * g_aiT8[5][3] ) + ( src[7] * g_aiT8[7][3] )
            ];                      

    dst := [ even[0] + odd[0],
             even[1] + odd[1],
             even[2] + odd[2],
             even[3] + odd[3],
             even[3] - odd[3],
             even[2] - odd[2],
             even[1] - odd[1],
             even[0] - odd[0]
           ];
           
	if (DEBUG_L1) then
      println("IT8x8_1d ACTION");
      println("---------------");      
      println("TU     = " + DEBUG_nbTransformUnit);
      println("Column = " + DEBUG_nbColumn);
      println("---------------");
      if (DEBUG_L2) then
        foreach int i in 0 .. 7 do
          println("src    = " + src[i]);
        end		  	
        println("---------------");
        foreach int i in 0 .. 3 do
          println("even   = " + even[i]);
        end
        println("---------------");        
        foreach int i in 0 .. 3 do
          println("odd    = " + odd[i]);
        end	        	  	
        println("---------------"); 
        foreach int i in 0 .. 7 do
          println("dst    = " + dst[i]);
        end		  	
        println("---------------");        			
      end
      DEBUG_nbColumn := (DEBUG_nbColumn + 1) mod 8; // 8 coefficients per column
      if (DEBUG_nbColumn = 0) then 
        DEBUG_nbTransformUnit := DEBUG_nbTransformUnit + 1;
      end
	end 	          
  end

end
