package xIT;

import std.util.Math.*;

actor invDST4x4()  int(size=16)   IN ==> int(size=16) OUT :

	procedure invDst4x4(int(size=16) input[16], int(size=16) output[16], int(size=8) shift)
	var
		int(size=16) rounding = 1 << (shift-1),
		int(size=32) c[4]
	begin
		foreach int i in 0 .. 3
		do
			c:= [
				input[  i] + input[ 8+i],
	    		input[8+i] + input[12+i],
	    		input[  i] - input[12+i],
	    		74* input[4+i]
	    		];
		    output[4*i+0] := clip_i32((29 * c[0] + 55 * c[1]     + c[3]            + rounding) >> shift, -32768, 32767);
		    output[4*i+1] := clip_i32((55 * c[2] - 29 * c[1]     + c[3]            + rounding) >> shift, -32768, 32767);
		    output[4*i+2] := clip_i32((74 * (input[i] - input[8+i]  + input[12+i]) + rounding) >> shift, -32768, 32767);
		    output[4*i+3] := clip_i32((55 * c[0] + 29 * c[2]     - c[3]            + rounding) >> shift, -32768, 32767);
		end
	end

	action IN:[coeff] repeat 16 ==> OUT:[block] repeat 16
	var
		int(size=16) x[16],
		int(size=16) y[16],
		int(size=16) block[16]
	do
		x := [coeff[i]: for int i in 0 .. 15];
		invDst4x4(x, y, 7);
		invDst4x4(y, x, 12);
		block := [x[i]: for int i in 0 .. 15];
	end

end