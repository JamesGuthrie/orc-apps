// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;

import xIT.CommonConstant.*;

actor IT4x4_1d () int(size=16) Src // 16 bits
                  ==> 
                  int(size=26) Dst // 26 bits
                  :
                  
  action Src:[ src ] repeat 4 // Coefficient matrices are processed column order, least significant first.
         ==> 
         Dst:[ dst[0], dst[1], dst[2], dst[3] ]
  var
   List(type:int(size=25), size=2 ) even, // one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=25), size=2 ) odd,  // one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=26), size=4 ) dst   // one addition of two 25-bit summands = 26 bits
  do
    even := [( src[0] * g_aiT4[0][0] ) + ( src[2] * g_aiT4[2][0]),
             ( src[0] * g_aiT4[0][1] ) + ( src[2] * g_aiT4[2][1])
            ];   
         
    odd  := [( src[1] * g_aiT4[1][0] ) + ( src[3] * g_aiT4[3][0] ),
             ( src[1] * g_aiT4[1][1] ) + ( src[3] * g_aiT4[3][1] )
            ];                      

    dst := [ even[0] + odd[0],
             even[1] + odd[1],
             even[1] - odd[1],
             even[0] - odd[0]
           ];
  end

end
