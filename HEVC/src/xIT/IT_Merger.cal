// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;  

actor IT_Merger()  int(size=6)   Size,                                          
                   int(size=16)  Block_4x4, 
                   int(size=16)  Block_8x8, 
                   int(size=16)  Block_16x16, 
                   int(size=16)  Block_32x32 
                   ==>                                    
                   int(size=16)  Block  
                   :
 			
	bool  	DEBUG_L1 := false;
	bool    DEBUG_L2 := false;
	
	uint(size=32) nbTransformUnit := 0;  				// number of TU merged		
	
	merge_4x4: action Size:      [ sizeOfTU, RCskip ], 
	                  Block_4x4: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 
	do
     	nbTransformUnit := nbTransformUnit + 1;	   
		if (DEBUG_L1) then
			println("Merger ACTION: merge_4x4");	
			println("------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 15 do
			    println("res    = " + res[i]);
			  end
			  println("nbTransformUnit = " + nbTransformUnit);  			  
			  println("------------------------");				  
			end	
        end			
	end
	
	merge_8x8: action Size:      [ sizeOfTU, RCskip ], 
	                  Block_8x8: [ res ] repeat 8*8 
	                  ==>
	                  Block: [ res ] repeat 8*8
	guard
      sizeOfTU = 8 
	do
	    nbTransformUnit := nbTransformUnit + 1;
		if (DEBUG_L1) then
			println("Merger ACTION: merge_8x8");	
			println("------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 63 do
			    println("res    = " + res[i]);
			  end
			  println("nbTransformUnit = " + nbTransformUnit);			  
			  println("------------------------");			  
			end	
        end			
	end
	
	merge_16x16: action Size:        [ sizeOfTU, RCskip ], 
	                    Block_16x16: [ res ] repeat 16*16 
	                    ==>
	                    Block: [ res ] repeat 16*16
	guard
      sizeOfTU = 16 
	do
	    nbTransformUnit := nbTransformUnit + 1;
		if (DEBUG_L1) then
			println("Merger ACTION: merge_16x16");	
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 255 do
			    println("res    = " + res[i]);
			  end			  			  
			  println("nbTransformUnit = " + nbTransformUnit);
			  println("--------------------------");			  
			end	
        end			
	end	
	
	merge_32x32: action Size:        [ sizeOfTU, RCskip ], 
	                    Block_32x32: [ res ] repeat 32*32 
	                    ==>
	                    Block: [ res ] repeat 32*32
	guard
	  sizeOfTU = 32 
	do
	    nbTransformUnit := nbTransformUnit + 1;
		if (DEBUG_L1) then
			println("Merger ACTION: merge_32x32");	
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("res    = " + res[i]);
			  end			  			  
			  println("nbTransformUnit = " + nbTransformUnit);
			  println("--------------------------");			  
			end	
        end			
	end	
	
end
