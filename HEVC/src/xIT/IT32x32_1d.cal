// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;

import xIT.CommonConstant.*;

actor IT32x32_1d () int(size=16) Src // 16 bits
                    ==> 
                    int(size=29) Dst // 29 bits
                    :
                  
  bool         DEBUG_L1              := true;
  bool         DEBUG_L2              := false;    
  int(size=32) DEBUG_nbTransformUnit := 0;
  int(size=32) DEBUG_nbColumn        := 0;              

  action Src:[ src ] repeat 32 // Coefficient matrices are processed column order, least significant first.
         ==> 
         Dst:[ dst[0] , dst[1] , dst[2] , dst[3] , dst[4] , dst[5] , dst[6] , dst[7],
         	   dst[8] , dst[9] , dst[10], dst[11], dst[12], dst[13], dst[14], dst[15],
         	   dst[16], dst[17], dst[18], dst[19], dst[20], dst[21], dst[22], dst[23],
         	   dst[24], dst[25], dst[26], dst[27], dst[28], dst[29], dst[30], dst[31] 
         	 ]
  var
   List(type:int(size=25), size=2  ) evenEvenEvenEven, // one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=25), size=2  ) evenEvenEvenOdd,  // one addition of two (16-bit + 8-bit) summands = 25 bits  
   List(type:int(size=26), size=4  ) evenEvenEven,     // one addition of two 25-bit summands = 26 bits
   List(type:int(size=26), size=4  ) evenEvenOdd,      // three additions of four (16-bit + 8-bit) summands = 26 bits
   List(type:int(size=27), size=8  ) evenEven,         // one addition of two 26-bit summands = 27 bits
   List(type:int(size=27), size=8  ) evenOdd,          // seven additions of eight (16-bit + 8-bit) summands = 27 bits
   List(type:int(size=28), size=16 ) even,             // one addition of two 27-bit summands = 28 bits
   List(type:int(size=28), size=16 ) odd,              // fifteen additions of sixteen (16-bit + 8-bit) summands = 28 bits
   List(type:int(size=29), size=32 ) dst               // one addition of two 28-bit summands =  29 bits
  do
    evenEvenEvenEven := [( src[0] * g_aiT32[0][0] ) + ( src[16] * g_aiT32[16][0] ),
                         ( src[0] * g_aiT32[0][1] ) + ( src[16] * g_aiT32[16][1] )
                        ];
                      
    evenEvenEvenOdd  := [( src[8] * g_aiT32[8][0] ) + ( src[24] * g_aiT32[24][0] ),
                         ( src[8] * g_aiT32[8][1] ) + ( src[24] * g_aiT32[24][1] )
                        ]; 

    evenEvenEven := [ evenEvenEvenEven[0] + evenEvenEvenOdd[0],
                      evenEvenEvenEven[1] + evenEvenEvenOdd[1],                                  
                      evenEvenEvenEven[1] - evenEvenEvenOdd[1],
                      evenEvenEvenEven[0] - evenEvenEvenOdd[0]
                    ];   

    evenEvenOdd  := [ ( src[4] * g_aiT32[4][i] ) + ( src[12] * g_aiT32[12][i] ) + ( src[20] * g_aiT32[20][i] ) + ( src[28] * g_aiT32[28][i] )
    	              : for int i in 0 .. 3
                    ];                     
                    
    evenEven := [ evenEvenEven[0] + evenEvenOdd[0],
                  evenEvenEven[1] + evenEvenOdd[1],
                  evenEvenEven[2] + evenEvenOdd[2],
                  evenEvenEven[3] + evenEvenOdd[3],
                  evenEvenEven[3] - evenEvenOdd[3],
                  evenEvenEven[2] - evenEvenOdd[2],                                    
                  evenEvenEven[1] - evenEvenOdd[1],
                  evenEvenEven[0] - evenEvenOdd[0]
                ];                                        

    evenOdd  := [( src[2]  * g_aiT32[2] [i] ) + ( src[6]  * g_aiT32[6] [i] ) + ( src[10] * g_aiT32[10][i] ) + ( src[14] * g_aiT32[14][i] ) +
    	         ( src[18] * g_aiT32[18][i] ) + ( src[22] * g_aiT32[22][i] ) + ( src[26] * g_aiT32[26][i] ) + ( src[30] * g_aiT32[30][i] )
    	         : for int i in 0 .. 7
    	        ];
                 
    even := [ evenEven[0] + evenOdd[0],
    	      evenEven[1] + evenOdd[1],
    	      evenEven[2] + evenOdd[2],
    	      evenEven[3] + evenOdd[3],
    	      evenEven[4] + evenOdd[4],
    	      evenEven[5] + evenOdd[5],
    	      evenEven[6] + evenOdd[6],
    	      evenEven[7] + evenOdd[7],
    	      evenEven[7] - evenOdd[7],
    	      evenEven[6] - evenOdd[6],
    	      evenEven[5] - evenOdd[5],
    	      evenEven[4] - evenOdd[4],    	      
    	      evenEven[3] - evenOdd[3],
    	      evenEven[2] - evenOdd[2],
    	      evenEven[1] - evenOdd[1],
    	      evenEven[0] - evenOdd[0]
            ];                       
       
    odd  := [( src[1]  * g_aiT32[1] [i] ) + ( src[3]  * g_aiT32[3] [i] ) + ( src[5]  * g_aiT32[5] [i] ) + ( src[7]  * g_aiT32[7] [i] ) +
    	     ( src[9]  * g_aiT32[9] [i] ) + ( src[11] * g_aiT32[11][i] ) + ( src[13] * g_aiT32[13][i] ) + ( src[15] * g_aiT32[15][i] ) +
    	     ( src[17] * g_aiT32[17][i] ) + ( src[19] * g_aiT32[19][i] ) + ( src[21] * g_aiT32[21][i] ) + ( src[23] * g_aiT32[23][i] ) +
    	     ( src[25] * g_aiT32[25][i] ) + ( src[27] * g_aiT32[27][i] ) + ( src[29] * g_aiT32[29][i] ) + ( src[31] * g_aiT32[31][i] )
    	     : for int i in 0 .. 15
    	    ];      
         
    dst := [ even[0]  + odd[0] ,
             even[1]  + odd[1] ,
             even[2]  + odd[2] ,
             even[3]  + odd[3] ,
             even[4]  + odd[4] ,
             even[5]  + odd[5] ,
             even[6]  + odd[6] ,
             even[7]  + odd[7] ,
             even[8]  + odd[8] ,
             even[9]  + odd[9] ,
             even[10] + odd[10],
             even[11] + odd[11],
             even[12] + odd[12],
             even[13] + odd[13],
             even[14] + odd[14],
             even[15] + odd[15],            
             even[15] - odd[15],
             even[14] - odd[14],
             even[13] - odd[13],
             even[12] - odd[12],                         
             even[11] - odd[11],
             even[10] - odd[10],
             even[9]  - odd[9] ,
             even[8]  - odd[8] ,              
             even[7]  - odd[7] ,
             even[6]  - odd[6] ,
             even[5]  - odd[5] ,
             even[4]  - odd[4] ,                         
             even[3]  - odd[3] ,
             even[2]  - odd[2] ,
             even[1]  - odd[1] ,
             even[0]  - odd[0]
            ];
           
	if (DEBUG_L1) then
      println("IT32x32_1d ACTION");
      println("-----------------");      
      println("TU     = " + DEBUG_nbTransformUnit);
      println("Column = " + DEBUG_nbColumn);
      println("-----------------");
      if (DEBUG_L2) then
        foreach int i in 0 .. 31 do
          println("src    = " + src[i]);
        end		  	
        println("---------------");
        foreach int i in 0 .. 15 do
          println("even   = " + even[i]);
        end
        println("---------------");        
        foreach int i in 0 .. 15 do
          println("odd    = " + odd[i]);
        end	        	  	
        println("---------------"); 
        foreach int i in 0 .. 31 do
          println("dst    = " + dst[i]);
        end		  	
        println("-----------------");        			
      end
      DEBUG_nbColumn := (DEBUG_nbColumn + 1) mod 32; // 32 columns per Transform Unit
      if (DEBUG_nbColumn = 0) then 
        DEBUG_nbTransformUnit := DEBUG_nbTransformUnit + 1;
      end
	end 	          
  end

end
