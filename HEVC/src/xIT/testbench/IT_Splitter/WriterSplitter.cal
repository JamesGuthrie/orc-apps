// Author: Endri Bezati <endri.bezati@epfl.ch>
// original code: Writer.cal actor of the jpeg encoder package

// Modified by Eduardo Juarez, Ren Rong and Wei Jianguo of UPM (Spain) <eduardo.juarez@upm.es>


package xIT.testbench.IT_Splitter;  

actor WriterSplitter()  int(size=16)  Coeff4x4,
                        int(size=16)  Coeff8x8,
                        int(size=16)  Coeff16x16,
                        int(size=16)  Coeff32x32,
                        bool          EOF
                        ==> 
                        :
                                      
	bool  	DEBUG_L1    := true;
	bool    DEBUG_L2    := true;
	bool    DEBUG_4x4   := false;
	bool    DEBUG_8x8   := false;
	bool    DEBUG_16x16 := false;
	bool    DEBUG_32x32 := true;
	
	@native procedure Writer_init() end
	@native procedure Writer_write(uint(size=8) byte) end
	@native procedure Writer_close() end
	
	uint(size=32) nbTransformUnit := 0; // number of TU written
	
	initialize ==>
	do
	  Writer_init();
		
	  if (DEBUG_L1) then
		println("WriterSplitter ACTION: initialize");
        println("WriterSplitter  STATE: WriteFile");
        println("---------------------------------");
      end
	end	
	
	closeFile: action EOF:[ eof ] 
	                  ==>	
    guard
      eof
	do	
	  if (DEBUG_L1) then
		println("WriterSplitter ACTION: closeFile");
	    println("---------------------------------");
	  end	
	  Writer_close();
	end	
	
	write_4x4: action Coeff4x4:[ res ] repeat 16,  // 4x4 TU = 16 16-bit residual coefficients
			 	      EOF:     [ eof ]
	                  ==>	
	guard
	  not eof
	var
	  uint(size=8) LSB,
	  uint(size=8) MSB	  
	do
      foreach int i in 0 .. 15 do
 	    LSB := res[i];
	    MSB := (res[i] >> 8);
	    if (DEBUG_4x4) then		    
          Writer_write(LSB);
	      Writer_write(MSB);  
	    end       
      end
      nbTransformUnit := nbTransformUnit + 1; 
		
	  if (DEBUG_L1) then
	    println("WriterSplitter ACTION: write_4x4");
		println("--------------------------------");
		if (DEBUG_L2) then
          foreach int i in 0 .. 15 do
            println("res[" + i + "]");		
            println("LSB    = " + LSB);
            println("MSB    = " + MSB);
		    println("--------------------------------");
		  end 
          println("endOfFile = " + eof);
		  println("nbTranformUnit = " + nbTransformUnit);
		  println("--------------------------------");		           	  
		end
	  end	  				
	end		
	
	write_8x8: action Coeff8x8:[ res ] repeat 64,  // 8x8 TU = 64 16-bit residual coefficients 
			 	      EOF:     [ eof ]
	                  ==>	
	guard
	  not eof
	var
	  uint(size=8) LSB,
	  uint(size=8) MSB	  
	do
      foreach int i in 0 .. 63 do
 	    LSB := res[i];
	    MSB := (res[i] >> 8);
	    if (DEBUG_8x8) then	    
          Writer_write(LSB);
	      Writer_write(MSB);
	    end         
      end	 
      nbTransformUnit := nbTransformUnit + 1;      
		
	  if (DEBUG_L1) then
	    println("WriterSplitter ACTION: write_8x8");
		println("--------------------------------");
		if (DEBUG_L2) then
          foreach int i in 0 .. 63 do
            println("res[" + i + "]");		
            println("LSB    = " + LSB);
            println("MSB    = " + MSB);
		    println("--------------------------------");
		  end
          println("endOfFile = " + eof);
		  println("nbTranformUnit = " + nbTransformUnit);
		  println("--------------------------------");		  
		end
	  end	  				
	end	
			
	write_16x16: action Coeff16x16:[ res ] repeat 256,  // 16x16 TU = 256 16-bit residual coefficients 
			 	        EOF:       [ eof ]
	                    ==>	
	guard
	  not eof
	var
	  uint(size=8) LSB,
	  uint(size=8) MSB	  
	do
      foreach int i in 0 .. 255 do
 	    LSB := res[i];
	    MSB := (res[i] >> 8);
	    if (DEBUG_16x16) then	    
          Writer_write(LSB);
	      Writer_write(MSB);
	    end         
      end	 
      nbTransformUnit := nbTransformUnit + 1;      
		
	  if (DEBUG_L1) then
	    println("WriterSplitter ACTION: write_16x16");
		println("----------------------------------");
		if (DEBUG_L2) then
          foreach int i in 0 .. 255 do
            println("res[" + i + "]");		
            println("LSB    = " + LSB);
            println("MSB    = " + MSB);
		    println("----------------------------------");
		  end
          println("endOfFile = " + eof);
		  println("nbTranformUnit = " + nbTransformUnit);
		  println("----------------------------------");		  
		end
	  end	  				
	end	
	
	write_32x32: action Coeff32x32:[ res ] repeat 1024,  // 32x32 TU = 1024 16-bit residual coefficients 
			 	        EOF:       [ eof ]
	                    ==>	
	guard
	  not eof
	var
	  uint(size=8) LSB,
	  uint(size=8) MSB	  
	do
      foreach int i in 0 .. 1023 do
 	    LSB := res[i];
	    MSB := (res[i] >> 8);
	    if (DEBUG_32x32) then
          Writer_write(LSB);
	      Writer_write(MSB);
	    end         
      end	 
      nbTransformUnit := nbTransformUnit + 1;      
		
	  if (DEBUG_L1) then
	    println("WriterSplitter ACTION: write_32x32");
		println("----------------------------------");
		if (DEBUG_L2) then
          foreach int i in 0 .. 1023 do
            println("res[" + i + "]");		
            println("LSB    = " + LSB);
            println("MSB    = " + MSB);
		    println("----------------------------------");
		  end
          println("endOfFile = " + eof);
		  println("nbTranformUnit = " + nbTransformUnit);
		  println("----------------------------------");		  
		end
	  end	  				
	end	
		
end
