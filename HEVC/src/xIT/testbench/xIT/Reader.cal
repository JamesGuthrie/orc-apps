// Author: Herve Yvique <herve.yviquel@irisa.fr>
// Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
// Modified by Jerome Gorin IETR/INSA of Rennes (France)

// Original code: Source.cal actor of the org.ietr.stdio package
// Modified by Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT.testbench.xIT;


actor Reader () ==> int(size=16)  Coeff,  
                    int(size=6)   Size,  
                    bool          EOF    // one token each TU
                    : 

	bool  	DEBUG_L1 := true;
	bool    DEBUG_L2 := false;
	
	@native procedure source_init()
	end
	@native procedure source_readNBytes(uint(size=8) outTable[MAX_NB_BYTE_TO_SEND], uint(size=13) nbByteToRead)
	end		
	@native function source_sizeOfFile() --> int(size=32)
	end	
	@native procedure source_close()
	end

	uint(size=13) MAX_NB_BYTE_TO_SEND = 2048;	// 32x32 TU = 1024 16-bit coefficients = 2048 bytes
	uint(size=3)  NB_HEADER_BYTE = 1;			// Size (1 byte)

	uint(size=8)  bytesRead[MAX_NB_BYTE_TO_SEND];	
	uint(size=32) nbByte          := 0;  				// file size
	uint(size=32) nbByteLeft      := 0;
	uint(size=13) nbByteToSend    := NB_HEADER_BYTE;  	// initially, read Size
	uint(size=13) nbByteSent      := 0;
	uint(size=32) nbTransformUnit := 0;  				// number of TU read

	bool          fileClosed  := false;
	bool		  headerCoeff := true;                   // initially, header is read

	initialize ==>
	do
		source_init();
		
		if (DEBUG_L1) then
			println("Reader ACTION: initialize");
			println("Reader  STATE: ReadInit");
			println("---------------------------------");
		end
	end
	
	getFileSize: action ==> 
	guard
		source_sizeOfFile() > 0
	do
		nbByte     := source_sizeOfFile();
		nbByteLeft := nbByte;
		
		if (DEBUG_L1) then
			println("Reader ACTION: getFileSize");
			println("Reader  STATE: ReadFile");
			println("----------------------------------");
			if (DEBUG_L2) then
			  println("nbByte     = " + nbByte);
			  println("nbByteLeft = " + nbByteLeft);			  
			  println("----------------------------------");			  
			end
		end
	end
	
	readHeader: action ==> 
	guard
	  (nbByteToSend > 0) and (nbByteToSend <= nbByteLeft) and (headerCoeff = true)
	do
	  
	  source_readNBytes(bytesRead, nbByteToSend);	  
	  nbByteLeft  := nbByteLeft - nbByteToSend;  
	  nbByteSent  := 0;          
	  
	  if (DEBUG_L1) then
			println("Reader ACTION: readHeader");
			println("Reader  STATE: SendHeader");
			println("---------------------------------");
			if (DEBUG_L2) then			
			  println("nbByteLeft      = " + nbByteLeft);			  
			  println("nbByteSent      = " + nbByteSent);
			  println("---------------------------------");			  	  		  
			end
	  end	
	end
	
	readCoeff: action ==>
	                  EOF:[ false ]
	guard 
	  (nbByteToSend > 0) and (nbByteToSend <= nbByteLeft) and (headerCoeff = false)	
	do

	  source_readNBytes(bytesRead, nbByteToSend);	  
	  nbByteLeft  := nbByteLeft - nbByteToSend;	 		  
	  nbByteSent  := 0;
	                 	  	  
	  if (DEBUG_L1) then
			println("Reader ACTION: readCoeff");
			println("Reader  STATE: SendCoeff");
			println("--------------------------------");
			if (DEBUG_L2) then
			  println("nbByteLeft      = " + nbByteLeft);				  
			  println("nbByteSent      = " + nbByteSent);
			  println("--------------------------------");			  
			end
	  end	
	end
		
	readEndOfFile: action ==> 
	guard
		(nbByteLeft > 0) and (nbByteToSend > nbByteLeft) 
	do
		source_readNBytes(bytesRead, nbByteLeft);
		nbByteLeft := 0;
		// nothing else is done
		
		if (DEBUG_L1) then
			println("Reader ACTION: readEndOfFile");
			println("Reader  STATE: ReadFile");
			println("------------------------------------");
			if (DEBUG_L2) then
			  println("nbByteLeft      = " + nbByteLeft);	
			  println("------------------------------------");			  
			end			
		end		
	end

	closeFile: action ==> 
	                  EOF:[ true ]
	guard
		(nbByteLeft = 0) and (fileClosed = false)
	do	
		
		source_close();
		fileClosed := true;		
        	
        if (DEBUG_L1) then
			println("Reader ACTION: closeFile");
			println("Reader  STATE: ReadFile");
			println("--------------------------------");
		end		
	end
	
    sendHeader.launch: action ==> Size:[ sizeOfTU ]	
	guard
		(headerCoeff = true) and (nbByteToSend > nbByteSent)
	var
		uint(size=16) sizeOfTU
	do
	
	    sizeOfTU   := bytesRead[0];
		nbByteSent := NB_HEADER_BYTE;  // header tokens sent at once
			
		if (DEBUG_L1) then
			println("Reader ACTION: sendHeader.launch");
			println("Reader  STATE: SendHeader");
			println("----------------------------------------");
			if (DEBUG_L2) then
			  println("sizeOfTU    = " + sizeOfTU);				
			  println("nbByteSent  = " + nbByteSent);	
			  println("----------------------------------------");			  		  
			end			
		end
	end

    sendHeader.done: action ==> 
	guard
	  (headerCoeff = true) and (nbByteToSend = nbByteSent)
	do	
		nbByteToSend  := bytesRead[0] * bytesRead[0] * 2;   // size * size 16-bit coefficients to read				
	    headerCoeff   := false;
	    
		if (DEBUG_L1) then
			println("Reader ACTION: sendHeader.done");
			println("Reader  STATE: ReadFile");
			println("--------------------------------------");
			if (DEBUG_L2) then
			  println("nbByteToSend  = "  + nbByteToSend);				  
			  println("headerCoeff    = " + headerCoeff);
			  println("--------------------------------------");			  			  
			end			
		end	    
	end
	
	sendCoeff.launch: action ==> Coeff:[ coeff ]
	guard
      (headerCoeff = false) and (nbByteToSend > nbByteSent)
	var
	  int(size=16) coeff	  
	do
	  coeff       := bytesRead[nbByteSent + 1];
	  coeff       := (coeff << 8) + bytesRead[nbByteSent];
	  nbByteSent  := nbByteSent + 2;  // two bytes sent at once
	  
      if (DEBUG_L1) then
        println("Reader ACTION: sendCoeff.launch");
        println("Reader  STATE: SendCoeff");
        println("---------------------------------------");
        if (DEBUG_L2) then
          println("coeff        = " + coeff);			
          println("nbByteSent  = " + nbByteSent);        
	      println("---------------------------------------");          			  
        end			
      end  	  
	end

	sendCoeff.done: action ==> 
	guard
	  (headerCoeff = false) and (nbByteToSend = nbByteSent)
	do
	  	nbByteToSend    := NB_HEADER_BYTE;	  	
      	headerCoeff     := true;
     	nbTransformUnit := nbTransformUnit + 1;	
	    
		if (DEBUG_L1) then
			println("Reader ACTION: sendCoeff.done");
			println("Reader  STATE: ReadFile");
			println("-------------------------------------");
			if (DEBUG_L2) then		
			  println("nbByteToSend    = " + nbByteToSend);				  		
			  println("headerCoeff      = " + headerCoeff);	
			  println("nbTransformUnit = " + nbTransformUnit);
			  println("-------------------------------------");			  				  		  
			end			
		end	    
	end
	
	schedule fsm ReadInit :

		ReadInit (getFileSize  ) --> ReadFile;
		
		ReadFile (readHeader   )  --> SendHeader;
		ReadFile (readCoeff     ) --> SendCoeff;
		ReadFile (readEndOfFile)  --> ReadFile;
		ReadFile (closeFile    )  --> ReadFile;
		
		SendHeader (sendHeader.launch) --> SendHeader;
		SendHeader (sendHeader.done  ) --> ReadFile;
		
		SendCoeff (sendCoeff.launch ) --> SendCoeff;
		SendCoeff (sendCoeff.done   ) --> ReadFile;
			
	end
	
end
