// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;  


actor IT_Splitter() int(size=16)  Coeff, 
                    int(size=7)   Size
                    ==> 
                    int(size=16)  Coeff_4x4_DST,  
                    int(size=16)  Coeff_4x4_IT,  
                    int(size=16)  Coeff_8x8, 
                    int(size=16)  Coeff_16x16, 
                    int(size=16)  Coeff_32x32,                                   
                    int(size=16)  Coeff_skip                                    
                    :
 			
	int 	MAX_TR_DYNAMIC_RANGE = 15; // Maximum transform dynamic range (excluding sign bit)
	int 	BIT_DEPTH = 8; // assuming 8bits for samples
	bool  	DEBUG_L1 = false;
	bool    DEBUG_L2 = false;	
	
	split_4x4.transf_skip: action Coeff:    [ coeff ] repeat 4*4, 
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	                  Coeff_skip:[ [(coeff[i] + offset) >> transformSkipShift: for int i in 0 .. 15] ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 2,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_4x4.DST: action Coeff:    [ coeff ] repeat 4*4, 
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	                  Coeff_4x4_DST:[ coeff ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and isDST = 1 and transformSkipFlag = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_4x4.IT: action Coeff:    [ coeff ] repeat 4*4, 
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	                  Coeff_4x4_IT:[ coeff ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and isDST = 0 and transformSkipFlag = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_4x4.skipIT: action  
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	guard
	  sizeOfTU = 4 and RCskip = 1 and transformSkipFlag = 0
	var
		int(size=16) coeff[16] = [0	: for int j in 0 .. 15]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4 : skip");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_8x8.trans_skip: action Coeff:    [ coeff ] repeat 8*8, 
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	                  Coeff_skip:[ [(coeff[i] + offset) >> transformSkipShift: for int i in 0 .. 63] ] repeat 8*8  
	guard
	  sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 3,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_8x8");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 63 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end	

	split_8x8.default: action Coeff:    [ coeff ] repeat 8*8, 
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	                  Coeff_8x8:[  coeff  ] repeat 8*8  
	guard
	  sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_8x8");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 63 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end	
	
	split_8x8.skip: action  
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                  ==>
	guard
	  sizeOfTU = 8 and RCskip = 1 and transformSkipFlag = 0
	var
		int(size=16) coeff[64] = [0	: for int j in 0 .. 63]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4 : skip");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 63 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_16x16.trans_skip: action Coeff:      [ coeff ] repeat 16*16, 
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	                    Coeff_skip:[ [(coeff[i] + offset) >> transformSkipShift: for int i in 0 .. 255] ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 4,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_16x16");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 255 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end	

	split_16x16.default: action Coeff:      [ coeff ] repeat 16*16, 
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	                    Coeff_16x16:[ coeff ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_16x16");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 255 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end	

	split_16x16.skip: action 
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	guard
	  sizeOfTU = 16 and RCskip = 1 and transformSkipFlag = 0
	var
		int(size=16) coeff[256] = [0	: for int j in 0 .. 255]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_16x16 : skip");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 255 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end	
	
	split_32x32.trans_skip: action Coeff:      [ coeff ] repeat 32*32,  
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	                    Coeff_skip:[ [(coeff[i] + offset) >> transformSkipShift: for int i in 0 .. 1023] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 5,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_32x32");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end

	split_32x32.default: action Coeff:      [ coeff ] repeat 32*32,  
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	                    Coeff_32x32:[ coeff ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_32x32");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end

	split_32x32.skip: action
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag ]
	                    ==>
	guard
	  sizeOfTU = 32 and RCskip = 1 and transformSkipFlag = 0
	var
		int(size=16) coeff[1024] = [0	: for int j in 0 .. 1023]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_32x32 : skip");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end
	
end
