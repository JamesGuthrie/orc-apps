// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;  

actor IT_Splitter() int(size=16)  Coeff, 
                    int(size=7)   Size
                    ==> 
                    int(size=16)  Coeff_4x4,  
                    int(size=16)  Coeff_8x8, 
                    int(size=16)  Coeff_16x16, 
                    int(size=16)  Coeff_32x32                                    
                    :
 			
	bool  	DEBUG_L1 := false;
	bool    DEBUG_L2 := false;	
	
	split_4x4.default: action Coeff:    [ coeff ] repeat 4*4, 
	                  Size:     [ sizeOfTU, RCskip, isLuma ]
	                  ==>
	                  Coeff_4x4:[ [ coeff[ 4 * column + row ] : for int row in 0 .. 3, for int column in 0 .. 3 ] ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_4x4.skip: action  
	                  Size:     [ sizeOfTU, RCskip, isLuma ]
	                  ==>
	                  Coeff_4x4:[ coeff ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 1
	var
		int(size=16) coeff[16] = [0	: for int j in 0 .. 15]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4 : skip");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 15 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end
	
	split_8x8.default: action Coeff:    [ coeff ] repeat 8*8, 
	                  Size:     [ sizeOfTU, RCskip, isLuma ]
	                  ==>
	                  Coeff_8x8:[  [ coeff[ 8 * column + row ] : for int row in 0 .. 7, for int column in 0 .. 7 ]  ] repeat 8*8  
	guard
	  sizeOfTU = 8 and RCskip = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_8x8");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 63 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end	
	
	split_8x8.skip: action  
	                  Size:     [ sizeOfTU, RCskip,isLuma ]
	                  ==>
	                  Coeff_8x8:[ coeff ] repeat 8*8
	guard
	  sizeOfTU = 8 and RCskip = 1
	var
		int(size=16) coeff[64] = [0	: for int j in 0 .. 63]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_4x4 : skip");		
			println("--------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 63 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("--------------------------");			  
			end	
        end			
	end

	split_16x16.default: action Coeff:      [ coeff ] repeat 16*16, 
	                    Size:       [ sizeOfTU, RCskip, isLuma ]
	                    ==>
	                    Coeff_16x16:[ [ coeff[ 16 * column + row ] : for int row in 0 .. 16, for int column in 0 .. 16 ] ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_16x16");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 255 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end	

	split_16x16.skip: action 
	                    Size:       [ sizeOfTU, RCskip, isLuma ]
	                    ==>
	                    Coeff_16x16:[ coeff ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 1
	var
		int(size=16) coeff[256] = [0	: for int j in 0 .. 255]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_16x16 : skip");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);	
			  foreach int i in 0 .. 255 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end	
	
	split_32x32.default: action Coeff:      [ coeff ] repeat 32*32,  
	                    Size:       [ sizeOfTU, RCskip, isLuma ]
	                    ==>
	                    Coeff_32x32:[ [ coeff[ 32 * column + row ] : for int row in 0 .. 32, for int column in 0 .. 32 ] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_32x32");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end

	split_32x32.skip: action
	                    Size:       [ sizeOfTU, RCskip, isLuma ]
	                    ==>
	                    Coeff_32x32:[ coeff ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 1
	var
		int(size=16) coeff[1024] = [0	: for int j in 0 .. 1023]
	do
		if (DEBUG_L1) then
			println("Splitter ACTION: split_32x32 : skip");		
			println("----------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 32 * 32 - 1 do
			    println("coeff["+i+"]     = " + coeff[i]);
			  end		  
			  println("----------------------------");			  
			end	
        end			
	end
	
end
