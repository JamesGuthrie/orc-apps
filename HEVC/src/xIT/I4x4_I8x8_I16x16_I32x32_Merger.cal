// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package xIT;  

actor I4x4_I8x8_I16x16_I32x32_Merger()  int(size=7)   Size_NxN,                                          
                                        int(size=16)  Res_4x4, 
                                        uint(size=7)  Stride_4x4,
                                        bool          EOF_4x4,
                                        int(size=16)  Res_8x8, 
                                        uint(size=7)  Stride_8x8,
                                        bool          EOF_8x8, 
                                        int(size=16)  Res_16x16, 
                                        uint(size=7)  Stride_16x16,
                                        bool          EOF_16x16,
                                        int(size=16)  Res_32x32, 
                                        uint(size=7)  Stride_32x32,
                                        bool          EOF_32x32  
                                        ==> 
                                        int(size=7)   Size,                                         
                                        int(size=16)  Res, 
                                        uint(size=7)  Stride, 
                                        bool          EOF
                                        :
 			
	bool  	DEBUG_L1 := true;
	bool    DEBUG_L2 := true;	
	
	merge_4x4: action Size_NxN:    [ sizeOfTU ], 
	                  Res_4x4:     [ res ] repeat 16, 
	                  Stride_4x4:  [ stride ], 
	                  EOF_4x4:     [ eof ] repeat 2
	                  ==>
	                  Size:   [ sizeOfTU ], 
	                  Res:    [ res ] repeat 16, 
                      Stride: [ stride ], 
	                  EOF:    [ eof ] repeat 2
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 4) 
	do
		if (DEBUG_L1) then
			println("Merger ACTION: merge_4x4");	
			println("-------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 15 do
			    println("res    = " + res[i]);
			  end			  
			  println("stride   = " + stride);	
			  foreach int i in 0 .. 1 do
			    println("eof    = " + eof[i]);
			  end		  
			  println("-------------------------");			  
			end	
        end			
	end
	
	merge_8x8: action Size_NxN:    [ sizeOfTU ], 
	                  Res_8x8:     [ res ] repeat 64, 
	                  Stride_8x8:  [ stride ], 
	                  EOF_8x8:     [ eof ] repeat 2
	                  ==>
	                  Size:   [ sizeOfTU ], 
	                  Res:    [ res ] repeat 64, 
                      Stride: [ stride ], 
	                  EOF:    [ eof ] repeat 2
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 8) 
	do
		if (DEBUG_L1) then
			println("Merger ACTION: merge_8x8");	
			println("-------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 63 do
			    println("res    = " + res[i]);
			  end			  
			  println("stride   = " + stride);	
			  foreach int i in 0 .. 1 do
			    println("eof    = " + eof[i]);
			  end		  
			  println("-------------------------");			  
			end	
        end			
	end
	
	merge_16x16: action Size_NxN:      [ sizeOfTU ], 
	                    Res_16x16:     [ res ] repeat 256, 
	                    Stride_16x16:  [ stride ], 
	                    EOF_16x16:     [ eof ] repeat 2
	                    ==>
	                    Size:   [ sizeOfTU ], 
	                    Res:    [ res ] repeat 256, 
                        Stride: [ stride ], 
	                    EOF:    [ eof ] repeat 2
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 16) 
	do
		if (DEBUG_L1) then
			println("Merger ACTION: merge_16x16");	
			println("-------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 255 do
			    println("res    = " + res[i]);
			  end			  
			  println("stride   = " + stride);	
			  foreach int i in 0 .. 1 do
			    println("eof    = " + eof[i]);
			  end		  
			  println("-------------------------");			  
			end	
        end			
	end	
	
	merge_32x32: action Size_NxN:      [ sizeOfTU ], 
	                    Res_32x32:     [ res ] repeat 1023, 
	                    Stride_32x32:  [ stride ], 
	                    EOF_32x32:     [ eof ] repeat 2
	                    ==>
	                    Size:   [ sizeOfTU ], 
	                    Res:    [ res ] repeat 1023, 
                        Stride: [ stride ], 
	                    EOF:    [ eof ] repeat 2
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 32) 
	do
		if (DEBUG_L1) then
			println("Merger ACTION: merge_32x32");	
			println("-------------------------");		
			if (DEBUG_L2) then
			  println("sizeOfTU = " + sizeOfTU);
			  foreach int i in 0 .. 1023 do
			    println("res    = " + res[i]);
			  end			  
			  println("stride   = " + stride);	
			  foreach int i in 0 .. 1 do
			    println("eof    = " + eof[i]);
			  end		  
			  println("-------------------------");			  
			end	
        end			
	end	
	
end
