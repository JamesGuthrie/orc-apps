// Author: Endri Bezati <endri.bezati@epfl.ch>
// original code: Writer.cal actor of the jpeg encoder package

// Modified by Eduardo Juarez, Ren Rong and Wei Jianguo of UPM (Spain) <eduardo.juarez@epfl.ch>


package xIT;  

actor Writer()  int(size=7)   Size,                                         
                int(size=16)  Res, 
                uint(size=7)  Stride, 
                bool          EOF		
                ==> 
                :

	bool  	DEBUG_L1 := true;
	bool    DEBUG_L2 := true;
		
	write_4x4: action Size:   [sizeOfTU],
	                  Res:    [res] repeat 16,
	                  Stride:  [stride],
	                  EOF:     [eof] repeat 2
	                  ==>
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 4)
	do
	  println(sizeOfTU + "x" + stride);
	  foreach int i in 0 .. 15
	  do
	  	  print(res[i] + ", ");
	  end
	  println("");
	  
	  if (DEBUG_L1) then
        println("Source ACTION: write_4x4");
        println("-------------------------");
        if (DEBUG_L2) then
          foreach int i in 0 .. 15 do
            println("res    = " + res[i]);
          end			  
          println("stride   = " + stride);	
          foreach int i in 0 .. 1 do
            println("eof    = " + eof[i]);
          end		  
          println("-------------------------");			  
        end				
      end  	  
	end

	write_8x8: action Size:   [sizeOfTU],
	                  Res:    [res] repeat 64,
	                  Stride:  [stride],
	                  EOF:     [eof] repeat 2
	                  ==>
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 8)
	do
	  println(sizeOfTU + "x" + stride);
	  foreach int i in 0 .. 63
	  do
	  	  print(res[i] + ", ");
	  end
	  println("");
	  
	  if (DEBUG_L1) then
        println("Source ACTION: write_8x8");
        println("-------------------------");
        if (DEBUG_L2) then
          foreach int i in 0 .. 63 do
            println("res    = " + res[i]);
          end			  
          println("stride   = " + stride);	
          foreach int i in 0 .. 1 do
            println("eof    = " + eof[i]);
          end		  
          println("-------------------------");			  
        end				
      end 	  
	end	
	
	write_16x16: action Size:   [sizeOfTU],
	                    Res:    [res] repeat 256,
	                    Stride:  [stride],
	                    EOF:     [eof] repeat 2
	                    ==>
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 16)
	do
	  println(sizeOfTU + "x" + stride);
	  foreach int i in 0 .. 255
	  do
	  	  print(res[i] + ", ");
	  end
	  println("");
	  
	  if (DEBUG_L1) then
        println("Source ACTION: write_16x16");
        println("-------------------------");
        if (DEBUG_L2) then
          foreach int i in 0 .. 255 do
            println("res    = " + res[i]);
          end			  
          println("stride   = " + stride);	
          foreach int i in 0 .. 1 do
            println("eof    = " + eof[i]);
          end		  
          println("-------------------------");			  
        end				
      end 
	end	
	
	write_32x32: action Size:   [sizeOfTU],
	                    Res:    [res] repeat 16,
	                    Stride:  [stride],
	                    EOF:     [eof] repeat 2
	                    ==>
	guard
	  (eof[0] = false) and (eof[1] = false) and (sizeOfTU = 32)
	do
	  println(sizeOfTU + "x" + stride);
	  foreach int i in 0 .. 1023
	  do
	  	  print(res[i] + ", ");
	  end
	  println("");
	  
	  if (DEBUG_L1) then
        println("Source ACTION: write_32x32");
        println("-------------------------");
        if (DEBUG_L2) then
          foreach int i in 0 .. 1023 do
            println("res    = " + res[i]);
          end			  
          println("stride   = " + stride);	
          foreach int i in 0 .. 1 do
            println("eof    = " + eof[i]);
          end		  
          println("-------------------------");			  
        end				
      end 
	end

end
