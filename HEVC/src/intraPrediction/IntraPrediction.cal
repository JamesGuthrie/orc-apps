/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
 
package intraPrediction;

import interPrediction.NaluType.*;
import std.util.Math.*;

actor IntraPrediction()
	uint(size=16) CuAddr,
	uint(size=2)  CuMode,
	uint(size=7)  CuSize,
	uint(size=6)  IntraPredMode,
	uint(size=4)  PartMode,
	uint(size=16) PicSize,
	uint(size=8)  Sample,
	bool          SplitTransf
		==>
	uint(size=8) PredSample
		:

	uint(size=6) INTRA_PLANAR = 0;
	uint(size=6) INTRA_DC = 1;

	uint(size=1) ABOVE = 0;
	uint(size=1) LEFT  = 1;


	uint(size=8) leftBlkAvail[256] =
	[0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 8, 1, 7, 1, 2, 1, 1, 1, 6, 1, 5, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 8, 1, 7, 1, 2, 1, 1, 1, 6, 1, 5, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1];

	uint(size=8) aboveBlkAvail[256] =
	[0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 16, 15, 2, 1, 14, 13, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 12, 11, 2, 1, 10,  9, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	  8,  7, 2, 1,  6,  5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	  4,  3, 2, 1,  2,  1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1];

	int(size=7) intraPredAngle[64] = [0, 0, 32, 26, 21, 17, 13, 9, 5, 2, 0, -2,
	-5, -9, -13, -17, -21, -26, -32, -26, -21, -17, -13, -9, -5, -2, 0, 2, 5,
	9, 13, 17, 21, 26, 32];

	int(size=9) invAngle[64] =
	[  0,     0,  -256, -315,  -390,  -482, -630,  -910, -1638, -4096,
	   0, -4096, -1638, -910,  -630,  -482, -390,  -315,  -256,  -315,
	-390,  -482,  -630, -910, -1638, -4096,    0, -4096, -1638,  -910,
	-630,  -482,  -390, -315,  -256];

	uint(size=7)  nS;
	uint(size=3)  log2NS;
	uint(size=16) cuAddr[2];
	uint(size=16) treeAddr[2];
	uint(size=16) pictSize[2];
	uint(size=3)  numPart;
	uint(size=3)  numPartDecoded;

	uint(size=6) predMode;
	uint(size=6) predModeTab[3];
	int (size=4) trafoTreeDepth;
	uint(size=3) trafoTreeIdx[6];

	uint(size=8) pNeighb[2][128];
	uint(size=8) pAboveLeft;
	uint(size=8) currPict[3][2048][2048];

	uint(size=8) result[3][64][64];
	uint(size=9) numBlkToSent;
	uint(size=9) idxBlk;

	function absCoordToRasterScan(uint(size=16) coord[2]) --> uint(size=8)
	var
		uint(size=4) xCoordInBlk = coord[0]/4,
		uint(size=4) yCoordInBlk = coord[1]/4
	:
		if((xCoordInBlk & 1)!=0) then 1   else 0 end +
		if((xCoordInBlk & 2)!=0) then 4   else 0 end +
		if((xCoordInBlk & 4)!=0) then 16  else 0 end +
		if((xCoordInBlk & 8)!=0) then 64  else 0 end +
		if((yCoordInBlk & 1)!=0) then 2   else 0 end +
		if((yCoordInBlk & 2)!=0) then 8   else 0 end +
		if((yCoordInBlk & 4)!=0) then 32  else 0 end +
		if((yCoordInBlk & 8)!=0) then 128 else 0 end
	end

	procedure rasterScanToAbsCoord(uint(size=8) rasterIdx, uint(size=16) coord[2])
	begin
		coord[0] :=  (rasterIdx    &1)* 4 + ((rasterIdx>>2)&1)* 8 +
		            ((rasterIdx>>4)&1)*16 + ((rasterIdx>>6)&1)*32;

		coord[1] := ((rasterIdx>>1)&1)* 4 + ((rasterIdx>>3)&1)* 8 +
		            ((rasterIdx>>5)&1)*16 + ((rasterIdx>>7)&1)*32;
	end

	procedure getNeighbSamples(uint(size=16) cuAddr[2], uint(size=2) cIdx, uint(size=7) nS)
	var
		int maxVal[2],
		int xMax,
		int yMax
	begin
		neighbExist(cuAddr, maxVal, cIdx, nS);
		xMax := maxVal[0];
		yMax := maxVal[1];
		foreach int x in 0 .. xMax-1
		do
			pNeighb[ABOVE][x] := currPict[cIdx][cuAddr[0]+x][cuAddr[1]-1];
		end
		if(xMax!=0) then
			foreach int x in xMax .. 2*nS-1
			do
				pNeighb[ABOVE][x] := pNeighb[ABOVE][xMax-1];
			end
		end

		foreach int y in 0 .. yMax-1
		do
			pNeighb[LEFT][y] := currPict[cIdx][cuAddr[0]-1][cuAddr[1]+y];
		end
		if(yMax!=0) then
			foreach int y in yMax .. 2*nS-1
			do
				pNeighb[LEFT][y] := pNeighb[LEFT][yMax-1];
			end
		end

		if(xMax=0 && yMax=0) then
			foreach int idx in 0 .. 2*nS
			do
				pNeighb[ABOVE][idx] := 128;
				pNeighb[LEFT][idx]  := 128;
			end
			pAboveLeft := 128;
		else if(xMax =0 && yMax!=0) then
			foreach int x in 0 .. 2*nS
			do
				pNeighb[ABOVE][x] := pNeighb[LEFT][0];
			end
			pAboveLeft := pNeighb[LEFT][0];
		else if(xMax!=0 && yMax =0) then
			foreach int y in 0 .. 2*nS
			do
				pNeighb[LEFT][y] := pNeighb[ABOVE][0];
			end
			pAboveLeft := pNeighb[ABOVE][0];
		else
			pAboveLeft := currPict[cIdx][cuAddr[0]-1][cuAddr[1]-1];
		end end end
	end

	procedure neighbExist(uint(size=16) cuAddr[2], int maxVal[2], int cIdx, uint(size=7) nS)
	var
		uint(size=7) maxCuSize = if(cIdx=0) then 64 else 32 end,
		int xMax,
		int yMax,
		int numPixRemain
	begin

		xMax := 0;
		if(cuAddr[1]!=0) then
			numPixRemain :=
				if((cuAddr[1]&~(maxCuSize-1)) =
					((cuAddr[1]-1)&~(maxCuSize-1))) then
					min( aboveBlkAvail[absCoordToRasterScan(cuAddr)]<<2,
						pictSize[0]-cuAddr[0])
				else
					pictSize[0]-cuAddr[0]
				end;
			xMax := min(2*nS, numPixRemain);
		end

		yMax := 0;
		if(cuAddr[0]!=0) then
			numPixRemain :=
				if((cuAddr[0]&~(maxCuSize-1)) =
					((cuAddr[0]-1)&~(maxCuSize-1))) then
					leftBlkAvail[absCoordToRasterScan(cuAddr)]<<2
				else
					maxCuSize-(cuAddr[1]&(maxCuSize-1))
				end;
			yMax := min(min(2*nS, numPixRemain), pictSize[1]-cuAddr[1]);
		end

		maxVal[0] := xMax;
		maxVal[1] := yMax;
	end

	procedure filterNeighbSamp(uint(size=7) nS)
	var
		uint(size=5) minDistVertHor,
		uint pFNeighb[2][64]
	begin
		minDistVertHor := min(abs(predMode-26), abs(predMode-10));
		if(nS=4  && minDistVertHor>10 ||
		   nS=8  && minDistVertHor>7 ||
		   nS=16 && minDistVertHor>1 ||
		   nS=32 && minDistVertHor>0 ||
		   nS=64 && minDistVertHor>10) then
			foreach uint neighb in 0 .. 1
			do
				pFNeighb[neighb][0] := (pAboveLeft + 2*pNeighb[neighb][0] +
					pNeighb[neighb][1] + 2) >> 2;
				foreach uint i in 1 .. nS*2-2
				do
					pFNeighb[neighb][i] := (pNeighb[neighb][i-1] + 2*pNeighb[neighb][i] +
						pNeighb[neighb][i+1] + 2) >> 2;
				end
			end
			pAboveLeft := (pNeighb[LEFT][0] + 2*(pAboveLeft) + pNeighb[ABOVE][0] + 2) >> 2;
			foreach uint neighb in 0 .. 1
			do
				foreach uint i in 1 .. nS*2-2
				do
					pNeighb[neighb][i] := pFNeighb[neighb][i];
				end
			end
		end
	end

	procedure intraPlanarPred(uint(size=2) cIdx, uint(size=7) nS, uint(size=3) log2NS)
	var
		uint(size=8) pUpRight,
		uint(size=8) pBottomLeft
	begin
		pUpRight    := pNeighb[ABOVE][nS];
		pBottomLeft := pNeighb[LEFT][nS];
		foreach uint y in 0 .. nS-1
		do
			foreach uint x in 0 .. nS-1
			do
				result[cIdx][x][y] := ((nS-1-x)*pNeighb[LEFT][y] + (x+1)*pUpRight +
				(nS-1-y)*pNeighb[ABOVE][x] + (y+1)*pBottomLeft + nS) >> (log2NS+1);
			end
		end
	end

	procedure intraDcPred(uint(size=2) cIdx, uint(size=7) nS, uint(size=3) log2NS)
	var
		uint(size=13) dcVal
	begin
		dcVal := nS;
		foreach uint x in 0 .. nS-1
		do
			dcVal := dcVal + pNeighb[ABOVE][x];
		end
		foreach uint y in 0 .. nS-1
		do
			dcVal := dcVal + pNeighb[LEFT][y];
		end
		dcVal := dcVal >> (log2NS+1);
		if(cIdx=0) then
			result[cIdx][0][0] := (pNeighb[LEFT][0] + 2*dcVal + pNeighb[ABOVE][0] + 2)>>2;
			foreach uint x in 1 .. nS-1
			do
				result[cIdx][x][0] := (pNeighb[ABOVE][x] + 3*dcVal + 2)>>2;
			end
			foreach uint y in 1 .. nS-1
			do
				result[cIdx][0][y] := (pNeighb[LEFT][y] + 3*dcVal + 2)>>2;
				foreach uint x in 1 .. nS-1
				do
					result[cIdx][x][y] := dcVal;
				end
			end
		else
			foreach uint y in 0 .. nS-1
			do
				foreach uint x in 0 .. nS-1
				do
					result[cIdx][x][y] := dcVal;
				end
			end
		end
	end

	procedure intraAngularPred(uint(size=2) cIdx, uint(size=7) nS)
	var
		uint(size=6) OFFSET = 33,
		uint(size=6) angle := predMode & 63,
		uint(size=1) neighbIdx,
		uint refMain[128+33],
		int(size=9) iIdx,
		uint(size=5) iFact
	begin
		if(angle=26 || angle = 10) then
			intraAngularVertOrHor( cIdx, angle=26, nS);
		else
			neighbIdx := if(angle>=18) then ABOVE else LEFT end;
			refMain[OFFSET] := pAboveLeft;
			foreach uint x in 1 .. nS
			do
				refMain[x+OFFSET] := pNeighb[neighbIdx][x-1];
			end
			if(intraPredAngle[angle]<0) then
				neighbIdx := neighbIdx^1;
				foreach int x in (nS*intraPredAngle[angle])>>5 .. -1
				do
					refMain[x+OFFSET] := pNeighb[neighbIdx][((x*invAngle[angle]+128)>>8)-1];
				end
			else
				foreach uint x in nS+1 .. 2*nS-1
				do
					refMain[x+OFFSET] := pNeighb[neighbIdx][x-1];
				end
			end
			if(angle>=18) then
				foreach uint y in 0 .. nS-1
				do
					iIdx  := ((y+1)*intraPredAngle[angle])>>5;
					iFact := ((y+1)*intraPredAngle[angle])&31;
					foreach uint x in 0 .. nS-1
					do
						if(iFact!=0) then
							result[cIdx][x][y] := ((32-iFact)*refMain[x+iIdx+1 +OFFSET] +
								iFact*refMain[x+iIdx+2 +OFFSET]+16) >> 5;
						else
							result[cIdx][x][y] := refMain[x+iIdx+1 +OFFSET];
						end
					end
				end
			else
				foreach uint y in 0 .. nS-1
				do
					iIdx  := ((y+1)*intraPredAngle[angle])>>5;
					iFact := ((y+1)*intraPredAngle[angle])&31;
					foreach uint x in 0 .. nS-1
					do
						if(iFact!=0) then
							result[cIdx][y][x] := ((32-iFact)*refMain[x+iIdx+1 +OFFSET] +
								iFact*refMain[x+iIdx+2 +OFFSET]+16) >> 5;
						else
							result[cIdx][y][x] := refMain[x+iIdx+1 +OFFSET];
						end
					end
				end
			end
		end
	end

	procedure intraAngularVertOrHor(uint(size=2) cIdx, bool isVertical, uint(size=7) nS)
	var
		uint(size=1) neighbIdx = if(isVertical) then ABOVE else LEFT end
	begin
		if(cIdx=0) then
			if(isVertical) then
				foreach uint y in 0 .. nS-1
				do
					result[cIdx][0][y] := clip_i32(pNeighb[ABOVE][0]+((pNeighb[LEFT][y]-pAboveLeft)>>1),
						0, 255);
				end
				foreach uint x in 1 .. nS-1
				do
					result[cIdx][x][0] := pNeighb[ABOVE][x];
				end
			else
				foreach uint x in 0 .. nS-1
				do
					result[cIdx][x][0] := clip_i32(pNeighb[LEFT][0]+((pNeighb[ABOVE][x]-pAboveLeft)>>1),
						0, 255);
				end
				foreach uint y in 1 .. nS-1
				do
					result[cIdx][0][y] := pNeighb[LEFT][y];
				end
			end
			foreach uint x in 1 .. nS-1
			do
				foreach uint y in 1 .. nS-1
				do
					result[cIdx][x][y] := pNeighb[neighbIdx][x];
				end
			end
		else
			foreach uint x in 0 .. nS-1
			do
				foreach uint y in 0 .. nS-1
				do
					result[cIdx][x][y] := pNeighb[neighbIdx][x];
				end
			end
		end
	end
	
	uint(size=16) sliceNum := 0;

	isNewSliceOrPict: action PartMode:[partMode], PicSize:[pictSizeVal] repeat 2 ==>
	guard
		partMode = NEW_SLICE || partMode = NEW_PICT
	do
		pictSize := pictSizeVal;
		println("Slice num "+sliceNum);
		sliceNum := sliceNum + 1;
	end

	getPartMode: action PartMode:[partMode] ==>
	guard
		partMode != NEW_SLICE || partMode != NEW_PICT
	do
		numPart := partModeToNumPart[partMode];
		numPartDecoded := 0;
	end

	getCuInfo.launch: action CuSize:[cuSize] repeat 2, CuAddr:[cuAddrVal]
		repeat 2 ==>
	guard
		numPartDecoded < numPart
	do
		nS := cuSize[0];
		cuAddr := cuAddrVal;
		numPartDecoded := numPartDecoded + 1;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	getCuMode.isIntra: action CuMode:[cuMode], IntraPredMode:[predMode] repeat 2 ==>
	guard
		cuMode = INTRA
	do
		predModeTab[0] := predMode[0];
		predModeTab[1] := predMode[1];
		predModeTab[2] := predMode[1];

		if(predMode[1] = 35) then
			println("Warning : we don't manage Intra_FromLuma yet !!!");
		end
		log2NS := 2;
		while((1<<log2NS) < nS)
		do
			log2NS := log2NS+1;
		end
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
	end

	getCuMode.isInter: action CuMode:[cuMode] ==>
	guard
		cuMode = INTER || cuMode = SKIP
	end

	getCuMode.isOther: action CuMode:[cuMode] ==>
	guard
		cuMode = OTHER
	end

	getSplitTrafo.isTrue: action SplitTransf:[splitTrafo] ==>
	guard
		splitTrafo && trafoTreeDepth>-1
	do
		trafoTreeDepth := trafoTreeDepth + 1;
		trafoTreeIdx[trafoTreeDepth] := 0;
	end

	getSplitTrafo.isFalse: action SplitTransf:[splitTrafo] ==>
	guard
		not splitTrafo && trafoTreeDepth>-1
	var
		uint(size=2)  cIdxMax,
		uint(size=7)  treeNS,
		uint(size=3)  treeLog2NS,
		uint(size=16) locAddr[2]
	do
		/* Computing the size and the address of the current block. */
		treeLog2NS := log2NS - trafoTreeDepth;
		treeNS := nS;
		treeAddr := [cuAddr[i]: for int i in 0 .. 1];
		foreach uint idx in 1 .. trafoTreeDepth
		do
			treeNS := treeNS >> 1;
			if((trafoTreeIdx[idx]&1) != 0) then
				treeAddr[0] := treeAddr[0] + treeNS;
			end
			if((trafoTreeIdx[idx]&2) != 0) then
				treeAddr[1] := treeAddr[1] + treeNS;
			end
		end

		numBlkToSent := treeNS*treeNS/16;
		idxBlk := 0;

		if(treeLog2NS != 2) then
			cIdxMax := 3;
		else
			if((cuAddr[0]&7) = 0 && (cuAddr[1]&7) = 0) then
				cIdxMax := 3;
			else
				cIdxMax := 1;
			end
		end
		locAddr := [treeAddr[i]:for int i in 0 .. 1];
		foreach uint cIdx in 0 .. cIdxMax-1
		do
			predMode := predModeTab[cIdx];
			if(cIdx = 1) then
				if(treeLog2NS != 2) then
					treeNS := treeNS >> 1;
					treeLog2NS := treeLog2NS - 1;
				end
				locAddr[0] := locAddr[0] >> 1;
				locAddr[1] := locAddr[1] >> 1;
			end
			getNeighbSamples(locAddr, cIdx, treeNS);
			if(cIdx=0) then
				filterNeighbSamp(treeNS);
			end
			if(predMode = INTRA_PLANAR) then
				intraPlanarPred(cIdx, treeNS, treeLog2NS);
			else if(predMode = INTRA_DC) then
				intraDcPred(cIdx, treeNS, treeLog2NS);
			else
				intraAngularPred(cIdx, treeNS);
			end end
		end

		/* going to the next "branch of the tree" */
		trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
		while(trafoTreeDepth > -1 && trafoTreeIdx[trafoTreeDepth] = 4)
		do
			trafoTreeDepth := trafoTreeDepth - 1;
			if(trafoTreeDepth>-1) then
				trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
			end
		end
	end

	getSplitTrafo.done: action ==>
	guard
		trafoTreeDepth = -1
	end

	sendSamples.launch: action ==> PredSample:[sampleVal] repeat 16
	guard
		idxBlk < numBlkToSent
	var
		uint(size=8) sampleVal[4*4],
		uint(size=7) idxSample := 0,
		uint(size=16) blkAddr[2]
	do
		rasterScanToAbsCoord(idxBlk, blkAddr);

		foreach uint y in blkAddr[1] .. blkAddr[1]+3
		do
			foreach uint x in blkAddr[0] .. blkAddr[0]+3
			do
				sampleVal[idxSample] := result[0][x][y];
				idxSample := idxSample + 1;
			end
		end
		idxBlk := idxBlk + 1;
	end

	sendSamples.done: action ==>
	guard
		idxBlk = numBlkToSent
	do
		idxBlk := 0;
	end

	getSamples.launch: action Sample:[sample] repeat 16 ==>
	guard
		idxBlk < numBlkToSent
	var
		uint(size=7) idxSample := 0,
		uint(size=16) blkAddr[2]
	do
		rasterScanToAbsCoord(idxBlk, blkAddr);
		blkAddr[0] := blkAddr[0] + treeAddr[0];
		blkAddr[1] := blkAddr[1] + treeAddr[1];

		foreach uint y in blkAddr[1] .. blkAddr[1]+3
		do
			foreach uint x in blkAddr[0] .. blkAddr[0]+3
			do
				currPict[0][x][y] := sample[idxSample];
				idxSample := idxSample + 1;
			end
		end
		idxBlk := idxBlk + 1;
	end

	getSamples.done: action ==>
	guard
		idxBlk = numBlkToSent
	end

	schedule fsm GetPartMode:
		GetPartMode(isNewSliceOrPict )--> GetPartMode;
		GetPartMode(getPartMode      )--> GetCuInfo;

		GetCuInfo (getCuInfo.launch )--> GetCuMode;
		GetCuInfo (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isIntra )--> GetSplitTrafo;
		GetCuMode (getCuMode.isInter )--> GetCuInfo;
		GetCuMode (getCuMode.isOther )--> GetCuInfo;

		GetSplitTrafo (getSplitTrafo.isTrue  )--> GetSplitTrafo;
		GetSplitTrafo (getSplitTrafo.isFalse )--> SendSamples;
		GetSplitTrafo (getSplitTrafo.done    )--> GetCuInfo;

		SendSamples (sendSamples.launch )--> SendSamples;
		SendSamples (sendSamples.done   )--> GetSamples;

		GetSamples (getSamples.launch )--> GetSamples;
		GetSamples (getSamples.done   )--> GetSplitTrafo;

	end
end