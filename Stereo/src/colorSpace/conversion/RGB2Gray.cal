 /*
 * Author: Jinglin
 * Date: 16/01/13 
 * actor of transforming rgb to gray
 * Gray = (382*R + 751*G + 146*B) << 7;
 */
 
package colorSpace.conversion; 
import std.util.Math.*;

actor RGB2Gray()
uint(size=8) I ==> uint(size=8) Gray:
	int width=450;
	int height=375;
	uint(size=8) rgb[width*height*3];
	uint(size=8) output[width*height];
	int cnt:=0;
	int cnt1:=0;
	int cnt2:=0;
	int cnt3:=0;
	
	//load header data, but discard them
	load_header: action I:[input] ==>
	guard
		cnt3 < 15
	do
		rgb[cnt3] := input;
		cnt3 := cnt3 + 1;
	end
	 
	load_header_done: action ==>
	guard 
		cnt3 = 15
	do
		cnt3 := 0;
	end
		 
	load: action I:[input] ==> 
	guard
		cnt < width *height*3	
	do
		rgb[cnt] := input;
		cnt := cnt +1;
	end
	
	load_done: action  ==> 
	guard
		cnt = width *height*3	
	do
		cnt := 0;
	end
	
	conversion: action ==> 
	guard
		cnt1 < width * height	
	do
		output[cnt1] := (382 * rgb[cnt1*3] + 751 * rgb[cnt1*3+1] + 146 * rgb[cnt1*3+2])<<7;
		cnt1 := cnt1 + 1;
	end
	
	conversion_done: action ==> 
	guard
		cnt1 = width * height	
	do
		cnt1 := 0;
	end
	
	send: action ==> Gray:[ GrayValue] 
	guard
		cnt2 < height*width
	var
		uint(size=8) GrayValue
	do
		
		GrayValue := output[cnt2];
		cnt2 := cnt2 +1;
	end
	
	send_done: action ==> 
	guard
		cnt2 = height*width
	do
		cnt2 := 0;
	end
	
	schedule fsm load:
		load_header(load_header) --> load_header;
		load_header(load_header_done) --> load;
		load(load) --> load;
		load(load_done) --> conversion;
		conversion(conversion) --> conversion;
		conversion(conversion_done) --> send;
		send(send) --> send;
		send(send_done) --> load;
	end
	
	priority
		load_header_done > load_header;
		load_done > load;
		conversion_done > conversion ;
		send_done > send;
		load > conversion > send;
	end 
		
end