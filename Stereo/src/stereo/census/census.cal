/*
 * Author:jinglin 
 * actor: census transform for census cost
 */
package stereo.census;

/**
 * Standard census encode actor.
 */
actor census () 
uint(size=16) SizeOfImage, uint(size=8) Gray 
==>
uint(size=8) census:

	int WIDTH = 352;
	int HEIGHT = 288;
	uint(size=16) winW := 5;
	uint(size=16) winH := 5;
	uint(size=32) cnt := 0;
	uint(size=8) cost;
	uint(size=8) pixels[WIDTH*HEIGHT];
	uint(size=8) output[WIDTH*HEIGHT];


	load:action Gray:[pixel] ==>
	guard
		cnt < WIDTH*HEIGHT
	do
		pixels[cnt] := pixel;
		cnt := cnt + 1;
	end
	
	load_done:action ==>
	guard 
		cnt = WIDTH*HEIGHT
	do
		cnt := 0;
	end

	start:
	action ==> 
	
		do 
			foreach int j in 6 .. HEIGHT-6
			do
				foreach int i in 6 .. WIDTH-6
				do
					foreach int y in -(winH-1)/2 .. (winH-1)/2
					do
						foreach int x in 0 -(winW-1)/2 .. (winW-1)/2
						do
						
							if(y=0 && x=0) then 
							else 
								cost := cost<<1;
							end
							
							if(pixels[j*WIDTH +i] > pixels[(j+y)*WIDTH + i+x]) then
								cost := cost + 1;
							end
						end
					end
					output[j*WIDTH +i] := cost;
				end
			end			
	end
	
	send: action ==> census:[cen]
	guard
		cnt < WIDTH*HEIGHT 
	var
		uint(size=8) cen
	do
		cen := output[cnt];
		cnt := cnt + 1;
	end
	
	send_done: action ==>
	guard
		cnt = WIDTH*HEIGHT
	do
		cnt := 0;
	end
	
	
	schedule fsm load:
		load(load) --> load;
		load(load_done) --> start;
		start(start) --> send;
		send(send) --> send;
		send(send_done) --> load;
	end
	
	priority 
		load_done > load;
		send_done > send;
	end
		

end 