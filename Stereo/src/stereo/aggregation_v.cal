/*aggregation_v Jinglin
 * Date: 10/04/13 
 * actor of aggregating disparity in vertical directions with adaptive weight 
 */
package stereo;

import std.util.Math.*;
 
actor aggregation_v()
	float Cost_in, uint(size=8) L_rgb, uint(size=8) step
	==> 
	float Cost_out:

	//const
	int max_rd = 60;
	float R_gama = 0.05882;
	int height = 375;
	int width = 450;
	
	//variable
	float r0;
	float g0;
	float b0;
	float r;
	float g;
	float b;
	float wm;
	float wp;
	float w0;
	float cm;
	float cp;
	float c0;
	int dj := 0;
	float val:=0.0;

//	procedure aggregation_V(int offset, float R_gamaC, uint(size=8) imageL_rgb [height*width*3+15], float src[height*width*max_rd/5], float dst[height*width*max_rd/5])
//	begin
//		foreach int j in 0 .. height-1
//		do
//			foreach int i in 0 .. width-1
//			do
//				dj:=0;
//				r0 := imageL_rgb[j*width + 3*i + 15];
//				g0 := imageL_rgb[j*width + 3*i + 1 + 15];
//				b0 := imageL_rgb[j*width + 3*i + 2 + 15];
//				
//				r := imageL_rgb[max((j-offset),0) *width + 3*i + 15];
//				g := imageL_rgb[max((j-offset),0) *width + 3*i + 1 + 15];
//				b := imageL_rgb[max((j-offset),0) *width + 3*i + 2 + 15];
//				
//				//sqrt functions procedures 
//				//val := sqrt(val);
//				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
//				wm :=  val * R_gamaC;
//				
//				r := imageL_rgb[min((j+offset),height-1)*width + 3*i + 15];
//				g := imageL_rgb[min((j+offset),height-1)*width + 3*i + 1 + 15];
//				b := imageL_rgb[min((j+offset),height-1)*width + 3*i + 2 + 15];
//				
//				//sqrt functions procedures 
//				//sqrt(((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b)));
//				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
//				wp := val * R_gamaC;
//				
//				// no math functions for exp
//				//wm = exp(Ndistance-wm);
//				//wp = exp(Ndistance-wp);
//				
//				// normalization
//				w0 := 1/(wm+wp+1);
//				wm := wm*w0;
//				wp := wp*w0;
//				
//				foreach int rd in 0 .. max_rd/5-1
//				do
//					c0 := src[dj*width + i];
//					cm := src[(dj+max(0,j-offset))*width + i];
//					cp := src[(dj+min(height-1,j+offset))*width + i];
//					
//					dst[(dj+j)*width + i] := wm*cm + w0*c0 + wp*cp;
//					dj := dj + height;
//				end
//				
//			end
//		end
//	end
	
	CostAggregation:action  L_rgb:[left] repeat (width*height*3 + 15) , Cost_in:[err] repeat height*width*max_rd/5, step:[s] ==> Cost_out:[err_out] repeat height*width*max_rd/5
	var
		List (type :float, size = height*width*max_rd/5) err_out
	do
	 		//aggregation_V((s*s) mod 33,  R_gama, left, err, err_out);
	 		foreach int j in 0 .. height-1
		do
			foreach int i in 0 .. width-1
			do
				dj:=0;
				r0 := left[j*width + 3*i + 15];
				g0 := left[j*width + 3*i + 1 + 15];
				b0 := left[j*width + 3*i + 2 + 15];
				
				r := left[max((j-s*s),0) *width + 3*i + 15];
				g := left[max((j-s*s),0) *width + 3*i + 1 + 15];
				b := left[max((j-s*s),0) *width + 3*i + 2 + 15];
				
				//sqrt functions procedures 
				//val := sqrt(val);
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wm :=  val * R_gama;
				
				r := left[min((j+s*s),height-1)*width + 3*i + 15];
				g := left[min((j+s*s),height-1)*width + 3*i + 1 + 15];
				b := left[min((j+s*s),height-1)*width + 3*i + 2 + 15];
				
				//sqrt functions procedures 
				//sqrt(((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b)));
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wp := val * R_gama;
				
				// no math functions for exp
				//wm = exp(Ndistance-wm);
				//wp = exp(Ndistance-wp);
				
				// normalization
				w0 := 1/(wm+wp+1);
				wm := wm*w0;
				wp := wp*w0;
				
				foreach int rd in 0 .. max_rd/5-1
				do
					c0 := err[dj*width + i];
					cm := err[(dj+max(0,j-s))*width + i];
					cp := err[(dj+min(height-1,j+s))*width + i];
					
					err_out[(dj+j)*width + i] := wm*cm + w0*c0 + wp*cp;
					dj := dj + height;
				end
			end
		end
	end
	
end