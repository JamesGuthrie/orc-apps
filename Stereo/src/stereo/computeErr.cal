/*
 * Author: Jinglin
 * Date: 16/01/13 
 * actor of construct disparity cost
 */
package stereo;
 
 actor computeErr()
 uint(size=8) L,
 uint(size=8) R
 ==> float Cost: 
 
 //const
 int max_rd = 60;
 int height = 375;
 int width = 450;
 int minDisp = 0;
 int T = 12;
 
 //variable
 int d:=0;
 int id := 0;
 int cnt := 0;
 uint(size=8) imageL[height*width]; 
 uint(size=8) imageR[height*width]; 
 float disperr[height*width*max_rd]; 
 
 
	/******************************************************************************
	* Maximum function
	*****************************************************************************/
	function max(int a,int b)
	-->
		int
		:
			if(a > b)then
				a
			else
				b
			end
	end
	/******************************************************************************
	* Minimum function
	*****************************************************************************/
	function min(int a,int b)
				-->
			int
		:
			if(a < b)then
				a
			else
				b
			end
	end
	/******************************************************************************
	* Abs function
	*****************************************************************************/
	function abs(int(size=32) x)
				-->
			int(size=32)
		:
			if(x > 0)then
				x
			else
				-x
			end
		end
			
	
	load:action  L:[left], R:[right] ==>
	guard
		cnt < height*width 
	do

		imageL[cnt] := left;
		imageR[cnt] := right;
		cnt := cnt + 1;
	end
		
	load_done:action   ==>
	guard
		cnt = height*width 
	do
		cnt := 0;
	end
	
	start: action  ==> 
	do
		foreach int rd in 0 .. max_rd
	 	do
	 		foreach int j in 0 .. height
	 		do
	 			foreach int i in 0 .. width
	 			do
	 			d := rd + minDisp; 
	 			disperr[(rd*height+j)*width + i] := min(abs(imageL[j*width+i] - imageR[j*width+max(0,i-d)]),T);
	 			end
	 		end
	 	end
	end
	
    send: action ==> Cost:[cost]
	guard
		id < height*width*max_rd
	var
		float cost
	do
		cost := disperr[id];
		id := id + 1;
	end
	
	send_done: action ==>
	guard
		id = height*width*max_rd
	do
		id := 0;
	end
	 
	schedule fsm s_load :
		s_load ( load ) --> s_load;
		s_load ( load_done ) --> s_start;
		s_start ( start ) --> s_send;
		s_send ( send ) --> s_send;
		s_send ( send_done ) --> s_load;
	end
	
	priority 
		load_done > load;
		send_done > send;
	end 
	
 end
 