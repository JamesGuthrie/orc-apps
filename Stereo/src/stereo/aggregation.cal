/*
 * Author: Jinglin
 * Date: 16/01/13 
 * actor of aggregating disparity in horizontal and vertical directions with adaptive weight 
 */
package stereo;

import std.util.Math.*;
 
actor aggregation()
	float Cost_in, uint(size=8) L_rgb,  uint(size=8) R_rgb, uint(size=8) L, uint(size=8) R
	==> 
	float Cost_out:

	//const
	int max_rd = 60;
	int max_iter_time = 7;
	float gamaP = 36.0;
	float R_gama = 0.05882;
	int height = 375;
	int width = 450;
	
	//variable
	int offset[max_iter_time];float N_distance[max_iter_time];
	int cnt := 0;
	int cnt2 := 0;
	int cnt3 := 0;
	int cnt4 := 0;
	float input[height*width*max_rd];
	float output[height*width*max_rd];
	int imageL_rgb[height*width*3];
	int imageR_rgb[height*width*3];
	float r0;
	float g0;
	float b0;
	float r;
	float g;
	float b;
	float wm;
	float wp;
	float w0;
	float cm;
	float cp;
	float c0;
	int dj := 0;
	int rd := 0;
	//sqrt function
	float mid;
	float last; 
	float low;
	float up; 
	float val:=0.0;

	/******************************************************************************
	* Abs function
	*****************************************************************************/
	function abs(float x)
				-->
			float
		:
			if(x > 0.0)then
				x
			else
				-x
			end
		end
	/******************************************
	 * Sqrt funtion procedure
	 ******************************************/
	procedure sqrt (float x)
	begin
		float last:=0;
		last := val;
		val :=(val + x/val) / 2;
		while abs(val-last) > 2.718282 do
			last := val;
			val :=(val + x/val) / 2;
		end
	end 
	
	procedure aggregation_V(int offset, float Ndistance, float R_gamaC, float src[height*width*max_rd], float dst[height*width*max_rd])
	begin
		foreach int j in 0 .. height-1
		do
			foreach int i in 0 .. width-1
			do
				dj:=0;
				r0 := imageL_rgb[j*width + 3*i];
				g0 := imageL_rgb[j*width + 3*i + 1];
				b0 := imageL_rgb[j*width + 3*i + 2];
				
				r := imageL_rgb[max((j-offset),0) *width + 3*i];
				g := imageL_rgb[max((j-offset),0) *width + 3*i + 1];
				b := imageL_rgb[max((j-offset),0) *width + 3*i + 2];
				
				//sqrt functions procedures 
				//val := sqrt(val);
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wm :=  val * R_gamaC;
				
				r := imageL_rgb[min((j+offset),height-1)*width + 3*i];
				g := imageL_rgb[min((j+offset),height-1)*width + 3*i + 1];
				b := imageL_rgb[min((j+offset),height-1)*width + 3*i + 2];
				
				//sqrt functions procedures 
				//sqrt(((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b)));
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wp := val * R_gamaC;
				
				// no math functions for exp
				//wm = exp(Ndistance-wm);
				//wp = exp(Ndistance-wp);
				
				// normalization
				w0 := 1/(wm+wp+1);
				wm := wm*w0;
				wp := wp*w0;
				
				foreach int rd in 0 .. max_rd-1
				do
					c0 := src[dj*width + i];
					cm := src[(dj+max(0,j-offset))*width + i];
					cp := src[(dj+min(height-1,j+offset))*width + i];
					
					dst[(dj+j)*width + i] := wm*cm + w0*c0 + wp*cp;
					dj := dj + height;
				end
				
			end
		end
	end
	
	procedure aggregation_H(int offset, float Ndistance, float R_gamaC, float src[height*width*max_rd], float dst[height*width*max_rd])
	begin
		foreach int j in 0 .. height-1
		do 
			foreach int i in 0 .. width-1
			do
				dj:=0;
				rd:=0;
				r0 := imageL_rgb[j*width + 3*i];
				g0 := imageL_rgb[j*width + 3*i + 1];
				b0 := imageL_rgb[j*width + 3*i + 2];
				
				r := imageL_rgb[j*width + 3*(max(0,i-offset))];
				g := imageL_rgb[j*width + 3*(max(0,i-offset)) + 1];
				b := imageL_rgb[j*width + 3*(max(0,i-offset)) + 2];
				
				//sqrt functions procedures 
				//sqrt(((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b)));
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wm :=  val * R_gamaC;
				
				r := imageL_rgb[j*width + 3*(min(width,i+offset))];
				g := imageL_rgb[j*width + 3*(min(width,i+offset)) + 1];
				b := imageL_rgb[j*width + 3*(min(width,i+offset)) + 2];
				
				//sqrt functions procedures 
				//sqrt(((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b)));
				val := ((r0-r)*(r0-r) + (g0-g)*(g0-g) + (b0-b)*(b0-b));
				wp :=  val * R_gamaC;
			
				// no math functions for exp
				//wm = exp(Ndistance-wm);
				//wp = exp(Ndistance-wp);
				
				// normalization
				w0 := 1/(wm+wp+1);
				wm := wm*w0;
				wp := wp*w0;
				
				foreach int rd in 0 .. max_rd-1
				do
					c0 := src[dj*width + i];
					cm := src[dj*width + max(0,i-offset)];
					cp := src[dj*width + min(width-1,i+offset)];
					
					dst[(dj+j)*width + i] := wm*cm + w0*c0 + wp*cp;
					dj := dj + height;
				end
			end
		end
								
	end
	
// initial the offset and N_distance		
	initial: action ==>
	do
		foreach int i in 0 .. 6 
		do
			offset[i] := (i*i) mod 33;
			N_distance[i] := offset[i]/gamaP;
		end
	end
	
	load_cost:action  Cost_in:[err] ==>
	guard
		cnt < height*width*max_rd 
	do
		input[cnt] := err;
		cnt := cnt + 1;
	end
		
	load_cost_done:action  ==>
	guard
		cnt = height*width*max_rd 
	do
		cnt := 0;
	end
	
	//load header data, but discard them
	load_header: action L_rgb:[left], R_rgb:[right] ==>
	guard
		cnt4 < 15
	do
		imageL_rgb[cnt4] := left;
		imageR_rgb[cnt4] := right;
		cnt4 := cnt4 + 1;
	end
	 
	load_header_done: action ==>
	guard 
		cnt4 = 15
	do
		cnt4 := 0;
	end
		
	load_rgb:action L_rgb:[left], R_rgb:[right] ==>
	guard 
		cnt2 < height*width*3
	do
		imageL_rgb[cnt2] := left;
		imageR_rgb[cnt2] := right;
		cnt2 := cnt2 + 1;
	end
	
	load_rgb_done:action  ==>
	guard 
		cnt2 = height*width*3
	do
		cnt2 := 0;
	end
		
	start: action  ==> 
	do
	 	foreach int i in 0 .. 6
	 	do 
	 		aggregation_V(offset[i], N_distance[i], R_gama, input, output);
	 		aggregation_H(offset[i], N_distance[i], R_gama, output, input);
	 	end 
	end
	 
	send: action ==> Cost_out:[err]
	guard
	 	cnt3 < height*width*max_rd
	var 
		float err
	do
	 	err := output[cnt3];
	 	cnt3 := cnt3 + 1;
	end
	 
	send_done: action ==>
	guard
		cnt3 = height*width*max_rd
	do
		cnt3 := 0;
	end
	 
	schedule fsm s_initial:
	 	s_initial (initial) --> s_load;
		s_load ( load_cost ) --> s_load;
		s_load ( load_cost_done ) --> s_load_header;
		s_load_header(load_header) --> s_load_header;
		s_load_header(load_header_done) --> s_load2;
		s_load2 ( load_rgb ) --> s_load2;
		s_load2 ( load_rgb_done ) --> s_start;
		s_start ( start ) --> s_send;
		s_send ( send ) --> s_send;
		s_send ( send_done ) --> s_load;
	end
	
	priority
		load_cost_done > load_cost;
		load_header > load_header_done;
		load_rgb_done > load_rgb;
		send_done > send;
		load_cost > load_header >load_rgb > start > send;
	end

end