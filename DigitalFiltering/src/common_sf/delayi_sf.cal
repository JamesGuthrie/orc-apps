// delayi_sf.cal -- part of 'DigitalFiltering' project
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Delay actor. Buffer is allowed to deplete.
// Initial sample is needed in feedback loops
// to avoid deadlock. Initial sample value
// is defined in XDF file.
//
// Changelog:
// - initial version 16/05/2012

package common_sf;

import common.constants.*;

actor delayi_sf(float initial_sample) float operand_1 ==> float result :

	float buffer;
	bool buffer_full;
	
	init: action ==> result:[ y ]
	var
		float y
	do
		y := initial_sample;
		buffer_full := false;
	end

	read: action operand_1:[ x ] ==>
	guard
		buffer_full = false
	do
		buffer := x;
		buffer_full := true;
	end

	write: action ==> result:[ y ]
	guard
		buffer_full = true
	var
		float y
	do
		y := buffer;
		buffer_full := false;
	end

	schedule fsm start :
		start ( init ) --> ready;
		ready ( read ) --> ready;
		ready ( write ) --> ready;
	end

end
