// qpskMod.cal
//
// Copyright (c) 2012 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// O-QSPK modulator for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Based on the C code implementation written
// by Amanullah Ghazi. Described in SDR-WInnComm 2013 paper
// "Low-complexity SDR Implementation of IEEE 802.15.4 (ZigBee)
// Baseband Transceiver on Application Specific Processor"  
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012

package monotoken_tx;

import monotoken_tx.constants.*;

actor qpskMod() 
// Inputs:
uint(size=CHIP_SZ) chip              // Packets of 32 chips.
// Outputs:
==> 
int(size=SYMB_SZ) symb               // I-Q symbols. Range: [-128, 127]
:

	uint(size=CHIP_SZ) chip_packet;  // Chips are read in packets of 32 and
	                                 // stored to this variable during
	                                 // processing
	
	int(size=6) chip_index;         // variable that indicates number of
	                                 // chips that have been processed from
	                                 // the present chip packet

	// unpacking function picks individual chips from packet
	function unpack( int val, int pos ) --> int :
		(val >> pos) & 0x1
	end

	// mapping of chips to I-Q samples
	function q7_map( int bit ) --> int :
		255 * bit - 128	
	end

	// read action
	// reads a chip packet from input
	read: action chip:[ c_in ] ==>
	do
		chip_packet := c_in;
		chip_index := 0;
	end

	// modulate action
	// transforms a chip to anI-Q modulated sample and sends
	modulate: action ==> symb:[ symb_out ]
	guard
		chip_index < CHIP_SZ
	var
		int(size=SYMB_SZ) symb_out
	do
		symb_out := q7_map(unpack(chip_packet, chip_index));
		chip_index := chip_index + 1;
	end

	// done action
	// transition from modulation to reading a new packet
	done: action ==>
	end

	schedule fsm s_idle :
		s_idle ( read ) --> s_modulate;
		s_modulate ( modulate ) --> s_modulate;
		s_modulate ( done ) --> s_idle;
	end

	priority
		modulate > done;
	end
end
