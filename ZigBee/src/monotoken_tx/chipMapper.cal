// chipMapper.cal
//
// Copyright (c) 2012 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Chip mapper for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Based on the C code implementation written
// by Amanullah Ghazi. Described in SDR-WInnComm 2012 paper
// "Low-complexity SDR Implementation of IEEE 802.15.4 (ZigBee)
// Baseband Transceiver on Application Specific Processor"  
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012

package monotoken_tx;

import monotoken_tx.constants.*;

actor chipMapper()
// Inputs:
uint(size=DATA_SZ) data              // header and payload data samples as 8-bit unsigned
                                     // each sample contains two 4-bit symbols
// Outputs:
==> uint(size=CHIP_SZ) chip          // packets of 32 chips
:

	                                 // 32-bit Pseudo-Noise (PN) sequence values
	List(type: uint(size=CHIP_SZ), size=16) Chip_map_table = [
								 0x744ac39b, 0x44ac39b7, 0x4ac39b74, 0xac39b744,
								 0xc39b744a, 0x39b744ac, 0x9b744ac3, 0xb744ac39,
								 0xdee06931, 0xee06931d, 0xe06931de, 0x6931dee,
								 0x6931dee0, 0x931dee06, 0x31dee069, 0x1dee0693];
	
	                                 // temporary storage for maintaining acquired
	uint(size=DATA_SZ) data_tmp;     // data sample

	// process_lsn action
	// acquire a data sample and transmit one chip packet
	process_lsn: action data:[ data_in ] ==> chip:[ chip_out ]
	var
		uint(size=CHIP_SZ) chip_out,
		uint(size=DATA_SZ) lsn
	do
        lsn := data_in & 0x0F;
        chip_out :=  Chip_map_table[lsn];
        data_tmp := data_in;
	end

	// process_msn action
	// acquire a data sample and transmit one chip packet
	process_msn: action ==> chip:[ chip_out ]
	var
		uint(size=CHIP_SZ) chip_out,
		uint(size=DATA_SZ) msn
	do
        msn := (data_tmp >> 4) & 0x0F;
        chip_out :=  Chip_map_table[msn];
	end

	schedule fsm s_process_lsn :
		s_process_lsn ( process_lsn ) --> s_process_msn;
		s_process_msn ( process_msn ) --> s_process_lsn;
	end
end
