// pulseShape.cal
//
// Copyright (c) 2012 University of Oulu, Finland
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
// Author: 
// Jani Boutellier (jani.boutellier@ee.oulu.fi)
// Department of Computer Science and Engineering
// University of Oulu, Finland
//
// Description:
// Half-sine pulse shaper for IEEE 802.15.4 (ZigBee) Baseband
// transmission. Based on the C code implementation written
// by Amanullah Ghazi. Described in SDR-WInnComm 2012 paper
// "Low-complexity SDR Implementation of IEEE 802.15.4 (ZigBee)
// Baseband Transceiver on Application Specific Processor" 
//
// Changelog:
// - initial version 01/10/2012
// - cleanup for release 08/10/2012

package monotoken_tx;

import monotoken_tx.constants.*;

// The outline of the transmission procedure for pulseShape():
// header(x1) -> body1(xN) -> body2(xN) -> tail1(x1) -> tail2(x1),
// where N is ((x * 64) - 2) >> 1,
// x is the number of payload samples (5 to 127) + header samples (6)

actor pulseShape() 
// Inputs:
int(size=SYMB_SZ) symb,             // I-Q symbols from QPSK modulator 
uint(size=PAYLOAD_LEN_SZ) len       // Payload length
// Outputs:
==> 
int(size=HSP_SZ) hsp                // Half-sine pulse samples
:

	bool even_symbol_read;          // A variable to alternate the fetching of even and odd samples
	int(size=SYMB_SZ) symb_even;    // Temporary storage for even symbol values during transmission
	int(size=SYMB_SZ) symb_odd;     // Temporary storage for even symbol values during transmission
	
	uint(size=4) hsp_count;         // A counter for keeping track of transmitted hsp samples for
                                    // the current hsp. range: [0...8] 
	int body_iterations;            // Number of times the "body" part of the transmission has to be repeated 
	int body_index;                 // Number of times the "body" part of the transmission has been repeated

	int coeff_ind;                   // Index to the filter coefficient table. Wraps around.

    int FILT_COEFF0 = 0x00;          // Static filter coefficients for half-sine pulse generation
    int FILT_COEFF1 = 0x31;
    int FILT_COEFF2 = 0x5a;
    int FILT_COEFF3 = 0x76;
    int FILT_COEFF4 = 0x7f;

                                     // Filter coefficient table 16 samples of 8 bits
	List(type: uint(size=8), size=16) Coeffs = [
								 FILT_COEFF0, FILT_COEFF4, FILT_COEFF1, FILT_COEFF3,
								 FILT_COEFF2, FILT_COEFF2, FILT_COEFF3, FILT_COEFF1,
								 FILT_COEFF4, FILT_COEFF0, FILT_COEFF3, FILT_COEFF1,
								 FILT_COEFF2, FILT_COEFF2, FILT_COEFF1, FILT_COEFF3];

	// fixed-point multiplication with shift
	function mul8( int x, int y ) --> int :
		(x * y) >> 7
	end

	// init action
	// Fired when payload length is known
	init: action len:[len_in] ==>
	do
		body_iterations := ((len_in * 64) - 2) >> 1; 
		hsp_count := 0;
		coeff_ind := 0;
		even_symbol_read := false;
		symb_odd := 0x7F;            // The first Q-value is a dummy
	end

	// read_even action
	// reads a symbol from QPSK modulator
	read_even: action symb:[symb_in] ==>
	guard
		even_symbol_read = false
	do
		symb_even := symb_in;
		even_symbol_read := true;
	end

	// read_odd action
	// reads a symbol from QPSK modulator
	read_odd: action symb:[symb_in] ==>
	do
		symb_odd := symb_in;
	end

	// transmit even
	// transmits a hsp sample
	// fired in an alternating fashion with transmit_odd
	transmit_even: action ==> hsp:[ hsp_out ]
	guard
		(hsp_count & 1) = 0,
		hsp_count < 8
	var
		int(size=HSP_SZ) hsp_out
	do
		hsp_out := mul8(Coeffs[coeff_ind&15], symb_even);
		coeff_ind := coeff_ind + 1; 
		hsp_count := hsp_count + 1;
	end

	// transmit odd
	// transmits a hsp sample
	// fired in an alternating fashion with transmit_even
	transmit_odd: action ==> hsp:[ hsp_out ]
	guard
		hsp_count < 8
	var
		int(size=HSP_SZ) hsp_out
	do
		hsp_out := mul8(Coeffs[coeff_ind&15], symb_odd);
		coeff_ind := coeff_ind + 1; 
		hsp_count := hsp_count + 1;
	end

	// body_done action
	// transition from "body" part of the transmission
	// to the "tail" part of the transmission
	body_done: action ==>
	guard
		body_index = body_iterations-1
	do
		hsp_count := 0;
		even_symbol_read := false;
	end

	// body_next action
	// transition from "body" iteration N to N+1
	body_next: action ==>
	do
		body_index := body_index + 1;
		hsp_count := 0;
		even_symbol_read := false;
	end

	// next action
	// transition from "header" to "body1"
	// or from "body1" to "body2"
	next: action ==>
	do
		hsp_count := 0;
		even_symbol_read := false;
	end

	// deinit action
	// transition from "tail1" to "tail2"
	deinit: action ==>
	do
		hsp_count := 0;
		symb_even := 0x7F;           // The last I-value is a dummy
		even_symbol_read := false;
	end


	schedule fsm s_start :
		s_start ( init ) --> s_idle;
		
		s_idle ( read_even ) --> s_header;
		s_header ( transmit_even ) --> s_header;
		s_header ( transmit_odd ) --> s_header;
		s_header ( next ) --> s_body1_read;

		s_body1_read ( read_odd ) --> s_body1;
		s_body1 ( transmit_even ) --> s_body1;
		s_body1 ( transmit_odd ) --> s_body1;
		s_body1 ( next ) --> s_body2_read;

		s_body2_read ( read_even ) --> s_body2;
		s_body2 ( transmit_even ) --> s_body2;
		s_body2 ( transmit_odd ) --> s_body2;
		s_body2 ( body_done ) --> s_tail1_read;
		s_body2 ( body_next ) --> s_body1_read;

		s_tail1_read ( read_odd ) --> s_tail1;
		s_tail1 ( transmit_even ) --> s_tail1;
		s_tail1 ( transmit_odd ) --> s_tail1;
		s_tail1 ( deinit ) --> s_tail2;

		s_tail2 ( transmit_even ) --> s_tail2;
		s_tail2 ( transmit_odd ) --> s_tail2;
		s_tail2 ( init ) --> s_idle;
	end
	
	priority
		transmit_even > transmit_odd;
		transmit_odd > init;
		transmit_odd > next;
		transmit_odd > body_next;
		transmit_odd > deinit;
		body_done > body_next;
		next > body_done;
		read_even > read_odd;
	end
end
