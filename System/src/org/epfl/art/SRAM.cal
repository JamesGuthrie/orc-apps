/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: Richard Thavot <richard.thavot@epfl.ch>
package org.epfl.art;

actor SRAM () int(size=18) RA, int(size=18) WA, int(size=32) WD
			  ==> 
			  int(size=32) RD :

	int memory [ 262144 ];

	bool readingIsHigher;
	
	initialize ==>
	do
		readingIsHigher := false;
	end

	High.Write: action WA:[ addr ], WD:[ data ] ==>
	guard not readingIsHigher
	do
		readingIsHigher := true;
		memory[addr] := data;
	end
	
	High.Read: action RA:[ addr ] ==> RD:[ memory[addr] ]
	guard readingIsHigher
	do
		readingIsHigher := false;
	end
	
	Low.Write: action WA:[ addr ], WD:[ data ] ==>
	guard readingIsHigher
	do
		memory[addr] := data;
	end
	
	Low.Read: action RA:[ addr ] ==> RD:[ memory[addr] ]
	guard not readingIsHigher
	end

	priority
		High > Low;
	end

end