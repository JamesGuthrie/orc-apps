/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Richard Thavot <richard.thavot@epfl.ch>

package std.io;

/**
 *  This unit contains some needed functions to support management of a file.
 */
unit AccessFile :


	int LSIZE = 4096; // Writes/Reads LSIZE bytes of data from a file into an array of bytes
	
	/* Usefull flags */
	uint(size=2) SOF = 1; // Start Of File flag
	uint(size=2) EOF = 2; // End Of File flag
	uint(size=2) NOF = 0; // No Flag

	/* *************************
	 *    File access 
	 *************************** */
	@native function openFile(String fileName) --> int end // Opens the file whose name is specified in the parameter filename. Returns the file descriptor.
	@native function closeFile(int desc) --> int end // Closes the file associated with the descriptor and disassociates it.

	
	/* *************************
	 *    Read access 
	 *************************** */
	@native function readByte(int desc) -->  uint(size=8) end //Reads an eight-bit number from the file specified by the descriptor argument.
	@native procedure readBytes(int desc, uint(size=8) buf [ LSIZE ] , int count) end // Reads N eight-bit numbers from the file specified by the descriptor argument. 
	
	/* *************************
	 *    Write access 
	 *************************** */
	@native procedure writeByte(int desc, int(size=8) v ) end // Writes an eight-bit number from the file specified by the descriptor argument.
	@native procedure writeBytes(int desc, uint(size=8) buf [ LSIZE ] , int count ) end // Writes N eight-bit number from the file specified by the descriptor argument.

	 /* *************************
	 *    File positioning 
	 *************************** */
	@native function sizeOfFile(int desc) --> int(size=32) end // Returns the length of the descriptor argument.
	@native procedure seek(int desc, int(size=32) pos) end // Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
	@native function filePointer(int desc) --> uint(size=32) end //  Gets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
	

end