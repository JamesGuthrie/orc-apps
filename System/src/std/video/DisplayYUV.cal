/*
 * Copyright (c) 2011, IETR/INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Damien de Saint Jorre
package std.video;

import std.util.Math.*;

actor DisplayYUV()
	uint(size=8)  Byte,
	uint(size=14) DispCoord,
	uint(size=9)  PicSizeInMb
		==>
		:

	uint MAX_WIDTH = 1920;
	uint MAX_HEIGHT = 1088;
	uint MB_SIZE_LUMA = 16;
	uint MB_SIZE_CHROMA = 8;

	/**
	 * Inits the given display.
	 */
	@native procedure displayYUV_init() end

	/**
	 * Displays a picture. Sizes are in pixels.
	 */
	@native procedure displayYUV_displayPicture(uint(size=8) pictureBufferY[MAX_WIDTH * MAX_HEIGHT], uint(size=8) pictureBufferU[MAX_WIDTH * MAX_HEIGHT],
	                                           uint(size=8) pictureBufferV[MAX_WIDTH * MAX_HEIGHT], int(size=16) pictureWidth, int(size=16) pictureSize) end

	/**
	 * Display flags
	 */
	uint(size=8) DISP_READY = 1;
	uint(size=8) DISP_ENABLE = 2;
	
	/**
	 * Get flags of display
	 */
	@native function displayYUV_getFlags ( ) --> uint(size=8) end

	/**
	 * Inits the compare module.
	 */
	@native procedure compareYUV_init() end

	/**
	 * Compares a picture. Sizes are in pixels.
	 */
	@native procedure compareYUV_comparePicture(uint(size=8) pictureBufferY[MAX_WIDTH * MAX_HEIGHT], uint(size=8) pictureBufferU[MAX_WIDTH * MAX_HEIGHT],
	                                           uint(size=8) pictureBufferV[MAX_WIDTH * MAX_HEIGHT], int(size=16) pictureWidth, int(size=16) pictureSize) end

	@native procedure fpsPrintInit() end

	@native procedure fpsPrintNewPicDecoded() end

	uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
	uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
	uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
	int (size=32) pictureSizeInMb;
	int (size=32) nbBlockGot;
	uint(size=2)  chromaComponent;
	uint(size=16) pictureWidthLuma;
	uint(size=16) cropPicWthLuma;
	uint(size=16) cropPicHghtLuma;
	uint(size=12) xIdxLuma;
	uint(size=12) yIdxLuma;
	uint(size=12) xIdxChroma;
	uint(size=32) yIdxChroma;
	uint(size=14) xMin;
	uint(size=14) xMax;
	uint(size=14) yMin;
	uint(size=14) yMax;


	initialize ==>
	do
		displayYUV_init();
		compareYUV_init();
		fpsPrintInit();
	end

	getPictureSize: action DispCoord:[dispCoord] repeat 4, PicSizeInMb:[picWidth,
		picHeight] ==>
	guard
		(displayYUV_getFlags() & DISP_READY) != 0
	do

		pictureWidthLuma  := picWidth * MB_SIZE_LUMA;
		pictureSizeInMb   := picWidth * picHeight;
		xMin := dispCoord[0];
		xMax := dispCoord[1];
		yMin := dispCoord[2];
		yMax := dispCoord[3];
		cropPicWthLuma  := xMax - xMin + 1;
		cropPicHghtLuma := yMax - yMin + 1;
		nbBlockGot := 0;
		xIdxLuma   := 0;
		yIdxLuma   := 0;
		xIdxChroma := 0;
		yIdxChroma := 0;
	end

	getPixValue.launch.Luma: action Byte :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	do
		uint(size=14) xIdxMin = max(xIdxLuma, xMin);
		uint(size=14) xIdxMax = min(xIdxLuma + 15, xMax);
		uint(size=14) yIdxMin = max(yIdxLuma, yMin);
		uint(size=14) yIdxMax = min(yIdxLuma + 15, yMax);

		nbBlockGot := nbBlockGot + 1;
		foreach int y in yIdxMin .. yIdxMax
		do
			foreach int x in xIdxMin .. xIdxMax
			do
				pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
					:= Bytes[(y-yIdxLuma)*16 + x-xIdxLuma];
			end
		end
		xIdxLuma := xIdxLuma + MB_SIZE_LUMA;
		chromaComponent := 0;
	end

	getPixValue.launch.Chroma: action Byte :[Bytes] repeat 64 ==>
	do
		uint(size=14) xIdxMin = max(xIdxChroma, xMin/2);
		uint(size=14) xIdxMax = min(xIdxChroma + 7, xMax/2);
		uint(size=14) yIdxMin = max(yIdxChroma, yMin/2);
		uint(size=14) yIdxMax = min(yIdxChroma + 7, yMax/2);

		foreach int y in yIdxMin .. yIdxMax
		do
			foreach int x in xIdxMin .. xIdxMax
			do
				if(chromaComponent=0)then
					pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
						Bytes[(y-yIdxChroma)*8 + x-xIdxChroma];
				else
					pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
						Bytes[(y-yIdxChroma)*8 + x-xIdxChroma];
				end
			end
		end
		if chromaComponent != 0 then
			xIdxChroma := xIdxChroma + MB_SIZE_CHROMA;
			if xIdxLuma = pictureWidthLuma then
				xIdxLuma   := 0;
				xIdxChroma := 0;
				yIdxLuma   := yIdxLuma + MB_SIZE_LUMA;
				yIdxChroma := yIdxChroma + MB_SIZE_CHROMA;
			end
		end
		chromaComponent := 1;
	end

	displayPicture: action ==>
	guard
		nbBlockGot >= pictureSizeInMb
	do
		fpsPrintNewPicDecoded();
		if((displayYUV_getFlags() & DISP_ENABLE) != 0) then
			displayYUV_displayPicture(pictureBufferY, pictureBufferU, pictureBufferV, cropPicWthLuma, cropPicHghtLuma);
			compareYUV_comparePicture(pictureBufferY, pictureBufferU, pictureBufferV, cropPicWthLuma, cropPicHghtLuma);
		end
	end

	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize            )--> GetLumaBlock;
		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
		
		GetLumaBlock    (displayPicture            )--> GetPictureSize;
	end

	priority
		getPixValue > displayPicture;
	end

end