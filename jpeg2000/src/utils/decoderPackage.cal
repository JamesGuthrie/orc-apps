/******************************************************************************
 * Definition of DecoderPackage
 *****************************************************************************/
package utils;
import utils.codestreamPackage.*;

unit decoderPackage :

	uint(size= 8) STRIPE_HEIGHT =   4;
	uint(size= 8) DATA_SIZE     =  17;
	uint(size= 8) CB_WIDTH_MAX  =  64;
	uint(size= 8) CB_HEIGHT_MAX =  64;
	uint(size= 8) NB_IDX        =  47;
	uint(size= 8) NB_CTX        =  19;
	/**************************************************************************
	 * Pass Idx
 	 *************************************************************************/
	uint(size= 2) CLEANPASSIDX  =   0;
	uint(size= 2) SIGPASSIDX    =   1;
	uint(size= 2) MAGPASSIDX    =   2;
	/**************************************************************************
	 * QE constant
 	 *************************************************************************/
	uint(size=16) QE_INIT[NB_IDX]  = [
		0x5601, 0x3401, 0x1801, 0x0ac1, 0x0521, 0x0221, 0x5601,
		0x5401, 0x4801, 0x3801, 0x3001, 0x2401, 0x1c01, 0x1601, 
		0x5601, 0x5401, 0x5101, 0x4801, 0x3801, 0x3401, 0x3001,
		0x2801, 0x2401, 0x2201, 0x1c01, 0x1801, 0x1601, 0x1401,
		0x1201, 0x1101, 0x0ac1, 0x09c1, 0x08a1, 0x0521, 0x0441,
		0x02a1, 0x0221, 0x0141, 0x0111, 0x0085, 0x0049, 0x0025,
		0x0015, 0x0009, 0x0005, 0x0001, 0x5601 ];
	/**************************************************************************
	 * CX_nMPS constant
 	 *************************************************************************/
	uint(size= 8) nMPS[NB_IDX] = [
		 1, 2, 3, 4, 5,38, 7, 8, 9,10,11,12,13,29,15,16,17,
		18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,
		35,36,37,38,39,40,41,42,43,44,45,45,46 ];
	/**************************************************************************
	 * CX_nLPS constant
 	 *************************************************************************/
	uint(size= 8) nLPS[NB_IDX] = [
		 1, 6, 9,12,29,33, 6,14,14,14,17,18,20,21,14,14,15,
		16,17,18,19,19,20,21,22,23,24,25,26,27,28,29,30,31,
		32,33,34,35,36,37,38,39,40,41,42,43,46 ];
 	/**************************************************************************
	 * CX_SWITCH constant
 	 *************************************************************************/
	bool        SWITCH[NB_IDX] = [
		true ,false,false,false,false,false,true ,false,false,false,false,false,
		false,false,true ,false,false,false,false,false,false,false,false,false,
		false,false,false,false,false,false,false,false,false,false,false,false,
		false,false,false,false,false,false,false,false,false,false,false ];
	/**************************************************************************
	 * CX_nLPS constant
 	 *************************************************************************/
	uint(size= 8) MQ_INIT[NB_CTX] = [
		 46, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  	/**************************************************************************
	 * ctx constant
 	 *************************************************************************/
	uint(size= 8) START_CTX = 0x80;
	uint(size= 8) UNI_CTX   =    0;
	uint(size= 8) RL_CTX    =    1;
	uint(size= 8) ZC0_CTX   =    2;
	uint(size= 8) ZC1_CTX   =    3;
	uint(size= 8) ZC2_CTX   =    4;
	uint(size= 8) ZC3_CTX   =    5;
	uint(size= 8) ZC4_CTX   =    6;
	uint(size= 8) ZC5_CTX   =    7;
	uint(size= 8) ZC6_CTX   =    8;
	uint(size= 8) ZC7_CTX   =    9;
	uint(size= 8) ZC8_CTX   =   10;
	uint(size= 8) SC0_CTX   =   11;
	uint(size= 8) SC1_CTX   =   12;
	uint(size= 8) SC2_CTX   =   13;
	uint(size= 8) SC3_CTX   =   14;
	uint(size= 8) SC4_CTX   =   15;
	uint(size= 8) MR0_CTX   =   16;
	uint(size= 8) MR1_CTX   =   17;
	uint(size= 8) MR2_CTX   =   18;
	uint(size= 8) TermCodingPass_ctx = START_CTX | TermCodingPass;
	uint(size= 8) CheckPredTerm_ctx  = START_CTX | PredTerm;
	uint(size= 8) INIT_DEC_ctx       = START_CTX | 0x40;
	uint(size= 8) FLUSH_ctx          = START_CTX | 0x60;

	/**************************************************************************
	 * ctx mask constant
 	 *************************************************************************/
	uint(size=16) INSIGNIFICANT = 0x0000;
	uint(size=16) STATE_SIG     = 0x8000;
	uint(size=16) STATE_VISITED = 0x4000;
	uint(size=16) STATE_NZ_CTXT = 0x2000;
	uint(size=16) STATE_H0_SIGN = 0x1000;
	uint(size=16) STATE_H1_SIGN = 0x0800;
	uint(size=16) STATE_V0_SIGN = 0x0400;
	uint(size=16) STATE_V1_SIGN = 0x0200;
	uint(size=16) STATE_PREV_MR = 0x0100;
	uint(size=16) STATE_H0      = 0x0080;
	uint(size=16) STATE_H1      = 0x0040;
	uint(size=16) STATE_V0      = 0x0020;
	uint(size=16) STATE_V1      = 0x0010;
	uint(size=16) STATE_D0      = 0x0008;
	uint(size=16) STATE_D1      = 0x0004;
	uint(size=16) STATE_D2      = 0x0002;
	uint(size=16) STATE_D3      = 0x0001;
	
	uint(size= 4) STATE_H_SHIFT = 0x6;
	uint(size= 4) STATE_V_SHIFT = 0x4;
	uint(size= 4) STATE_D_SHIFT = 0x0;
	uint(size= 4) STATE_H_MASK  = 0x3;
	uint(size= 4) STATE_V_MASK  = 0x3;
	uint(size= 4) STATE_D_MASK  = 0xF;

	uint(size= 8) MR_MASK       = 0xFF;
	/**************************************************************************
	 * table D-1
 	 *************************************************************************/
	uint(size= 8) tableD1ctxLL_LH[3][3][5] = 
	[
		[
			[ZC0_CTX, ZC1_CTX, ZC2_CTX, ZC2_CTX, ZC2_CTX],
			[ZC3_CTX, ZC3_CTX, ZC3_CTX, ZC3_CTX, ZC3_CTX],
			[ZC4_CTX, ZC4_CTX, ZC4_CTX, ZC4_CTX, ZC4_CTX]
		],[
			[ZC5_CTX, ZC6_CTX, ZC6_CTX, ZC6_CTX, ZC6_CTX],
			[ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX],
			[ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX]
		],[
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX],
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX],
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX]
		]
	];
	uint(size= 8) tableD1ctxHL[3][3][5] = 
	[
		[
			[ZC0_CTX, ZC1_CTX, ZC2_CTX, ZC2_CTX, ZC2_CTX],
			[ZC5_CTX, ZC6_CTX, ZC6_CTX, ZC6_CTX, ZC6_CTX],
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX]
		],[
			[ZC3_CTX, ZC3_CTX, ZC3_CTX, ZC3_CTX, ZC3_CTX],
			[ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX],
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX]
		],[
			[ZC4_CTX, ZC4_CTX, ZC4_CTX, ZC4_CTX, ZC4_CTX],
			[ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX, ZC7_CTX],
			[ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX, ZC8_CTX]
		]
	];
	uint(size= 8) tableD1ctxHH[5][5] = 
	[
		[ZC0_CTX, ZC3_CTX, ZC6_CTX, ZC8_CTX, ZC8_CTX],
		[ZC1_CTX, ZC4_CTX, ZC7_CTX, ZC8_CTX, ZC8_CTX],
		[ZC2_CTX, ZC5_CTX, ZC7_CTX, ZC8_CTX, ZC8_CTX],
		[ZC2_CTX, ZC5_CTX, ZC7_CTX, ZC8_CTX, ZC8_CTX],
		[ZC2_CTX, ZC5_CTX, ZC7_CTX, ZC8_CTX, ZC8_CTX]
	];
	/**************************************************************************
	 * table D-2
 	 *************************************************************************/
	uint(size= 8) tableD2[3][3] =
	[
		[1, 0, 2],
		[0, 0, 1],
		[2, 1, 2]
	];
	/**************************************************************************
	 * table D-3
 	 *************************************************************************/
	uint(size= 8) tableD3ctx[3][3] =
	[
		[SC4_CTX, SC3_CTX, SC2_CTX],
		[SC1_CTX, SC0_CTX, SC1_CTX],
		[SC2_CTX, SC3_CTX, SC4_CTX]
	];
	uint(size= 8) tableD3xorbit[3][3] =
	[
		[0, 0, 0],
		[0, 0, 1],
		[1, 1, 1]
	];
end