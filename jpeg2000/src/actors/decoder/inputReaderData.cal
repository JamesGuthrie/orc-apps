package actors.decoder;
/******************************************************************************
 * Actor decription
 *****************************************************************************/
actor inputReaderData () uint(size= 8) DATA
						 ==>
						 uint(size= 8) entropyInfo,
						 uint(size= 8) CD
:
/******************************************************************************
 * Globale variables
 *****************************************************************************/
	uint(size= 8) data;
	uint(size= 8) filter;
	uint(size= 8) cb_w;	
 	uint(size= 8) cb_h;	
 	uint(size= 8) subband;	
 	uint(size= 8) npasses;
  	uint(size= 8) zeroBP;

/******************************************************************************
 * getValues
 *****************************************************************************/
	getValues : action 	DATA:[ data_p ] repeat 4 ==>
	do
		data   := data_p[3];
		filter := data_p[0];
	end		
/******************************************************************************
 * sendDATA_out
 *****************************************************************************/
	sendDATA_out : action ==> CD:[data]
	guard
		filter = 0
	end
/******************************************************************************
 * sendCB_W
 *****************************************************************************/
	sendCB_W : action ==>
	guard
		filter = 1
	do
		cb_w := data;
	end
/******************************************************************************
 * sendCB_H
 *****************************************************************************/
	sendCB_H : action ==>
	guard
		filter = 2
	do
		cb_h := data;
	end
/******************************************************************************
 * sendSUBBAND
 *****************************************************************************/
	sendSUBBAND : action ==>
	guard
		filter = 3
	do
		subband := data;
	end
	
/******************************************************************************
 * sendNPASSES
 *****************************************************************************/
	sendNPASSES : action ==>
	guard
		filter = 4
	do
		npasses := data;
	end
/******************************************************************************
 * sendBitPlane
 *****************************************************************************/
	sendBitPlane : action ==> entropyInfo:[
  											cb_w, cb_h,
  											npasses, subband, zeroBP,
  											0xff, 0xff, 0, 0, 0, 0
  										]
	guard
		filter = 5
	do
		zeroBP := data;
	end

/******************************************************************************
 * Scheduler
 *****************************************************************************/	
	schedule fsm getValues_st:
		getValues_st (getValues    ) --> send_st;
		send_st      (sendDATA_out ) --> getValues_st;
		send_st      (sendCB_W     ) --> getValues_st;
		send_st      (sendCB_H     ) --> getValues_st;
		send_st      (sendSUBBAND  ) --> getValues_st;
		send_st      (sendNPASSES  ) --> getValues_st;
		send_st      (sendBitPlane ) --> getValues_st;
	end
end