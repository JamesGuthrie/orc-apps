package actors.decoder;
import utils.commonPackage.*;
import utils.decoderPackage.*;
/******************************************************************************
 * Actor decription
 *****************************************************************************/
actor printOutputData () uint(size=DATA_SIZE) DATA,
						 uint(size= 8) deqCBInfo
						 ==>
:	
	@native procedure compare_init() end
	@native procedure compare_NBytes(uint(size=8) outTable[8], uint(size=12) nbTokenToRead) end
/******************************************************************************
 * Globale variables
 *****************************************************************************/
	uint(size= 8) cb_height;
	uint(size= 8) cb_width;
	//
	uint(size= 8) idxLine;
	uint(size= 8) idxColumn;
/******************************************************************************
 * init
 *****************************************************************************/
	init : action 	deqCBInfo:[sb, cb_w, cb_h, c, r, w, h] ==>
	do
		cb_height := cb_h;
		cb_width  := cb_w;
		//
		idxLine   := 0;
		idxColumn := 0;
		println("# CodeBlock("+cb_w+", "+cb_h+") c = "+c+" r = "+r+" s = "+sb+" w = "+w+" h = "+h);
		compare_init();
	end		
/******************************************************************************
 * getValues
 *****************************************************************************/
	getValues : action 	DATA:[ data_p ] ==>
	guard
 		idxLine != cb_height
  	var
 		uint(size=8)  tmp[4]		
 	do 
		if DEBUG_BITSTREAM then
	 		print(data_p+" ");
	 	end
 		tmp[0] := 0;
 		tmp[1] := 0;
 		tmp[2] := (data_p>> 9) & 0x00ff;
 		tmp[3] := (data_p>> 1) & 0x00ff;
 		compare_NBytes(tmp,4);
 		
 		if idxColumn < cb_width-1 then
 			idxColumn := idxColumn + 1;
 		else
 			idxColumn := 0;
 			idxLine   := idxLine + 1;
			if DEBUG_BITSTREAM then
 				println();
			end
 		end	 
	end		
/******************************************************************************
 * endRead
 *****************************************************************************/
	endRead : action ==>
	guard
 		idxLine = cb_height
 	do
		if DEBUG_BITSTREAM then
		 	println();
		end
 	end		
/******************************************************************************
 * Scheduler
 *****************************************************************************/	
	schedule fsm init_st:
		init_st      (init     ) --> getValues_st;
		getValues_st (getValues) --> getValues_st;
		getValues_st (endRead  ) --> init_st;
	end
end