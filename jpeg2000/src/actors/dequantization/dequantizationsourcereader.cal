package actors.dequantization;
import utils.decoderPackage.*;
import utils.dequantizationPackage.*;
/******************************************************************************
 * Actor description
 *****************************************************************************/
actor dequantizationsourcereader()	uint(size= 8) Source
									==>						
									uint(size=DATA_SIZE) Coeff,
									uint(size= 8) DeqTileInfo,
									uint(size= 8) DeqCBInfo		
:
/******************************************************************************
 * Global Variables
 *****************************************************************************/
	uint(size=8) Filter := 0;
	uint(size=8) data0  := 0;
	uint(size=8) data1  := 0;
	uint(size=8) data2  := 0;
	uint(size=8) data3  := 0;				
/******************************************************************************
 * Actions
 *****************************************************************************/
 /*getValues : action Source:[Source_p] repeat 4 ==> 		
	do
		data0:=Source_p[0];
		data1:=Source_p[1];	
		data2:=Source_p[2];	
		data3:=Source_p[3];
		Filter:=(data0&0xf0);
	end*/
	
getValues : action Source:[Source_p0, Source_p1, Source_p2, Source_p3] ==> 		
	do
		data0  := Source_p0;
		data1  := Source_p1;	
		data2  := Source_p2;	
		data3  := Source_p3;
		Filter := data0 & 0xf0;
	end
/******************************************************************************
 * Type mot 1, filtre = 0x00
 *****************************************************************************/
 DataF0 : action ==> Coeff:[Coeff_p]
	guard Filter=0x00
	var
		uint(size=DATA_SIZE) Coeff_p
	do
		//Coeff_p:=((data2<<8)+data3);
		Coeff_p:=(data2<<8)+(data3&0xff);
	end
/******************************************************************************
 * Type mot 2, filtre = 0x10
 *****************************************************************************/
 DataF1 : action ==> 
	guard Filter=0x10
	var
	//	uint(size=8) 		SPrgn_p,
		uint(size=8) 		G_p,
	//	uint(size=2)		b_p,
	//	bool 				RGN_p,
		bool 				reversible_p
	do
	//	if ((data0&0x01)=0) then
	//		RGN_p:=true;
	//	else
	//		RGN_p:=false;
	//	end
		if ((data0&0x02)=0x02) then
			reversible_p:=true;
		else
			reversible_p:=false;
		end
		//b_p:=(data0>>2)&0x3;
		G_p:=data1;
		//SPrgn_p:=data3;
	end
/******************************************************************************
 * Type mot 3, filtre = 0x20
 *****************************************************************************/
 DataF2 : action ==>
	guard Filter=0x20
	var					
	//	uint(size=8) 		RI_p,
	//	uint(size=8) 		NL_p//,
		uint(size=8) 		lev_p
	do
		lev_p:=0;
		//NL_p:=data1;
//		lev_p:=data2;
		//RI_p:=data3;
	end
/******************************************************************************
 * Type mot 4, filtre = 0x30
 *****************************************************************************/
 DataF3 : action ==> /*Mu:[Mu_p],*//*Nb:[Nb_p]*/
	guard Filter=0x30
	var
	//	uint(size=8) 		Nb_p,
	//	uint(size=16) 		Mu_p,
		uint(size=8) 		Epsilonb_p
	do
		//Nb_p:=(data0)&0xf;
		//Mu_p:=((data1<<8)+data2);
		Epsilonb_p:=data3;
	end
/******************************************************************************
 * Machine � �tats
 *****************************************************************************/	
	schedule fsm getValues_st:
		getValues_st (getValues)	--> send_st;
		send_st      (DataF0)		--> getValues_st;
		send_st      (DataF1)		--> getValues_st;
		send_st      (DataF2)		--> getValues_st;
		send_st      (DataF3)		--> getValues_st;
	end
end