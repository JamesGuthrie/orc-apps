package actors.codestreamSyntax;
import utils.commonPackage.*;
import utils.codestreamPackage.*;
/******************************************************************************
 * Actor decription
 *****************************************************************************/
actor CBlkInfo () uint(size= 8) cbInfo,
				  uint(size= 8) cbInfoSegSize,
				  uint(size=10) CD_i
				  ==>
				  bool          Ready,
				  uint(size= 8) entropyInfo,
				  uint(size= 8) CD
: 
/******************************************************************************
 * CodeBlock Globale variables
 *****************************************************************************/
    uint(size= 8) c;
 	uint(size= 8) r;
    uint(size= 8) s;
 	uint(size= 8) w;
    uint(size= 8) h;
    uint(size= 8) cmax;
 	uint(size= 8) rmax;
 	uint(size= 8) smax;
 	uint(size= 8) wmax;
 	uint(size= 8) hmax;
    uint(size=16) cptData;
    uint(size=16) cptSegData;
    uint(size=16) sizeData;
 	bool          writeReady;
 	uint(size= 8) cocSP3;
 	uint(size= 8) nbCodingPasses;
    
 	uint(size= 8) cblk_wmax[CB_C_MAX][CB_R_MAX][CB_S_MAX];
    uint(size= 8) cblk_hmax[CB_C_MAX][CB_R_MAX][CB_S_MAX];
    uint(size= 8) cblk_nbCodingPasses[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX];
    uint(size= 8) cblk_zeroBitPlane[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX];
    uint(size=16) cblk_size[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX];
    uint(size= 8) cblk_w[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX];
    uint(size= 8) cblk_h[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX];
    uint(size= 8) cblk_data[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX][CB_DATA_MAX];
    uint(size=16) cblk_segSize[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX][CB_SEG_MAX];

/******************************************************************************
 * Init
 *****************************************************************************/
 	Init : action  ==> Ready:[true]
 	do
 		cmax       := 0;
 		rmax       := 0;
 		writeReady := true;
 		foreach uint(size=8) c in 0 .. CB_C_MAX - 1 do
			foreach uint(size=8) r in 0 .. CB_R_MAX - 1 do
				foreach uint(size=8) s in 0 .. CB_S_MAX - 1 do
					cblk_wmax[c][r][s] := 0;
					cblk_hmax[c][r][s] := 0;
					foreach uint(size=8) w in 0 .. CB_W_MAX - 1 do
						foreach uint(size=8) h in 0 .. CB_H_MAX - 1 do
							cblk_nbCodingPasses[c][r][s][w][h] := 0;
							cblk_zeroBitPlane[c][r][s][w][h]   := 0;
							cblk_size[c][r][s][w][h]           := 0;
							cblk_w[c][r][s][w][h]              := 0;
							cblk_h[c][r][s][w][h]              := 0;
							foreach uint(size=16) d in 0 .. CB_DATA_MAX - 1 do
								cblk_data[c][r][s][w][h][d]    := 0;
							end
							foreach uint(size=16) d in 0 .. CB_SEG_MAX - 1 do
								cblk_segSize[c][r][s][w][h][d] := 0;
							end
						end
					end
				end
			end
		end		
 	end
/******************************************************************************
 * WaitStartWrite
 *****************************************************************************/
 	WaitStartWrite : action CD_i:[data], cbInfo:[cbInfo_p] repeat 11 ==>
 	guard
 		writeReady && data = 0x100
  	var
  		uint(size= 8) zeroBitPlane
 	do
 		c            := cbInfo_p[0];
 		r            := (cbInfo_p[1]>>4) & 0xf;
 		s            := cbInfo_p[1] & 0xf;
 		w            := cbInfo_p[2];
 		h            := cbInfo_p[3];
 		cptData      := cblk_size[c][r][s][w][h];
 		sizeData     := cptData + (cbInfo_p[8]<<8) + cbInfo_p[9];
 		cocSP3       := cbInfo_p[10];
 		zeroBitPlane := cblk_zeroBitPlane[c][r][s][w][h];
 		if c > cmax then cmax := c; end
 		if r > rmax then rmax := r; end
 		if w > cblk_wmax[c][r][s] then cblk_wmax[c][r][s] := w; end
 		if h > cblk_hmax[c][r][s] then cblk_hmax[c][r][s] := h; end
		cblk_w[c][r][s][w][h]              := cbInfo_p[4];	
 		cblk_h[c][r][s][w][h]              := cbInfo_p[5];
 		nbCodingPasses                     := cblk_nbCodingPasses[c][r][s][w][h];
 		cblk_nbCodingPasses[c][r][s][w][h] := nbCodingPasses + cbInfo_p[6];	
		cblk_zeroBitPlane[c][r][s][w][h]   := zeroBitPlane   + cbInfo_p[7];	
		cblk_size[c][r][s][w][h]           := sizeData;	
		if DEBUG_ARRAY = true then	
			if c >= CB_C_MAX then
				println ("CBlkInfo WaitStartWrite CB_C_MAX error !!! : "+c+" >= "+CB_C_MAX);
			end
			if r >= CB_R_MAX then
				println ("CBlkInfo WaitStartWrite CB_R_MAX error !!! : "+r+" >= "+CB_R_MAX);
			end
			if w >= CB_W_MAX then
				println ("CBlkInfo WaitStartWrite CB_W_MAX error !!! : "+w+" >= "+CB_W_MAX);
			end
			if h >= CB_H_MAX then
				println ("CBlkInfo WaitStartWrite CB_H_MAX error !!! : "+h+" >= "+CB_H_MAX);
			end
		end			
 	end
/******************************************************************************
 * WriteSegSize
 *****************************************************************************/
 	WriteSegSize : action cbInfoSegSize:[cbInfo_p] repeat 2 ==>
 	guard
		(cocSP3 & TermCodingPass) != 0 && nbCodingPasses != cblk_nbCodingPasses[c][r][s][w][h]
  	var
 		uint(size=16) segSize_v = (cbInfo_p[0]<<8) + cbInfo_p[1]
 	do
		cblk_segSize[c][r][s][w][h][nbCodingPasses] := segSize_v;
		if DEBUG_ARRAY = true then	
			if nbCodingPasses >= CB_SEG_MAX then
				println ("CBlkInfo WriteSegSize CB_SEG_MAX error !!! : "+nbCodingPasses+" >= "+CB_SEG_MAX);
			end
		end		
		nbCodingPasses := nbCodingPasses + 1;
 	end
 	WriteSegSizeEnd : action ==>
 	guard
		(cocSP3 & TermCodingPass) != 0 && nbCodingPasses = cblk_nbCodingPasses[c][r][s][w][h]
 	end
  	WriteSegSizeBypass : action ==>
 	guard
		(cocSP3 & TermCodingPass) = 0
   	do
		cblk_segSize[c][r][s][w][h][0] := cblk_size[c][r][s][w][h];
 	end
/******************************************************************************
 * WriteData
 *****************************************************************************/
 	WriteData : action CD_i:[data] ==>
 	guard
 		cptData != sizeData
	do
		if DEBUG_ARRAY = true then	
			if cptData >= CB_DATA_MAX then
				println ("CBlkInfo WriteData error !!! : "+cptData+" >= "+CB_DATA_MAX);
			end
		end
		cblk_data[c][r][s][w][h][cptData] := data;
		cptData := cptData + 1;	
 	end
/******************************************************************************
 * EndWriteData
 *****************************************************************************/
 	EndWriteData : action  ==>
 	guard
 		cptData = sizeData 
	end
/******************************************************************************
 * WaitStartRead
 *****************************************************************************/
 	WaitStartRead : action CD_i:[data] ==>
 	guard
 		data = 0x200
 	do
 		c          := 0;
 		r          := 0;
 		s          := 0;
 		w          := 0;
 		h          := 0;
 		smax       := 0;
 		wmax       := cblk_wmax[0][0][0];
 		hmax       := cblk_hmax[0][0][0];
 		writeReady := false;
	end
/******************************************************************************
 * procedure loopReadIncr
 *****************************************************************************/
  	procedure  loopReadIncr ()
  	begin
  		if (h = hmax) then
 			if (w = wmax) then
 				if (s = smax) then
 					if (r = rmax) then
 						c    := c + 1;
 						r    := 0;
 						s    := 0;
	 					smax := 0;
 					else
 						r    := r + 1;
 						s    := 1;
	 					smax := 3;
 					end
 				else
 					s := s + 1;
 				end
 				wmax  := cblk_wmax[c][r][s];
 				hmax  := cblk_hmax[c][r][s];
 				w     := 0;
 			else
 				w     := w + 1;
 			end
 			h := 0;
 		else
 			h := h + 1;
 		end
	end	
/******************************************************************************
 * loopReadStart
 *****************************************************************************/
  	LoopReadStart : action ==> entropyInfo:[
  											cb_w_p, cb_h_p,
  											npasses_p, s, zeroBP_p,
  											c, r, w, h,
  											cocSP3,
  											(sizeData>>8) & 0xff, sizeData & 0xff
  										]
  	guard
  		c <= cmax && cblk_w[c][r][s][w][h] != 0 && cblk_h[c][r][s][w][h] != 0
  	var
  		uint(size=8) cb_w_p    = cblk_w[c][r][s][w][h],	
 		uint(size=8) cb_h_p    = cblk_h[c][r][s][w][h],	
 		uint(size=8) npasses_p = cblk_nbCodingPasses[c][r][s][w][h],
  		uint(size=8) zeroBP_p  = cblk_zeroBitPlane[c][r][s][w][h]
  	do
  	  	sizeData       := cblk_size[c][r][s][w][h];
  		cptData        := 0;
  		nbCodingPasses := 0;
 	end
 	LoopReadStart_null : action ==> 
  	guard
  		c <= cmax && (cblk_w[c][r][s][w][h] = 0 || cblk_h[c][r][s][w][h] = 0)
	do
  		loopReadIncr();
 	end 	
/******************************************************************************
 * loopEnd
 *****************************************************************************/
  	LoopReadEnd : action ==>
  	guard
  		c > cmax
  	end
/******************************************************************************
 * LoopSegStart
 *****************************************************************************/
  	LoopSegStart.default : action ==> entropyInfo:[ (sizeData>>8) & 0xff, sizeData & 0xff]
  	guard
  		nbCodingPasses != cblk_nbCodingPasses[c][r][s][w][h] && (cocSP3 & TermCodingPass)  != 0 
 	do
  	 	sizeData   := cblk_segSize[c][r][s][w][h][nbCodingPasses];
  	 	cptSegData := 0;
 	end 	
  	LoopSegStart.onlyOne : action ==> 
  	guard
  		nbCodingPasses != 1 && (cocSP3 & TermCodingPass)  = 0 
 	do
  	 	cptSegData := 0;
 	end 	
/******************************************************************************
 * LoopSegEnd
 *****************************************************************************/
  	LoopSegEnd : action ==>
  	guard
  		nbCodingPasses = cblk_nbCodingPasses[c][r][s][w][h] || (cocSP3 & TermCodingPass)  = 0 
  	end
/******************************************************************************
 * ReadData
 *****************************************************************************/
 	ReadData : action ==> CD:[data]
 	guard
 		cptSegData != sizeData
 	var
  		uint(size= 8) data = cblk_data[c][r][s][w][h][cptData]
  	do
		cptData    := cptData + 1;	
		cptSegData := cptSegData + 1;
 	end
 /******************************************************************************
 * EndReadData
 *****************************************************************************/
  	EndReadData : action ==>
  	guard
 		cptSegData = sizeData
 	do
 	  	nbCodingPasses := nbCodingPasses + 1;
  	end
/******************************************************************************
 * EndLoopSeg
 *****************************************************************************/
 	EndLoopSeg : action ==>
	do
		loopReadIncr();
	end
/******************************************************************************
 * Scheduler
 *****************************************************************************/	
	schedule fsm init_st:
		init_st         ( Init               ) --> waitStart_st;
		// Wait 
		waitStart_st    ( WaitStartWrite     ) --> writeSegSize_st;
		waitStart_st    ( WaitStartRead      ) --> loopRead_st;
		// Write segSize
		writeSegSize_st ( WriteSegSize       ) --> writeSegSize_st;
		writeSegSize_st ( WriteSegSizeEnd    ) --> writeData_st;
		writeSegSize_st ( WriteSegSizeBypass ) --> writeData_st;
		// Write Data
		writeData_st    ( WriteData          ) --> writeData_st;
		writeData_st    ( EndWriteData       ) --> waitStart_st;
		// loopRead 
		loopRead_st     ( LoopReadStart      ) --> loopSeg_st;
		loopRead_st     ( LoopReadStart_null ) --> loopRead_st;
		loopRead_st     ( LoopReadEnd        ) --> init_st;
		// loopSeg 
		loopSeg_st      ( LoopSegStart       ) --> readData_st;
		loopSeg_st      ( LoopSegEnd         ) --> endLoopSeg_st;
		// Read
		readData_st     ( ReadData           ) --> readData_st;
		readData_st     ( EndReadData        ) --> loopSeg_st;
		//
		endLoopSeg_st   ( EndLoopSeg         ) --> loopRead_st;
	end
 end
