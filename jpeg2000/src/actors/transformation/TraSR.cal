package actors.transformation;
import utils.transformationPackage.*;
/******************************************************************************
 * Actor description
 *****************************************************************************/
actor TraSR()		uint(size=8) Source
							==>						
					int(size=32) 		Coeff, 			
					uint(size=8) 		NL, 			
					uint(size=12)		TileSizeX,
					uint(size=12)		TileSizeY,
					uint(size=8)		cbheight,
					uint(size=8)		cbwidth,
					bool 				reversible,
					uint(size=12)		tcx0,	
					uint(size=12) 		tcx1,
					uint(size=12)		tcy0,
					uint(size=12)		tcy1,
					uint(size=8) 		TileIndex						
:
/******************************************************************************
 * Global variables
 *****************************************************************************/
					uint(size=4)		Filter;
					uint(size=8) 		data0;
					uint(size=8) 		data1;
					uint(size=8) 		data2;
					uint(size=8) 		data3;
					int(size=32) 		Coeff_o; 			
					uint(size=8) 		NL_o; 			
					uint(size=12)		TileSizeX_o;
					uint(size=12)		TileSizeY_o;
					bool 				reversible_o;
					uint(size=12)		tcx0_o;	
					uint(size=12) 		tcx1_o;
					uint(size=12)		tcy0_o;
					uint(size=12)		tcy1_o;
					uint(size=8) 		cbwidth_o; 
					uint(size=8) 		cbheight_o;
					uint(size=8)		TileIndex_o; 						
/******************************************************************************
 * Actions
 *****************************************************************************/
 getValues : action Source:[Source_p] repeat 4 ==> 		
	do
		data0:=Source_p[0];
		data1:=Source_p[1];	
		data2:=Source_p[2];	
		data3:=Source_p[3];
		Filter:=(data0&0xf0);
	end
/******************************************************************************
 * Type 0, filter = 0x00
 *****************************************************************************/
 DataF0 : action ==> Coeff:[Coeff_o]
	guard Filter=0x00 || Filter=0xf0
	do
		Coeff_o:=(data0<<24)+(data1<<16)+(data2<<8)+data3;
	end
/******************************************************************************
 * Type 1, filter = 0x10
 *****************************************************************************/
 DataF1 : action ==> cbheight:[cbheight_o],cbwidth:[cbwidth_o]
	guard Filter=0x10
	do
		cbheight_o:=data2;
		cbwidth_o:=data1;
	end
/******************************************************************************
 * Type 2, filter = 0x20
 *****************************************************************************/
 DataF2 : action ==> tcx0:[tcx0_o],tcx1:[tcx1_o]
	guard Filter=0x20
	do
		tcx0_o:=(data1<<4)+((data2&0xf0)>>4);
		tcx1_o:=(data2&0x0f)<<8+data3;
	end
/******************************************************************************
 * Type 3, filter = 0x30
 *****************************************************************************/
 DataF3 : action ==> tcy0:[tcy0_o],tcy1:[tcy1_o]
	guard Filter=0x30
	do
		tcy0_o:=(data1<<4)+((data2&0xf0)>>4);
		tcy1_o:=(data2&0x0f)<<8+data3;
	end
/******************************************************************************
 * Type 4, filter = 0x40
 *****************************************************************************/
 DataF4 : action ==> TileSizeX:[TileSizeX_o],TileSizeY:[TileSizeY_o],reversible:[reversible_o]
	guard Filter=0x40
	do
		TileSizeX_o:=(data1<<4)+((data2&0xf0)>>4);
		TileSizeY_o:=((data2&0x0f)<<8)+data3;
		if ((data0&0x01)=0x01) then
			reversible_o:=true;
		else
			reversible_o:=false;
		end
	end
/******************************************************************************
 * Type 5, filter = 0x50
 *****************************************************************************/
 DataF5 : action ==> TileIndex:[TileIndex_o],NL:[NL_o]
	guard Filter=0x50
	do
		TileIndex_o:=data1;
		NL_o:=data2;		
	end
/******************************************************************************
 * FSM
 *****************************************************************************/	
	schedule fsm getValues_st:
		getValues_st (getValues)	--> send_st;
		send_st      (DataF0)		--> getValues_st;
		send_st      (DataF1)		--> getValues_st;
		send_st      (DataF2)		--> getValues_st;
		send_st      (DataF3)		--> getValues_st;
		send_st      (DataF4)		--> getValues_st;
		send_st      (DataF5)		--> getValues_st;
	end
end