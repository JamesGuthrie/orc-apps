package V2.parser.tools;
import  V2.parser.packages.parserPackage.*;

/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit codeBlockTools :

/******************************************************************************
 ******************************************************************************
 ******************************************************************************
 * CodeBlock decription
 ******************************************************************************
 ******************************************************************************
 *****************************************************************************/

	/**************************************************************************
	 * procedure CodeBlockNew
	 *************************************************************************/
  	procedure CodeBlockNew (bool          cblk_exists[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
 							uint(size= 8) cblk_lblock[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
 							uint(size= 8) cblk_nbCodingPasses[CB_S_MAX][CB_W_MAX][CB_H_MAX],
    						uint(size= 8) cblk_w[CB_S_MAX][CB_W_MAX][CB_H_MAX],
    						uint(size= 8) cblk_h[CB_S_MAX][CB_W_MAX][CB_H_MAX]
    )
	begin
		foreach uint(size=8) s in 0 .. CB_S_MAX - 1 do
			foreach uint(size=8) w in 0 .. CB_W_MAX - 1 do
				foreach uint(size=8) h in 0 .. CB_H_MAX - 1 do
					cblk_nbCodingPasses[s][w][h] := 0;
					cblk_w[s][w][h]              := 0;
					cblk_h[s][w][h]              := 0;
					foreach uint(size=8) c in 0 .. CB_C_MAX - 1 do
						foreach uint(size=8) r in 0 .. CB_R_MAX - 1 do
							cblk_exists[c][r][s][w][h] := false;
							cblk_lblock[c][r][s][w][h] := 3;
						end
					end
				end
			end
		end		
 	end
	/**************************************************************************
	 * procedure CodeBlockInit
	 *************************************************************************/
 	procedure CodeBlockInit (uint(size= 8) cblk_zeroBitPlane[CB_S_MAX][CB_W_MAX][CB_H_MAX],
    						 uint(size=16) cblk_size[CB_S_MAX][CB_W_MAX][CB_H_MAX]
 	)
	begin
		foreach uint(size=8) s in 0 .. CB_S_MAX - 1 do
			foreach uint(size=8) w in 0 .. CB_W_MAX - 1 do
				foreach uint(size=8) h in 0 .. CB_H_MAX - 1 do
					cblk_zeroBitPlane[s][w][h]   := 0;
					cblk_size[s][w][h]           := 0;
				end
			end
		end		
 	end
	/**************************************************************************
	 * procedure CodeBlockSetZeroBitPlane
	 *************************************************************************/
  	procedure CodeBlockSetZeroBitPlane (	uint(size= 8) value,
		  									uint(size= 8) cblk_zeroBitPlane[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  											uint(size=16) idx[IDX_STRUCT_SIZE]
  	)
  	begin
		cblk_zeroBitPlane[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := value;	
 	end
	/**************************************************************************
	 * function CodeBlockGetZeroBitPlane
	 *************************************************************************/
  	function CodeBlockGetZeroBitPlane (		uint(size= 8) cblk_zeroBitPlane[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size= 8) :
		cblk_zeroBitPlane[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end
	/**************************************************************************
	 * procedure CodeBlockSetNbPass
	 *************************************************************************/
  	procedure CodeBlockSetNbPass (	uint(size= 8) value,
  									bool          cblk_exists[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size= 8) cblk_nbCodingPasses[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	)
  	begin
		cblk_exists[idx[C_IDX]][idx[R_IDX]][idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := true;
		cblk_nbCodingPasses[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := value;	
 	end
	/**************************************************************************
	 * function CodeBlockGetNbPass
	 *************************************************************************/
  	function CodeBlockGetNbPass (		uint(size= 8) cblk_nbCodingPasses[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size= 8) :
		cblk_nbCodingPasses[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end
	/**************************************************************************
	 * procedure CodeBlockSetLBlock
	 *************************************************************************/
  	procedure CodeBlockSetLBlock (	uint(size= 8) value,
  									uint(size= 8) cblk_lblock[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	)
  	begin
		cblk_lblock[idx[C_IDX]][idx[R_IDX]][idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := CodeBlockGetLBlock(cblk_lblock, idx) + value;	
 	end
	/**************************************************************************
	 * function CodeBlockGetLBlock
	 *************************************************************************/
  	function CodeBlockGetLBlock (	uint(size= 8) cblk_lblock[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size= 8) :
		cblk_lblock[idx[C_IDX]][idx[R_IDX]][idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end
	/**************************************************************************
	 * procedure CodeBlockSetSize
	 *************************************************************************/
  	procedure CodeBlockSetSize (	 int(size=16) value,
  									uint(size=16) cblk_size[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	)
  	begin
		cblk_size[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := CodeBlockGetSize(cblk_size, idx) + value;	
 	end
	/**************************************************************************
	 * function CodeBlockGetSize
	 *************************************************************************/
  	function CodeBlockGetSize (		uint(size=16) cblk_size[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size=16) :
		cblk_size[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end
	/**************************************************************************
	 * function CodeBlockIfExists
	 *************************************************************************/
  	function CodeBlockIfExists (	bool          cblk_exists[CB_C_MAX][CB_R_MAX][CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> bool :
		cblk_exists[idx[C_IDX]][idx[R_IDX]][idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]
 	end
	/**************************************************************************
	 * function CodeBlockGetH
	 *************************************************************************/
  	function CodeBlockGetH (		uint(size= 8) cblk_h[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size= 8) :
		cblk_h[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end
	/**************************************************************************
	 * function CodeBlockGetW
	 *************************************************************************/
  	function CodeBlockGetW (		uint(size= 8) cblk_w[CB_S_MAX][CB_W_MAX][CB_H_MAX],
  									uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> uint(size= 8) :
		cblk_w[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]]	
 	end

end