package V2.parser.tools;
import  V2.common.BitstreamReadUtils.*;
import  V2.common.commonPackage.*;
import  V2.parser.packages.parserPackage.*;

/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit tagTree :
	bool		  DEBUG_TAG_TREE  = false;
	/**************************************************************************
	 * TagTree local struct constant
 	 *************************************************************************/
	uint(size= 8) K_TTL           = 0;
	uint(size= 8) TMIN_TTL        = 1;
	uint(size= 8) T_TTL           = 2;
	uint(size= 8) IDX_TTL         = 3;
	uint(size= 8) TV_TTL          = 4;
	uint(size= 8) TTL_STRUCT_SIZE = 5;
	/**************************************************************************
	 * procedure TagTreeNew
	 *************************************************************************/
  	procedure TagTreeNew (uint(size= 8) tt_lvls[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX])
	begin
		foreach uint(size=8) c in 0 .. TT_C_MAX - 1 do
			foreach uint(size=8) r in 0 .. TT_R_MAX - 1 do
				foreach uint(size=8) p in 0 .. TT_P_MAX - 1 do
					foreach uint(size=8) s in 0 .. TT_S_MAX - 1 do
						tt_lvls[c][r][p][s] := 0xff;
					end
				end
			end
		end		
 	end
	/**************************************************************************
	 * function TagTreeIfExists
	 *************************************************************************/
  	function TagTreeIfExists (uint(size= 8) tt_lvls[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX],
  							  uint(size=16) idx[IDX_STRUCT_SIZE]
  	) --> bool
  	var
  		uint(size=8) idx_c = idx[C_IDX],
		uint(size=8) idx_r = idx[R_IDX],
		uint(size=8) idx_p = idx[P_IDX],
		uint(size=8) idx_s = idx[S_IDX]
  	:
		tt_lvls[idx_c][idx_r][idx_p][idx_s] != 0xff	
 	end
	/**************************************************************************
	 * procedure TagTreeAdd
	 *************************************************************************/
  	procedure TagTreeAdd (	uint(size= 8) tt_lvls[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX],
							uint(size= 8) tt_InclV[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
    						uint(size= 8) tt_InclS[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
    						uint(size= 8) tt_BdV[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
    						uint(size= 8) tt_BdS[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
							uint(size=16) idx[IDX_STRUCT_SIZE],
							uint(size=16) idxEnd[IDX_STRUCT_SIZE]
  	)
	var
		uint(size=8) idx_c  = idx[C_IDX],
		uint(size=8) idx_r  = idx[R_IDX],
		uint(size=8) idx_p  = idx[P_IDX],
		uint(size=8) idx_s  = idx[S_IDX],
		uint(size=8) tmp_h := idxEnd[H_IDX]+1,
		uint(size=8) tmp_w := idxEnd[W_IDX]+1,
		uint(size=8) lvls  := 0
	begin
		if DEBUG_ARRAY = true then	
			if idx_c >= TT_C_MAX then
				println ("codestreamData TagTreeAdd error TT_C_MAX : "+idx_c+" >= "+TT_C_MAX+" !!!");
			end
			if idx_r >= TT_R_MAX then
				println ("codestreamData TagTreeAdd error TT_R_MAX : "+idx_r+" >= "+TT_R_MAX+" !!!");
			end
			if idx_p >= TT_P_MAX then
				println ("codestreamData TagTreeAdd error TT_C_MAX : "+idx_p+" >= "+TT_P_MAX+" !!!");
			end
			if idx_s >= TT_S_MAX then
				println ("codestreamData TagTreeAdd error TT_S_MAX : "+idx_s+" >= "+TT_S_MAX+" !!!");
			end
		end
	
		if (tmp_w!=0 && tmp_h!=0) then
			lvls := 1;
			while (tmp_h!=1 || tmp_w !=1) do
				tmp_h := (tmp_h+1) >> 1;
				tmp_w := (tmp_w+1) >> 1;
				lvls  := lvls + 1;
			end
		end
		tt_lvls[idx_c][idx_r][idx_p][idx_s] := lvls;
		
		if DEBUG_TAG_TREE then
			println("TagTreeAdd "+(idxEnd[W_IDX]+1)+", "+(idxEnd[H_IDX]+1)+", "+lvls);
		end
		
		foreach uint(size=8) i in 0 .. TT_LEVEL_MAX - 1 do
			foreach uint(size=8) j in 0 .. TT_INDEX_MAX - 1 do
				tt_InclV[idx_c][idx_r][idx_p][idx_s][i][j] := (1<<7)-1;
				tt_InclS[idx_c][idx_r][idx_p][idx_s][i][j] := 0;
				tt_BdV[idx_c][idx_r][idx_p][idx_s][i][j]   := (1<<7)-1;
				tt_BdS[idx_c][idx_r][idx_p][idx_s][i][j]   := 0;
			end
		end		
 	end
	/**************************************************************************
	 * procedure tagTreeUpdate
	 *************************************************************************/
  	procedure  tagTreeUpdate (	uint(size= 8) ttV[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
  							   	uint(size= 8) ttS[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
								uint(size= 8) ttl[TTL_STRUCT_SIZE],
								uint(size=16) idx[IDX_STRUCT_SIZE],
								uint(size=16) hEnd,
								uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]
  	)
	var
		uint(size= 8) idx_c = idx[C_IDX],
		uint(size= 8) idx_r = idx[R_IDX],
		uint(size= 8) idx_p = idx[P_IDX],
		uint(size= 8) idx_s = idx[S_IDX],
		uint(size= 8) idx_w = idx[W_IDX],
		uint(size= 8) idx_h = idx[H_IDX],
		uint(size= 8) k     = ttl[K_TTL],
		uint(size= 8) t     = ttl[T_TTL],
  		uint(size= 8) index = (idx_w>>k)*((hEnd+(1<<k)-1)>>k)+(idx_h>>k),
		uint(size= 8) tv,
		uint(size= 8) ts,
  		uint(size=32) res[1]
  	begin
		if DEBUG_ARRAY = true then	
			if k >= TT_LEVEL_MAX then
				println ("codestreamData tagTreeUpdateStart error TT_LEVEL_MAX : "+k+" >= "+TT_LEVEL_MAX+" !!!");
			end
			if index >= TT_INDEX_MAX then
				println ("codestreamData tagTreeUpdateStart error TT_INDEX_MAX : "+index+" >= "+TT_INDEX_MAX+" !!!");
			end
		end
      	ts  := ttS[idx_c][idx_r][idx_p][idx_s][k][index];
      	tv  := ttV[idx_c][idx_r][idx_p][idx_s][k][index];
      	if (ts < ttl[TMIN_TTL]) then
			ts := ttl[TMIN_TTL];
      	end
		if DEBUG_TAG_TREE then
	     	println("   updateStart "+index+", "+ts+", "+tv);
		end
//		println("   tagTree::update  idx="+index+", ts="+ts+", tv="+tv);
      	
      	while (t>ts && tv>=ts) do
			getBits(1, fifo, res);
      		if res[0] = 1 then
				tv := ts;
			end
			ts := ts + 1;
			if DEBUG_TAG_TREE then
				println("   update "+t+" getBit "+res[0]);
			end
//			println("      tagTree::update m="+m+" n="+n+" t="+t+" getBit "+res[0]);
      		if DEBUG_TAG_TREE then
 				println("   update k="+k+" t="+t+" ts="+ts+" tv="+tv);
 			end
    	end
	    if (t>ts && tv<ts) then
	    	ts := t;
    	end
	  	ttS[idx_c][idx_r][idx_p][idx_s][k][index] := ts;
   		ttV[idx_c][idx_r][idx_p][idx_s][k][index] := tv;
	    ttl[TV_TTL] := tv;
	    if (k>0) then
			if (ts<tv) then
		  		ttl[TMIN_TTL] := ts;
			else
		  		ttl[TMIN_TTL] := tv;
			end
			ttl[K_TTL] := k - 1;
		end
  	end
	/**************************************************************************
	 * procedure tagTreeUpdateIncl
	 *************************************************************************/
  	procedure  tagTreeUpdateIncl (	uint(size= 8) tt_lvls[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX],
									uint(size= 8) tt_InclV[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
  							   		uint(size= 8) tt_InclS[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
									uint(size=16) idx[IDX_STRUCT_SIZE],
									uint(size=16) hEnd,
									uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
									uint(size=32) res[1]
  	)
  	var
		uint(size= 8) idx_l = idx[L_IDX],
		uint(size= 8) idx_c = idx[C_IDX],
		uint(size= 8) idx_r = idx[R_IDX],
		uint(size= 8) idx_p = idx[P_IDX],
		uint(size= 8) idx_s = idx[S_IDX],
		uint(size= 8) k     = tt_lvls[idx_c][idx_r][idx_p][idx_s] - 1,
  		uint(size= 8) ttl[TTL_STRUCT_SIZE]
  	begin
  		ttl[K_TTL]    := k;
	  	ttl[TMIN_TTL] := tt_InclS[idx_c][idx_r][idx_p][idx_s][ttl[K_TTL]][0];
	  	ttl[T_TTL]    := idx_l + 1;
		if DEBUG_TAG_TREE then
	      	println("updateIncl "+ttl[K_TTL]+", "+ttl[TMIN_TTL]+", "+idx[W_IDX]+", "+idx[H_IDX]+", "+ttl[T_TTL]);
		end
		foreach uint(size=8) c in 0 .. k do
		  	tagTreeUpdate(tt_InclV, tt_InclS, ttl, idx, hEnd, fifo);
		end
		res[0] := ttl[TV_TTL];
  	end
	/**************************************************************************
	 * procedure tagTreeUpdateBD
	 *************************************************************************/
  	procedure  tagTreeUpdateBD (	uint(size= 8) tt_lvls[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX],
									uint(size= 8) tt_BdV[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
  							   		uint(size= 8) tt_BdS[TT_C_MAX][TT_R_MAX][TT_P_MAX][TT_S_MAX][TT_LEVEL_MAX][TT_INDEX_MAX],
									uint(size=16) idx[IDX_STRUCT_SIZE],
									uint(size=16) hEnd,
									uint(size= 8) value,
									uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
									uint(size=32) res[1]
  	)
  	var
		uint(size= 8) idx_c = idx[C_IDX],
		uint(size= 8) idx_r = idx[R_IDX],
		uint(size= 8) idx_p = idx[P_IDX],
		uint(size= 8) idx_s = idx[S_IDX],
  		uint(size= 8) k     = tt_lvls[idx_c][idx_r][idx_p][idx_s] - 1,
  		uint(size= 8) ttl[TTL_STRUCT_SIZE]
  	begin
  		ttl[K_TTL]    := k;
	  	ttl[TMIN_TTL] := tt_BdS[idx_c][idx_r][idx_p][idx_s][ttl[K_TTL]][0];
	  	ttl[T_TTL]    := value;
		if DEBUG_TAG_TREE then
	      	println("updateBD "+ttl[K_TTL]+", "+ttl[TMIN_TTL]+", "+idx[W_IDX]+", "+idx[H_IDX]+", "+ttl[T_TTL]);
		end
		foreach uint(size=8) c in 0 .. k do
		  	tagTreeUpdate(tt_BdV, tt_BdS, ttl, idx, hEnd, fifo);
		end
		res[0] := ttl[TV_TTL];
  	end
end