package V2.parser.tools;
import  V2.common.commonPackage.*;
import  V2.parser.packages.parserPackage.*;
/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit parserPrinter :

/******************************************************************************
 * procedure printSOC
 *****************************************************************************/
	procedure printSOC ()
	begin
		if DEBUG_HEADER = true then
		    println("====================");
    		println("==== SOC Header ====");
    		println("====================");
    	end
	end
/******************************************************************************
 * procedure printSIZ
 *****************************************************************************/
	procedure printSIZ (uint(size=32) siz[SIZ_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== SIZ ====");
    		print(" R    = "+siz[R_SIZ]+" : ");
    		if siz[R_SIZ] = 0 then
    			println("Capabilities specified in this Recommendation | International Standard only");
    		else
    			if siz[R_SIZ] = 1 then
    				println("Codestream restricted as described for Profile 0 from Table A-45");
    			else
    				println("Codestream restricted as described for Profile 1 from Table A-45");
    			end
    		end
    		println(" X    = "+siz[X_SIZ]);
    		println(" Y    = "+siz[Y_SIZ]);
    		println(" XO   = "+siz[XO_SIZ]);
    		println(" YO   = "+siz[YO_SIZ]);
    		println(" XT   = "+siz[XT_SIZ]);
    		println(" YT   = "+siz[YT_SIZ]);
    		println(" XTO  = "+siz[XTO_SIZ]);
		    println(" YTO  = "+siz[YTO_SIZ]);
    		println(" C    = "+siz[C_SIZ]);
    		foreach uint(size=8) i in 0 .. cpt-1 do
      			print(" S"+i+"   = "+siz[S_SIZ+i]+" : sample bit depth = "+((siz[S_SIZ+i]&0x7f)+1)+". ");
      			if (siz[S_SIZ+i] & 0x80) = 0 then
					println("unsigned values");
      			else
					println("signed values");
      			end
      			println(" XR"+i+"  = "+siz[XR_SIZ + i]);
      			println(" YR"+i+"  = "+siz[YR_SIZ + i]);
    		end
    	end
	end
/******************************************************************************
 * procedure printCOD
 *****************************************************************************/
	procedure printCOD (bool          isCOD,
						uint(size= 8) HeaderIdx,
						uint(size=32) coc[2][COC_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	var
		uint(size=32) c := coc[0][C_COC],
		uint(size=32) cpt2
	begin
		if DEBUG_HEADER = true then
			if c = 0xFFFF then
				c := 0;
			end
    		if isCOD then
    			println("==== COD ====");
			else
				println("==== COC ====");
			    println(" C    = "+c);
			end
			print(" S    = "+coc[HeaderIdx][S_COC + c]+" :");
    		foreach uint(size=8) i in 0 .. 2 do
    			cpt2 := ((1<<i) << 4) + (coc[HeaderIdx][S_COC + c] &(1<<i));
      			if cpt2 = 0x10 then print(" PPx = PPy = 15"); end
		    	if cpt2 = 0x11 then print(" Entropy coder with precinct values defined below"); end
	    		if isCOD then
	    	 		if cpt2 = 0x20 then print(", No SOP"); end
     				if cpt2 = 0x22 then print(", SOP"); end
     	 			if cpt2 = 0x40 then print(", No EPH"); end
     	 			if cpt2 = 0x44 then print(", EPH"); end
     	 		end
    		end
    		println();
    		if isCOD then
    			println(" SG   = "+coc[HeaderIdx][SG_COC + c]);
    			cpt2 := (coc[HeaderIdx][SG_COC + c] >> 24) & 0xff;
    			if cpt2 = 0 then println("       Layer-resolution level-component-position progression"); end
    			if cpt2 = 1 then println("       Resolution level-layer-component-position progression"); end
    			if cpt2 = 2 then println("       Resolution level-position-component-layer progression"); end
    			if cpt2 = 3 then println("       Position-component-resolution level-layer progression"); end
    			if cpt2 = 4 then println("       Component-position-resolution level-layer progression"); end
	    		println("");
    			println("       Number of layers : "+((coc[HeaderIdx][SG_COC + c] >> 8) & 0xffff));
	    		println("");
    			if (coc[HeaderIdx][SG_COC + c] & 0xff) = 0 then
			   		println("       No multiple component transformation specified.");
    			else
		    		println("       Component transformation used on components 0, 1, 2 for coding efficiency (see Annex G.2).");
      				println("       Irreversible component transformation used with the 9-7 irreversible filter.");
      				println("       Reversible component transformation used with the 5-3 reversible filter.");
    			end
    			println("");
			end
    		foreach uint(size=8) i in 0 .. cpt - 1 do
	      		print(" SP"+i+"  = "+coc[HeaderIdx][SP_COC + c * COD_MAX + i]+" : ");
    	  		if i = 0 then println("Number of decomposition levels, NL = "+coc[HeaderIdx][SP_COC + c * COD_MAX + i]+", Zero implies no transformation"); end
      			if i = 1 then println("Code-block width exponent offset value,  xcb = "+(coc[HeaderIdx][SP_COC + c * COD_MAX + i]+2)); end
      			if i = 2 then println("Code-block height exponent offset value, ycb = "+(coc[HeaderIdx][SP_COC + c * COD_MAX + i]+2)); end
      			if i = 3 then 
	  				println("Style of the code-block coding passes");
					foreach uint(size=8) j in 0 .. 5 do
    					cpt2 := ((1<<j) << 8) + (coc[HeaderIdx][SP_COC + c * COD_MAX + i] &(1<<j));
      					if cpt2 = 0x0100 then println("            No selective arithmetic coding bypass"); end
	  					if cpt2 = 0x0101 then println("            Selective arithmetic coding bypass"); end
	  					if cpt2 = 0x0200 then println("            No reset of context probabilities on coding pass boundaries"); end
	  					if cpt2 = 0x0202 then println("            Reset context probabilities on coding pass boundaries"); end
	  					if cpt2 = 0x0400 then println("            No termination on each coding pass"); end
	  					if cpt2 = 0x0404 then println("            Termination on each coding pass"); end
	  					if cpt2 = 0x0800 then println("            No vertically causal context"); end
	  					if cpt2 = 0x0808 then println("            Vertically causal context"); end
	  					if cpt2 = 0x1000 then println("            No predictable termination"); end
		  				if cpt2 = 0x1010 then println("            Predictable termination"); end
	  					if cpt2 = 0x2000 then println("            No segmentation symbols are used"); end
	  					if cpt2 = 0x2020 then println("            Segmentation symbols are used"); end
					end
				end
				if i = 4 then
		  			print("Wavelet transformation used");
					if coc[HeaderIdx][SP_COC + c * COD_MAX + i] = 0 then
						println(" 9-7 irreversible filter");
					else
						println(" 5-3 reversible filter");
					end
				end
      			if i > 4 then
					println("Precinct size "+(i-5)+" : resolution level("+(i-5)+") : PPx = "+(coc[HeaderIdx][SP_COC + c * COD_MAX + i]&0xf)+" : PPy = "+(coc[HeaderIdx][SP_COC + c * COD_MAX + i]>>4));
      			end
    		end
    	end
	end
/******************************************************************************
 * procedure printQCD
 *****************************************************************************/
	procedure printQCD (uint(size= 8) isQCD,
						uint(size= 8) HeaderIdx,
						uint(size=16) qcc[2][QCC_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	var
		uint(size=32) Cqcc := qcc[0][C_QCC]
	begin
		if DEBUG_HEADER = true then
			if isQCD = 1 then
			    println("==== QCD ====");
			else
				println("==== QCC ====");
				println(" C    = "+Cqcc);
			end
    		print(" S    = "+qcc[HeaderIdx][S_QCC + Cqcc]+" : ");
    		if (qcc[HeaderIdx][S_QCC + Cqcc] & 0x1f) = 0 then print("No quantization"); end
    		if (qcc[HeaderIdx][S_QCC + Cqcc] & 0x1f) = 1 then print("Scalar derived"); end
    		if (qcc[HeaderIdx][S_QCC + Cqcc] & 0x1f) = 2 then print("Scalar expounded"); end
    		println(" : Number of guard bits = "+((qcc[HeaderIdx][S_QCC + Cqcc]>>5)&0x7));
    		foreach uint(size=8) i in 0 .. cpt - 1 do
      			print(" SP"+i+"  = "+qcc[HeaderIdx][SP_QCC +  Cqcc * QCD_MAX + i]+" : ");
      			if (qcc[HeaderIdx][S_QCC + Cqcc] & 0x1f) = 0 then
					println("Exponent, Eb = "+((qcc[HeaderIdx][SP_QCC +  Cqcc * QCD_MAX + i]>>3)&0x01F));
      			else 
					println("Mantissa, Ub = "+(qcc[HeaderIdx][SP_QCC +  Cqcc * QCD_MAX + i]& 0x7FF)+" : Exponent, Eb = "+((qcc[HeaderIdx][SP_QCC +  Cqcc * QCD_MAX + i]>>11)&0x01F));
      			end
    		end
    	end
	end
/******************************************************************************
 * procedure printRGN
 *****************************************************************************/
	procedure printRGN (uint(size= 8) HeaderIdx,
						uint(size=16) rgn[2][RGN_STRUCT_SIZE]
	)
	begin
		if DEBUG_HEADER = true then
			println("==== RGN ====");
    		println(" C    = " + rgn[HeaderIdx][C_RGN]);
    		print(" S    = " + rgn[HeaderIdx][S_RGN] +" : ");
    		if rgn[HeaderIdx][S_RGN] = 0 then
				println("Implicit ROI (maximum shift)");
    		else 
      			println("All other values reserved");
    		end
    		println(" SP   = "+rgn[HeaderIdx][SP_RGN]+" : Binary shifting of ROI coefficients above the background");
    	end
	end
/******************************************************************************
 * procedure printPOC
 *****************************************************************************/
	procedure printPOC (uint(size= 8) HeaderIdx,
						uint(size=16) poc[2][POC_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== POC ====");
    		foreach uint(size=8) i in 0 .. cpt - 1 do
				println(" RS"+i+"    = "+poc[HeaderIdx][RS_POC  + i]);
      			println(" CS"+i+"    = "+poc[HeaderIdx][CS_POC  + i]);
      			println(" LYE"+i+"   = "+poc[HeaderIdx][LYE_POC + i]);
      			println(" RE"+i+"    = "+poc[HeaderIdx][RE_POC  + i]);
      			println(" CE"+i+"    = "+poc[HeaderIdx][CE_POC  + i]);
      			print(  " P"+i+"     = "+poc[HeaderIdx][P_POC   + i]+" : ");
      			if poc[HeaderIdx][P_POC + i] = 0 then println("Layer-resolution level-component-position progression"); end
      			if poc[HeaderIdx][P_POC + i] = 1 then println("Resolution level-layer-component-position progression"); end
      			if poc[HeaderIdx][P_POC + i] = 2 then println("Resolution level-position-component-layer progression"); end
      			if poc[HeaderIdx][P_POC + i] = 3 then println("Position-component-resolution level-layer progression"); end
      			if poc[HeaderIdx][P_POC + i] = 4 then println("Component-position-resolution level-layer progression"); end
      		end
    	end
	end
/******************************************************************************
 * procedure printPPM
 *****************************************************************************/
	procedure printPPM (uint(size=32) ppm[PPM_STRUCT_SIZE])
	begin
		if DEBUG_HEADER = true then
			println("==== PPM ====");
    		println(" Z    = "+ppm[Z_PPM]);
    		foreach uint(size=8) z in 0 .. ppm[Z_PPM] - 1 do
      			println(" N"+z+"     = "+ppm[N_PPM + z]);
      			foreach uint(size=8) n in 0 .. ppm[N_PPM + z] - 1 do
					println(" I"+z+""+n+"    = "+ppm[I_PPM  + z * PPM_N_MAX + n]+" : a revoir !!!");
				end
			end
    	end
	end
/******************************************************************************
 * procedure printTLM
 *****************************************************************************/
	procedure printTLM (uint(size=32) tlm[TLM_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
		   	println("==== TLM ====");
    		println(" Z    = "+tlm[Z_TLM]);
    		print(  " S    = "+tlm[S_TLM]+" : ");
    		if ((tlm[S_TLM]>>4)&0xf) = 0 then println("ST = 0; Ttlm parameter is 0 bits, SP = 0; Ptlm parameter 16 bits"); end
    		if ((tlm[S_TLM]>>4)&0xf) = 1 then println("ST = 1; Ttlm parameter 8 bits,    SP = 0; Ptlm parameter 16 bits"); end
    		if ((tlm[S_TLM]>>4)&0xf) = 2 then println("ST = 2; Ttlm parameter 16 bits,   SP = 0; Ptlm parameter 16 bits"); end
    		if ((tlm[S_TLM]>>4)&0xf) = 4 then println("ST = 0; Ttlm parameter is 0 bits, SP = 1; Ptlm parameter 32 bits"); end
    		if ((tlm[S_TLM]>>4)&0xf) = 5 then println("ST = 1; Ttlm parameter 8 bits,    SP = 1; Ptlm parameter 32 bits"); end	
    		if ((tlm[S_TLM]>>4)&0xf) = 6 then println("ST = 2; Ttlm parameter 16 bits,   SP = 1; Ptlm parameter 32 bits"); end
       		foreach uint(size=8) i in 0 .. cpt - 1 do
    			if ((tlm[S_TLM]>>4)&0x3) != 0 then
					println(" T"+i+"     = "+tlm[T_TLM + i]);
      			end
				println(" P"+i+"     = "+tlm[P_TLM + i]);
    		end
		end
	end
/******************************************************************************
 * procedure printPLM
 *****************************************************************************/
	procedure printPLM (uint(size=8) plm[PLM_STRUCT_SIZE])
	begin
		if DEBUG_HEADER = true then
			println("==== PLM ====");
    		println(" Z    = "+plm[Z_PLM]);
    		foreach uint(size=8) z in 0 .. plm[Z_PLM] - 1 do
      			println(" N"+z+"     = "+plm[N_PLM + z]);
      			foreach uint(size=8) n in 0 .. plm[N_PLM + z] - 1 do
					println(" I"+z+""+n+"    = "+plm[I_PLM  + z * PLM_N_MAX + n]+" : a revoir !!!");
				end
			end
    	end
	end
/******************************************************************************
 * procedure printCRG
 *****************************************************************************/
	procedure printCRG (uint(size=16) crg[CRG_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== CRG ====");
			foreach uint(size=8) i in 0 .. cpt - 1 do
      			println(" X"+i+"     = "+crg[X_CRG + i]);
      			println(" Y"+i+"     = "+crg[Y_CRG + i]);
    		end
		end
	end
/******************************************************************************
 * procedure printCOM
 *****************************************************************************/
	procedure printCOM (uint(size= 8) HeaderIdx,
						uint(size=16) com[2][COM_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== COM ====");
    		print(" R    = "+com[HeaderIdx][R_COM]+" : ");
    		if com[HeaderIdx][R_COM] = 0 then
      			println("General use (binary values)");
    		else
      			println("General use (IS 8859-15:1999 (Latin) values)");
    		end
			foreach uint(size=8) i in 0 .. cpt - 1 do
				println(" C"+i+"   = "+com[HeaderIdx][C_COM + i]);
    		end
		end
	end
/******************************************************************************
 * procedure printSOT
 *****************************************************************************/
	procedure printSOT (uint(size=32) sot[SOT_STRUCT_SIZE])
	begin
		if DEBUG_HEADER = true then
		    println("====================");
    		println("==== SOT Header ====");
    		println("====================");
			println("==== SOT ====");
    		println(" I    = "+sot[I_SOT]+" : Tile index");
    		println(" P    = "+sot[P_SOT]);
    		println(" TP   = "+sot[TP_SOT]);
    		println(" TN   = "+sot[TN_SOT]+" : Number of tile-parts of this tile in the codestream");
		end
	end
/******************************************************************************
 * procedure printPPT
 *****************************************************************************/
	procedure printPPT (uint(size= 8) ppt[PPT_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== PPT ====");
    		println(" Z    = "+ppt[Z_PPT]);
   			foreach uint(size=8) i in 0 .. cpt - 1 do
				println(" I"+i+"     = "+ppt[I_PPT + i]);
    		end
		end
	end
/******************************************************************************
 * procedure printPLT
 *****************************************************************************/
	procedure printPLT (uint(size= 8) plt[PLT_STRUCT_SIZE],
						uint(size= 8) cpt
	)
	begin
		if DEBUG_HEADER = true then
			println("==== PLT ====");
    		println(" Z    = "+plt[Z_PLT]);
   			foreach uint(size=8) i in 0 .. cpt - 1 do
				println(" I"+i+"     = "+plt[I_PLT + i]);
    		end
		end
	end
/******************************************************************************
 * procedure printSOD
 *****************************************************************************/
	procedure printSOD ()
	begin
		if DEBUG_HEADER = true then
			println("==== SOD ====");
			println("====================");
			println("==== SOT    End ====");
			println("====================");
		end
	end
/******************************************************************************
 * procedure printSOP
 *****************************************************************************/
	procedure printSOP (uint(size=32) value)
	begin
		if DEBUG_HEADER = true then
   			println("==== SOP ====");
   			println(" N    = "+value);
		end
	end
/******************************************************************************
 * procedure printEOP
 *****************************************************************************/
	procedure printEPH ()
	begin
		if DEBUG_HEADER = true then
    		println("==== EPH ====");
		end
	end
/******************************************************************************
 * procedure printEOC
 *****************************************************************************/
	procedure printEOC ()
	begin
		if DEBUG_HEADER = true then
    		println("==== EOC ====");
		end
	end
end