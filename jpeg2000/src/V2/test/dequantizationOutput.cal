package V2.test;

import  std.stdio.Source.*;
import  std.video.Display.*;
import  std.util.Compare.*;

import  V2.common.commonPackage.*;
/******************************************************************************
 * Actor description
 *****************************************************************************/
actor dequantizationOutput() int(size=DATA_SIZE+1) Rqb ==>
:
	bool isFirst := true;
	/**************************************************************************
	 * readByte Init
	 *************************************************************************/
	readByte.default : action Rqb:[Rqb_p] ==>
    guard
    	Rqb_p != COEFF_NEW_CB_MASK,
    	Rqb_p != COEFF_NEW_TILE_MASK,
    	Rqb_p != COEFF_NEW_PIC_MASK
	var
		uint(size= 8) tmp[4],
		 int(size=32) rqb_v = Rqb_p
	do
		if DEBUG_BITSTREAM then
			println(Rqb_p);
		end
		if COMPARE_ENABLE then
			tmp[0] := ((rqb_v>>24)	& 0x00ff);
			tmp[1] := ((rqb_v>>16)	& 0x00ff);
			tmp[2] := ((rqb_v>>8)	& 0x00ff);
			tmp[3] := ((rqb_v) 		& 0x00ff);
			compare_NBytes(tmp, 4);
		end
    end
	readByte.isNewCB : action Rqb:[Rqb_p] ==>
    guard
    	Rqb_p = COEFF_NEW_CB_MASK
    end
 	readByte.isNewTile : action Rqb:[Rqb_p] ==>
 	guard
 	 	Rqb_p = COEFF_NEW_TILE_MASK
 	do
 		fpsPrintNewPicDecoded();
	end
	readByte.isNewPic : action 	Rqb:[Rqb_p] ==>
 	guard
 	 	Rqb_p = COEFF_NEW_PIC_MASK
 	do
		if source_isMaxLoopsReached() then
			source_exit(0);
		end
 		if isFirst then
 			fpsPrintInit();
 			if COMPARE_ENABLE then
 				compare_init();
 			end
 			isFirst := false;
 		end
	end
end