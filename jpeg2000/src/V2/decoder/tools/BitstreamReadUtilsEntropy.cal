/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package V2.decoder.tools;
import  V2.common.commonPackage.*;

unit BitstreamReadUtilsEntropy :
	/**************************************************************************
	 * GLOBAL BISTREAM READER
 	 *************************************************************************/
 	uint(size= 8) LOG2_BR[64]      =  [ 0,0,1,1,2,2,2,2,
    									3,3,3,3,3,3,3,3,
    									4,4,4,4,4,4,4,4,
    									4,4,4,4,4,4,4,4,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5];
	uint(size= 8)         FIFO_DEPTH       =  16;
	uint(size= 8)         FIFO_SIZE        =  16;
	uint(size=FIFO_DEPTH) FIFO_CPT_BITS    =  FIFO_SIZE;
	uint(size=FIFO_DEPTH) FIFO_IDX_R       =  FIFO_SIZE+1;
	uint(size=FIFO_DEPTH) FIFO_IDX_W       =  FIFO_SIZE+2;
	uint(size=FIFO_DEPTH) FIFO_SIZE_ALL    =  FIFO_SIZE+3;
	//
	uint(size=FIFO_DEPTH) FIFO_IDX_MASK    =  FIFO_SIZE - 1;
	uint(size=FIFO_DEPTH) FIFO_FULL_LEVEL  =  (FIFO_SIZE-1) * FIFO_DEPTH;
	
	/**************************************************************************
	 * function isFifoFull
	 *************************************************************************/
  	function isFifoFull (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool :
  		fifo[FIFO_CPT_BITS] >= FIFO_FULL_LEVEL
  	end
	/**************************************************************************
	 * procedure setData
	 *************************************************************************/
   	procedure setData (	uint(size=FIFO_DEPTH) data,
 						uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	var
		uint(size=FIFO_DEPTH) idx =  fifo[FIFO_IDX_W]
  	begin
		fifo[idx]            := data;
		fifo[FIFO_CPT_BITS]  := fifo[FIFO_CPT_BITS] + FIFO_DEPTH;
		fifo[FIFO_IDX_W]     := (idx+1) & FIFO_IDX_MASK;
  	end
	/**************************************************************************
	 * procedure getData
	 *************************************************************************/
   	procedure getData (	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
   						uint(size=FIFO_DEPTH) data[1])
  	var
		uint(size=FIFO_DEPTH) idx = fifo[FIFO_IDX_R]
  	begin
		data[0]              := fifo[idx];
		fifo[FIFO_CPT_BITS]  := fifo[FIFO_CPT_BITS] - FIFO_DEPTH;
		fifo[FIFO_IDX_R]     := (idx+1) & FIFO_IDX_MASK;
  	end
	/**************************************************************************
	 * procedure flushData
	 *************************************************************************/
   	procedure flushData (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	var
		uint(size=FIFO_DEPTH) idx = fifo[FIFO_IDX_R]
  	begin
		fifo[FIFO_CPT_BITS]  := fifo[FIFO_CPT_BITS] - FIFO_DEPTH;
		fifo[FIFO_IDX_R]     := (idx+1) & FIFO_IDX_MASK;
  	end
	/**************************************************************************
	 * function isNewPic
	 *************************************************************************/
  	function isNewPic (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool
  	var
		uint(size=FIFO_DEPTH) idx = fifo[FIFO_IDX_R]
	:
  		fifo[idx] = CD_NEW_PIC_MASK
  	end
	/**************************************************************************
	 * function isNewTile
	 *************************************************************************/
  	function isNewTile (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool 
  	var
		uint(size=FIFO_DEPTH) idx = fifo[FIFO_IDX_R]
	:
  		fifo[idx] = CD_NEW_TILE_MASK
  	end
	/**************************************************************************
	 * function isNewCB
	 *************************************************************************/
  	function isNewCB (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool 
  	var
		uint(size=FIFO_DEPTH) idx = fifo[FIFO_IDX_R]
	:
  		fifo[idx] = CD_NEW_CB_MASK
  	end
end