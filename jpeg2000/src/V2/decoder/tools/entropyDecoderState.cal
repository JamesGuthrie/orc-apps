package V2.decoder.tools;
import  V2.decoder.packages.decoderPackage.*;
/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit entropyDecoderState :	
/******************************************************************************
 * initState
 *****************************************************************************/
	procedure initState (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2])
	begin
		state := [[0: for int c in 0 .. CB_WIDTH_MAX + 1] : for int l in 0 .. CB_HEIGHT_MAX + 1];
	end
/******************************************************************************
 * getNextState
 *****************************************************************************/
	function getNextState (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						   uint(size= 8) idxLine,
						   uint(size= 8) idxColumn,
						   uint(size= 8) idxCoef,
						   uint(size= 8) stripeHeight) --> uint(size=16) :
		if idxCoef = stripeHeight then
			state[idxLine-stripeHeight+1][idxColumn+2]
		else
			state[idxLine+2][idxColumn+1]
		end
	end
/******************************************************************************
 * setStateUnvisited
 *****************************************************************************/
	procedure setStateUnvisited (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
								 uint(size= 8) idxLine,
								 uint(size= 8) idxColumn)
	var
		uint(size=16) tmp = state[idxLine+1][idxColumn+1]
	begin
		state[idxLine+1][idxColumn+1] := tmp & (~STATE_VISITED);
	end
/******************************************************************************
 * setStateMR
 *****************************************************************************/
	procedure setStateMR (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  uint(size= 8) idxLine,
						  uint(size= 8) idxColumn)
	var
		uint(size=16) tmp = state[idxLine+1][idxColumn+1]
	begin
		state[idxLine+1][idxColumn+1] := tmp | STATE_PREV_MR;
	end
/******************************************************************************
 * setStateSIG
 *****************************************************************************/
	procedure setStateSIG (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						   uint(size= 8) idxLine,
						   uint(size= 8) idxColumn,
						   uint(size= 8) sig)
	var
		uint(size=16) stateD0 = state[idxLine  ][idxColumn  ],
		uint(size=16) stateV0 = state[idxLine  ][idxColumn+1],
		uint(size=16) stateD1 = state[idxLine  ][idxColumn+2],
		uint(size=16) stateH0 = state[idxLine+1][idxColumn  ],
		uint(size=16) stateX := state[idxLine+1][idxColumn+1],
		uint(size=16) stateH1 = state[idxLine+1][idxColumn+2],
		uint(size=16) stateD2 = state[idxLine+2][idxColumn  ],
		uint(size=16) stateV1 = state[idxLine+2][idxColumn+1],
		uint(size=16) stateD3 = state[idxLine+2][idxColumn+2]
	begin
		if sig != 0 then
			state[idxLine  ][idxColumn  ] := stateD0 | STATE_NZ_CTXT | STATE_D3;
			state[idxLine  ][idxColumn+1] := stateV0 | STATE_NZ_CTXT | STATE_V1;
			state[idxLine  ][idxColumn+2] := stateD1 | STATE_NZ_CTXT | STATE_D2;
			state[idxLine+1][idxColumn  ] := stateH0 | STATE_NZ_CTXT | STATE_H1;
			stateX                        := stateX  | STATE_SIG;
			state[idxLine+1][idxColumn+2] := stateH1 | STATE_NZ_CTXT | STATE_H0;
			state[idxLine+2][idxColumn  ] := stateD2 | STATE_NZ_CTXT | STATE_D1;
			state[idxLine+2][idxColumn+1] := stateV1 | STATE_NZ_CTXT | STATE_V0;
			state[idxLine+2][idxColumn+2] := stateD3 | STATE_NZ_CTXT | STATE_D0;
		end
		state[idxLine+1][idxColumn+1] := stateX  | STATE_VISITED;
	end
/******************************************************************************
 * setStateSIGN
 *****************************************************************************/
	procedure setStateSIGN (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						    uint(size= 8) idxLine,
						    uint(size= 8) idxColumn,
						    uint(size= 8) sign )
	var
		uint(size=16) stateV0 = state[idxLine  ][idxColumn+1],
		uint(size=16) stateH0 = state[idxLine+1][idxColumn  ],
		uint(size=16) stateH1 = state[idxLine+1][idxColumn+2],
		uint(size=16) stateV1 = state[idxLine+2][idxColumn+1]		
	begin
		if sign != 0 then 
			state[idxLine  ][idxColumn+1] := stateV0 | STATE_V1_SIGN;
			state[idxLine+1][idxColumn  ] := stateH0 | STATE_H1_SIGN;
			state[idxLine+1][idxColumn+2] := stateH1 | STATE_H0_SIGN;
			state[idxLine+2][idxColumn+1] := stateV1 | STATE_V0_SIGN;
		end
	end
/******************************************************************************
 * isStateSig
 *****************************************************************************/
	function isStateSig (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  uint(size= 8) idxLine,
						  uint(size= 8) idxColumn) --> bool :
		if (state[idxLine+1][idxColumn+1]&STATE_SIG) != 0 then 
			true
		else
			false
		end
	end	
/******************************************************************************
 * isStateNZctx
 *****************************************************************************/
	function isStateNZctx (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						   uint(size= 8) idxLine,
						   uint(size= 8) idxColumn) --> bool :
		if (state[idxLine+1][idxColumn+1]&STATE_NZ_CTXT) != 0 then 
			true
		else
			false
		end
	end	
/******************************************************************************
 * isStateVisited
 *****************************************************************************/
	function isStateVisited (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						     uint(size= 8) idxLine,
						     uint(size= 8) idxColumn) --> bool :
		if (state[idxLine+1][idxColumn+1]&STATE_VISITED) != 0 then 
			true
		else
			false
		end
	end	
/******************************************************************************
 * isStateSigVisited
 *****************************************************************************/
	function isStateSigVisited (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						        uint(size= 8) idxLine,
						        uint(size= 8) idxColumn) --> bool :
		if (state[idxLine+1][idxColumn+1]&(STATE_SIG|STATE_VISITED)) != 0 then 
			true
		else
			false
		end
	end	
/******************************************************************************
 * isNextStateSigVisited
 *****************************************************************************/
	function isNextStateSigVisited (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						            uint(size= 8) idxLine,
						            uint(size= 8) idxColumn,
						            uint(size= 8) idxCoef,
						   			uint(size= 8) stripeHeight) --> bool
	var
		uint(size=16) state_v := 	if ( idxCoef = stripeHeight ) then
      									state[idxLine+1-stripeHeight][idxColumn+1]
    								else
      									state[idxLine+2][idxColumn+1]
    								end
	:
		if (state_v&(STATE_SIG|STATE_VISITED)) != 0 then 
			true
		else
			false
		end
	end	
/******************************************************************************
 * ifFourStateZero
 *****************************************************************************/
	procedure ifFourStateZero (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						      uint(size= 8) idxLine,
						      uint(size= 8) idxColumn,
						      bool res[1])
	begin
		res[0] := true;
		foreach int i in 1 .. 4 do
			if state[idxLine+i][idxColumn+1] !=0 then
				res[0] := false;
			end
		end
	end	
/******************************************************************************
 * ifFourStateNoSig
 *****************************************************************************/
	procedure ifFourStateNoSig (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						        uint(size= 8) idxLine,
						        uint(size= 8) idxColumn,
						        uint(size= 8) stripeHeight,
						        bool          res[1])
	begin
		res[0] := true;
		foreach int i in 1 .. stripeHeight do
			if (state[idxLine+i][idxColumn+1]&STATE_SIG) !=0 then
				res[0] := false;
			end
		end
	end	
/******************************************************************************
 * getNeighborFlag
 *****************************************************************************/
	procedure getNeighborFlag (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						       uint(size= 8) idxLine,
						       uint(size= 8) idxColumn,
						       uint(size= 4) res[4])
	var
		uint(size=16) state_v := state[idxLine+1][idxColumn+1]
	begin
		res[0] := (state_v >> STATE_H_SHIFT) & STATE_H_MASK;
		res[1] := (state_v >> STATE_V_SHIFT) & STATE_V_MASK;
    	res[2] := (state_v >> STATE_D_SHIFT) & STATE_D_MASK;
    	res[3] := 0;
	end	
/******************************************************************************
 * getSignNeighbor
 *****************************************************************************/
	procedure getSignNeighbor (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						       uint(size= 8) idxLine,
						       uint(size= 8) idxColumn,
						       uint(size=16) res[4])
	var
		uint(size=16) state_v := state[idxLine+1][idxColumn+1]
	begin
		res[0] := state_v & (STATE_H0_SIGN | STATE_H0);
    	res[1] := state_v & (STATE_H1_SIGN | STATE_H1);
    	res[2] := state_v & (STATE_V0_SIGN | STATE_V0);
    	res[3] := state_v & (STATE_V1_SIGN | STATE_V1);
	end	
/******************************************************************************
 * getMRflag
 *****************************************************************************/
	function getMRflag (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						uint(size= 8) idxLine,
						uint(size= 8) idxColumn) --> uint(size=2)
	var
		uint(size=16) state_v := state[idxLine+1][idxColumn+1]
	:
		if (state_v & STATE_PREV_MR) != 0 then 
			2
		elsif (state_v & MR_MASK) != 0 then 
			1
		else
			0
		end
	end
end