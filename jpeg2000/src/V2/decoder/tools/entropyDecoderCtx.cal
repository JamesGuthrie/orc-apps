package V2.decoder.tools;
import  V2.decoder.packages.decoderPackage.*;
import  V2.decoder.tools.entropyDecoderState.*;
/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit entropyDecoderCtx :
/******************************************************************************
 * sumOneBit
 *****************************************************************************/
	procedure sumOneBit ( uint(size=32) bin, uint(size= 8) ret[1] )
	var
		uint(size=32) tmp := bin
	begin
		ret[0] := 0;
		while (tmp!=0)
		do
			ret[0] := ret[0] + (tmp & 0x1);
			tmp    := tmp >> 1;
		end
	end	
/******************************************************************************
 * getTableD1 
 *****************************************************************************/
	procedure getTableD1 (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  uint(size= 8) idxLine,
						  uint(size= 8) idxColumn,
						  uint(size= 8) subband,
						  uint(size= 8) res[1])
	var
		uint(size= 4) Neighbor[4],
		uint(size= 8) tmp[1],
		uint(size= 8) h,
		uint(size= 8) v,
		uint(size= 8) d
	begin
		getNeighborFlag(state, idxLine, idxColumn, Neighbor);
		sumOneBit(Neighbor[0], tmp); h := tmp[0];
		sumOneBit(Neighbor[1], tmp); v := tmp[0];
		sumOneBit(Neighbor[2], tmp); d := tmp[0];
		res[0] := tableD1ctxLL_LH[h][v][d];
		if subband = 1 then
			res[0] := tableD1ctxHL[h][v][d];
		end
		if subband = 3 then
			res[0] := tableD1ctxHH[h+v][d];
		end			
	end
/******************************************************************************
 * getTableD2_V 
 *****************************************************************************/
	procedure getTableD2_V (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  	uint(size= 8) idxLine,
						  	uint(size= 8) idxColumn,
						  	uint(size= 8) res[1])
	var
		uint(size=16) Neighbor[4],
		uint(size= 8) tmp[1],
		uint(size=16) tmp0,
		uint(size=16) tmp1
	begin
		getSignNeighbor(state, idxLine, idxColumn, Neighbor);
		sumOneBit(Neighbor[2], tmp); tmp0 := tmp[0];
		sumOneBit(Neighbor[3], tmp); tmp1 := tmp[0];
		res[0] := tableD2[tmp0][tmp1];			
	end
/******************************************************************************
 * getTableD2_H
 *****************************************************************************/
	procedure getTableD2_H (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  	uint(size= 8) idxLine,
						  	uint(size= 8) idxColumn,
						  	uint(size= 8) res[1])
	var
		uint(size=16) Neighbor[4],
		uint(size= 8) tmp[1],
		uint(size=16) tmp0,
		uint(size=16) tmp1
	begin
		getSignNeighbor(state, idxLine, idxColumn, Neighbor);
		sumOneBit(Neighbor[0], tmp); tmp0 := tmp[0];
		sumOneBit(Neighbor[1], tmp); tmp1 := tmp[0];
		res[0] := tableD2[tmp0][tmp1];			
	end
/******************************************************************************
 * getTableD3
 *****************************************************************************/
	procedure getTableD3 (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						  uint(size= 8) idxLine,
						  uint(size= 8) idxColumn,
						  uint(size= 8) res[1])
	var
		uint(size= 8) tmp[1],
		uint(size= 8) h,
		uint(size= 8) v 
	begin
		getTableD2_H(state, idxLine, idxColumn, tmp); h := tmp[0];
		getTableD2_V(state, idxLine, idxColumn, tmp); v := tmp[0];
		res[0] := tableD3ctx[h][v]; 			
	end
/******************************************************************************
 * getTableD4
 *****************************************************************************/
	function getTableD4 (uint(size=16) state[CB_HEIGHT_MAX+2][CB_WIDTH_MAX+2],
						 uint(size= 8) idxLine,
						 uint(size= 8) idxColumn) --> uint(size=8)
	var
		uint(size=2) MRflag := getMRflag(state, idxLine, idxColumn)
	:
		if MRflag = 2 then
			MR2_CTX
		elsif MRflag = 1 then
			MR1_CTX
		else
			MR0_CTX
		end
	end
end