package V2.decoder.tools;
import  V2.common.commonPackage.*;
import  V2.decoder.packages.decoderPackage.*;
/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit entropyDecoderData :
/******************************************************************************
 * initData
 *****************************************************************************/
	procedure initData (uint(size=DATA_SIZE) data[CB_HEIGHT_MAX][CB_WIDTH_MAX])
	begin
		data        := [[0: for int c in 0 .. CB_WIDTH_MAX - 1] : for int l in 0 .. CB_HEIGHT_MAX - 1];
	end
/******************************************************************************
 * setDataSIGN
 *****************************************************************************/
	procedure setDataSIGN (uint(size=DATA_SIZE) data[CB_HEIGHT_MAX][CB_WIDTH_MAX],
						   uint(size= 8) idxLine,
						   uint(size= 8) idxColumn,
						   uint(size= 8) bitPlane,
						   uint(size= 8) sign )
	begin
		data[idxLine][idxColumn] := (sign<<COEFF_DATA_SIZE) | ((3 << bitPlane)>>1);
	end
/******************************************************************************
 * setDataMR
 *****************************************************************************/
	procedure setDataMR (uint(size=DATA_SIZE) data[CB_HEIGHT_MAX][CB_WIDTH_MAX],
						 uint(size= 8) idxLine,
						 uint(size= 8) idxColumn,
						 uint(size= 8) bitPlane,
						 uint(size= 8) mr )
	var
		uint(size=DATA_SIZE) tmp = data[idxLine][idxColumn],
		uint(size=DATA_SIZE) msk = (-1 << (bitPlane+1)) & (COEFF_NEW_TILE_MASK-1)
	begin
		data[idxLine][idxColumn] := (tmp & msk) | ( (mr<<bitPlane) | ((1<<bitPlane)>>1));
	end
end