/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package V2.common;

unit commonPackage :
/**************************************************************************
 * DEBUG constant
 **************************************************************************/
	bool COMPARE_ENABLE  = false;
	bool DEBUG_BITSTREAM = false;
	bool DEBUG_HEADER    = false;
	bool DEBUG_TRACE     = false;
	bool DEBUG_ARRAY     = true;
/**************************************************************************
 * option constant
 *************************************************************************/
	uint(size=8) TermCodingPass = 0x04;
  	uint(size=8) PredTerm       = 0x10;
  	uint(size=8) SegSymbol      = 0x20;
/**************************************************************************
 * design constant
 *************************************************************************/
  	uint(size= 8) NB_COMPONENT_MAX     =  4;
	uint(size= 8) RESOLUTION_LEVEL_MAX =  9;
	uint(size= 8) CODEBLOCK_SIZE_MAX   = 64;
	/* GLOBAL codestreamHeader constant */
	uint(size= 8) SP_PP_OFFSET  = 5;
 	uint(size= 8) SIZ_MAX       = NB_COMPONENT_MAX;
	uint(size= 8) COD_MAX       = SP_PP_OFFSET+RESOLUTION_LEVEL_MAX;
	uint(size= 8) COC_MAX       = SP_PP_OFFSET+RESOLUTION_LEVEL_MAX;
	uint(size= 8) QCD_MAX       = 3*RESOLUTION_LEVEL_MAX+1;
	uint(size= 8) QCC_MAX       = 3*RESOLUTION_LEVEL_MAX+1;
 	uint(size= 8) POC_MAX       = 10;
	uint(size= 8) PPM_Z_MAX     = 10;
	uint(size= 8) PPM_N_MAX     = 10;
	uint(size= 8) TLM_MAX       = 10;
	uint(size= 8) PLM_Z_MAX     = 10;
	uint(size= 8) PLM_N_MAX     = 10;
	uint(size= 8) CRG_MAX       = 10;
	uint(size= 8) COM_MAX       = 100;
	uint(size= 8) PPT_MAX       = 10;
	uint(size= 8) PLT_MAX       = 10;
/**************************************************************************
 * parser DataOut size constant
 *************************************************************************/
  	uint(size= 8) CODESTREAM_DATA_SIZE =  8;
  	uint(size= 8) CODESTREAM_SIZE      =  CODESTREAM_DATA_SIZE+4;
  	uint(size= CODESTREAM_SIZE) CD_NEW_PIC_MASK   = 1<<(CODESTREAM_DATA_SIZE+3);
  	uint(size= CODESTREAM_SIZE) CD_NEW_TILE_MASK  = 1<<(CODESTREAM_DATA_SIZE+2);
  	uint(size= CODESTREAM_SIZE) CD_END_TILE_MASK    = 1<<(CODESTREAM_DATA_SIZE+1);
  	uint(size= CODESTREAM_SIZE) CD_NEW_CB_MASK    = 1<<CODESTREAM_DATA_SIZE;
  	uint(size= CODESTREAM_SIZE) CD_VALUE_MASK     = COEFF_NEW_CB_MASK - 1;
/**************************************************************************
 * entropy DataOut size constant
 *************************************************************************/
  	uint(size= 8) COEFF_DATA_SIZE =  16;
  	uint(size= 8) DATA_SIZE       =  COEFF_DATA_SIZE+3;
  	uint(size= DATA_SIZE) COEFF_SIG_MASK       = 1<<(COEFF_DATA_SIZE+3);
  	uint(size= DATA_SIZE) COEFF_NEW_PIC_MASK   = 1<<(COEFF_DATA_SIZE+2);
  	uint(size= DATA_SIZE) COEFF_NEW_TILE_MASK  = 1<<(COEFF_DATA_SIZE+1);
  	uint(size= DATA_SIZE) COEFF_NEW_CB_MASK    = 1<<COEFF_DATA_SIZE;
  	uint(size= DATA_SIZE) COEFF_NEW_FLAG_MASK  = COEFF_NEW_PIC_MASK + COEFF_NEW_TILE_MASK + COEFF_NEW_CB_MASK;
  	uint(size= DATA_SIZE) COEFF_VALUE_MASK     = COEFF_NEW_CB_MASK - 1;
  	uint(size= DATA_SIZE) COEFF_SIGN_BIT_MASK  = 1<<(COEFF_DATA_SIZE-1);
  	uint(size= DATA_SIZE) COEFF_ABS_VALUE_MASK = COEFF_SIGN_BIT_MASK - 1;
/**************************************************************************
 * parser DataOut size constant
 *************************************************************************/
  	uint(size= 8) PIXEL_DATA_SIZE =  8;
  	uint(size= 8) PIXEL_SIZE      =  PIXEL_DATA_SIZE+2;
  	uint(size= PIXEL_SIZE) PIXEL_NEW_PIC_MASK   = 1<<(PIXEL_DATA_SIZE+1);
  	uint(size= PIXEL_SIZE) PIXEL_NEW_TILE_MASK  = 1<<PIXEL_DATA_SIZE;
  	 
end