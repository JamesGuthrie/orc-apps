/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package V2.common;

unit BitstreamReadUtils :
	/**************************************************************************
	 * GLOBAL BISTREAM READER
 	 *************************************************************************/
 	uint(size= 8) LOG2_BR[64]      =  [ 0,0,1,1,2,2,2,2,
    									3,3,3,3,3,3,3,3,
    									4,4,4,4,4,4,4,4,
    									4,4,4,4,4,4,4,4,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5,
    									5,5,5,5,5,5,5,5];
	uint(size= 8)         FIFO_DEPTH       =  16;
	uint(size= 8)         FIFO_SIZE        =  64;
	uint(size=FIFO_DEPTH) FIFO_CPT_BITS    =  FIFO_SIZE;
	uint(size=FIFO_DEPTH) FIFO_IDX_R       =  FIFO_SIZE+1;
	uint(size=FIFO_DEPTH) FIFO_IDX_W       =  FIFO_SIZE+2;
	uint(size=FIFO_DEPTH) FIFO_SIZE_ALL    =  FIFO_SIZE+3;
	//
	uint(size=FIFO_DEPTH) FIFO_NB_BYTES    =  (FIFO_DEPTH>>3)-1;
	uint(size=FIFO_DEPTH) FIFO_IDX_SHIFT   =  LOG2_BR[FIFO_DEPTH>>3];
	uint(size=FIFO_DEPTH) FIFO_IDX_MASK    =  (FIFO_SIZE * (FIFO_DEPTH>>3)) - 1;
	uint(size=FIFO_DEPTH) FIFO_FULL_LEVEL  =  (FIFO_SIZE-1) * FIFO_DEPTH;
	
	/**************************************************************************
	 * function isFifoFull
	 *************************************************************************/
  	function isFifoFull (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool :
  		fifo[FIFO_CPT_BITS] >= FIFO_FULL_LEVEL
  	end
	/**************************************************************************
	 * function isByteAlign
	 *************************************************************************/
  	function isByteAlign (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> bool :
  		(fifo[FIFO_CPT_BITS] & 7) = 0
  	end
   	/**************************************************************************
	 * procedure byteAlign
	 *************************************************************************/
 	procedure byteAlign (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
   	begin
// 		println("byteAlign");
   		flushBits(fifo[FIFO_CPT_BITS] & 7, fifo);
  	end
	/**************************************************************************
	 * procedure setData
	 *************************************************************************/
   	procedure setData (	uint(size=FIFO_DEPTH) data,
 						uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	var
		uint(size=FIFO_DEPTH) idx =  fifo[FIFO_IDX_W]
  	begin
		fifo[idx]            := data;
		fifo[FIFO_CPT_BITS]  := fifo[FIFO_CPT_BITS] + FIFO_DEPTH;
		fifo[FIFO_IDX_W]     := (idx+(FIFO_DEPTH>>3))  & FIFO_IDX_MASK;
  	end
	/**************************************************************************
	 * procedure pushByte
	 *************************************************************************/
   	procedure pushByte (uint(size= 8) byte,
 						uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	var
		uint(size=FIFO_DEPTH) idx    :=  fifo[FIFO_IDX_W],
		uint(size=FIFO_DEPTH) offset  =  (FIFO_NB_BYTES - ( idx & FIFO_NB_BYTES )) << 3,
		uint(size=FIFO_DEPTH) mask    =  (~(0xFF << offset)) & ((1 << FIFO_DEPTH) - 1)
  	begin
  		idx                 := idx >> FIFO_IDX_SHIFT;
		fifo[idx]           := (fifo[idx] & mask) | (byte<<offset);
		fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] + 8;
		fifo[FIFO_IDX_W]    := (fifo[FIFO_IDX_W]+1) & FIFO_IDX_MASK;
  	end
	/**************************************************************************
	 * procedure flushBits
	 *************************************************************************/
   	procedure flushBits (	uint(size= 8) nb,
 					   		uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
    var
  		uint(size=8)          nb_v    := nb,
  		uint(size=FIFO_DEPTH) cptBits := fifo[FIFO_CPT_BITS],
  		uint(size=FIFO_DEPTH) idx     := fifo[FIFO_IDX_R],
  		uint(size=FIFO_DEPTH) cpt
  	begin
  		if nb > cptBits then println(" Error flushBits : out of range !!! nb "+ nb + " cptBits " + cptBits); end
	    while nb_v != 0 do
	    	cpt := cptBits & 7;
	    	if cpt = 0 then cpt := 8; end
	    	if nb_v >= cpt then
	    		cptBits := cptBits - cpt;
	    		nb_v    := nb_v - cpt;
	    		idx     := (idx + 1) & FIFO_IDX_MASK; 
	    	else
	    		cpt     := cpt - nb_v;
	    		cptBits := cptBits - nb_v;	    		
	    		nb_v    := 0;
	    	end
	  	end
	  	fifo[FIFO_IDX_R]    := idx;
	  	fifo[FIFO_CPT_BITS] := cptBits;	 
//	  	println("flushBits("+nb+") \t\t : idxR = "+idx+" cptBits = "+cptBits); 
	end
  	/**************************************************************************
	 * procedure showBits
	 *************************************************************************/
  	procedure showBits (uint(size= 8) nb,
 						uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 						uint(size=32) res[1])
  	var
  		uint(size=8)          nb_v    := nb,
  		uint(size=FIFO_DEPTH) cptBits := fifo[FIFO_CPT_BITS],
  		uint(size=FIFO_DEPTH) idx     := fifo[FIFO_IDX_R],
		uint(size=FIFO_DEPTH) offset,
		uint(size=FIFO_DEPTH) data,
  		uint(size=FIFO_DEPTH) cpt
  	begin
  		if nb > cptBits then println(" Error showBits : out of range !!! nb "+ nb + " cptBits " + cptBits); end
  		res[0] := 0;
	    while nb_v != 0 do
	    	cpt     := cptBits & 7;
	    	if cpt = 0 then cpt := 8; end
	    	offset  := (FIFO_NB_BYTES - ( idx & FIFO_NB_BYTES )) << 3;
	    	data    := fifo[idx>>FIFO_IDX_SHIFT] >> offset;
	    	if nb_v >= cpt then
	    		res[0]  := (res[0]<<cpt) + (data & ((1<<cpt)-1) );
	    		cptBits := cptBits - cpt;
	    		nb_v    := nb_v - cpt;
	    		idx     := (idx + 1) & FIFO_IDX_MASK; 
	    	else
	    		cpt     := cpt - nb_v;
	    		res[0]  := (res[0]<<nb_v) + ( (data>>cpt) & ((1<<nb_v)-1) );
	    		cptBits := cptBits - nb_v;	    		
	    		nb_v    := 0;
	    	end
	  	end
//	  	println(" showBits("+nb+") = "+res[0]+"\t : idxR = "+idx+" cptBits = "+cptBits); 
  	end
 	/**************************************************************************
	 * procedure getBits
	 *************************************************************************/
 	procedure getBitsPatch (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
	var
  		uint(size=FIFO_DEPTH) idx_v,
		uint(size=FIFO_DEPTH) offset,
		uint(size=FIFO_DEPTH) data
	begin
    	if (fifo[FIFO_CPT_BITS] & 7) = 0 then
    		idx_v   := (fifo[FIFO_IDX_R]-1) & FIFO_IDX_MASK;
      		offset  := (FIFO_NB_BYTES - ( idx_v & FIFO_NB_BYTES )) << 3;
	    	data    := (fifo[idx_v>>FIFO_IDX_SHIFT] >> offset) & 255;
	    	if data = 255 then
//				println(" Warning getBitsPatch for jpeg2000!!! \t : idxR = "+fifo[FIFO_IDX_R]+" idxW = "+fifo[FIFO_IDX_W]+" cptBits = "+fifo[FIFO_CPT_BITS]);
				fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] - 1;
      		end
    	end
  	end
   	procedure getBits (uint(size= 8) nb,
 					   uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					   uint(size=32) res[1])
    var
  		uint(size=8)          nb_v    := nb,
 		uint(size=FIFO_DEPTH) offset,
		uint(size=FIFO_DEPTH) data,
  		uint(size=FIFO_DEPTH) cpt
  	begin
  		if nb > fifo[FIFO_CPT_BITS] then println(" Error getBits : out of range !!! nb "+ nb + " cptBits " + fifo[FIFO_CPT_BITS]); end
  		res[0] := 0;
	    while nb_v != 0 do  		
	  		getBitsPatch(fifo);
	    	cpt     := fifo[FIFO_CPT_BITS] & 7;
	    	if cpt = 0 then cpt := 8; end
	    	offset  := (FIFO_NB_BYTES - ( fifo[FIFO_IDX_R] & FIFO_NB_BYTES )) << 3;
	    	data    := fifo[fifo[FIFO_IDX_R]>>FIFO_IDX_SHIFT] >> offset;
	    	if nb_v >= cpt then
	    		res[0]  := (res[0]<<cpt) + (data & ((1<<cpt)-1) );
	    		nb_v    := nb_v - cpt;
	    		fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] - cpt;
	    		fifo[FIFO_IDX_R]    := (fifo[FIFO_IDX_R] + 1) & FIFO_IDX_MASK; 
	    	else
	    		cpt     := cpt - nb_v;
	    		res[0]  := (res[0]<<nb_v) + ( (data>>cpt) & ((1<<nb_v)-1) );
	    		fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] - nb_v;	    		
	    		nb_v    := 0;
	    	end
	  	end
//	  	println("  getBits("+nb+") = "+res[0]+"\t : idxR = "+fifo[FIFO_IDX_R]+" cptBits = "+fifo[FIFO_CPT_BITS]); 	  	   
	end
 	/**************************************************************************
	 * procedure getByteIdxMinusOne
	 *************************************************************************/
  	function getByteIdxMinusOne ( 	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL]) --> uint(size=8)
  	var
		uint(size=FIFO_DEPTH) idx    = fifo[FIFO_IDX_R]-1,
		uint(size=FIFO_DEPTH) offset = (FIFO_NB_BYTES - ( idx & FIFO_NB_BYTES )) << 3,
		uint(size=FIFO_DEPTH) data   = fifo[idx>>FIFO_IDX_SHIFT] >> offset
  	:
    	data & 255
  	end
	/**************************************************************************
	 * procedure flushBytes
	 *************************************************************************/
   	procedure flushBytes (uint(size= 8) nb,
 						  uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL])
  	begin
  		flushBits(nb<<3, fifo);
  	end
  	/**************************************************************************
	 * procedure showBytes
	 *************************************************************************/
  	procedure showBytes (uint(size= 8) nb,
 						 uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 						 uint(size=32) res[1])
  	begin
  		showBits(nb<<3, fifo, res);
  	end
	/**************************************************************************
	 * procedure getBytes
	 *************************************************************************/
   	procedure getBytes (uint(size= 8) nb,
 					    uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					    uint(size=32) res[1])
  	begin
  		showBytes(nb, fifo, res);
  		flushBytes(nb, fifo);
	end
   	/**************************************************************************
	 * procedure getNbOneBit
	 *************************************************************************/
  	procedure getNbOneBit (uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
 					       uint(size=32) res[1])
 	var
 		uint(size= 8) tmp := 0
   	begin
		getBits(1, fifo, res);
   		while res[0] = 1 do
   			tmp := tmp + 1;
   			getBits(1, fifo, res);
   		end
   		res[0] := tmp;
  	end
end