/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_IntraPred_CHROMA_8x8_AVSJZ.cal
// Function: This module implements intra prediction for 8x8 chroma block of AVS JiZhun Profile.

package avs;
import avs.Constants.*;

actor Algo_IntraPred_CHROMA_8x8_AVSJZ (
)
  int(size=PIX_SZ) RecData, 
  int(size=BTYPE_SZ) BTYPE,

  int(size=PIX_SZ) Intra_TOP_LEFT_Data,
  int(size=1) AVAIL,              // up, left, up_left, up_right availability List

  int(size=3) IntraChromaPredMode

  ==> int(size=PIX_SZ) IntraPred_UV:
    
  uint(size=1) left_avail;
  uint(size=1) up_avail;
  uint(size=1) up_left_avail;
  
  List(type:int(size=PIX_SZ),size=9) c_left := [ 0 : for int i in 1 .. 9 ];//initList(0,8);
  List(type:int(size=PIX_SZ),size=9) c_up := [ 0 : for int i in 1 .. 9 ];//initList(0,8);
  List(type:int(size=PIX_SZ),size=1) c_up_left := [ 0 ];//initList(0,1);

  List(type:int(size=PIX_SZ),size=9) f_c_left := [ 0 : for int i in 1 .. 9 ];//initList(0,8);
  List(type:int(size=PIX_SZ),size=9) f_c_up := [ 0 : for int i in 1 .. 9 ];//initList(0,8);

  int(size=PIX_SZ) up_blocks[8*8*MAXW_IN_MB];
  int(size=PIX_SZ) c_up_left_collocated[MAXW_IN_MB];

  int(size=16) width;
  int(size=16) cnt;
  
  function clip(int x)  --> int:
    if x > 255 then 255 else if x < 0 then 0 else x end end
  end
  
  List(type:int(size=PIX_SZ),size=19) PredPixBuffer_pass := [ 0 : for int i in 1 .. 19 ];//initList(0,17);
  
  get_new_vop: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) != 0
  do
  	cnt:=0;
  end

  skip_wh: action BTYPE:[w,h] ==>
  do
  	width:=w;
  end

  get_mb_type: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) = 0,
    (cmd & INTRA) !=0
  end

  skip_mb_type: action BTYPE:[cmd] ==>
  end

  read_avail: action AVAIL:[avail] repeat 3 ==>
  do
    left_avail    := avail[0];
    up_avail      := avail[1];
    up_left_avail := avail[2];
  end
  
  read_chroma_case_0: action ==> 
  guard
      left_avail=0,
      up_avail=0,
      up_left_avail=0
  end
  
  read_chroma_case_1: action Intra_TOP_LEFT_Data:[x] repeat 10 ==>
  guard
      left_avail=1,
      up_avail=0,
      up_left_avail=1
  do
      c_left:=[up_blocks[i * (MAXW_IN_MB * 8) + 8 * cnt - 1]: for int i in 0 .. 7 ];
      c_left[8]:=c_left[7];
      c_up_left[0] := c_left[0];
  end
  read_chroma_case_2: action Intra_TOP_LEFT_Data:[x] repeat 10 ==>
  guard
      left_avail=0,
      up_avail=1,
      up_left_avail=1
  do
      c_up:=[up_blocks[7 * (MAXW_IN_MB * 8) + 8 * cnt +  i] : for int i in 0 .. 8 ];
      if cnt = width - 1 then
      	c_up[8]:=c_up[7];
      end
      c_up_left[0] := c_up[0];
  end
  read_chroma_case_3: action Intra_TOP_LEFT_Data:[x] repeat 19 ==>
  guard
      left_avail=1,
      up_avail=1,
      up_left_avail=1
  do
      c_left := [x[i]: for int i in 0 .. 8];
      c_left:=[up_blocks[i * (MAXW_IN_MB * 8) + 8 * cnt - 1]: for int i in 0 .. 7 ];
      c_up:=[up_blocks[7 * (MAXW_IN_MB * 8) + 8 * cnt +  i] : for int i in 0 .. 8 ];
      if cnt = width - 1 then
      	c_up[8]:=c_up[7];
      end
      c_up_left[0] := c_up_left_collocated[cnt - 1];
  end

  write: action IntraChromaPredMode:[mode] ==>
    IntraPred_UV:[[predpels[8*j+i]: for int i in 0 .. 7, for int j in 0 .. 7]] repeat 8*8
  var
    int H, int V,
    int a, int b, int c,
    List(type:int(size=PIX_SZ),size=19) PredPixBuffer,
    List(type:int(size=PIX_SZ),size=64) predpels := [ 0 : for int k in 1 .. 64 ]//initList(0,64)
    
  do
    foreach int i in 0 .. 8 do
	    PredPixBuffer[i] := c_left[8-i];
	end
   
    PredPixBuffer[9] := c_up_left[0];
    
    foreach int i in 0 .. 8 do
	    PredPixBuffer[10 + i] := c_up[i];
	end
    //PredPixBuffer_pass
    PredPixBuffer_pass[0]:=  (3*PredPixBuffer[0] + PredPixBuffer[1] + 2) >> 2;
    foreach int x in 1 .. 17
    do
      PredPixBuffer_pass[x]:=  (PredPixBuffer[x-1] + 2*PredPixBuffer[x] + PredPixBuffer[x+1] + 2) >> 2;
    end
    PredPixBuffer_pass[18]:= (PredPixBuffer[17]  + 3*PredPixBuffer[18] + 2) >> 2;
    
    if mode = 0 then // DC
      f_c_left := [PredPixBuffer_pass[8-x]: for int x in 0 .. 8];
      f_c_up := [PredPixBuffer_pass[x]: for int x in 10 .. 18];
      if( left_avail=1 and up_avail=1) then
        predpels := [((f_c_up[i] + f_c_left[j]) >> 1): for int i in 0 .. 7, for int j in 0 .. 7];
      else if left_avail=1 then
             predpels := [f_c_left[j]: for int i in 0 .. 7, for int j in 0 .. 7];
	   else if up_avail=1 then
	          predpels := [f_c_up[i]: for int i in 0 .. 7, for int j in 0 .. 7];
	        else
		  predpels := [128: for int i in 0 .. 7, for int j in 0 .. 7];
		end
           end
      end
    end
    
    if mode = 1 then // horizontal
      predpels := [c_left[j]: for int i in 0 .. 7, for int j in 0 .. 7];
    end

    if mode = 2 then // vertical
      predpels := [c_up[i]: for int i in  0 .. 7, for int j in 0 .. 7];
    end
    if mode = 3 then //plane
      H:= (c_up[4]-c_up[2]) + 2*(c_up[5]-c_up[1]) + 3*(c_up[6]-c_up[0]) + 4*(c_up[7]-c_up_left[0]);
      V:= (c_left[4]-c_left[2]) + 2*(c_left[5]-c_left[1]) + 3*(c_left[6]-c_left[0]) + 4*(c_left[7]-c_up_left[0]);
      a:= 16*(c_left[7] + c_up[7]);
      b:= (17*H + 16) >> 5;
      c:= (17*V + 16) >> 5;
      predpels := [clip((a + b*(i-3) + c*(j-3) + 16) >> 5): for int i in 0 .. 7, for int j in 0 .. 7];
     end 
  end

  get_block: action RecData:[block] repeat 64 ==>
  do
	c_up_left_collocated[cnt]:= up_blocks[7 * (MAXW_IN_MB*8) + 8 * cnt + 7];
	foreach int i in 0 .. 7 do
		foreach int j in 0 .. 7 do 
			up_blocks[j * (MAXW_IN_MB*8) + 8 * cnt + i] := block[i+j*8];
		end
	end
  end

  advance: action ==>
  do
  	cnt := cnt + 1;
	if cnt = width then
		cnt:=0;
	end
  end


  schedule fsm start:
    start    ( get_new_vop          )    --> skip_wh;
    skip_wh  ( skip_wh              )    --> start;
    start    ( get_mb_type          )    --> read_avail;
    start    ( skip_mb_type         )    --> get_block;
    read_avail    ( read_avail           )   --> readpix;
                          
    readpix ( read_chroma_case_0    )   --> write;
    readpix ( read_chroma_case_1    )   --> write;
    readpix ( read_chroma_case_2    )   --> write;
    readpix ( read_chroma_case_3    )   --> write;
    write   ( write                 )   --> get_block;

    get_block( get_block           )    --> advance;
    advance  ( advance             ) --> start;
    
  end

end
