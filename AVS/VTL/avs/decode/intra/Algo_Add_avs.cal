/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.decode.intra.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_ADD.cal
// Function: This module is to reconstruct picture: combine resduals and preds for AVS Jizhun Profile.
// Note:

package avs.decode.intra;

import avs.Constants.*;

actor Algo_Add_avs(
 )
  int(size=PIX_SZ) res,
  int(size=PIX_SZ) Pred,
  int(size=BTYPE_SZ) BTYPE 
  ==> 
  int(size=PIX_SZ) RecData :
    
   
   List(type:int(size=PIX_SZ),size=64) tex_buffer := [0: for int i in 0 .. 63];
   List(type:int(size=PIX_SZ),size=64) res_buffer := [0: for int i in 0 .. 63];
   
  // Ignore new VOP command
  get_new_vop: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) != 0
  //do
    //count := 0;
    //println("Algo_Add:get_new_vop cmd="+cmd);
  end
  
  // skip width and height command
  skip_wh: action BTYPE:[ cmd ] repeat 2==>
  //do
    //println("Algo_Add:skip_wh:cmd="+cmd[0]);
    //println("Algo_Add:skip_wh:cmd="+cmd[1]);
  end

  // get intra, if coefficients are all zero, skip add.
  get_intra_uncoded: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) = 0,
    (cmd & INTRA) != 0,
    (cmd & COEFF_CODED) = 0
  //do
    //println("Algo_Add:get_intra_uncoded");
  end

  // get intra, if coefficients are not all zero, add RES and Pred.
  get_intra_coded: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) = 0,
    (cmd & INTRA) != 0,
    (cmd & COEFF_CODED) != 0
  //do
    //println("Algo_Add:get_intra_coded cmd="+cmd);
  end
  
  // get intra, if coefficients are all zero, skip add.
  get_inter_uncoded: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) = 0,
    (cmd & INTER) != 0,
    (cmd & COEFF_CODED) = 0
  end

  // get intra, if coefficients are not all zero, add RES and Pred.
  get_inter_coded: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) = 0,
    (cmd & INTER) != 0,
    (cmd & COEFF_CODED) != 0
  end
  
  //if coefficients are all zero, skip add.
  add_uncoded: action Pred:[pred] repeat 64 ==> RecData:[ [ if pred[i] < -256 then
			-256
		else
			if pred[i] > 255 then
				255
			else
				pred[i]
			end
		end : for int i in 0 .. 63 ] ] repeat 64
  end
  
  get_tex: action Pred:[tex] repeat 64 ==>
  do
      tex_buffer := [tex[i]: for int i in 0 .. 63];
  end
  
  
  get_res: action res:[mot] repeat 64 ==> 
  do
      res_buffer := [mot[i]: for int i in 0 .. 63];
  end
  
  //if coefficients are not all zero, add RES and Pred.
  add_coded: action ==> RecData:[ [ if tex_buffer[i] + res_buffer[i] < -256 then -256
		else if tex_buffer[i] + res_buffer[i] > 255 then 255
			else tex_buffer[i] + res_buffer[i] end
		end : for int i in 0 .. 63 ] ] repeat 64
  end
  
  schedule fsm read:
    read          ( get_new_vop       ) --> skip_wh;
    skip_wh       ( skip_wh           ) --> read;
    read          ( get_intra_uncoded ) --> add_uncoded;
    read          ( get_intra_coded   ) --> get_tex;
    read          ( get_inter_uncoded ) --> add_uncoded;
    read          ( get_inter_coded   ) --> get_tex;

    add_uncoded   ( add_uncoded        ) --> read;
     
    get_tex       ( get_tex            ) --> get_res;
    get_res       ( get_res            ) --> add_coded;      
    add_coded     ( add_coded          ) --> read;
  end

  priority
    get_new_vop > get_intra_uncoded > get_intra_coded > get_inter_uncoded > get_inter_coded;
  end

end