/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, TiejunHuang, and Wen Gao

// Algo_IntraPred_LUMA_8x8_AVSJZ.cal
// Function: This module implements intra prediction for 8x8 luma block of AVS Jizhun Profile.

/**********************************************************************************************************
 Input Ports:
 ============
 *int(size_PIX_SZ) Intra_TOP_LEFT_Data
 A sequence of reconstructed data from buffer "Mgnt_FB", first arrives the L_LEFT, following the L_TOP,
 at last the L_TOP_LEFT.
 
 *int(size=1) AVAIL
 A sequence of available or not signal for current block. First arrives the left_avail, following the top_avail,
 at last the top_left_avail.

 *int(size=3) IntraLumaPredMode:
 0 : Intra_8x8_Vertical;
 1 : Intra_8x8_Horizontal;
 2 : Intra_8x8_DC;
 3 : Intra_8x8_Down_left;
 4 : Intra_8x8_Down_Right;

 Output Ports:
 =============
 *int(size_PIX_SZ) IntraPred_Y
 TA sequence of 64 outputs of intra prediction. It is in a horizontal raster order.
*********************************************************************************************************/

package avs;

import avs.Constants.*;

actor Algo_IntraPred_LUMA_8x8_AVSJZ ()
  int(size=PIX_SZ) RecData, 
  int(size=BTYPE_SZ) BTYPE,
  int(size=PIX_SZ) Intra_TOP_LEFT_Data, //left, up, up_left data for intra prediction
  int(size=1) AVAIL,                    // left, up, up_left, up_right availability List
  int(size=3) IntraLumaPredMode                 // the mode of current 8x8 intra block.

  ==> int(size=PIX_SZ) IntraPred_Y :
  
  
  uint(size=1) left_avail;
  uint(size=1) up_avail;
  uint(size=1) up_left_avail;

  int(size=PIX_SZ) y_left[16] := [0: for int i in 1 .. 16];
  int(size=PIX_SZ) y_up[16]:= [0: for int i in 1 .. 16];
  int(size=PIX_SZ) y_up_left[1]:= [0: for int i in  1 .. 1];

  int(size=PIX_SZ) f_y_left[16] := [0: for int i in 1 .. 16];
  int(size=PIX_SZ) f_y_up[16]:= [0: for int i in 1 .. 16];
  int(size=PIX_SZ) up_blocks[16*16*MAXW_IN_MB];

  int(size=16) width;
  uint(size=3) comp;
  int(size=16) cnt;
  
  get_new_vop: action BTYPE:[cmd] ==>
  guard
    (NEWVOP & cmd) != 0
  do
  	cnt:=0;
  	comp:=0;
  end

  skip_wh: action BTYPE:[w,h] ==>
  do
  	width:=w;
  end

  get_mb_type: action BTYPE:[cmd] ==>
  end

  read_avail: action AVAIL:[avail] repeat 3 ==>
  do
    left_avail    := avail[0];
    up_avail      := avail[1];
    up_left_avail := avail[2];
  end
  
  //case_0: all unavailable
  read_case_0: action ==>
  guard
      left_avail=0,
      up_avail=0,
      up_left_avail=0
  do
      y_left:=[ 0 : for int i in 0 .. 15 ];
      y_up:=[ 0 : for int i in 0 .. 15 ];
      y_up_left := [0];
  end
  
  read_case_1: action Intra_TOP_LEFT_Data:[x] repeat 17 ==>
  guard
      left_avail=0,
      up_avail=1,
      up_left_avail=1
  do
      y_left:=[ 0 : for int i in 0 .. 15 ];
    if comp = 0 then
      	y_up:=[up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  i]: for int i in 0 .. 15 ];
       else
	      if comp = 1 then
	      	y_up:=[up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  i + 8]: for int i in 0 .. 15 ];
	      else
		      if comp = 2 then
		      	y_up:=[up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt +  i]: for int i in 0 .. 15 ];
		      else
			      if comp = 3 then
			      	y_up:=[if i < 7 then up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 +  i] else up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 + 7] end: for int i in 0 .. 15 ];
			      end
		      end
	      end
      end      
      y_up_left := [x[16]];
  end
  
  read_case_2: action Intra_TOP_LEFT_Data:[x] repeat 17 ==>
  guard
      left_avail=1,
      up_avail=0,
      up_left_avail=1
  do
      if comp = 0 then
      	y_left:=[up_blocks[i * (MAXW_IN_MB * 16) + 16 * cnt - 1]: for int i in 0 .. 15 ];
        else
	      if comp = 1 then
	      	y_left:=[if i < 7 then up_blocks[i * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] else up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] end: for int i in 0 .. 15 ];
	      else
		      if comp = 2 then
		      	y_left:=[if i < 7 then up_blocks[(i + 8) * (MAXW_IN_MB * 16) + 16 * cnt - 1] else up_blocks[(7 + 8) * (MAXW_IN_MB * 16) + 16 * cnt - 1] end: for int i in 0 .. 15 ];
		      else
			      if comp = 3 then
			      	y_left:=[if i < 7 then up_blocks[(i + 8) * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] else up_blocks[(7 + 8) * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] end: for int i in 0 .. 15 ];
			      end
		      end
	      end
     end      
      y_up:=[ 0 : for int i in 16 .. 31 ];
      y_up_left := [x[16]];
  end

  read_case_3: action Intra_TOP_LEFT_Data:[x] repeat 33 ==>
  guard
      left_avail=1,
      up_avail=1,
      up_left_avail=1
  do
      if comp = 0 then
      	y_left:=[up_blocks[i * (MAXW_IN_MB * 16) + 16 * cnt - 1]: for int i in 0 .. 15 ];
        else
	      if comp = 1 then
	      	y_left:=[if i < 7 then up_blocks[i * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] else up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] end: for int i in 0 .. 15 ];
	      else
		      if comp = 2 then
		      	y_left:=[if i < 7 then up_blocks[(i + 8) * (MAXW_IN_MB * 16) + 16 * cnt - 1] else up_blocks[(7 + 8) * (MAXW_IN_MB * 16) + 16 * cnt - 1] end: for int i in 0 .. 15 ];
		      else
			      if comp = 3 then
			      	y_left:=[if i < 7 then up_blocks[(i + 8) * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] else up_blocks[(7 + 8) * (MAXW_IN_MB * 16) + 16 * cnt + 8 - 1] end: for int i in 0 .. 15 ];
			      end
		      end
	      end
     end      
     y_up:=[ x[i] : for int i in 16 .. 31 ];
     if comp = 0 then
      	y_up:=[up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  i]: for int i in 0 .. 15 ];
       else
	      if comp = 1 then
	      	if cnt = width then 
	      		y_up:=[up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  i + 8]: for int i in 0 .. 15 ];
	      		y_up:=[if i < 7 then 
	      			up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  i + 8]
	      			else
	      			up_blocks[15 * (MAXW_IN_MB * 16) + 16 * cnt +  7 + 8]
	      			end: for int i in 0 .. 15
	      		];
	      	end
	      else
		      if comp = 2 then
		      	y_up:=[up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt +  i]: for int i in 0 .. 15 ];
		      else
			      if comp = 3 then
			      	y_up:=[if i < 7 then up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 +  i] else up_blocks[7 * (MAXW_IN_MB * 16) + 16 * cnt + 8 + 7] end: for int i in 0 .. 15 ];
			      end
		      end
	      end
      end
  	 y_up_left := [x[32]];
  end
   
  //the output of intra prediction is in horizontal raster order.
  write: action IntraLumaPredMode:[mode] ==>
    IntraPred_Y:[[predpels[8*j+i]: for int i in 0 .. 7, for int j in 0 .. 7]] repeat 64
  var 
    int(size=PIX_SZ) PredPixBuffer[33],
    int(size=PIX_SZ)PredPixBuffer_pass[33] := [0: for int t in 1 .. 33],
    int(size=PIX_SZ) predpels[64] := [0: for int k in 1 .. 64]
  do
    foreach int i in 0 .. 15 do
        PredPixBuffer[i] := y_left[15-i];
    end
    PredPixBuffer[16] := y_up_left[0];
    foreach int i in 0 .. 15 do
        PredPixBuffer[17 + i] := y_up[i];
    end
    PredPixBuffer_pass[0]:= (3*PredPixBuffer[0] + PredPixBuffer[1] + 2) >> 2;
    foreach int x in 1 .. 31
    do
      PredPixBuffer_pass[x]:=  (PredPixBuffer[x-1] + 2*PredPixBuffer[x] + PredPixBuffer[x+1] + 2) >> 2;
    end
    PredPixBuffer_pass[32]:= (PredPixBuffer[31]  + 3*PredPixBuffer[32] + 2) >> 2;
    if mode = 0 then //vertical
      predpels := [y_up[i]  : for int i in 0 .. 7, for int j in 0 .. 7];
    end
    
    if mode = 1 then //horiaontal
      predpels := [y_left[j]: for int i in 0 .. 7, for int j in 0 .. 7];
    end
    
    if mode = 2 then //DC
      f_y_left := [PredPixBuffer_pass[15-x]: for int x in 0 .. 15];
      f_y_up := [PredPixBuffer_pass[x]: for int x in 17 .. 32];

      if left_avail = 1 and up_avail = 1 then
        predpels := [((f_y_up[i] + f_y_left[j]) >> 1): for int i in 0 .. 7, for int j in 0 .. 7];
      else if left_avail = 1 then
             predpels := [f_y_left[j]: for int i in 0 .. 7, for int j in 0 .. 7];	   
	      else if up_avail = 1 then
	          predpels := [f_y_up[i]:  for int i in 0 .. 7, for int j in 0 .. 7];
                else
	          predpels := [128: for int i in 0 .. 7, for int j in 0 .. 7];
	        end
	      end
      end
    end

    
    if mode = 3 then //down-left
      predpels := [((PredPixBuffer_pass[i+j+2+16] + PredPixBuffer_pass[-i-j-2+16]) >> 1) : for int i in  0 .. 7, for int j in 0 .. 7];
    end
    
    if mode = 4 then //down-right 
      predpels := [PredPixBuffer_pass[i-j+16]: for int i in  0 .. 7, for int j in 0 .. 7];
    end
  end

  get_block: action RecData:[block] repeat 64 ==>
  do
	foreach int i in 0 .. 7 do
		foreach int j in 0 .. 7 do 
			up_blocks[(j+(8*(comp & 2)>>1)) * (MAXW_IN_MB*16) + 16 * cnt + (8 * (comp & 1)) + i] := block[i+j*8];
		end
	end
  end
  
  advance: action ==>
  do
  	
  	comp := comp + 1;
  	if comp= 4 then
  		comp:=0;
	  	cnt := cnt + 1;
		if cnt = width then
			cnt:=0;
		end
  	end
  end
  
  schedule fsm start:
    start    ( get_new_vop          )    --> skip_wh;
    skip_wh  ( skip_wh              )    --> start;
    start    ( get_mb_type          )    --> read_avail;
    read_avail( read_avail          )    --> readpix;

    readpix ( read_case_0      )    --> write;
    readpix ( read_case_1      )    --> write;
    readpix ( read_case_2      )    --> write;
    readpix ( read_case_3      )    --> write;    

    write   ( write                )    --> get_block;
    
    get_block( get_block           )    --> advance;
    advance  ( advance             ) --> start;
  end
  
  priority
    get_new_vop > get_mb_type;
    read_case_0 > read_case_1 >read_case_2 >read_case_3;
  end
end
