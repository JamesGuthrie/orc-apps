// Algo_Interp_HalfandQuarterPel_AVSJZ.cal
// Author:	Carmen CHENG (carmen@astri.org)
// Date:	8/4/2008
// Description:	Fractional luma sample interpolation of AVS-Jizhun profile
package avs.P;

actor Algo_Interp_HalfandQuarterPel_AVSJZ () int(size=32) MV,
	int(size=32) PartSZ,
	int(size=32) RD
	==> int(size=32) INTERP :

	int(size=32) x;

	int(size=32) y;

	int(size=32) o_x;

	int(size=32) o_y;

	int(size=32) n;

	int(size=32) x_index;

	int(size=32) y_index;

	int width;

	int height;

	int temp;

	int M_plus5 := (16 + 5);

	int N_plus5 := (16 + 5);

	List(type: int(size=32), size=(M_plus5 * N_plus5)) inbuf := [ 0 : for int i in
	0 .. M_plus5 * N_plus5 - 1 ];

	List(type: int(size=32), size=4) half_pel := [ 0 : for int i in 0 .. 3 ];

	procedure compensate()
	begin

	/* integer sample location D (0,0) */
		if x_index = 0 and y_index = 0 then
			temp := inbuf[(2 + o_x) + (2 + o_y) * M_plus5];
		end

		/* fractional sample location b (2,0) */
		if x_index = 2 and y_index = 0 then
			temp := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x) + (2 +
			o_y) * M_plus5]);
			temp := temp - (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(4 + o_x) +
			(2 + o_y) * M_plus5]) + 4;
			temp := temp >> 3;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end

		/* fractional sample location h (0,2) */
		if x_index = 0 and y_index = 2 then
			temp := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x) + (3 +
			o_y) * M_plus5]);
			temp := temp - (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] + inbuf[(2 + o_x) +
			(4 + o_y) * M_plus5]) + 4;
			temp := temp >> 3;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end

		/* fractional sample location j (2,2) */
		if x_index = 2 and y_index = 2 then
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]) + 32;
			temp := temp >> 6;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end

		/* fractional sample location a (1,0) */
		if x_index = 1 and y_index = 0 then // ee'
			half_pel[0] := 5 * (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(0 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(3 + o_x) + (2 + o_y) * M_plus5]); // b'
			half_pel[1] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (2 + o_y) * M_plus5]); // ee' + 7(8*D) + 7b' + (8*E) + 64 >> 7
			temp := 7 * (8 * inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + half_pel[1]);
			temp := temp + (half_pel[0] + 8 * inbuf[(3 + o_x) + (2 + o_y) * M_plus5]) +
			64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end

		/* fractional sample location c (3,0) */
		if x_index = 3 and y_index = 0 then // b'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (2 + o_y) * M_plus5]); // ee(n)'
			half_pel[1] := 5 * (inbuf[(3 + o_x) + (2 + o_y) * M_plus5] + inbuf[(4 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(5 + o_x) + (2 + o_y) * M_plus5]); // (8*D) +  7b' + 7(8*E) + ee(n)' + 64 >> 7
			temp := 7 * (half_pel[0] + 8 * inbuf[(3 + o_x) + (2 + o_y) * M_plus5]);
			temp := temp + (8 * inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + half_pel[1]) +
			64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location d (0,1)
		if x_index = 0 and y_index = 1 then // ff'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(2 + o_x) + (0 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (3 + o_y) * M_plus5]); // h'
			half_pel[1] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (4 + o_y) * M_plus5]); // ff' + 7(8*D) + 7h' + (8*H) + 64 >> 7
			temp := 7 * (8 * inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + half_pel[1]);
			temp := temp + (half_pel[0] + 8 * inbuf[(2 + o_x) + (3 + o_y) * M_plus5]) +
			64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location n (0,3)
		if x_index = 0 and y_index = 3 then // h'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (4 + o_y) * M_plus5]); // ff(n)'
			half_pel[1] := 5 * (inbuf[(2 + o_x) + (3 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (4 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (5 + o_y) * M_plus5]); // (8*D) + 7h' + 7(8*H) + ff(n)' + 64 >> 7
			temp := 7 * (half_pel[0] + 8 * inbuf[(2 + o_x) + (3 + o_y) * M_plus5]);
			temp := temp + (8 * inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + half_pel[1]) +
			64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location f (2,1)
		if x_index = 2 and y_index = 1 then // hh'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (2 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (0 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (3 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]); // j'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := temp + (7 * (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3]))); // b'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (2 + o_y) * M_plus5]); // ss'
			half_pel[1] := 5 * (inbuf[(2 + o_x) + (3 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(1 + o_x) + (3 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (3 + o_y) * M_plus5]); // hh' + 7(8*b') + 7j' + (8ss') + 512 >> 10
			temp := temp + 7 * (8 * half_pel[0]) + (8 * half_pel[1]) + 512;
			temp := temp >> 10;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location q (2,3)
		if x_index = 2 and y_index = 3 then // j'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := (7 * (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3]))); // hh(n)'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (3 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (4 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (5 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := temp + (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3])); // b'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (2 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(1 + o_x) + (2 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (2 + o_y) * M_plus5]); // ss'
			half_pel[1] := 5 * (inbuf[(2 + o_x) + (3 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(1 + o_x) + (3 + o_y) * M_plus5] +
			inbuf[(4 + o_x) + (3 + o_y) * M_plus5]); // (8b') + 7(j') + 7(8ss') + hh(n)' + 512 >> 10
			temp := temp + (8 * half_pel[0]) + 7 * (8 * half_pel[1]) + 512;
			temp := temp >> 10;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location i (1,2)
		if x_index = 1 and y_index = 2 then // gg'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 0 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				0 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 0 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 0 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]); // j'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := temp + (7 * (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3]))); // h'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (4 + o_y) * M_plus5]); // m'
			half_pel[1] := 5 * (inbuf[(3 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(3 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(3 + o_x) + (4 + o_y) * M_plus5]); // gg' + 7(8*h') + 7j' + (8*m') + 512 >> 10
			temp := temp + 7 * (8 * half_pel[0]) + (8 * half_pel[1]) + 512;
			temp := temp >> 10;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location k (3,2)
		if x_index = 3 and y_index = 2 then // j'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := (7 * (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3]))); // gg(n)'
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				2 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 2 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 2 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := temp + (5 * (half_pel[1] + half_pel[2]) - (half_pel[0] +
			half_pel[3])); // h'
			half_pel[0] := 5 * (inbuf[(2 + o_x) + (2 + o_y) * M_plus5] + inbuf[(2 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[0] := half_pel[0] - (inbuf[(2 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(2 + o_x) + (4 + o_y) * M_plus5]); // m'
			half_pel[1] := 5 * (inbuf[(3 + o_x) + (2 + o_y) * M_plus5] + inbuf[(3 + o_x)
			+ (3 + o_y) * M_plus5]);
			half_pel[1] := half_pel[1] - (inbuf[(3 + o_x) + (1 + o_y) * M_plus5] +
			inbuf[(3 + o_x) + (4 + o_y) * M_plus5]); // gg' + 7(8*h') + 7j' + (8*m') + 512 >> 10      
			temp := temp + (8 * half_pel[0]) + 7 * (8 * half_pel[1]) + 512;
			temp := temp >> 10;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location e (1,1)
		if x_index = 1 and y_index = 1 then
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]);
			temp := temp + (64 * inbuf[(2 + o_x) + (2 + o_y) * M_plus5]) + 64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location g (3,1)
		if x_index = 3 and y_index = 1 then
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]);
			temp := temp + (64 * inbuf[(3 + o_x) + (2 + o_y) * M_plus5]) + 64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location p (1,3)
		if x_index = 1 and y_index = 3 then
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]);
			temp := temp + (64 * inbuf[(2 + o_x) + (3 + o_y) * M_plus5]) + 64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end // fractional sample location r (3,3)
		if x_index = 3 and y_index = 3 then
			n := 0;
			while n < 4 do
				half_pel[n] := 5 * (inbuf[(n + 1 + o_x) + (2 + o_y) * M_plus5] + inbuf[(n +
				1 + o_x) + (3 + o_y) * M_plus5]);
				half_pel[n] := half_pel[n] - (inbuf[(n + 1 + o_x) + (1 + o_y) * M_plus5] +
				inbuf[(n + 1 + o_x) + (4 + o_y) * M_plus5]);
				n := n + 1;
			end
			temp := 5 * (half_pel[1] + half_pel[2]) - (half_pel[0] + half_pel[3]);
			temp := temp + (64 * inbuf[(3 + o_x) + (3 + o_y) * M_plus5]) + 64;
			temp := temp >> 7;
			if temp > 255 then
				temp := 255;
			end
			if temp < 0 then
				temp := 0;
			end
		end
	end //procedure
	get_fract_x: action MV:[ f ] ==>
	do
		x := 0;
		y := 0;
		o_x := 0;
		o_y := 0;
		x_index := f & 3;
	end

	get_fract_y: action MV:[ f ] ==>
	do
		y_index := f & 3;
	end

	getwidth: action PartSZ:[ f ] ==>
	do
		width := f;
	end

	getheight: action PartSZ:[ f ] ==>
	do
		height := f;
	end // fetch (width+5)x(height+5) pixels
	fetch: action RD:[ d ] ==>
	guard
		x < (width + 5) and y < (height + 5)
	do
		inbuf[y * M_plus5 + x] := d;
		x := x + 1;
		if x >= (width + 5) then
			x := 0;
			y := y + 1;
		end
	end

	done: action ==>
	guard
		o_y = height
	end // interpolation according to MODE
	process: action ==> INTERP:[ p ]
	guard
		y = (height + 5)
	var
		int(size=32) p
	do
		compensate();
		p := temp;
		o_x := o_x + 1;
		if o_x >= width then
			o_x := 0;
			o_y := o_y + 1;
		end
	end

	schedule fsm get_fract_x :
		get_fract_x ( get_fract_x ) --> get_fract_y;
		get_fract_y ( get_fract_y ) --> getwidth;
		getwidth ( getwidth ) --> getheight;
		getheight ( getheight ) --> interpolate;
		interpolate ( fetch ) --> interpolate;
		interpolate ( done ) --> get_fract_x;
		interpolate ( process ) --> interpolate;
	end 
	
	priority
		done > fetch > process;
	end

end
