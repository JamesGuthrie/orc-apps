package avs.P;

import std.util.BitOps.* ;

actor Algo_Interp_split_MB_C () int(size=32) MbPartWidth,
	int(size=32) MbPartHeigth,
	uint(size=8) INTERP
	==> int(size=9) MBPred :

	uint(size=5) count := 0; //uint(size=5) mbpart_idx;
	uint(size=5) mbpart_w;

	uint(size=5) mbpart_h;

	List(type: int(size=16), size=64) MB := [ 0 : for int i in 0 .. 63 ];

	List(type: uint(size=4), size=16) InverseScan4x4Tab := [ 0, 1, 4, 5, 2, 3, 6,
	7, 8, 9, 12, 13, 10, 11, 14, 15 ];

	get_part: action MbPartWidth:[ b ] , MbPartHeigth:[ c ] ==>
	guard
		count < 16
	do //mbpart_idx:= a;
		mbpart_w := b / 2;
		mbpart_h := c / 2;
	end

	get_data.mode8x8: action INTERP:[ v ] repeat 8 * 8 ==>
	guard
		mbpart_w = 8 and mbpart_h = 8
	var
		uint pixAddr := (InverseScan4x4Tab[count] / 4 << 4) +
		(InverseScan4x4Tab[count] mod 4 << 1)
	do
		foreach int j in 0 .. mbpart_h - 1 do
			foreach int i in 0 .. mbpart_w - 1 do
				MB[pixAddr + i + (j << 3)] := v[i + j * mbpart_w];
			end
		end
		count := count + ((mbpart_w >> 1) * (mbpart_h >> 1));
	end

	send_data: action ==> MBPred:[ [ MB[s] : for int s in 0 .. 63 ] ] repeat 64
	guard
		count = 16
	do
		count := 0;
	end

	schedule fsm get_send_part :
		get_send_part ( get_part ) --> get_data;
		get_data ( get_data ) --> get_send_part;
		get_send_part ( send_data ) --> get_send_part;
	end

end