package avs.P;

actor Algo_Get_Blockshape () int(size=32) PictureType,
	int(size=32) MbType
	==> int(size=32) Blockshape_X,
		int(size=32) Blockshape_Y,
		int(size=32) Part_SZ,
		int(size=32) IsIntraMb,
		int(size=32) IsIntraMb_two,
		int(size=32) Is_P_Skip
:

	int(size=32) Picture_type;

	int(size=32) blockshape_X;

	int(size=32) blockshape_Y;

	int(size=32) isIntraMb;

	int(size=32) isIntraMb_two;

	int(size=32) is_P_Skip;

	Get_PicType: action PictureType:[ picture_type ] ==>
	do
		Picture_type := picture_type;
	end

	I_Pic: action ==> IsIntraMb:[ isIntraMb ]
	guard
		Picture_type = 0
	do
		isIntraMb := 1;
	end

	Not_I_Pic: action MbType:[ MB_Type ] ==> Blockshape_X:[ blockshape_X ],
		Blockshape_Y:[ blockshape_Y ], IsIntraMb:[ isIntraMb ], IsIntraMb_two:[
		isIntraMb_two ], Is_P_Skip:[ is_P_Skip ], Part_SZ:[ blockshape_X,
		blockshape_Y ]
	guard
		Picture_type != 0
	do
		if Picture_type = 1 then
			if (MB_Type = 0) then
				blockshape_X := 16;
				blockshape_Y := 16;
				isIntraMb := 0;
				isIntraMb_two := 0;
				is_P_Skip := 1;
			end
			if (MB_Type = 1) then
				blockshape_X := 16;
				blockshape_Y := 16;
				isIntraMb := 0;
				isIntraMb_two := 0;
				is_P_Skip := 0;
			end
			if (MB_Type = 2) then
				blockshape_X := 16;
				blockshape_Y := 8;
				isIntraMb := 0;
				isIntraMb_two := 0;
				is_P_Skip := 0;
			end
			if (MB_Type = 3) then
				blockshape_X := 8;
				blockshape_Y := 16;
				isIntraMb := 0;
				isIntraMb_two := 0;
				is_P_Skip := 0;
			end
			if MB_Type = 4 then //MB_Type := P8MB; 
				blockshape_X := 8;
				blockshape_Y := 8;
				isIntraMb := 0;
				isIntraMb_two := 0;
				is_P_Skip := 0;
			else
				if MB_Type > 4 then //MB_Type := I8MB;
					blockshape_X := 8;
					blockshape_Y := 8;
					isIntraMb := 1;
					isIntraMb_two := 1;
					is_P_Skip := 0;
				end
			end //picture_type = 1
		else
			if Picture_type = 2 then
				if MB_Type = 0 then
					blockshape_X := 16;
					blockshape_Y := 16;
					isIntraMb := 0;
					isIntraMb_two := 0;
					is_P_Skip := 0;
				else
					if MB_Type > 22 then
						blockshape_X := 8;
						blockshape_Y := 8;
						isIntraMb := 1;
						isIntraMb_two := 1;
						is_P_Skip := 0;
					else
						if MB_Type = 22 then //MB_Type := P8MB;
							blockshape_X := 8;
							blockshape_Y := 8;
							isIntraMb := 0;
							isIntraMb_two := 0;
							is_P_Skip := 0;
						else
							if MB_Type < 4 then
								MB_Type := 1;
								blockshape_X := 16;
								blockshape_Y := 16;
								isIntraMb := 0;
								isIntraMb_two := 0;
								is_P_Skip := 0;
							else
								if (MB_Type & 1) = 0 then
									MB_Type := 2;
									blockshape_X := 16;
									blockshape_Y := 8;
									isIntraMb := 0;
									isIntraMb_two := 0;
									is_P_Skip := 0;
								else
									MB_Type := 3;
									blockshape_X := 8;
									blockshape_Y := 16;
									isIntraMb := 0;
									isIntraMb_two := 0;
									is_P_Skip := 0;
								end
							end
						end
					end
				end
			end
		end
	end

	schedule fsm Get_PicType :
		Get_PicType ( Get_PicType ) --> Is_I_Pic;
		Is_I_Pic ( I_Pic ) --> Get_PicType;
		Is_I_Pic ( Not_I_Pic ) --> Get_PicType;
		end

end