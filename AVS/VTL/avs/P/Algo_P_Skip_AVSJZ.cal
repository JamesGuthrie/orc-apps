package avs.P;

actor Algo_P_Skip_AVSJZ()
    int (size=32) Is_P_Skip,
    bool mb_available_up,
    bool mb_available_left,
    bool block_available_up,
    bool block_available_left,
	bool block_available_upleft,
	bool block_available_upright,
	int (size=32) ref_Frame,
    int (size=32) refFr_L,
    int (size=32) refFr_U,
    int (size=32) refFr_UR,
    int (size=32) refFr_UL,
    int (size=32) tmp_Mv_L_X,
    int (size=32) tmp_Mv_U_X,
    int (size=32) tmp_Mv_UL_X,
    int (size=32) tmp_Mv_UR_X,
    int (size=32) tmp_Mv_L_Y,
    int (size=32) tmp_Mv_U_Y,
    int (size=32) tmp_Mv_UL_Y,
    int (size=32) tmp_Mv_UR_Y,
    int (size=32) block_X,
    int (size=32) block_Y,
    int (size=32) blockshape_X,
    int (size=32) blockshape_Y,
    int (size=32) reF
    //bool pic_end
    ==>
    bool block_available_up_out,
    bool block_available_left_out,
	bool block_available_upleft_out,
	bool block_available_upright_out,
	int (size=32) ref_Frame_out,
    int (size=32) refFr_L_out,
    int (size=32) refFr_U_out,
    int (size=32) refFr_UR_out,
    int (size=32) refFr_UL_out,
    int (size=32) tmp_Mv_L_X_out,
    int (size=32) tmp_Mv_U_X_out,
    int (size=32) tmp_Mv_UL_X_out,
    int (size=32) tmp_Mv_UR_X_out,
    int (size=32) tmp_Mv_L_Y_out,
    int (size=32) tmp_Mv_U_Y_out,
    int (size=32) tmp_Mv_UL_Y_out,
    int (size=32) tmp_Mv_UR_Y_out,
    int (size=32) block_X_out,
    int (size=32) block_Y_out,
    int (size=32) blockshape_X_out,
    int (size=32) blockshape_Y_out,
    int (size=32) reF_out,
    //bool pic_end_out,
    //int (size=32) Mv
    bool Mv_Pred
    :
    
    bool mb_available_up;
    bool mb_available_left;
    int (size=32) refFrArr_up;
    int (size=32) tmp_Mv_U_X;
    int (size=32) tmp_Mv_U_Y;
    int (size=32) refFrArr_left;
    int (size=32) tmp_Mv_L_X;
    int (size=32) tmp_Mv_L_Y;
//    int (size=32) mv_x;
//    int (size=32) mv_y;
    int (size=32) zeromotionabove;
    int (size=32) zeromotionleft;
//    int (size=32) ref_Frame;
//    int (size=32) block_X;
//    int (size=32) block_Y;
//    int (size=32) blockshape_X;
//    int (size=32) blockshape_Y;
//    int (size=32) reF;
    
    P_Skip : action Is_P_Skip:[is_P_Skip]==>
    guard 
        is_P_Skip=1
    do
        
    end
    
    Not_P_Skip : action Is_P_Skip:[is_P_Skip]==>
    guard 
        is_P_Skip=0
    do
    
    end
    
    Getblock_available_up : action block_available_up:[Block_Available_Up]==>block_available_up_out:[Block_Available_Up]   
    end
    
    Getblock_available_left : action block_available_left:[Block_Available_Left]==>block_available_left_out:[Block_Available_Left]    
    end
    
    Getblock_available_upleft : action block_available_upleft:[Block_Available_Upleft]==>block_available_upleft_out:[Block_Available_Upleft]
    end
    
    Getblock_available_upright : action block_available_upright:[Block_Available_Upright]==>block_available_upright_out:[Block_Available_Upright]
    end
    
    Getref_Frame : action ref_Frame:[ref_Frame]==>ref_Frame_out:[ref_Frame]
    end
    
    GetrFrameL : action refFr_L:[refFr_L]==>refFr_L_out:[refFr_L]
    end
    
    GetrFrameU : action refFr_U:[refFr_U]==>refFr_U_out:[refFr_U]
    end
    
    GetrFrameUR : action refFr_UR:[refFr_UR]==>refFr_UR_out:[refFr_UR]
    end
    
    GetrFrameUL : action refFr_UL:[refFr_UL]==>refFr_UL_out:[refFr_UL]
    end
    
    Get_tmp_Mv_L_X : action tmp_Mv_L_X:[tmp_Mv_L_X]==>  tmp_Mv_L_X_out:[tmp_Mv_L_X]
    end
      
    Get_tmp_Mv_U_X : action tmp_Mv_U_X:[tmp_Mv_U_X]==>tmp_Mv_U_X_out:[tmp_Mv_U_X]
    end
      
    Get_tmp_Mv_UL_X : action tmp_Mv_UL_X:[tmp_Mv_UL_X]==>tmp_Mv_UL_X_out:[tmp_Mv_UL_X]
    end
      
    Get_tmp_Mv_UR_X : action tmp_Mv_UR_X:[tmp_Mv_UR_X]==>tmp_Mv_UR_X_out:[tmp_Mv_UR_X]
    end
      
    Get_tmp_Mv_L_Y : action tmp_Mv_L_Y:[tmp_Mv_L_Y]==>tmp_Mv_L_Y_out:[tmp_Mv_L_Y]  
    end
      
    Get_tmp_Mv_U_Y : action tmp_Mv_U_Y:[tmp_Mv_U_Y]==>tmp_Mv_U_Y_out:[tmp_Mv_U_Y]  
    end
      
    Get_tmp_Mv_UL_Y : action tmp_Mv_UL_Y:[tmp_Mv_UL_Y]==>tmp_Mv_UL_Y_out:[tmp_Mv_UL_Y]
    end
      
    Get_tmp_Mv_UR_Y : action tmp_Mv_UR_Y:[tmp_Mv_UR_Y]==>tmp_Mv_UR_Y_out:[tmp_Mv_UR_Y]
    end
    
    Get_block_X : action block_X:[block_X]==>block_X_out:[block_X]
    end
    
    Get_block_Y : action block_Y:[block_Y]==>block_Y_out:[block_Y]
    end
    
    Get_blockshape_X : action blockshape_X:[blockshape_X]==>blockshape_X_out:[blockshape_X]
    end
    
    Get_blockshape_Y : action blockshape_Y:[blockshape_Y]==>blockshape_Y_out:[blockshape_Y]
    end
    
    Get_reF : action reF:[reF]==>reF_out:[reF]
    end
    
//    Get_pic_end : action pic_end:[pic_end]==>pic_end_out:[pic_end]
//    end
    //////////////////////////////////////////////////////////////
    Get_Mb_Available_Up: action mb_available_up:[Mb_available_up]==>
   do
       mb_available_up:=Mb_available_up;
   end
   
   Get_Mb_Available_Left: action mb_available_left:[Mb_available_left]==>
   do
      mb_available_left:=Mb_available_left;
   end
   
   Get_ZeroMotionAbove: action refFr_U:[RefFrArr_up],tmp_Mv_U_X:[Tmp_Mv_U_X],tmp_Mv_U_Y:[Tmp_Mv_U_Y]==>
   do
      refFrArr_up:=RefFrArr_up;
      tmp_Mv_U_X:=Tmp_Mv_U_X;
      tmp_Mv_U_Y:=Tmp_Mv_U_Y;
      if(mb_available_up!=false)then
         zeromotionabove:=1;
      else
         if(refFrArr_up=0 and tmp_Mv_U_X=0 and tmp_Mv_U_Y=0)then
            zeromotionabove:=1;
         else
            zeromotionabove:=0;
         end
      end
   end
   
   Get_ZeroMotionLeft: action refFr_L:[RefFrArr_left],tmp_Mv_L_X:[Tmp_Mv_L_X],tmp_Mv_L_Y:[Tmp_Mv_L_Y]==>
   do
      refFrArr_left:=RefFrArr_left;
      tmp_Mv_L_X:=Tmp_Mv_L_X;
      tmp_Mv_L_Y:=Tmp_Mv_L_Y;
      if(mb_available_left!=false)then
         zeromotionleft:=1;
      else
         if(refFrArr_left=0 and tmp_Mv_L_X=0 and tmp_Mv_L_Y=0)then
            zeromotionleft:=1;
         else
            zeromotionleft:=0;
         end
      end
   end
   
   Not_Get_MVPred: action block_available_up:[block_available_up],block_available_left:[block_available_left],block_available_upleft:[block_available_upleft],block_available_upright:[block_available_upright],
                          refFr_UR:[RefFrArr_UR],refFr_UL:[RefFrArr_UL],tmp_Mv_UL_X:[Tmp_Mv_UL_X],tmp_Mv_UL_Y:[Tmp_Mv_UL_Y],tmp_Mv_UR_X:[Tmp_Mv_UR_X],tmp_Mv_UR_Y:[Tmp_Mv_UR_Y],/*pic_end:[pic_end],*/
                          ref_Frame:[ref_Frame],block_X:[block_X],block_Y:[block_Y],blockshape_X:[blockshape_X],blockshape_Y:[blockshape_Y],reF:[reF]
                          ==>Mv_Pred:[false]
   guard zeromotionabove=1 or zeromotionleft=1

   end 
 
   Get_MVPred: action block_available_up:[block_available_up],block_available_left:[block_available_left],block_available_upleft:[block_available_upleft],block_available_upright:[block_available_upright],
                      refFr_UR:[RefFrArr_UR],refFr_UL:[RefFrArr_UL],tmp_Mv_UL_X:[Tmp_Mv_UL_X],tmp_Mv_UL_Y:[Tmp_Mv_UL_Y],tmp_Mv_UR_X:[Tmp_Mv_UR_X],tmp_Mv_UR_Y:[Tmp_Mv_UR_Y],/*pic_end:[pic_end],*/
                      ref_Frame:[ref_Frame],block_X:[block_X],block_Y:[block_Y],blockshape_X:[blockshape_X],blockshape_Y:[blockshape_Y],reF:[reF]
                      ==>ref_Frame_out:[0],block_X_out:[0],block_Y_out:[0],blockshape_X_out:[16],blockshape_Y_out:[16],reF_out:[0],block_available_up_out:[block_available_up],block_available_left_out:[block_available_left],block_available_upleft_out:[block_available_upleft],block_available_upright_out:[block_available_upright],
                      refFr_U_out:[refFrArr_up],refFr_L_out:[refFrArr_left],refFr_UR_out:[RefFrArr_UR],refFr_UL_out:[RefFrArr_UL],tmp_Mv_U_X_out:[tmp_Mv_U_X],tmp_Mv_U_Y_out:[tmp_Mv_U_Y],tmp_Mv_L_X_out:[tmp_Mv_L_X],tmp_Mv_L_Y_out:[tmp_Mv_L_Y],tmp_Mv_UL_X_out:[Tmp_Mv_UL_X],tmp_Mv_UL_Y_out:[Tmp_Mv_UL_Y],tmp_Mv_UR_X_out:[Tmp_Mv_UR_X],
                      tmp_Mv_UR_Y_out:[Tmp_Mv_UR_Y],/*pic_end_out:[pic_end],*/Mv_Pred:[true]
   guard zeromotionabove=0 and zeromotionleft=0
   do 
//      ref_Frame:=0;
//      block_X:=0;
//      block_Y:=0;
//      blockshape_X:=16;
//      blockshape_Y:=16;
//      reF:=0;
   end
    schedule fsm Is_P_Skip:
          Is_P_Skip(P_Skip)-->Get_Mb_Available_Up;
          Is_P_Skip(Not_P_Skip)-->Getblock_available_up;
          
          Getblock_available_up(Getblock_available_up)-->Getblock_available_left;
          Getblock_available_left(Getblock_available_left)-->Getblock_available_upleft;
          Getblock_available_upleft(Getblock_available_upleft)-->Getblock_available_upright;
          Getblock_available_upright(Getblock_available_upright)-->Getref_Frame;
          Getref_Frame(Getref_Frame)-->GetrFrameL;
          GetrFrameL(GetrFrameL)-->GetrFrameU;
          GetrFrameU(GetrFrameU)-->GetrFrameUR;
          GetrFrameUR(GetrFrameUR)-->GetrFrameUL;
          GetrFrameUL(GetrFrameUL)-->Get_tmp_Mv_L_X;
          Get_tmp_Mv_L_X(Get_tmp_Mv_L_X)-->Get_tmp_Mv_U_X;
          Get_tmp_Mv_U_X(Get_tmp_Mv_U_X)-->Get_tmp_Mv_UL_X;
          Get_tmp_Mv_UL_X(Get_tmp_Mv_UL_X)-->Get_tmp_Mv_UR_X;
          Get_tmp_Mv_UR_X(Get_tmp_Mv_UR_X)-->Get_tmp_Mv_L_Y;
          Get_tmp_Mv_L_Y(Get_tmp_Mv_L_Y)-->Get_tmp_Mv_U_Y;
          Get_tmp_Mv_U_Y(Get_tmp_Mv_U_Y)-->Get_tmp_Mv_UL_Y;
          Get_tmp_Mv_UL_Y(Get_tmp_Mv_UL_Y)-->Get_tmp_Mv_UR_Y;
          Get_tmp_Mv_UR_Y(Get_tmp_Mv_UR_Y)-->Get_block_X;
          Get_block_X(Get_block_X)-->Get_block_Y;
          Get_block_Y(Get_block_Y)-->Get_blockshape_X;
          Get_blockshape_X(Get_blockshape_X)-->Get_blockshape_Y;
          Get_blockshape_Y(Get_blockshape_Y)-->Get_reF;
          Get_reF(Get_reF)-->Is_P_Skip;
          //Get_reF(Get_reF)-->Get_pic_end;
          //Get_pic_end(Get_pic_end)-->Is_P_Skip;
          
          Get_Mb_Available_Up (Get_Mb_Available_Up) -->Get_Mb_Available_Left;
          Get_Mb_Available_Left(Get_Mb_Available_Left) -->Get_ZeroMotionAbove;
          Get_ZeroMotionAbove(Get_ZeroMotionAbove) -->Get_ZeroMotionLeft;
          Get_ZeroMotionLeft(Get_ZeroMotionLeft) -->Is_Get_MvPred;
          Is_Get_MvPred(Not_Get_MVPred) -->Is_P_Skip;
          Is_Get_MvPred(Get_MVPred) -->Is_P_Skip;
     end
end