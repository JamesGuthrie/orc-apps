package avs.P;

actor Mgnt_Buffer()
      int (size=32) img_Type,
      int (size=32) img_Mb_X,
      int (size=32) img_Mb_Y,
      int (size=32) img_Width,
      int (size=32) img_Height,
      int (size=32) blockshape_X,
      int (size=32) blockshape_Y,
      int (size=32) IsIntraMb,
      int (size=32) Ref_Frame,
      int (size=32) Ref,
      int (size=32) Mv_X,
      int (size=32) Mv_Y
      ==>
      bool mb_available_up,
      bool mb_available_left,
	  bool block_available_up,
	  bool block_available_left,
	  bool block_available_upleft,
	  bool block_available_upright,
	  
	  int (size=32) Ref_Frame_Out,
      int (size=32) Ref_Out,
	  
      int (size=32) refFr_L,
      int (size=32) refFr_U,
      int (size=32) refFr_UR,
      int (size=32) refFr_UL,
      int (size=32) tmp_Mv_L_X,
      int (size=32) tmp_Mv_U_X,
      int (size=32) tmp_Mv_UL_X,
      int (size=32) tmp_Mv_UR_X,
      int (size=32) tmp_Mv_L_Y,
      int (size=32) tmp_Mv_U_Y,
      int (size=32) tmp_Mv_UL_Y,
      int (size=32) tmp_Mv_UR_Y,
      
      int (size=32) block_X,
      int (size=32) block_Y,
      
      bool pic_end//,
      
//mrl      int (size=32) Current_mb_nr,
//mrl      int (size=32) Img_MbSize,
//mrl      int (size=32) Location,
//mrl      int (size=32) PicWidthInMb
      
     /* 
      int (size=32) RefFrArr_1,
      int (size=32) RefFrArr_2,
      int (size=32) RefFrArr_3,
      int (size=32) RefFrArr_4,
      int (size=32) Img_Mv_X_1,
      int (size=32) Img_Mv_X_2,
      int (size=32) Img_Mv_X_3,
      int (size=32) Img_Mv_X_4,
      int (size=32) Img_Mv_Y_1,
      int (size=32) Img_Mv_Y_2,
      int (size=32) Img_Mv_Y_3,
      int (size=32) Img_Mv_Y_4
      */
      
      :
      int (size=32) Img_Type;
      int (size=32) Img_Mb_X;
      int (size=32) Img_Mb_Y;
      int (size=32) Img_Width;
      int (size=32) Img_Height;
      int (size=32) Img_Block_X;
      int (size=32) Img_Block_Y;
      int (size=32) Block_X;
      int (size=32) Block_Y;
      int (size=32) Blockshape_X;
      int (size=32) Blockshape_Y;
      int(size=32) Img_Current_mb_nr;
      
      int (size=32) MB_WIDTH; //number of MB per lines
	  int (size=32) MB_HEIGHT; //number of MB per columns
	  
	  int (size=32) Pic_Block_X;
	  int (size=32) Pic_Block_Y;
	  int (size=32) mb_x;
	  int (size=32) mb_y;
	  
	  int (size=32) mv_d;
	  
	  int (size=32) count;
	  
	  bool mb_available_up;
	  bool mb_available_left;
	  bool mb_available_upleft;
	  bool mb_available_upright;
	  bool block_available_up;
	  bool block_available_left;
	  bool block_available_upleft;
	  bool block_available_upright;
	  
	  bool Pic_End;
      
      List(type: List(type:List(type:int(size=32), size=2), size=136), size=240) tmp_mv:= [ [[0, 0] : for int i in 0 .. 135 ]: for int j in 0 .. 239 ];
      //List(type: List(type:List(type:int(size=32), size=2), size=136), size=240) img_mv:= [ [[0, 0] : for int i in 0 .. 135 ]: for int j in 0 .. 239 ];
      List(type: List(type:int(size=32), size=240), size=136) refFrArr:=[[-1 : for int i in 0 .. 239]: for int j in 0 .. 135 ];
      
      Get_Img_Type : action img_Type:[img_Type] ==>
      do
         Img_Type:=img_Type;
      end
      
      I_Picture : action ==>
      guard
         Img_Type=0
      end
      
      Not_I_Picture : action ==>
      guard
         Img_Type!=0
      end
      
      Get_Img_Width : action img_Width:[img_Width]==>
      do
         Img_Width:=img_Width;
      end
      
      Get_Img_Height : action img_Height:[img_Height]==>//mrl Img_MbSize:[img_MbSize]
      var
         int (size=32) img_MbSize
      do
         Img_Height:=img_Height;
         img_MbSize:=(Img_Width/16)*(Img_Height/16);
      end
      
      Get_Img_Mb_X : action img_Mb_X:[img_Mb_X]==>
      do
         Img_Mb_X:=img_Mb_X;
      end
      
      Get_Img_Mb_Y : action img_Mb_Y:[img_Mb_Y]==>
      do
         Img_Mb_Y:=img_Mb_Y;
      end
      
      IntraMb : action IsIntraMb:[isIntraMb],blockshape_X:[blockshape_X],blockshape_Y:[blockshape_Y] ==>
      guard
         isIntraMb=1
      do
          tmp_mv[2*Img_Mb_X][2*Img_Mb_Y]:=[0,0];
          tmp_mv[2*Img_Mb_X+1][2*Img_Mb_Y]:=[0,0];
          tmp_mv[2*Img_Mb_X][2*Img_Mb_Y+1]:=[0,0];
          tmp_mv[2*Img_Mb_X+1][2*Img_Mb_Y+1]:=[0,0];
      end
      
      Set_Count : action IsIntraMb:[isIntraMb]==>
      guard
         isIntraMb=0
      do
         count:=0;
         Block_X:=0;
         Block_Y:=0;
      end
      
      Get_Img_Block_X : action ==>
      do
         Img_Block_X:=2*Img_Mb_X;
      end
      
      Get_Img_Block_Y : action ==>
      do
         Img_Block_Y:=2*Img_Mb_Y;
      end
      
      Get_Blockshape_X : action blockshape_X:[blockshape_X]==>
      do
         Blockshape_X:=blockshape_X;
      end
      
      Get_Blockshape_Y : action blockshape_Y:[blockshape_Y]==>
      do
         Blockshape_Y:=blockshape_Y;
      end
      
      Get_Img_Current_mb_nr : action ==>//mrl Current_mb_nr:[current_mb_nr]
      var
         int (size=32) current_mb_nr
      do
         Img_Current_mb_nr:=Img_Mb_Y*Img_Width/16+Img_Mb_X;
         current_mb_nr:=Img_Current_mb_nr;
      end
      
      Get_Mb_Width : action ==> //mrl PicWidthInMb:[MB_WIDTH]
      do
         MB_WIDTH :=Img_Width/16;
      end
      
      Get_Mb_Height : action ==>
      do
         MB_HEIGHT :=Img_Height/16;
      end 
      
      Get_Mb_X : action  ==>
      do 
         mb_x :=8*Block_X;
      end
      
      Get_Mb_Y : action  ==>
      do 
         mb_y :=8*Block_Y;
      end
      
      Get_Pic_Block_X : action  ==>
      do
         Pic_Block_X:=Img_Block_X+Block_X;
      end
      
      Get_Pic_Block_Y : action  ==>//mrl Location:[Pic_Block_X,Pic_Block_Y]
      do
         Pic_Block_Y:=Img_Block_Y+Block_Y;
      end
      
      get_refFr_16x16 : action Ref_Frame:[ref_Frame],Ref:[ref]==>Ref_Frame_Out:[ref_Frame],Ref_Out:[ref]
      guard
         Blockshape_X=16,
         Blockshape_Y=16
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y][Pic_Block_X+1]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X+1]:=ref_Frame;
      end
      
      get_refFr_16x8 : action Ref_Frame:[ref_Frame],Ref:[ref]==>Ref_Frame_Out:[ref_Frame],Ref_Out:[ref]
      guard
         Blockshape_X=16,
         Blockshape_Y=8
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y][Pic_Block_X+1]:=ref_Frame;
      end
      
      get_refFr_8x16 : action Ref_Frame:[ref_Frame],Ref:[ref]==>Ref_Frame_Out:[ref_Frame],Ref_Out:[ref]
      guard
         Blockshape_X=8,
         Blockshape_Y=16
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X]:=ref_Frame;
      end
      
      get_refFr_8x8 : action Ref_Frame:[ref_Frame],Ref:[ref]==>Ref_Frame_Out:[ref_Frame],Ref_Out:[ref]
      guard
         Blockshape_X=8,
         Blockshape_Y=8
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
      end
      
      Get_mb_available_up : action ==>mb_available_up:[mb_available_up]
      do
          if(Img_Mb_Y=0) then
             mb_available_up:=false; 
          else
             mb_available_up:=true; 
          end 
      end
    
      Get_mb_available_left : action ==>mb_available_left:[mb_available_left]
      do
          if(Img_Mb_X=0) then
             mb_available_left:=false; 
          else
             mb_available_left:=true; 
          end     
      end
    
    Get_mb_available_upleft : action ==>
    do
        if(Img_Mb_X=0) then
           mb_available_upleft:=false; 
        else
        if(Img_Mb_Y=0) then
           mb_available_upleft:=false;
        else
           mb_available_upleft:=true; 
        end
        end     
    end
    
    Get_mb_available_upright : action ==>
    do
        if(Img_Mb_Y=0) then
           mb_available_upright:=false; 
        else
        if(Img_Mb_X>=MB_WIDTH-1) then
           mb_available_upright:=false;
        else
           mb_available_upright:=true; 
        end
        end     
    end
    
    Get_block_available_up : action ==>block_available_up:[block_available_up]
    do
         block_available_up:= (mb_available_up || (mb_y > 0));   
    end
    
    Get_block_available_left : action ==>block_available_left:[block_available_left]
    do
         block_available_left:= (mb_available_left || (mb_x > 0));    
    end
    
    Get_block_available_upleft : action ==>block_available_upleft:[block_available_upleft]
    do
         if(mb_x > 0) then
            if(mb_y>0) then
               block_available_upleft:=true;
            else
               block_available_upleft:=mb_available_up; 
            end
         else
            if(mb_y > 0) then
               block_available_upleft := mb_available_left;
            else
               block_available_upleft := mb_available_upleft;
            end
         end
    end
    
    Get_block_available_upright : action ==>block_available_upright:[block_available_upright]
    do
         if(mb_y>0)then
         	if(mb_x<8)then
         		if(mb_y=8)then
         			if(Blockshape_X = 16)then
         			   block_available_upright := false;
         			else
         			   block_available_upright := true; 
         			end
         		else
         			if(mb_x+Blockshape_X !=8)then
         			   block_available_upright := true;
         			else
         			   block_available_upright := false; 
         			end
         		end
         	else
         		if(mb_x+Blockshape_X != 16)then
         		   block_available_upright := true;
         		else
         		   block_available_upright := false;
         		end
         	end
         else
             if(mb_x+Blockshape_X != 16)then
                block_available_upright := block_available_up;
             else
                block_available_upright := mb_available_upright;
             end
         end  
    end
      
      Get_refFr_L : action ==>refFr_L : [if(block_available_left=true)then
      	                                    refFrArr[Pic_Block_Y][Pic_Block_X-1]
      	                                 else
      	                                    -1
      	                                 end
                                        ]    
      end
      
      Get_refFr_U : action ==>refFr_U : [if(block_available_up=true)then
      	                                    refFrArr[Pic_Block_Y-1][Pic_Block_X]
      	                                 else
      	                                    -1
      	                                 end
                                         ] 
      end
      
      Get_refFr_UR : action ==>refFr_UR : [if(block_available_upright=true)then
      	                                      refFrArr[Pic_Block_Y-1][Pic_Block_X+Blockshape_X/8]
      	                                   else
      	                                      if(block_available_upleft)then
      	                                         refFrArr[Pic_Block_Y-1][Pic_Block_X-1]
      	                                      else
      	                                         -1
      	                                      end
      	                                   end
                                          ] 
      end
       
      Get_refFr_UL : action ==>refFr_UL : [if(block_available_upleft=true)then
      	                                      refFrArr[Pic_Block_Y-1][Pic_Block_X-1]
      	                                   else
      	                                      -1
      	                                   end    	
                                           ]  
      end
      
      Get_tmp_Mv_L_X : action ==>tmp_Mv_L_X : [if(block_available_left=true)then
      	                                          tmp_mv[Pic_Block_X-1][Pic_Block_Y][0]
      	                                       else
      	                                          0
      	                                       end
                                               ]     
      end
      
      Get_tmp_Mv_U_X : action ==>tmp_Mv_U_X : [if(block_available_up=true)then
      	                                          tmp_mv[Pic_Block_X][Pic_Block_Y-1][0]
      	                                       else
      	                                          0
      	                                       end
                                               ]
      
      end
      
      Get_tmp_Mv_UL_X : action ==>tmp_Mv_UL_X : [if(block_available_upleft=true)then
      	                                            tmp_mv[Pic_Block_X-1][Pic_Block_Y-1][0]
      	                                         else
      	                                            0
      	                                         end
                                                 ]
      do
         if(block_available_upleft=true)then
      	    mv_d:=tmp_mv[Pic_Block_X-1][Pic_Block_Y-1][0];
      	 else
      	    mv_d:=0;
      	 end
      end
      
      Get_tmp_Mv_UR_X : action ==>tmp_Mv_UR_X : [if(block_available_upright=true)then
      	                                            tmp_mv[Pic_Block_X+Blockshape_X/8][Pic_Block_Y-1][0]
      	                                         else
      	                                            mv_d
      	                                         end
                                                ]
      end
      
      Get_tmp_Mv_L_Y : action ==>tmp_Mv_L_Y : [if(block_available_left=true)then
      	                                         tmp_mv[Pic_Block_X-1][Pic_Block_Y][1]
      	                                       else
      	                                         0
      	                                       end
                                               ]
      
      end
      
      Get_tmp_Mv_U_Y : action ==>tmp_Mv_U_Y : [if(block_available_up=true)then
      	                                          tmp_mv[Pic_Block_X][Pic_Block_Y-1][1]
      	                                       else
      	                                          0
      	                                       end
                                               ]
      
      end
      
      Get_tmp_Mv_UL_Y : action ==>tmp_Mv_UL_Y : [if(block_available_upleft=true)then
      	                                            tmp_mv[Pic_Block_X-1][Pic_Block_Y-1][1]
      	                                         else
      	                                            0
      	                                         end
                                                 ]
      do
         if(block_available_upleft=true)then
      	     mv_d:=tmp_mv[Pic_Block_X-1][Pic_Block_Y-1][1];
      	 else
      	     mv_d:=0;
      	 end
      end
      
      Get_tmp_Mv_UR_Y : action ==>tmp_Mv_UR_Y : [if(block_available_upright=true)then
      	                                            tmp_mv[Pic_Block_X+Blockshape_X/8][Pic_Block_Y-1][1]
      	                                         else
      	                                            mv_d
      	                                         end
                                                ]
      end
      
      Send_Block_X: action ==>block_X:[Block_X]
      do
         
      end
      
      Send_Block_Y: action ==>block_Y:[Block_Y]
      do
      
      end
      
      get_Mv_16x16 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=16,
         Blockshape_Y=16
      do
         tmp_mv[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         tmp_mv[Pic_Block_X+1][Pic_Block_Y]:=[mv_X,mv_Y];
         tmp_mv[Pic_Block_X][Pic_Block_Y+1]:=[mv_X,mv_Y];
         tmp_mv[Pic_Block_X+1][Pic_Block_Y+1]:=[mv_X,mv_Y];
      end
      
      get_Mv_16x8 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=16,
         Blockshape_Y=8
      do
         tmp_mv[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         tmp_mv[Pic_Block_X+1][Pic_Block_Y]:=[mv_X,mv_Y];
      end
      
      get_Mv_8x16 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=8,
         Blockshape_Y=16
      do
         tmp_mv[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         tmp_mv[Pic_Block_X][Pic_Block_Y+1]:=[mv_X,mv_Y];
      end
      
      get_Mv_8x8 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=8,
         Blockshape_Y=8
      do
         tmp_mv[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
      end
      
      
      
      Get_count : action ==>pic_end:[Pic_End]
      guard
          count+(Blockshape_Y>>3)*(Blockshape_X>>3)<4
      do
         count:=count+(Blockshape_Y>>3)*(Blockshape_X>>3);
         Block_X:=1-(Block_X+Blockshape_X>>3)/2;
         if(Blockshape_X=8 and Blockshape_Y=8)then
              Block_Y:=count/2;
         else
              if(Blockshape_X=16 and Blockshape_Y=8)then
                 Block_Y:=1;
              else
                 Block_Y:=0;
              end
         end
         Pic_End:=false;  
      end
 
      Macro_End : action ==>pic_end:[Pic_End]
      guard
          Img_Current_mb_nr<MB_WIDTH*MB_HEIGHT-1,
          count+(Blockshape_Y>>3)*(Blockshape_X>>3)>3
      do
          Pic_End:=false; 
      end
      
      Picture_End : action ==>pic_end:[Pic_End]
      guard 
         Img_Current_mb_nr>=MB_WIDTH*MB_HEIGHT-1,
         count+(Blockshape_Y>>3)*(Blockshape_X>>3)>3
      do
         Pic_End:=true;
      end
      
      
      /* 
       * 
      Get_RefFrArr_1 : action ==>RefFrArr_1 : [refFrArr[Img_Block_Y][Img_Block_X]]
    
      end
      
      Get_RefFrArr_2 : action ==>RefFrArr_2 : [refFrArr[Img_Block_Y][Img_Block_X+1]]
      
      end
      
      Get_RefFrArr_3 : action ==>RefFrArr_3 : [refFrArr[Img_Block_Y+1][Img_Block_X]]
      
      end
      
      Get_RefFrArr_4 : action ==>RefFrArr_4 : [refFrArr[Img_Block_Y+1][Img_Block_X+1]]
      
      end
      
      Get_Img_Mv_X_1 : action ==>Img_Mv_X_1 : [img_mv[Img_Block_X+4][Img_Block_Y][0]]
      
      end
      
      Get_Img_Mv_X_2 : action ==>Img_Mv_X_2 : [img_mv[Img_Block_X+4+1][Img_Block_Y][0]]
      
      end
      
      Get_Img_Mv_X_3 : action ==>Img_Mv_X_3 : [img_mv[Img_Block_X+4][Img_Block_Y+1][0]]
      
      end
      
      Get_Img_Mv_X_4 : action ==>Img_Mv_X_4 : [img_mv[Img_Block_X+4+1][Img_Block_Y+1][0]]
      
      end
      
      Get_Img_Mv_Y_1 : action ==>Img_Mv_X_1 : [img_mv[Img_Block_X+4][Img_Block_Y][1]]
      
      end
      
      Get_Img_Mv_Y_2 : action ==>Img_Mv_X_2 : [img_mv[Img_Block_X+4+1][Img_Block_Y][0]]
      
      end
      
      Get_Img_Mv_Y_3 : action ==>Img_Mv_X_3 : [img_mv[Img_Block_X+4][Img_Block_Y+1][1]]
      
      end
      
      Get_Img_Mv_Y_4 : action ==>Img_Mv_X_4 : [img_mv[Img_Block_X+4+1][Img_Block_Y+1][1]]
      
      end
      *
      */
      
      schedule fsm Get_Img_Type :
          //Picture
          Get_Img_Type(Get_Img_Type)-->Is_I_Picture;
          Is_I_Picture(I_Picture)-->Get_Img_Type;
          Is_I_Picture(Not_I_Picture)-->Get_Img_Width;
          Get_Img_Width(Get_Img_Width)-->Get_Img_Height;
          Get_Img_Height(Get_Img_Height)-->Get_Mb_Width;
          Get_Mb_Width  (Get_Mb_Width) -->Get_Mb_Height;
          Get_Mb_Height (Get_Mb_Height)-->Get_Img_Mb_X;
          //Macroblock
          Get_Img_Mb_X(Get_Img_Mb_X)-->Get_Img_Mb_Y;
          Get_Img_Mb_Y(Get_Img_Mb_Y)-->Is_I8MB;
          
          //Is_Skip(P_Skip)-->Get_mb_available_up_skip;
          //Is_Skip(Not_P_Skip)-->Is_I8MB;
          
          Is_I8MB (IntraMb)-->Get_Img_Mb_X;
          Is_I8MB (Set_Count)-->Get_Img_Block_X;
          Get_Img_Block_X(Get_Img_Block_X)-->Get_Img_Block_Y;
          Get_Img_Block_Y(Get_Img_Block_Y)-->Get_Blockshape_X;
          Get_Blockshape_X(Get_Blockshape_X)-->Get_Blockshape_Y;
          Get_Blockshape_Y(Get_Blockshape_Y)-->Get_Img_Current_mb_nr;
          Get_Img_Current_mb_nr(Get_Img_Current_mb_nr)-->Get_Mb_X;
          //Block
          /*Get_mb_available_up_skip(Get_mb_available_up_skip)-->Get_mb_available_left_skip;
          Get_mb_available_left_skip(Get_mb_available_left_skip)-->Get_refFr_U_Skip;
          Get_refFr_U_Skip(Get_refFr_U_Skip)-->Get_refFr_L_Skip;
          Get_refFr_L_Skip(Get_refFr_L_Skip)-->Get_tmp_Mv_U_X_Skip;
          Get_tmp_Mv_U_X_Skip(Get_tmp_Mv_U_X_Skip)-->Get_tmp_Mv_U_Y_Skip;
          Get_tmp_Mv_U_Y_Skip(Get_tmp_Mv_U_Y_Skip)-->Get_tmp_Mv_L_X_Skip;
          Get_tmp_Mv_L_X_Skip(Get_tmp_Mv_L_X_Skip)-->Get_tmp_Mv_L_Y_Skip; 
          Get_tmp_Mv_L_Y_Skip(Get_tmp_Mv_L_Y_Skip)--> */              
          Get_Mb_X (Get_Mb_X) -->Get_Mb_Y;
          Get_Mb_Y (Get_Mb_Y) -->Get_Pic_Block_X;
          Get_Pic_Block_X (Get_Pic_Block_X) -->Get_Pic_Block_Y;
          Get_Pic_Block_Y (Get_Pic_Block_Y) -->Get_refFr;
          
          Get_refFr (get_refFr_16x16) -->Get_mb_available_up;
          Get_refFr (get_refFr_16x8) -->Get_mb_available_up;
          Get_refFr (get_refFr_8x16) -->Get_mb_available_up;
          Get_refFr (get_refFr_8x8) -->Get_mb_available_up;
          
          Get_mb_available_up (Get_mb_available_up) -->Get_mb_available_left;
          Get_mb_available_left (Get_mb_available_left) -->Get_mb_available_upleft;
          Get_mb_available_upleft (Get_mb_available_upleft) -->Get_mb_available_upright;
          Get_mb_available_upright (Get_mb_available_upright) -->Get_block_available_up;
          Get_block_available_up (Get_block_available_up) -->Get_block_available_left;
          Get_block_available_left (Get_block_available_left) -->Get_block_available_upleft;
          Get_block_available_upleft (Get_block_available_upleft) -->Get_block_available_upright;
          Get_block_available_upright (Get_block_available_upright) -->Get_refFr_L;
          Get_refFr_L (Get_refFr_L) -->Get_refFr_U;
          Get_refFr_U (Get_refFr_U) -->Get_refFr_UR;
          Get_refFr_UR (Get_refFr_UR) -->Get_refFr_UL;
          Get_refFr_UL (Get_refFr_UL) -->Get_tmp_Mv_L_X;
          Get_tmp_Mv_L_X (Get_tmp_Mv_L_X) -->Get_tmp_Mv_U_X;
          Get_tmp_Mv_U_X (Get_tmp_Mv_U_X) -->Get_tmp_Mv_UL_X;
          Get_tmp_Mv_UL_X (Get_tmp_Mv_UL_X) -->Get_tmp_Mv_UR_X;
          Get_tmp_Mv_UR_X (Get_tmp_Mv_UR_X) -->Get_tmp_Mv_L_Y;
          Get_tmp_Mv_L_Y (Get_tmp_Mv_L_Y) -->Get_tmp_Mv_U_Y;
          Get_tmp_Mv_U_Y (Get_tmp_Mv_U_Y) -->Get_tmp_Mv_UL_Y;
          Get_tmp_Mv_UL_Y (Get_tmp_Mv_UL_Y) -->Get_tmp_Mv_UR_Y;
          Get_tmp_Mv_UR_Y (Get_tmp_Mv_UR_Y) -->Send_Block_X;
          Send_Block_X (Send_Block_X) -->Send_Block_Y;
          Send_Block_Y (Send_Block_Y) -->Get_Mv;
          
          Get_Mv (get_Mv_16x16) -->Get_count;
          Get_Mv (get_Mv_16x8) -->Get_count;
          Get_Mv (get_Mv_8x16) -->Get_count;
          Get_Mv (get_Mv_8x8) -->Get_count;
          
          Get_count (Get_count) -->Get_Mb_X;
          Get_count (Macro_End) -->Get_Img_Mb_X;
          
          Get_count(Picture_End) -->Get_Img_Width;
          
          /* 
           * 
          Get_RefFrArr_1 (Get_RefFrArr_1) -->Get_RefFrArr_2;
          Get_RefFrArr_2 (Get_RefFrArr_2) -->Get_RefFrArr_3;
          Get_RefFrArr_3 (Get_RefFrArr_3) -->Get_RefFrArr_4;
          Get_RefFrArr_4 (Get_RefFrArr_4) -->Get_Img_Mv_X_1;
          Get_Img_Mv_X_1 (Get_Img_Mv_X_1) -->Get_Img_Mv_X_2;
          Get_Img_Mv_X_2 (Get_Img_Mv_X_2) -->Get_Img_Mv_X_3;
          Get_Img_Mv_X_3 (Get_Img_Mv_X_3) -->Get_Img_Mv_X_4;
          Get_Img_Mv_X_4 (Get_Img_Mv_X_4) -->Get_Img_Mv_Y_1;
          Get_Img_Mv_Y_1 (Get_Img_Mv_Y_1) -->Get_Img_Mv_Y_2;
          Get_Img_Mv_Y_2 (Get_Img_Mv_Y_2) -->Get_Img_Mv_Y_3;
          Get_Img_Mv_Y_3 (Get_Img_Mv_Y_3) -->Get_Img_Mv_Y_4;
          Get_Img_Mv_Y_4 (Get_Img_Mv_Y_4) -->Get_Mb_Width;
          * 
          */
      end
end