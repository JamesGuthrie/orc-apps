/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.P.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.P;

actor Algo_B_Skip_AVSJZ()
      int (size=32) Current_mb_Data_slice_nr,
      int (size=32) Img_Block_Y,
      
      int (size=32) RefFrArr_1,
      int (size=32) RefFrArr_2,
      int (size=32) RefFrArr_3,
      int (size=32) RefFrArr_4,
      /*int (size=32) F_RefFrArr_1,
      int (size=32) F_RefFrArr_2,
      int (size=32) F_RefFrArr_3,
      int (size=32) F_RefFrArr_4,
      int (size=32) B_RefFrArr_1,
      int (size=32) B_RefFrArr_2,
      int (size=32) B_RefFrArr_3,
      int (size=32) B_RefFrArr_4,*/
      int (size=32) Img_Mv_X_1,
      int (size=32) Img_Mv_X_2,
      int (size=32) Img_Mv_X_3,
      int (size=32) Img_Mv_X_4,
      int (size=32) Img_Mv_Y_1,
      int (size=32) Img_Mv_Y_2,
      int (size=32) Img_Mv_Y_3,
      int (size=32) Img_Mv_Y_4,
      int (size=32) Img_Imgtr_Next_P,
      int (size=32) Img_Pic_Distance,
      int (size=32) Img_Imgtr_Last_P,
      int (size=32) Img_Picture_Structure,
      int (size=32) Img_Current_Mb_Nr_Fld,
      int (size=32) Img_PicSizeInMbs
      ==>
      int (size=32) F_RefFrArr,
      int (size=32) B_RefFrArr,
      int (size=32) F_Mv_X,
      int (size=32) F_Mv_Y,
      int (size=32) B_Mv_X,
      int (size=32) B_Mv_Y,
      int (size=32) RefFrame,
      int (size=32) Block_X,
      int (size=32) Block_Y,
      int (size=32) BlockShape_X,
      int (size=32) BlockShape_Y,
      int (size=32) Ref,
      int (size=32) Direct_Mv
      :
      int (size=32) step_h0;
      int (size=32) step_v0;
      int (size=32) ref;
      int (size=32) img_block_y; 
      int (size=32) f_RefFrArr;
      int (size=32) b_RefFrArr;
      int (size=32) f_Mv_X;
      int (size=32) f_Mv_Y;
      int (size=32) b_Mv_X;
      int (size=32) b_Mv_Y;
      int (size=32) refFrame;
      int (size=32) block_X;
      int (size=32) block_Y;
      int (size=32) blockShape_X;
      int (size=32) blockShape_Y;
      int (size=32) refer;
      int (size=32) direct_Mv;
      int (size=32) frame_no_next_P;
      int (size=32) frame_no_B;
      int (size=32) delta_P;
      int (size=32) scale_refframe;
      int (size=32) iTRp;
      int (size=32) iTRp1;
      int (size=32) bw_ref;
      int (size=32) iTRd;
      int (size=32) iTRb;
      int (size=32) img_mv_X;
      int (size=32) img_mv_Y;
      int (size=32) refFrArr_num:=1;
      List (type:int(size=32),size=16) Block_Step=
      [
        0,0,2,2,2,1,1,2,1,1,2,1,1,2,1,1
      ];
      
      Get_Step_h0_And_Step_v0: action ==>
      do
        /*if(mb_Type=8)then
           step_h0:=Block_Step[8];
           step_v0:=Block_Step[9];
        else
           step_h0:=Block_Step[mb_Type*2];
           step_v0:=Block_Step[mb_Type*2+1];
        end*/
         step_h0:=Block_Step[0];
         step_v0:=Block_Step[1];
      end
      
      Get_Ref_1:action RefFrArr_1:[refFrArr_1]==>
      guard refFrArr_num=1
      do 
         ref:=refFrArr_1;
      end
      
      Get_Ref_2:action RefFrArr_2:[refFrArr_2]==>
      guard refFrArr_num=2
      do 
         ref:=refFrArr_2;
      end
      
      Get_Ref_3:action RefFrArr_3:[refFrArr_3]==>
      guard refFrArr_num=3
      do 
         ref:=refFrArr_3;
      end
      
      Get_Ref_4:action RefFrArr_4:[refFrArr_4]==>
      guard refFrArr_num=4
      do 
         ref:=refFrArr_4;
      end
      
      Get_Img_Block_Y:action Current_mb_Data_slice_nr:[current_mb_Data_slice_nr],Img_Block_Y:[img_Block_Y]==>
      do
        if(current_mb_Data_slice_nr/2*2+1=current_mb_Data_slice_nr)then
           img_block_y:=(img_Block_Y-4)/2;
        else
           img_block_y:=img_Block_Y/2;
        end
      end
      
      Ref_Unavailable:action ==>F_RefFrArr:[f_RefFrArr],B_RefFrArr:[b_RefFrArr],F_Mv_X:[f_Mv_X],F_Mv_Y:[f_Mv_Y],B_Mv_X:[b_Mv_X],B_Mv_Y:[b_Mv_Y]
      guard ref=-1
      do
         f_RefFrArr:=0;
         b_RefFrArr:=0;
         f_Mv_X:=0;
         f_Mv_Y:=0;
         b_Mv_X:=0;
         b_Mv_Y:=0;
      end
      
      Get_Fw_Mvp:action ==>RefFrame:[refFrame],Block_X:[block_X],Block_Y:[block_Y],BlockShape_X:[blockShape_X],BlockShape_Y:[blockShape_Y],Ref:[refer],Direct_Mv:[direct_Mv]
      do
         refFrame:=0;
         block_X:=0;
         block_Y:=0;
         blockShape_X:=0;
         blockShape_Y:=0;
         refer:=0;
         direct_Mv:=1;
      end
      
      Get_Bw_Mvp:action ==>RefFrame:[refFrame],Block_X:[block_X],Block_Y:[block_Y],BlockShape_X:[blockShape_X],BlockShape_Y:[blockShape_Y],Ref:[refer],Direct_Mv:[direct_Mv]
      do
         refFrame:=0;
         block_X:=0;
         block_Y:=0;
         blockShape_X:=0;
         blockShape_Y:=0;
         refer:=-1;
         direct_Mv:=1;
         
         refFrArr_num:=refFrArr_num+1;
      end
      
      Ref_Available:action Img_Imgtr_Next_P:[img_Imgtr_Next_P],Img_Pic_Distance:[img_Pic_Distance],Img_Imgtr_Last_P:[img_Imgtr_Last_P],Img_Picture_Structure:[img_Picture_Structure],Img_Current_Mb_Nr_Fld:[img_Current_Mb_Nr_Fld],Img_PicSizeInMbs:[img_PicSizeInMbs]
                           ==>F_RefFrArr:[f_RefFrArr],B_RefFrArr:[b_RefFrArr]
      guard ref!=-1
      do
         frame_no_next_P:=2*img_Imgtr_Next_P;
         frame_no_B:=2*img_Pic_Distance;
         delta_P:=2*(img_Imgtr_Next_P-img_Imgtr_Last_P);
         delta_P:=delta_P-(delta_P+512)/512*512+512;
         if(img_Picture_Structure=0)then
            if(img_Current_Mb_Nr_Fld<img_PicSizeInMbs)then
               if(ref=0)then
                 scale_refframe:=0;
               else
                 scale_refframe:=1;
               end
            else
               if(ref=1)then
                 scale_refframe:=1;
               else
                 scale_refframe:=2;
               end
            end
         else
            scale_refframe:=0;
         end
         
         if(img_Picture_Structure=1)then
            iTRp := (ref+1)*delta_P;
            iTRp1:= (scale_refframe+1)*delta_P;
         else
            if(img_Current_Mb_Nr_Fld<img_PicSizeInMbs)then
               iTRp := delta_P*(ref/2+1)-(ref-(ref+1)/2*2+1);
               iTRp1:= delta_P*(scale_refframe/2+1)-(scale_refframe-(scale_refframe+1)/2*2+1);
               bw_ref:=0;
            else
               iTRp := 1 + delta_P*((ref+1)/2)-(ref-ref/2*2);
               iTRp1:= 1 + delta_P*((scale_refframe+1)/2)-(scale_refframe-scale_refframe/2*2);
               bw_ref:=1;
            end
         end
         
         iTRd := frame_no_next_P - frame_no_B;
         iTRb := iTRp1 - iTRd;
         
         iTRp := iTRp  + 512-(iTRp  + 512)/512*512;
		 iTRp1:= iTRp  + 512-(iTRp1 + 512)/512*512;
		 iTRd := iTRp  + 512-(iTRd  + 512)/512*512;
		 iTRb := iTRp  + 512-(iTRb  + 512)/512*512;
		 
		 if(img_Picture_Structure=0)then
		    if(img_Current_Mb_Nr_Fld>=img_PicSizeInMbs)then
		       scale_refframe:=scale_refframe-1;
		       f_RefFrArr:=scale_refframe;
		       b_RefFrArr:=bw_ref;
		    else   
		       
		    end
		 else
		       f_RefFrArr:=0;
		       b_RefFrArr:=0;
		 end
      end
      
      Get_Img_Mv_1:action Img_Mv_X_1:[img_Mv_X_1],Img_Mv_Y_1:[img_Mv_Y_1]==>
      guard refFrArr_num=1
      do
         img_mv_X:=img_Mv_X_1;
         img_mv_Y:=img_Mv_Y_1;
      end
      
      Get_Img_Mv_2:action Img_Mv_X_2:[img_Mv_X_2],Img_Mv_Y_2:[img_Mv_Y_2]==>
      guard refFrArr_num=2
      do
         img_mv_X:=img_Mv_X_2;
         img_mv_Y:=img_Mv_Y_2;
      end
      
      Get_Img_Mv_3:action Img_Mv_X_3:[img_Mv_X_3],Img_Mv_Y_1:[img_Mv_Y_3]==>
      guard refFrArr_num=3
      do
         img_mv_X:=img_Mv_X_3;
         img_mv_Y:=img_Mv_Y_3;
      end
      
      Get_Img_Mv_4:action Img_Mv_X_4:[img_Mv_X_4],Img_Mv_Y_4:[img_Mv_Y_4]==>
      guard refFrArr_num=4
      do
         img_mv_X:=img_Mv_X_4;
         img_mv_Y:=img_Mv_Y_4;
      end
      
      Get_Img_Fw_Mv_X:action ==>F_Mv_X:[f_Mv_X],F_Mv_Y:[f_Mv_Y],B_Mv_X:[b_Mv_X],B_Mv_Y:[b_Mv_Y]
      do
        if(img_mv_X<0)then
           f_Mv_X:=-(((16384/iTRp)*(1-iTRb*img_mv_X)-1)>>14);
           b_Mv_X:=((16384/iTRp)*(1-iTRd*img_mv_X)-1)>>14;
        else
           f_Mv_X:=((16384/iTRp)*(1+iTRb*img_mv_X)-1)>>14;
           b_Mv_X:=-(((16384/iTRp)*(1+iTRd*img_mv_X)-1)>>14);
        end
      end
      
      Get_Img_Fw_Mv_Y:action ==>F_Mv_X:[f_Mv_X],F_Mv_Y:[f_Mv_Y],B_Mv_X:[b_Mv_X],B_Mv_Y:[b_Mv_Y]
      do
        if(img_mv_Y<0)then
           f_Mv_X:=-(((16384/iTRp)*(1-iTRb*img_mv_Y)-1)>>14);
           b_Mv_X:=((16384/iTRp)*(1-iTRd*img_mv_Y)-1)>>14;
        else
           f_Mv_X:=((16384/iTRp)*(1+iTRb*img_mv_Y)-1)>>14;
           b_Mv_X:=-(((16384/iTRp)*(1+iTRd*img_mv_Y)-1)>>14);
        end
        
        refFrArr_num:=refFrArr_num+1;
      end
      
      schedule fsm Get_Ref:
      
        Get_Ref (Get_Ref_1) --> Get_Img_Block_Y;
        Get_Ref (Get_Ref_2) --> Get_Img_Block_Y;
        Get_Ref (Get_Ref_3) --> Get_Img_Block_Y;
        Get_Ref (Get_Ref_4) --> Get_Img_Block_Y;
        
        Get_Img_Block_Y (Get_Img_Block_Y) --> Is_Ref_Unavailable;
        
        Is_Ref_Unavailable (Ref_Unavailable) --> Get_Fw_Mvp;
        Is_Ref_Unavailable (Ref_Available) --> Get_Img_Mv;
        
        Get_Fw_Mvp (Get_Fw_Mvp) --> Get_Bw_Mvp;
        Get_Bw_Mvp (Get_Bw_Mvp) --> Get_Ref;
        
        Get_Img_Mv (Get_Img_Mv_1) --> Get_Img_Fw_Mv_X;
        Get_Img_Mv (Get_Img_Mv_2) --> Get_Img_Fw_Mv_X;
        Get_Img_Mv (Get_Img_Mv_3) --> Get_Img_Fw_Mv_X;
        Get_Img_Mv (Get_Img_Mv_4) --> Get_Img_Fw_Mv_X;
        
        Get_Img_Fw_Mv_X (Get_Img_Fw_Mv_X) --> Get_Img_Fw_Mv_Y;
        Get_Img_Fw_Mv_Y (Get_Img_Fw_Mv_Y) --> Get_Ref;
        
      end
      
      priority
         Get_Ref_1>Get_Ref_2;
         Get_Ref_2>Get_Ref_3;
         Get_Ref_3>Get_Ref_4;
         
         Ref_Unavailable>Ref_Available;
         
         Get_Img_Mv_1>Get_Img_Mv_2;
         Get_Img_Mv_2>Get_Img_Mv_3;
         Get_Img_Mv_3>Get_Img_Mv_4;
      end
end