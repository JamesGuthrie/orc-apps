/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.P.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.P;

actor Algo_Reconstruct_AVSJZ()
      int (size=32) Block8_8,
      int (size=32) Curr_blk,
      int (size=32) Img_mpr,
      int (size=32) Img_pic_X,
      int (size=32) Img_pic_Y
      ==>
      int (size=32) Img_m7,
      int (size=32) Img_Y,
      int (size=32) Img_UV
      :
      int (size=32) xx:=0;
      int (size=32) yy:=0;
      int (size=32) b8_x;
      int (size=32) b8_y;
      int (size=32) curr_val;
      int (size=32) img_m7;
      int (size=32) img_Y;
      int (size=32) img_UV;
      
      function clamp(int a,int b,int c) -->int:
         if(a<b)then
            b
         else
            if(a>c)then
               c
            else
               a
            end
         end
      end
      
      Get_b8_x: action Block8_8:[block8_8] ==>
      do
          b8_x:=(block8_8-block8_8/2*2)<<3;
      end
      
      Get_b8_y: action Block8_8:[block8_8] ==>
      do
          b8_y:=(block8_8/2)<<3;
      end
      
      Get_curr_val: action Block8_8:[block8_8],Img_mpr:[img_mpr] repeat 256,Curr_blk:[curr_blk] repeat 64==>Img_m7:[img_m7],Img_Y:[img_Y],Img_UV:[img_UV]
      guard
         xx<8,
         yy<8 
      do
         if(block8_8<=3)then
            curr_val:=img_mpr[(b8_x+xx)*16+b8_y+yy]+curr_blk[yy*8+xx];
         else
            curr_val:=img_mpr[xx*16+yy]+curr_blk[yy*8+xx];
         end
         
         img_m7:=clamp(curr_val,0,255);
         curr_blk[yy*8+xx]:=clamp(curr_val,0,255);
         
         if(block8_8<=3)then
            img_Y:=curr_blk[yy*8+xx];
         else
            img_UV:=curr_blk[yy*8+xx];
         end
         
         xx:=xx+1;
         yy:=yy+1;
      end
         
      schedule fsm Get_b8_x:
         Get_b8_x  (Get_b8_x) --> Get_b8_y;
         Get_b8_y  (Get_b8_y) --> Get_curr_val;
         Get_curr_val (Get_curr_val) --> Get_b8_x;
      end
      end