package avs.P;

actor Mgnt_Interp_FBAddr_Luma_MxN ()
		int (size=9)  Coef_ACR_i,
		int(size=32) CurrMbAddr,
		int(size=32) PicSizeInMb,
		int(size=32) PartSZ
		==>
		int (size=32)  Coef_ACR_o
	:
  int count:=0;
  int currMB                := 0;
  int pic_size              := 0;
  
  //Mb_Type_OK : Enable the prediction 
  Mb_Type_OK :action PicSizeInMb:[ c ], CurrMbAddr:[valCurrMbAddr],  Coef_ACR_i:[coef] repeat 16 * 16 ==> Coef_ACR_o:[coef] repeat 16 * 16 
  do 
  	currMB:=valCurrMbAddr;
  	pic_size:=c;
  end
  
  get_pos: action PartSZ:[ width, height ] ==>
  do
    count := if width=16 and height=16 then
       count+(width >> 2)*(height >> 2)
    else 
    if height = 16 and width = 8 then //mode16x8
   	  count+(width >> 2)*(height >> 2) 
    else 
    if height = 8 and width = 16 then //mode 8x16
      count+(width >> 2)*(height >> 2)
    else 
      count+(width >> 2)*(height >> 2) 
    end 
    end 
    end;  
  end
  
  MB_done: action ==>
  guard
    count = 16
  do
  	count:=0;
  end
  
  MB_Ndone: action ==>
  end

  PIC_done: action ==>
  guard currMB=pic_size-1
  do

  end

  PIC_Ndone: action ==>
  guard currMB<pic_size-1
  end

  schedule fsm get_MB:
    get_pic_done   		( PIC_done       		) --> get_MB;
    get_pic_done   		( PIC_Ndone       		) --> get_MB;
    get_MB      		( Mb_Type_OK        	) --> get_pos;
    get_pos        		( get_pos        		) --> MB_done;
    MB_done      		( MB_done         		) --> get_pic_done;
    MB_done      		( MB_Ndone         		) --> get_pos;
   end

  priority
     MB_done    > MB_Ndone ;
     PIC_done > PIC_Ndone;
  end

end