package avs.P;

actor Algo_DecodeMacroBlockType() 
	int(size=32) MbIndex,
	int(size=32) MbWidth,
	int(size=32) MbHeight,
	
	int(size=32) PictureType,
	int(size=32) Skip_mode_flag,
	int(size=32) Mb_type,
	int(size=32) Mb_part_type,
	int(size=32) PictureStructure
	
		==>
		
	int(size=32) MbPartType,
	int(size=32) MbPartMvNum,
	int(size=32) MbType,
	int(size=32) MvNum
	
		:
		
	int(size=32) mbIndex;
	int(size=32) mbWidth;
	int(size=32) mbHeight;
	int(size=32) pictureType;
	int(size=32) skip_mode_flag;
	int(size=32) mb_type;
	int(size=32) pictureStructure;
	
	int(size=32) mbTypeIndex;
//	int mbType;
//	int mvNum;

	int(size=32) Picture_Type_I = 0;
	int(size=32) Picture_Type_P = 1;
	int(size=32) Picture_Type_B = 2;
	
	int(size=32) I_8x8 = 0;
	
	int(size=32) P_Skip  = 1;
	int(size=32) P_16x16  = 2;
	int(size=32) P_16x8 = 3;
	int(size=32) P_8x16 = 4;
	int(size=32) P_8x8 = 5;
	
	int(size=32) B_Skip = 6;
	int(size=32) B_Direct_16x16 = 7;
	int(size=32) B_Fwd_16x16 = 8;
	int(size=32) B_Bck_16x16 = 9;
	int(size=32) B_Sym_16x16 = 10;
	int(size=32) B_Fwd_Fwd_16x8 = 11;
	int(size=32) B_Fwd_Fwd_8x16 = 12;
	int(size=32) B_Bck_Bck_16x8 = 13;
	int(size=32) B_Bck_Bck_8x16 = 14;
	int(size=32) B_Fwd_Bck_16x8 = 15;
	int(size=32) B_Fwd_Bck_8x16 = 16;
	int(size=32) B_Bck_Fwd_16x8 = 17;
	int(size=32) B_Bck_Fwd_8x16 = 18;
	int(size=32) B_Fwd_Sym_16x8 = 19;
	int(size=32) B_Fwd_Sym_8x16 = 20;
	int(size=32) B_Bck_Sym_16x8 = 21;
	int(size=32) B_Bck_Sym_8x16 = 22;
	int(size=32) B_Sym_Fwd_16x8 = 23;
	int(size=32) B_Sym_Fwd_8x16 = 24;
	int(size=32) B_Sym_Bck_16x8 = 25;
	int(size=32) B_Sym_Bck_8x16 = 26;
	int(size=32) B_Sym_Sym_16x8 = 27;
	int(size=32) B_Sym_Sym_8x16 = 28;
	int(size=32) B_8x8 = 29;
	
	int(size=32) SB_Direct_8x8 = 0;
	int(size=32) SB_Fwd_8x8 = 1;
	int(size=32) SB_Bck_8x8 = 2;
	int(size=32) SB_Sym_8x8 = 3;
	
	List(type:List(type:int(size=32),size=2),size=6) PICTURE_P_TABLE =
		[
			[P_Skip,0],[P_16x16,1],[P_16x8,2],[P_8x16,2],[P_8x8,4],[I_8x8,0]
		];
	
	List(type:List(type:int(size=32),size=2),size=25) PICTURE_B_TABLE =
		[
			[B_Skip,0],
			[B_Direct_16x16,0],[B_Fwd_16x16,1],[B_Bck_16x16,1],[B_Sym_16x16,1],
			[B_Fwd_Fwd_16x8,2],[B_Fwd_Fwd_8x16,2],
			[B_Bck_Bck_16x8,2],[B_Bck_Bck_8x16,2],
			[B_Fwd_Bck_16x8,2],[B_Fwd_Bck_8x16,2],
			[B_Bck_Fwd_16x8,2],[B_Bck_Fwd_8x16,2],
			[B_Fwd_Sym_16x8,2],[B_Fwd_Sym_8x16,2],
			[B_Bck_Sym_16x8,2],[B_Bck_Sym_8x16,2],
			[B_Sym_Fwd_16x8,2],[B_Sym_Fwd_8x16,2],
			[B_Sym_Bck_16x8,2],[B_Sym_Bck_8x16,2],
			[B_Sym_Sym_16x8,2],[B_Sym_Sym_8x16,2],
			[B_8x8,0],[I_8x8,0]
		];
		
	List(type:List(type:int(size=32),size=2),size=4) B_8x8_TABLE =
		[
			[SB_Direct_8x8,0],[SB_Fwd_8x8,1],[SB_Bck_8x8,1],[SB_Sym_8x8,1]
		];

	GetMbInput: action
			MbIndex 		:[mbIndex1],
			MbWidth 		:[mbWidth1],
			MbHeight 		:[mbHeight1],
			PictureType 	:[pictureType1],
			Skip_mode_flag	:[skip_mode_flag1],
			Mb_type			:[mb_type1],
			PictureStructure:[pictureStructure1]
				==>
		do
			mbIndex := mbIndex1;
			mbWidth := mbWidth1;
			mbHeight:= mbHeight1;
			pictureType := pictureType1;
			skip_mode_flag := skip_mode_flag1;
			mb_type := mb_type1;
			pictureStructure := pictureStructure1;
		end
	
	GetMbTypeInfo_I: action
	
				==>
			MbPartType	:[mbPartType]repeat 4,
			MbPartMvNum :[mbPartMvNum]repeat 4,
			MbType		:[mbType],
			MvNum		:[mvNum]
		
		guard
			pictureType = Picture_Type_I
				
		var 
			List(type: int(size=32), size=4) mbPartType, 
			List(type: int(size=32), size=4) mbPartMvNum,
			int(size=32) mbType, 
			int(size=32) mvNum,
			int(size=32) mbTypeIndex_I
				
		do
			mbPartType[0] := -1;
			mbPartType[1] := -1;
			mbPartType[2] := -1;
			mbPartType[3] := -1;
			mbPartMvNum[0] := -1;
			mbPartMvNum[1] := -1;
			mbPartMvNum[2] := -1;
			mbPartMvNum[3] := -1;
			
			if(pictureStructure = 1)then
				mbType := I_8x8;
				mvNum := 0;
			else
				if(mbIndex < mbWidth*mbHeight/2)then
					mbType := I_8x8;
					mvNum := 0;
				else
					if(skip_mode_flag = 1)then
						mbTypeIndex_I := mb_type+1;
					else
						mbTypeIndex_I := mb_type;
					end
					if(mbTypeIndex_I >= 5)then
						mbTypeIndex_I := 5;
					end
					mbType := PICTURE_P_TABLE[mbTypeIndex_I][0];
					mvNum := PICTURE_P_TABLE[mbTypeIndex_I][1];
				end
			end
		end
	
	GetMbTypeIndex_P: action
//			PictureType :[pictureType],
//			Skip_mode_flag	:[skip_mode_flag],
//			Mb_type:[mb_type]
				==>
		
		guard
			pictureType = Picture_Type_P
		
		do
			if(skip_mode_flag = 1)then			//文档 1: 0:编码由mb_type决定
				mbTypeIndex := mb_type+1;
			else
				mbTypeIndex := mb_type;
			end
			if(mbTypeIndex >= 5)then
				mbTypeIndex := 5;
			end
		end

	GetMbTypeIndex_B: action
//			PictureType :[pictureType],
//			Skip_mode_flag	:[skip_mode_flag],
//			Mb_type:[mb_type]
				==>
				
		guard
			pictureType = Picture_Type_B
			
		do
			if(skip_mode_flag = 1)then
				mbTypeIndex := mb_type+1;
			else
				mbTypeIndex := mb_type;
			end
			if(mbTypeIndex >= 24)then
				mbTypeIndex := 24;
			end
		end
	
	GetMbTypeInfo_Not_B_8x8: action
//			PictureType :[pictureType]
				==>
			MbPartType	:[mbPartType]repeat 4,
			MbPartMvNum :[mbPartMvNum]repeat 4,
			MbType		:[mbType],
			MvNum		:[mvNum]
		
		guard
			not(pictureType = Picture_Type_B and mbTypeIndex = 23)
		var 
			List(type: int(size=32), size=4) mbPartType,
			List(type: int(size=32), size=4) mbPartMvNum,
			int(size=32) mbType, 
			int(size=32) mvNum
			
		do
			mbPartType[0] := -1;
			mbPartType[1] := -1;
			mbPartType[2] := -1;
			mbPartType[3] := -1;
			mbPartMvNum[0] := -1;
			mbPartMvNum[1] := -1;
			mbPartMvNum[2] := -1;
			mbPartMvNum[3] := -1;
			
//			if(pictureType = Picture_Type_I)then
//				mbType := I_8x8;
//				mvNum := 0;
//			else
				if(pictureType = Picture_Type_P)then
					mbType := PICTURE_P_TABLE[mbTypeIndex][0];
					mvNum := PICTURE_P_TABLE[mbTypeIndex][1];
				else
					mbType := PICTURE_B_TABLE[mbTypeIndex][0];
					mvNum := PICTURE_B_TABLE[mbTypeIndex][1];
//					if(mbType = B_8x8)then
//						///////////////////////////////////////
//					end
				end
//			end
		end
		
		GetMbTypeInfo_B_8x8: action
			Mb_part_type: [part] repeat 4
				==>
			MbPartType	:[mbPartType]repeat 4,
			MbPartMvNum :[mbPartMvNum]repeat 4,
			MbType		:[mbType],
			MvNum		:[mvNum]
		
		guard
			pictureType = Picture_Type_B and mbTypeIndex = 23
			
		var 
			List(type: int(size=32), size=4) mbPartType,
			List(type: int(size=32), size=4) mbPartMvNum,
			int(size=32) mbType, 
			int(size=32) mvNum
		
		do
			mbPartType[0] := B_8x8_TABLE[part[0]][0];
			mbPartType[1] := B_8x8_TABLE[part[1]][0];
			mbPartType[2] := B_8x8_TABLE[part[2]][0];
			mbPartType[3] := B_8x8_TABLE[part[3]][0];
			mbPartMvNum[0] := B_8x8_TABLE[part[0]][1];
			mbPartMvNum[1] := B_8x8_TABLE[part[1]][1];
			mbPartMvNum[2] := B_8x8_TABLE[part[2]][1];
			mbPartMvNum[3] := B_8x8_TABLE[part[3]][1];
			mbType := B_8x8;
			
			mvNum := 0;
			foreach int i in 0 .. 3
			do
				mvNum := mvNum + B_8x8_TABLE[part[i]][1];
			end
		end
			
		
		schedule fsm init:
			init			(GetMbInput				)--> GetMbTypeIndex;
			GetMbTypeIndex	(GetMbTypeInfo_I		)--> init;
			GetMbTypeIndex	(GetMbTypeIndex_P		)--> GetMbTypeInfo;
			GetMbTypeIndex	(GetMbTypeIndex_B		)--> GetMbTypeInfo;
			GetMbTypeInfo	(GetMbTypeInfo_Not_B_8x8)--> init;
			GetMbTypeInfo	(GetMbTypeInfo_B_8x8	)--> init;
		end
		
		priority
			//GetMbTypeIndex_P > GetMbTypeIndex_B;
			GetMbTypeInfo_I > GetMbTypeIndex_P > GetMbTypeIndex_B;
			GetMbTypeInfo_Not_B_8x8 > GetMbTypeInfo_B_8x8;
		end
end