/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.P.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/

// Author: Dandan Ding (dandan2036@163.com), Honggang Qi(hgqi@jdl.ac.cn), Lu Yu, and Wen Gao

// Algo_Synp_AVSJZ.cal
// Function: This module is Syntax Parsing for AVS Jizhun Profile.
// Note:
// --22.02.2008 10:22:35 : 
// modify BTYPE output
// add output INTRA_INFO(3bit)

package avs.P;
import avs.Constants.*;

actor Algo_Synp_AVSJZ_New(
) 
  bool bits 
  ==> 
  int(size=BTYPE_SZ) BTYPE, 
  int(size=INTRA_INFO_SZ) INTRA_INFO,
  //int(size=SLICE_NO_SZ) SLICE_NO,
  int(size=32) MBTYPE,
  int(size=MVD_SZ) MVD, 
  //int(size=QP_SZ) QP,
  int(size=SAMPLE_COUNT_SZ) RUN, 
  int(size=SAMPLE_SZ) VALUE, 
  int(size=16) WIDTH,
  int(size=16) HEIGHT,
  bool LAST,
  int (size=32) Img_Mb_Y,
  int (size=32) Img_Mb_X,
  int (size=32) Picture_type,
  int (size=32) Picture_distance,
  int (size=32) ref_Index,
  int (size=32) reF,
  int (size=32) image_Type
  :
  
  int QP_SZ = 6;
  int QUANT_MASK = 63;
  int COEFF_CODED = 2;
  int CBP_SZ = 6;
  int MVD_SZ = 32;
  int SAMPLE_COUNT_SZ = 13;
  int SLICE_NO_SZ = 6;
  
  
  int EXTRA_START_LENGTH = 8;
  int QUARTER_START_CODE_LENGTH = 8;
  int START_CODE_LENGTH = 32;
  int SEQUENCE_HEADER_CODE = 176;
  int SEQUENCE_END_CODE = 177;
  int PROFILE_ID_LENGTH =  8;
  int LEVEL_ID_LENGTH = 8;
  /*
  int PROGRESSIVE_SEQUENCE_LENGTH = 1;
  int PROGRESSIVE_SEQUENCE_LENGTH_HOR_SIZE = 15;
  */
  int PROGRESSIVE_SEQUENCE_LENGTH = 1;
  int HORIZONTAL_SIZE_LENGTH = 14;
  int VERTICAL_SIZE_LENGTH = 14;
  
  
  int CHROMA_FORMAT_LENGTH = 2;
  int SAMPLE_PRECISION_LENGTH = 3;
  int ASPECT_RATIO_INFORMATION_LENGTH = 4;
  int FRAME_RATE_CODE_LENGTH = 4;
  int BIT_RATE_LOWER_LENGTH = 18;
  int BIT_RATE_UPPER_LENGTH = 12;
  int LOW_DELAY_LENGTH = 1;
  int BBV_BUFFER_SIZE_LENGTH = 18;
  int BBV_DEALY_LENGTH = 18; // TODO
  int MARKER_LENGTH = 1;
  
  //for extension data
  int EXTENSION_START_CODE = 181;
  int EXTENSION_ID_LENGTH = 4;
  int SEQUENCE_DISPLAY_EXTENSION = 2;
  int COPYRIGHT_EXTENSION = 4;
  int QUARTER_COPYRIGHT_EXTENSION_LENGTH = 21;
  int CAMERA_PARAMETERS_EXTENSION = 11;
  int CAMERA_PARAMETERS_EXTENSION_LENGTH = 31;
  int RESERVED_EXTENSION_DATA_BYPE_LENGTH = 32;
  
  //user_data
  int USER_DATA_START_CODE = 178;
  int USER_DATA_START_CODE_LENGTH_PRE = 24;
  int USER_DATA_START_CODE_LENGTH_TWO_BYTE = 16;
  
  //for I Pic Header
  int I_PICTURE_START_CODE = 179;
  int BBV_DELAY_LENGTH = 16;
  int TIME_CODE_FLAG_LENGTH = 1; 
  int TIME_CODE_LENGTH = 24;
  int PICTURE_DISTANCE_LENGTH = 8;
  int PROGRESSIVE_FRAME_LENGTH = 1;
  int PICTURE_STRUCTURE_LENGTH = 1;
  int TOP_FIELD_FIRST_LENGTH = 1;
  int REPEAT_FIRST_FIELD_LENGTH = 1;
  int FIXED_PICTURE_QP_LENGTH = 1;
  int PICTURE_QP_LENGTH = 6;
  int SKIP_MODE_FLAG_LENGTH = 1;
  int LOOP_FILTER_DISABLE_LENGTH = 1;
  int LOOP_FILTER_PARAMETER_FLAG_LENGTH = 1; 
  
  //for P/B Pic Header
  int PB_PICTURE_START_CODE = 182;
  int PICTURE_CODING_TYPE_LENGTH = 2;
  int PICTURE_REFERENCE_FLAG_LENGTH = 1;
  int ADVANCED_PRED_MODE_DISABLE_LENGTH  =1;
  
  //for Slice Header
  //int SLICE_START_CODE = ;
  int FIXED_SLICE_QP_LENGTH = 1;
  int SLICE_QP_LENGTH = 6;
  int SLICE_WEIGHTING_FLAG_LENGTH = 1;
  
  //for MB Type
  int I8MB = 9;
  int P8MB = 8;
  
  int PicNum := -1;
  
  
  function mask_bits( int v, int n ) --> int  :
    v & ((1 << n) - 1)
  end
  
  int MB_counter:=-1;
  int(size=8) bits_to_read_count := -1;
  int(size=32) read_result_in_progress;
  
  procedure set_bits_to_read( int count )
  begin
    bits_to_read_count := count - 1;
    read_result_in_progress := 0;
  end
  
  function done_reading_bits() --> bool : (bits_to_read_count < 0) end
  function read_result() --> int : read_result_in_progress end
  function Is_Byte_Aligned() --> bool : (bit_count & 7) = 0 end
  
  action bits:[ b ] ==>
  guard 
    not done_reading_bits()
  do
    read_result_in_progress := (read_result_in_progress << 1) | if b then 1 else 0 end;
    bits_to_read_count := bits_to_read_count - 1;
    bit_count := bit_count + 1;
    // println("bits="+b);
    // println("bits_to_read_count="+bits_to_read_count);
  end

  int(size=4) bit_count := 0;
  
  int (size=SLICE_NO_SZ) slice_no;

/*************************************************************
 *************************************************************
 ********              SEQUENCE HEADER                ********
 *************************************************************
 *************************************************************/

  int (size=PROFILE_ID_LENGTH + 1) profile_id;
  int (size=LEVEL_ID_LENGTH + 1) level_id;
  uint (size=PROGRESSIVE_SEQUENCE_LENGTH) progressive_sequence;
  int (size=16) picture_width;
  int (size=16) picture_height;
  int (size=CHROMA_FORMAT_LENGTH + 1) chroma_format;
  int (size=SAMPLE_PRECISION_LENGTH + 1) sample_precision;
  int (size=ASPECT_RATIO_INFORMATION_LENGTH + 1) aspect_ratio_information;
  int (size=FRAME_RATE_CODE_LENGTH + 1) frame_rate_code;
  int (size=BIT_RATE_LOWER_LENGTH + 1) bit_rate_lower;
  int (size=BIT_RATE_UPPER_LENGTH + 1) bit_rate_upper;
  uint (size=LOW_DELAY_LENGTH) low_delay;
  uint (size=MARKER_LENGTH) marker_one_bit;
  int (size=BBV_BUFFER_SIZE_LENGTH) bbv_buffer_size;
  
 /*************************************************************
 ********              I PICTURE HEADER                ********
 *************************************************************/
  
  int (size=BBV_DEALY_LENGTH + 1) bbv_delay;
  uint (size=TIME_CODE_FLAG_LENGTH) time_code_flag;
  int (size=TIME_CODE_LENGTH) time_code;
  int (size=PICTURE_DISTANCE_LENGTH + 1) picture_distance;
  int BBV_check_times;
  uint (size=PROGRESSIVE_FRAME_LENGTH) progressive_frame;
  uint (size=PICTURE_STRUCTURE_LENGTH) picture_structure;
  uint (size=TOP_FIELD_FIRST_LENGTH) top_field_first;
  uint (size=REPEAT_FIRST_FIELD_LENGTH) repeat_first_field;
  uint (size=FIXED_PICTURE_QP_LENGTH) fixed_picture_qp;
  uint (size=PICTURE_QP_LENGTH) picture_qp;
  uint (size=SKIP_MODE_FLAG_LENGTH) skip_mode_flag; 
  //int (size=MARKER_LENGTH) marker_one_bit;
  int (size=LOOP_FILTER_DISABLE_LENGTH + 1) loop_filter_disable; 
  int (size=LOOP_FILTER_PARAMETER_FLAG_LENGTH + 1) loop_filter_parameter_flag;
  int alpha_offset;
  int beta_offset;
  
 /*************************************************************
 ********              P/B PICTURE HEADER              ********
 *************************************************************/
 
 //bbv_delay
  uint(size=PICTURE_CODING_TYPE_LENGTH) picture_coding_type;	
  //picture_distance
  //bbv_check_times
  //progressive_frame
  //picture_structure
  uint(size=ADVANCED_PRED_MODE_DISABLE_LENGTH) advanced_pred_mode_disable;
  //top_field_first
  //repeat_first_field
  //fixed_picture_qp
  //picture_qp
  uint(size=PICTURE_REFERENCE_FLAG_LENGTH) picture_reference_flag;
  //reserved_bits
  //skip_mode_flag
  //loop_filter_disable
  //loop_filter_parameter_flag
  //alpha_c_offset
  //beta_offset
  
  int(size=MB_COORD_SZ) MB_width;
  int(size=MB_COORD_SZ) MB_height;
  int(size=12) MB_NUM;
  int(size=MB_COORD_SZ) mbx;
  int(size=MB_COORD_SZ) mby;  
  
  //level_flag = 1 :level of escape < 0;
  //level_flag = 0 :level of escape > 0;
  int level_flag;
 

  look_for_Sequence_Header: action ==>
  do
    set_bits_to_read( START_CODE_LENGTH );
  end
  
  look_for_Sequence_Header_done: action ==>
  guard
  	done_reading_bits()
  do
    set_bits_to_read( EXTRA_START_LENGTH );
  end

  read_Sequence_Header_Profile_id: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = SEQUENCE_HEADER_CODE
    //read_result() = SEQUENCE_HEADER_CODE
  var
  	 int(size=START_CODE_LENGTH) video_sequence_start_code
  do
    video_sequence_start_code := mask_bits( read_result(), QUARTER_START_CODE_LENGTH );
    set_bits_to_read(PROFILE_ID_LENGTH);
    println("********** AVS Decoder Configuration for RVC **********");
    //println("Video Sequence Start!");
    //println("video_sequence_start_code = "+video_sequence_start_code);
  end

  read_Sequence_Header_Level_id: action ==>
  guard
    done_reading_bits()
  do
    profile_id := mask_bits( read_result(), PROFILE_ID_LENGTH );
    set_bits_to_read( LEVEL_ID_LENGTH);
    println("profile_id = "+profile_id);
  end
  
  read_Sequence_Header_Progress_sequence: action ==>
  guard
    done_reading_bits()
  do
    level_id := mask_bits( read_result(), LEVEL_ID_LENGTH );
    set_bits_to_read(PROGRESSIVE_SEQUENCE_LENGTH);
    println("level_id = "+level_id);
  end
  
  read_Sequence_Header_Width_Height: action ==> 
  guard
    done_reading_bits()
  do
    progressive_sequence := mask_bits( read_result(), PROGRESSIVE_SEQUENCE_LENGTH );
    set_bits_to_read( HORIZONTAL_SIZE_LENGTH + VERTICAL_SIZE_LENGTH );
    println("progressive = "+progressive_sequence);
  end
  
  read_Sequence_Header_Chroma_format: action ==>
  guard
    done_reading_bits()
  do
    picture_height := mask_bits( read_result(), VERTICAL_SIZE_LENGTH );
    MB_height := (picture_height >> 4);
    picture_width := mask_bits( read_result() >> VERTICAL_SIZE_LENGTH, HORIZONTAL_SIZE_LENGTH);
    MB_width := (picture_width >> 4);    
    if MB_width = 11 then
      MB_NUM := 99;
    else if MB_width = 22 then
      MB_NUM := 396;
    else
    	MB_NUM := 1620;
    end
    end
    set_bits_to_read( CHROMA_FORMAT_LENGTH );
    println("MB_width = "+MB_width);
    println("MB_height = "+MB_height);
  end
  
  read_Sequence_Header_Sample_precision: action ==>
  guard
    done_reading_bits()
  do
    chroma_format := mask_bits( read_result(), CHROMA_FORMAT_LENGTH );
    set_bits_to_read( SAMPLE_PRECISION_LENGTH );
    println("chroma_format = "+chroma_format);
  end
  
  read_Sequence_Header_Aspect_ratio_information: action ==>
  guard
    done_reading_bits()
  do
    sample_precision := mask_bits( read_result(), SAMPLE_PRECISION_LENGTH );
    set_bits_to_read( ASPECT_RATIO_INFORMATION_LENGTH );
    println("sample_precision = "+sample_precision);
  end
  
  read_Sequence_Header_Frame_rate_code: action ==>
  guard
    done_reading_bits()
  do
    aspect_ratio_information := mask_bits( read_result(), ASPECT_RATIO_INFORMATION_LENGTH );
    set_bits_to_read( FRAME_RATE_CODE_LENGTH );
    println("aspect_ratio_information = "+aspect_ratio_information);
  end
  
  read_Sequence_Header_Bit_rate_lower_upper: action ==>
  guard
    done_reading_bits()
  do
    frame_rate_code := mask_bits( read_result(), FRAME_RATE_CODE_LENGTH );
    set_bits_to_read( BIT_RATE_LOWER_LENGTH + MARKER_LENGTH + BIT_RATE_UPPER_LENGTH );
    //println("frame_rate_code = "+frame_rate_code);
  end
  
  read_Sequence_Header_Low_delay: action ==>
  guard
    done_reading_bits()
  do
    bit_rate_upper := mask_bits( read_result(), BIT_RATE_UPPER_LENGTH );
    bit_rate_lower := read_result() >> (MARKER_LENGTH + BIT_RATE_UPPER_LENGTH);
    set_bits_to_read( LOW_DELAY_LENGTH + MARKER_LENGTH );
    //println("bit_rate_upper = "+bit_rate_upper);
    //println("bit_rate_lower = "+bit_rate_lower);
  end
  
  read_Sequence_Header_BBV_Buffer_size: action ==>
  guard
    done_reading_bits()
  do
    low_delay := read_result() >> LOW_DELAY_LENGTH;
    set_bits_to_read( BBV_BUFFER_SIZE_LENGTH + 3 );
    //println("low_delay "+low_delay);
  end

/*************************************************************
 *************************************************************
 ********                start Picture                ********
 *************************************************************
 *************************************************************/

  int (size=3) picture_type;
  bool IS_I_pic;

  byte_align: action ==>
  guard
    done_reading_bits()
  var
    int stuff_bits := (8 - (bit_count & 7))
  do
    //set_bits_to_read( 8 - (bit_count & 7) );
    set_bits_to_read( stuff_bits );
    //println("byte_align:bit_count = " + bit_count);
    //println("stuff_bits = " + stuff_bits);
  end
  
  //for extension
  look_for_which_Header: action ==>
  guard
    done_reading_bits()
  do
    //bbv_buffer_size := rshift( read_result(), 3 );
    set_bits_to_read( START_CODE_LENGTH );
    //println("bbv_buffer_size = "+bbv_buffer_size);
    //println("look_for_which_Header");
  end
  
  look_for_Sequence_End: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = SEQUENCE_END_CODE
  //do
    //println("Video Sequence End!");    
  end
  
  look_for_extension_0_header :action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = EXTENSION_START_CODE
  do
    set_bits_to_read( EXTENSION_ID_LENGTH );
    //println("extension_header");
  end   
  
  //sequence_display_extension
  read_sequence_display_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = SEQUENCE_DISPLAY_EXTENSION
  do
    //vieo_format(3)+sample_range(1)
    set_bits_to_read(4);
    //println("sequence_display_extension:read next 4 bits");
  end
  
  read_sequence_display_extension_0: action bits:[b] ==>
  guard
    done_reading_bits(),
    b
  do
    //colour_primaries(8)+transfer_characteristics(8)+matrix_coefficients(8)+31
    set_bits_to_read(60);
    bit_count := bit_count + 1;
    //println("sequence_display_extension_0:read next 55 bits");
  end
  
  read_sequence_display_extension_1: action bits:[b] ==>
  guard
    done_reading_bits(),
    not b
  do
    //colour_primaries(8)+transfer_characteristics(8)+matrix_coefficients(8)
    set_bits_to_read(36);
    bit_count := bit_count + 1;
    //println("read_sequence_display_extension_1:read next 31 bits");
  end
  
  //copyright_extension
  read_copyright_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = COPYRIGHT_EXTENSION
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_1:read next 21 bits");
  end
  
  read_copyright_extension_1: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_1:read next 21 bits");
  end
  
  read_copyright_extension_2: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_2:read next 21 bits");
  end
  
  read_copyright_extension_3: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(QUARTER_COPYRIGHT_EXTENSION_LENGTH);
    //println("copyright_extension_3:read next 21 bits");
  end
  
  //camera_parameters_extension
  read_camera_parameters_extension: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(),EXTENSION_ID_LENGTH) = CAMERA_PARAMETERS_EXTENSION
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("camera_parameters_extension:read next 31 bits");    
  end
  read_camera_parameters_extension_1: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_1:read next 31 bits");    
  end
  read_camera_parameters_extension_2: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_2:read next 31 bits");    
  end
  read_camera_parameters_extension_3: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_3:read next 31 bits");    
  end
  read_camera_parameters_extension_4: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_4:read next 31 bits");    
  end
  read_camera_parameters_extension_5: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_5:read next 31 bits");    
  end
  read_camera_parameters_extension_6: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_6:read next 31 bits");    
  end
  read_camera_parameters_extension_7: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_7:read next 31 bits");    
  end
  read_camera_parameters_extension_8: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_8:read next 31 bits");    
  end
  read_camera_parameters_extension_9: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_9:read next 31 bits");    
  end
  read_camera_parameters_extension_A: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_A:read next 31 bits");    
  end
  read_camera_parameters_extension_B: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(CAMERA_PARAMETERS_EXTENSION_LENGTH);
    //println("read_camera_parameters_extension_B:read next 31 bits");    
  end
  read_camera_parameters_extension_C: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(1);
    //println("read_camera_parameters_extension_C:read next 5 bits");    
  end

  //reserved_extension
  read_reserved_extension: action ==>
  guard
    done_reading_bits()
  do
    set_bits_to_read(RESERVED_EXTENSION_DATA_BYPE_LENGTH);
    //println("reserved_extension:read next 32 bits");
  end
  
  //user_extension
  look_for_user_data_header: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = USER_DATA_START_CODE
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_PRE );
    //println("user_extension");
  end 
  
  read_user_data_0: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), USER_DATA_START_CODE_LENGTH_PRE ) != (1 << 23)
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_PRE);
    //println("read_user_data_0");
  end 

  read_user_data_1: action ==>
  guard
    done_reading_bits(),
    mask_bits( read_result(), USER_DATA_START_CODE_LENGTH_PRE ) = (1 << 23)
  do
    set_bits_to_read( USER_DATA_START_CODE_LENGTH_TWO_BYTE );
    //println("read_user_data_1");
  end 
  
  
  look_for_I_Picture_Header: action ==>WIDTH:[MB_width], HEIGHT:[MB_height], image_Type:[0]
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = I_PICTURE_START_CODE
  do
    mbx := 0;
    mby := 0;
    picture_type := 0;
    IS_I_pic := true;
    set_bits_to_read( BBV_DELAY_LENGTH ); 
    PicNum := PicNum+1;   
    println("Start I Frame!");
  end
  
  look_for_PB_Picture_Header: action ==> WIDTH:[MB_width], HEIGHT:[MB_height]
  guard
    done_reading_bits(),
    mask_bits( read_result(), QUARTER_START_CODE_LENGTH ) = PB_PICTURE_START_CODE
  do
    mbx := 0;
    mby := 0;
    //picture_type := 0;
    IS_I_pic := false;
    set_bits_to_read( BBV_DELAY_LENGTH );    
    println("Start PB Frame!");
    PicNum := PicNum+1;
  end
  //----------------------- I picture -----------------------------------//
  read_Picture_Header_Time_code: action bits:[b] ==>
  guard
    done_reading_bits()
  do
    bbv_delay :=  mask_bits( read_result(), BBV_DELAY_LENGTH );
    //println("bbv_delay = " + bbv_delay);
    //if b then  set_bits_to_read( TIME_CODE_LENGTH ); end
    set_bits_to_read (if b then TIME_CODE_LENGTH else 0 end);
    //time_code_flag
    //println("time code flag = " + b);
    bit_count := bit_count + 1;
  end

  read_Picture_Header_Picture_distance: action ==>
  guard
    done_reading_bits()
  do
    time_code :=  mask_bits( read_result(), TIME_CODE_LENGTH );
    set_bits_to_read( MARKER_LENGTH + PICTURE_DISTANCE_LENGTH );
  end

  read_Picture_Header_BBV_check_times: action ==>
  guard
    done_reading_bits(),
    low_delay = 1
  do
    grad := 0;
    start_vld();
    //println("read_Picture_Header_BBV_check_times");
  end

  read_Picture_Header_BBV_check_times_one: action ==>
  guard
    vld_end()
  do
    //k=0
    BBV_check_times := vld_ue(vld_length() << 1, vld_result());
    println("BBV_check_times = " + BBV_check_times);
  end

  read_Picture_Header_Progressive_frame: action ==>Picture_distance:[picture_distance]
  guard
    done_reading_bits()
  do
    picture_distance := mask_bits( read_result(), PICTURE_DISTANCE_LENGTH );
    println("picture_distance = " + picture_distance);
    set_bits_to_read( PROGRESSIVE_FRAME_LENGTH );
  end
  
  read_Picture_Header_Picture_structure: action ==>
  guard
    done_reading_bits()
  do
    progressive_frame := mask_bits( read_result(), PROGRESSIVE_FRAME_LENGTH );
    println("progressive_frame = " + progressive_frame);
    if progressive_frame = 1 then 
      picture_structure := 1;
    else  
      set_bits_to_read( PICTURE_STRUCTURE_LENGTH );
    end
  end

  read_Picture_Header_Top_field_first: action ==>
  guard
    done_reading_bits()
  do
    if IS_I_pic then
    	if progressive_frame = 0 then picture_structure :=  mask_bits( read_result(), PICTURE_STRUCTURE_LENGTH ); end
    else
        advanced_pred_mode_disable := mask_bits( read_result(), ADVANCED_PRED_MODE_DISABLE_LENGTH ); 
    end
    set_bits_to_read( TOP_FIELD_FIRST_LENGTH );
  end
  
  read_Picture_Header_Repeat_first_field: action ==>
  guard
    done_reading_bits()
  do
    top_field_first :=  mask_bits( read_result(), TOP_FIELD_FIRST_LENGTH );
    //println("top_field_first = " + top_field_first);
    set_bits_to_read( REPEAT_FIRST_FIELD_LENGTH );
  end
  
  read_Picture_Header_Fixed_picture_qp: action ==>
  guard
    done_reading_bits()
  do
    repeat_first_field :=  mask_bits( read_result(), REPEAT_FIRST_FIELD_LENGTH );
    //println("repeat_first_field=" + repeat_first_field);
    set_bits_to_read( FIXED_PICTURE_QP_LENGTH );
  end
  
  read_Picture_Header_Picture_qp: action ==>
  guard
    done_reading_bits()
  do
    fixed_picture_qp :=  mask_bits( read_result(), FIXED_PICTURE_QP_LENGTH );
    println("fixed_picture_qp = " + fixed_picture_qp);
    set_bits_to_read( PICTURE_QP_LENGTH );
  end
  
  read_Picture_Header_Skip_mode_flag: action ==>
  guard
    IS_I_pic,
    done_reading_bits(),
    progressive_frame = 0,
    picture_structure = 0
  do
    set_bits_to_read( SKIP_MODE_FLAG_LENGTH );
    //println("read_Picture_Header_Skip_mode_flag");
  end
  
  read_Picture_Header_Loop_filter_disable: action ==>
  guard
    IS_I_pic,
    done_reading_bits()
  do
    set_bits_to_read( 4 + LOOP_FILTER_DISABLE_LENGTH );
  end

  /*read_Picture_Header_Loop_filter_parameter: action bits:[b] ==>
  guard
    done_reading_bits(),
    not b
  do 
    bit_count := bit_count + 1;
    set_bits_to_read( 4 );  
  end
  */
  /* ---------------------- PB picture ------------------------------------- */
  read_Picture_Coding_Type: action ==>
  guard
      done_reading_bits()
  do
      bbv_delay :=  mask_bits( read_result(), BBV_DELAY_LENGTH );
      set_bits_to_read(PICTURE_CODING_TYPE_LENGTH);//read the picture_type;
  end
  
  read_PB_Picture_Distance: action ==> image_Type:[picture_type]
  guard
     done_reading_bits(),
     not IS_I_pic
  do
     picture_type := mask_bits(read_result(),PICTURE_CODING_TYPE_LENGTH);
     println("the picture_type is "+picture_type);
     set_bits_to_read(PICTURE_DISTANCE_LENGTH);
  end
  
  read_Advanced_Pred_Mode_Disable: action ==>
  guard
     done_reading_bits()
  do
     if not IS_I_pic then
     	if progressive_frame = 0 then 
     	   picture_structure :=  mask_bits( read_result(), PICTURE_STRUCTURE_LENGTH );
     	   if picture_structure = 0 then set_bits_to_read(ADVANCED_PRED_MODE_DISABLE_LENGTH); end
     	end
     end
  end  
  
  //bbv_check_times
  //progressive_frame
  //top_field_first
  //repeat_first_field
  //fixed_picture_qp
  //picture_qp
  
  get_Picture_QP: action ==>
  guard
      done_reading_bits()
  do
      picture_qp := mask_bits(read_result(),PICTURE_QP_LENGTH);
      qp := picture_qp;
  end   
  
  
  read_Picture_Reference_Flag: action ==>
  guard
      done_reading_bits(),
      not IS_I_pic
  do
      if not ((picture_type=2) and ( picture_structure=1)) then set_bits_to_read(PICTURE_REFERENCE_FLAG_LENGTH); end//read the picture_reference_flag;
  end
  
  get_Picture_Reference_Flag: action ==>
  guard
      done_reading_bits()
  do
      if not ((picture_type=2) and ( picture_structure=1)) then
        picture_reference_flag := mask_bits(read_result(),PICTURE_REFERENCE_FLAG_LENGTH);
      end
  end
  
  
  // uint(size=1) no_forward_reference_flag;
  
  read_No_Forward_Reference_Flag: action ==>
  guard
      done_reading_bits(),
      not IS_I_pic
  do
      set_bits_to_read(1);
  end
  
  read_PB_Reserved_Bits: action ==>
  guard
      done_reading_bits()
  do
      set_bits_to_read(3);
  end
  
  read_PB_Skip_Mode_Flag: action ==>
  guard
      done_reading_bits(),
      not IS_I_pic
  do
      set_bits_to_read(SKIP_MODE_FLAG_LENGTH);
  end
  
  read_PB_Loop_filter_Disable: action ==>
  guard
      done_reading_bits(),
      not IS_I_pic
  do
      skip_mode_flag := mask_bits(read_result(),SKIP_MODE_FLAG_LENGTH);
      set_bits_to_read(LOOP_FILTER_DISABLE_LENGTH);
  end
  
  
/*************************************************************
 *************************************************************
 ********                start Slice                  ********
 *************************************************************
 *************************************************************/

  Check_End_Of_Slice0: action bits: [b] repeat 32 ==> 
  guard
    done_reading_bits(),
    Is_Byte_Aligned(),
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
    not b[26],
    not b[27],
    not b[28],
    not b[29],
    not b[30],
        b[31]   
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 32;
  end
  
  Check_End_Of_Slice1: action bits: [b] repeat 25 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 7,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
        b[24]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 25;
  end  

  Check_End_Of_Slice2: action bits: [b] repeat 26 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 6,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
        b[25]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 26;
  end

  Check_End_Of_Slice3: action bits: [b] repeat 27 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 5,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
        b[26]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 27;
  end

  Check_End_Of_Slice4: action bits: [b] repeat 28 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 4,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
    not b[26],
        b[27]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 28;
  end
  
  Check_End_Of_Slice5: action bits: [b] repeat 29 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 3,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
    not b[26],
    not b[27],
        b[28]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 29;
  end  

  Check_End_Of_Slice6: action bits: [b] repeat 30 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 2,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
    not b[26],
    not b[27],
    not b[28],
        b[29]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 30;
  end

  Check_End_Of_Slice7: action bits: [b] repeat 31 ==> 
  guard
    done_reading_bits(),
    (bit_count&7) = 1,
        b[0],
    not b[1],
    not b[2],
    not b[3],
    not b[4],
    not b[5],
    not b[6],
    not b[7],
    not b[8],
    not b[9],
    not b[10],
    not b[11],
    not b[12],
    not b[13],
    not b[14],
    not b[15],
    not b[16],
    not b[17],
    not b[18],
    not b[19],
    not b[20],
    not b[21],
    not b[22],
    not b[23],
    not b[24],
    not b[25],
    not b[26],
    not b[27],
    not b[28],
    not b[29],
        b[30]
  do
    set_bits_to_read( QUARTER_START_CODE_LENGTH );
    bit_count := bit_count + 31;
  end  
  
  look_for_Slice_Header: action ==>
  guard
    done_reading_bits(),
    mby <  MB_height
  do
    set_bits_to_read( START_CODE_LENGTH );
    slice_no := 0;
    //println("look_for_Slice_Header");
  end
  
  look_for_Next_Slice_Header: action ==>
  guard
    done_reading_bits(),
    mby <  MB_height
  do
    slice_no := slice_no + 1;
  end
  
  uint (size=FIXED_SLICE_QP_LENGTH) fixed_slice_qp := 0;
  int (size=SLICE_QP_LENGTH) slice_qp := 0;
  
  Slice_Header_Slice_vertical_position: action ==>
  guard
    done_reading_bits()
  do
    //slice_vertical_position := mask_bits( read_result(), SLICE_VERTICAL_POSITION_LENGTH );
    skip_run := -1;
    //println("slice_vertical_position = "+slice_vertical_position);
  end 
  
  Slice_Header_QP: action ==>
  guard
    done_reading_bits(),
    fixed_picture_qp = 0
  do
    set_bits_to_read( FIXED_SLICE_QP_LENGTH + SLICE_QP_LENGTH );
    //println("Slice_Header_QP");
  end 
  
  Slice_Header_Fixed_slice_qp_and_slice_qp: action ==>
  guard
    done_reading_bits(),
    fixed_picture_qp = 0
  do
    fixed_slice_qp := mask_bits( read_result() >> SLICE_QP_LENGTH, FIXED_SLICE_QP_LENGTH );
    slice_qp := mask_bits( read_result(), SLICE_QP_LENGTH );
    qp := slice_qp;
    set_bits_to_read(if not (picture_type=0) then 1 else 0 end);
    //println("fixed_slice_qp="+fixed_slice_qp);
    //println("slice_qp="+slice_qp);
  end 
  
  read_Slice_Weighting_Flag: action ==>
  guard
    done_reading_bits(),
    not IS_I_pic
  do
    set_bits_to_read(SLICE_WEIGHTING_FLAG_LENGTH);
  end 
  
  
  get_Slice_Weighting_Flag: action ==>
  guard
    done_reading_bits(),
    not IS_I_pic
  do
     //slice_weighting_flag := mask_bits( read_result(), SLICE_WEIGHTING_FLAG_LENGTH);
  end 
  
  
  
  //before start decoding one MB, first send the BTYPE token.  
  int(size=QP_SZ) qp;
  send_new_vop_BTYPE: action ==> BTYPE:[ cmd ]
  guard
    done_reading_bits()
  var
    int(size=BTYPE_SZ) cmd := NEWVOP | if IS_I_pic then INTRA else INTER end
  do
    if fixed_picture_qp = 1 then
      qp := picture_qp;
    else
      qp := slice_qp;
    end

    //println("QP = "+qp);
    //println("BTYPE_new_vop: BTYPE = "+cmd);
    //println("send_new_vop_BTYPE");

    cmd := cmd | (qp & QUANT_MASK);
  end

  send_mb_width_BTYPE: action ==> BTYPE:[MB_width]
  do
    //println("BTYPE_mb_width = "+MB_width);
  end
  
  send_mb_height_BTYPE: action ==> BTYPE:[MB_height]
  do
    //println("BTYPE_mb_height = "+MB_height);
  end
  
  send_Slice_No: action ==> //SLICE_NO:[slice_no]
  end
  
/*************************************************************
 *************************************************************
 ********                  start MB                   ********
 *************************************************************
 *************************************************************/
 
  //int (size=3) Intra_mode_code;
  uint (size=3) b8;
  bool b_last;
  int(size=4) comp;
  
  function abs(int val) --> int( size=8 ) : if val<0 then -val else val end end

  procedure next_mbxy()
  begin
    mbx := mbx + 1;
    if mbx = MB_width then
      mbx := 0;
      mby := mby + 1;
    end
  end

  mb_done: action ==>
  guard
    mby =  MB_height   
    
  do
   //println("I Frame Over!");
  end
  
  mb_dispatch_done: action ==>
  guard
    comp = 6
  do
    next_mbxy();
    //println("mb_dispatch_done: next_mbx = "+mbx+", "+"next_mby = "+mby);
  end

  bool coeff_coded;
  uint (size=CBP_SZ) cbp;
   
  block_done: action ==> BTYPE:[cmd]
  guard
    vld_end(),
    (b_last) or (not coeff_coded),
    comp < 6 
  var
    int(size=BTYPE_SZ) cmd := INTRA
    //bool pre_coeff_coded := (cbp & (1 << comp)) != 0
  do
    //cmd := cmd | if pre_coeff_coded then COEFF_CODED else 0 end;
    //println("BTYPE for comp"+comp+" ="+cmd);
    coeff_coded := (cbp & (1 << comp)) != 0;
    cmd := if MB_Type = I8MB then INTRA else INTER end;
    cmd := cmd | if coeff_coded then COEFF_CODED else 0 end;    	
    comp := comp + 1;
    b_last := false;
    coeff_coded := (cbp & (1 << comp)) != 0;
    //println("block_done: coeff_coded="+coeff_coded+", "+"comp="+comp);    
  end
  
  uint (size=32) MB_Type;
  int  skip_run; 
  
  StartMB: action ==>
  guard
    done_reading_bits()
  do
      b8 := 0;
      if picture_type = 0 then
        MB_Type := I8MB; 
      else if skip_mode_flag=1 then
          if skip_run = -1 then 
            grad := 0;
            start_vld();
          end
        end 
      end
      comp :=0;
      b_last := false;
    //end   qqq
    MB_counter := mbx+mby*MB_width;  
       
    println("start MB ====================================="+MB_counter);
    println("MB_counter = " + MB_counter);
  end
  
  I_Picture : action ==>Picture_type:[picture_type]
  guard
      picture_type=0
  end
  
  get_Skip_Run: action ==> 
  guard
    picture_type != 0,
    skip_mode_flag=1,
    skip_run = -1,
    vld_end()
  do
    skip_run := vld_ue(vld_length() << 1, vld_result());
  end
  
  do_Skip_Run: action ==>Picture_type:[picture_type],MBTYPE: [0], Img_Mb_X:[mbx],Img_Mb_Y:[mby]
  guard
    skip_run > 0
  do
    skip_run := skip_run - 1;
    MB_Type := 0;  
    comp := 6;
    println("do_Skip_Run = " + skip_run);  
  end   
  
  read_MB_Type: action ==>
  guard
    skip_run = 0,
    picture_type != 0
  do
    grad := 0;
    start_vld();
    skip_run := -1;
  end
  //??
  get_MB_Type: action ==> Picture_type:[picture_type],MBTYPE: [MB_Type],Img_Mb_X:[mbx],Img_Mb_Y:[mby]
  guard
    vld_end()
  do
      MB_Type := vld_ue(vld_length() << 1, vld_result());
      if picture_type = 1 then MB_Type := MB_Type + 1; end 
      skip_run := -1;
      println("get_MB_Type = " + MB_Type); 
  end  

  List (type: int (size=4), size=4) Blk8SubType;
  List (type: int (size=2), size=4) Blk8SubDir;
  List (type: int (size=2), size=4) pdir16x16 = [0, 0, 1, 2];
  List (type: List(type: int (size=2), size=2), size=22) pdir16x8 = 
  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,1],[0,0],[0,1],[0,0],[1,0],
  [0,0],[0,2],[0,0],[1,2],[0,0],[2,0],[0,0],[2,1],[0,0],[2,2],[0,0]];
  List (type: List(type: int (size=2), size=2), size=22) pdir8x16 = 
  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,1],[0,0],[0,1],[0,0],
  [1,0],[0,0],[0,2],[0,0],[1,2],[0,0],[2,0],[0,0],[2,1],[0,0],[2,2]];
   
  List (type: int (size=4), size=14) B8_Sub_Type := [0, 4, 4, 4, 5, 6, 5, 6, 5, 6, 7, 7, 7, 11];
  List (type: int (size=3), size=14) B8_Sub_Dir := [2, 0, 1, 2, 0, 0, 1, 1, 2, 2, 0, 1, 2, -1];

  Interpret_MB_Type: action ==>
  do
    if picture_type = 1 then 
      Blk8SubDir[0] := 0;
      Blk8SubDir[1] := 0;
      Blk8SubDir[2] := 0;
      Blk8SubDir[3] := 0;
      if MB_Type = 4 then MB_Type := P8MB; 
      else 
        if MB_Type > 4 then 
        cbp := CBP_Table[MB_Type - 5][0];
        coeff_coded := (cbp & 1) != 0;
        MB_Type := I8MB;
        Blk8SubDir[0] := -1;
        Blk8SubDir[1] := -1;
        Blk8SubDir[2] := -1;
        Blk8SubDir[3] := -1;
        end
      end //picture_type = 1
    else 
      if picture_type = 2 then
      if MB_Type = 0 then 
        Blk8SubDir[0] := 2;
        Blk8SubDir[1] := 2;
        Blk8SubDir[2] := 2;
        Blk8SubDir[3] := 2;
      else 
        if MB_Type > 22 then 
        cbp := CBP_Table[MB_Type-23][0];
        coeff_coded := (cbp & 1) != 0;
        MB_Type := I8MB;
        else 
      if MB_Type = 22 then
        Blk8SubDir[0] := -1;
        Blk8SubDir[1] := -1;
        Blk8SubDir[2] := -1;
        Blk8SubDir[3] := -1;
        MB_Type := P8MB;
      else 
      if MB_Type < 4 then
        Blk8SubDir[0] := pdir16x16[MB_Type];
        Blk8SubDir[1] := pdir16x16[MB_Type];
        Blk8SubDir[2] := pdir16x16[MB_Type];
        Blk8SubDir[3] := pdir16x16[MB_Type]; 
        MB_Type := 1; 
      else 
      if (MB_Type & 1) = 0 then
        Blk8SubDir[0] := pdir16x8[MB_Type][0];     
        Blk8SubDir[1] := pdir16x8[MB_Type][0];      
        Blk8SubDir[2] := pdir16x8[MB_Type][1];     
        Blk8SubDir[3] := pdir16x8[MB_Type][1]; 
        MB_Type := 2;   
      else                
        Blk8SubDir[0] := pdir8x16[MB_Type][0];    
        Blk8SubDir[1] := pdir8x16[MB_Type][1];    
        Blk8SubDir[2] := pdir8x16[MB_Type][0];    
        Blk8SubDir[3] := pdir8x16[MB_Type][1];   
        MB_Type := 3;
      end
      end
      end
      end
      end
      end
    end    
  end
  
  
  read_P8_SubType: action bits: [b] repeat 8 ==>
  guard
    picture_type = 2,
    MB_Type = P8MB
  var
    uint(size=2) Index
  do 
    Index := (if b[1] then 2 else 0 end) | (if b[0] then 1 else 0 end);
    Blk8SubType[0] := B8_Sub_Type[Index];
    Blk8SubDir[0]  := B8_Sub_Dir [Index];
    //cmd0 := Blk8SubType[0]|7;
    Index := (if b[3] then 2 else 0 end) | (if b[2] then 1 else 0 end);
    Blk8SubType[1] := B8_Sub_Type[Index];
    Blk8SubDir[1]  := B8_Sub_Dir [Index];
    Index := (if b[5] then 2 else 0 end) | (if b[4] then 1 else 0 end);
    Blk8SubType[2] := B8_Sub_Type[Index];
    Blk8SubDir[2]  := B8_Sub_Dir [Index];
    Index := (if b[7] then 2 else 0 end) | (if b[6] then 1 else 0 end);
    Blk8SubType[3] := B8_Sub_Type[Index];
    Blk8SubDir[3]  := B8_Sub_Dir [Index];        
  end
  
  uint(size=2) intra_luma_pred_mode;
  uint(size=2) intra_chroma_pred_mode;
  
  //pred_mode_flag = 1
  MB_read_I_mode_Luma_one: action bits: [b] ==> INTRA_INFO: [intra_info]
  guard
    done_reading_bits(),
    MB_Type = I8MB,
    b8 < 4,
    b
  var
    uint(size=INTRA_INFO_SZ) intra_info := 7
  do
    //println("MB_read_I_mode_Luma_one: "+b8+" INTRA_INFO="+intra_info);
    intra_luma_pred_mode := -1;
    b8 := b8 + 1;
    bit_count := bit_count + 1;     
  end
  
  //when pred_mode_flag = 0, dispatch intra_luma_pred_mode.
  MB_read_I_mode_Luma_two: action bits: [b] ==>
  guard
    done_reading_bits(),
    MB_Type = I8MB,
    b8 < 4,
    not b
  do 
    set_bits_to_read(2); 
    bit_count := bit_count + 1; 
    //println("MB_read_I_mode_Luma_two:pred_mode_flag=");
  end
  
  MB_read_I_mode_Luma_Three: action ==> INTRA_INFO: [intra_info]
  guard
    done_reading_bits()
  var
    uint(size=INTRA_INFO_SZ) intra_info := 0
  do
    intra_luma_pred_mode := mask_bits( read_result(), 2);
    intra_info := (intra_luma_pred_mode << 1) | intra_info;
    //println("MB_read_I_mode_Luma_Three: "+b8+" INTRA_INFO="+intra_info); 
    b8 := b8 + 1;
  end

  MB_read_I_mode_Chroma_one: action ==> 
  guard
    done_reading_bits(),
    MB_Type = I8MB, 
    b8 > 3
  do 
    grad := 0;
    start_vld();
    //println("MB_read_I_mode_Chroma_one");
  end
  
  MB_read_I_mode_Chroma_two: action ==>  INTRA_INFO: [intra_info]
  guard
    vld_end()
  var
    uint(size=INTRA_INFO_SZ) intra_info := 0 
  do 
    intra_chroma_pred_mode := vld_ue(vld_length() << 1, vld_result());
    intra_info := (intra_chroma_pred_mode << 1) | intra_info;
    //println("MB_read_I_mode_Chroma_two: "+b8+" INTRA_INFO="+intra_info); 
  end
  
  uint (size=4) mv_num := 0;
  
  read_MB_Reference_Index: action ==> 
  guard
    done_reading_bits()
  do
    if picture_reference_flag = 0 and picture_type = 1 then 
      set_bits_to_read(mv_num);
    end    
  end
  
  List (type: uint (size=1), size=4) Ref_Index;
  
  get_MB_Reference_Index: action ==>
  guard
    done_reading_bits()
  do
    if picture_reference_flag=0 then
    if mv_num = 1 then
      Ref_Index[0] := mask_bits( read_result(), 1);
    else 
      if mv_num = 2 then
        Ref_Index[0] := mask_bits( read_result()>>1, 1);
        Ref_Index[1] := mask_bits( read_result(), 1);
      else 
        if mv_num = 4 then
          Ref_Index[0] := mask_bits( read_result()>>3, 1);
          Ref_Index[1] := mask_bits( read_result()>>2, 1);
          Ref_Index[2] := mask_bits( read_result()>>1, 1);
          Ref_Index[3] := mask_bits( read_result(), 1);
        else
          Ref_Index[0] := -1;
          Ref_Index[1] := -1;
      	  Ref_Index[2] := -1;
      	  Ref_Index[3] := -1;
        end 
      end
    end  
    else
       Ref_Index[0] := 0;
       Ref_Index[1] := 0;
       Ref_Index[2] := 0;
       Ref_Index[3] := 0;
    end
    //println("MB_read_I_mode_Chroma_two: "+mv_num); 
    mv_num := mv_num*2;         // for MV component x and y 
  end  
  
  send_MB_Reference_Index_one : action ==>ref_Index:[Ref_Index[0]],reF:[0]
  guard
     mv_num = 2
  do
  
  end
  
  send_MB_Reference_Index_two : action ==>ref_Index:[Ref_Index[0],Ref_Index[1]],reF:[0,0]
  guard
     mv_num = 4
  do
  
  end
  
  send_MB_Reference_Index_four : action ==>ref_Index:[Ref_Index[0],Ref_Index[1],Ref_Index[2],Ref_Index[3]],reF:[0,0,0,0]
  guard
     mv_num = 8
  do
  
  end
  
  cal_MVD_Num: action ==>
  guard
    done_reading_bits(),
    MB_Type != I8MB
    //picture_reference_flag=0
  do
    mv_num := 2;
    if MB_Type = 0 or MB_Type = I8MB then mv_num := 0; end
    if MB_Type = 1 then  mv_num := 1; end
    if MB_Type = P8MB then 
       if ( picture_type = 1 ) then mv_num := 4; 
       else 
         mv_num := ( if Blk8SubType[0] = 0 then 0 else 1 end ); 
         mv_num := mv_num + ( if Blk8SubType[1] = 0 then 0 else 1 end );
         mv_num := mv_num + ( if Blk8SubType[2] = 0 then 0 else 1 end );
         mv_num := mv_num + ( if Blk8SubType[3] = 0 then 0 else 1 end );
       end        
    end
    println("mv_num---------- " + mv_num);
  end
  
  read_one_MVD: action ==>
  guard
    mv_num > 0
  do
    grad := 0;
    start_vld();
  end
  
  get_one_MVD: action ==> MVD: [mvd]
  guard
    vld_end()
  var int (size=16) mvd
  do
    mvd := vld_se(vld_length() << 1, vld_result());
    println("mvd---------- " + mvd);
    mv_num := mv_num - 1;
  end  
  
  read_MB_CBP: action ==>
  guard
    vld_end(),
    picture_type = 0 or (MB_Type != I8MB and picture_type != 0)
  do
    grad := 0;
    start_vld();
  end  
  
  get_MB_CBP: action ==>
  guard
    vld_end()
  var 
    int cbp_index,  
    int y
  do
    cbp_index := vld_ue(vld_length() << 1, vld_result());
    if picture_type = 0 then y := 0; else y := 1; end
    cbp := CBP_Table[cbp_index][y]; 
    coeff_coded := (cbp & (1 << comp)) != 0;

    println("MB_read_CBP_two: cbp="+cbp+", "+"coeff_coded="+coeff_coded+", "+"comp ="+comp);
  end
  
  read_Delta_QP: action ==>
  guard
    not (fixed_picture_qp = 1 or fixed_slice_qp = 1),
    cbp != 0
  do
    grad := 0;
    start_vld();
  end
  
  get_Delta_QP: action ==> //QP: [qp]
  guard
    vld_end()
  var int(size=6) DltQP
  do
    DltQP := vld_se(vld_length() << 1, vld_result());
    qp := slice_qp + DltQP;
  end
  
  function get_golomb_grad_maxlevel(int Intra_Inter_Chroma, int TableNum, int Grad_Maxlevel) --> int( size=5 ) : VLC_Golomb_Order[Intra_Inter_Chroma][TableNum][Grad_Maxlevel] end

  function get_tablenum(int lev, int Intra_Inter, int table_num) --> int:
    if Intra_Inter = 0 then
    if abs(lev)>incVlc[Intra_Inter][table_num] then 
      if abs(lev) <= 2 then abs(lev) else
        if abs(lev) <= 4 then 3 else
          if abs(lev) <= 7 then 4 else 
           if abs(lev) <= 10 then 5 else 6 end
          end
        end
      end
    else table_num
    end
    else
      if abs(lev)>incVlc[Intra_Inter][table_num] then 
      if abs(lev) <= 3 then abs(lev) else
        if abs(lev) <= 6 then 4 else
           if abs(lev) <= 9 then 5 else 6 end
            end
        end
      else table_num
      end
    end
  end

  function get_chroma_tablenum(int lev, int table_num) --> int:
    if abs(lev)>incVlc[2][table_num] then 
      if abs(lev)<= 2 then abs(lev)
        else if(abs(lev)<= 4) then 3
          else 4 
          end  
        end  
      else table_num 
      end
    end
    
  int (size=5) tablenum;
  int (size=5) maxlevel;
  int (size=4) grad;
  int run;
  int level;
  int symbol2D;
  bool escape_code;
  //bool IsLuma;
  
  MB_read_intra_blockcoefficient_one: action ==>
  guard
    vld_end(),
    coeff_coded,
    comp<4
  do    
    Intra_Inter := if MB_Type = I8MB then 0 else 1 end;
    tablenum := 0;
    b_last   := false;
    escape_code := false;
    //println("compL------------------------ " + comp);
    maxlevel := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 0 );
    start_vld();
    //println("MB_read_intra_blockcoefficient_one:comp = "+comp+" maxlevel "+maxlevel+" grad "+grad);
  end
  
  uint (size=1) Intra_Inter;
  MB_read_intra_blockcoefficient_two: action ==> LAST: [b_last]
  guard
    vld_end(),
    not b_last
  var 
    int levels
  do
    levels := vld_length();
    symbol2D := (((1 << levels) - 1) << grad) + vld_result();
    //println("symbol2D "+symbol2D);
    Intra_Inter := if (MB_Type = I8MB) then 0 else 1 end;
    if symbol2D = EOB_Pos[Intra_Inter][tablenum] then 
      b_last := true;
    else
      b_last := false;
    end     
    //println("MB_read_intra_blockcoefficient_two: LAST = "+b_last);
  end
  
  //normal VLD
  MB_read_intra_blockcoefficient_three: action ==> RUN: [run], VALUE: [level]
  guard
    vld_end(),
    not b_last,
    symbol2D < 59
  do
      //println("symbol2D "+symbol2D);
      Intra_Inter := if MB_Type = I8MB then 0 else 1 end;
      
      run := VLD_Table[Intra_Inter][tablenum][symbol2D][1];
      level :=  VLD_Table[Intra_Inter][tablenum][symbol2D][0]; 
      tablenum := get_tablenum(level, Intra_Inter, tablenum);
          //println("tablenum "+tablenum);
      maxlevel := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 1 );
      grad     := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 0 );
      start_vld();
      //println("MB_read_intra_blockcoefficient_three: RUN = "+run);
      //println("MB_read_intra_blockcoefficient_three: VALUE = "+level);
  end
  
  //escape VLD
  MB_read_intra_blockcoefficient_four: action ==> RUN: [run]
  guard
    vld_end(),
    not b_last,
    symbol2D >= 59
  do
    //println("symbol2D "+symbol2D);  
    Intra_Inter := if MB_Type = I8MB then 0 else 1 end;  
    run := ((symbol2D - 59) >> 1);
    grad := if Intra_Inter = 0 then 1 else 0 end; 
    maxlevel := if Intra_Inter = 0 then 11 else 12 end;
    escape_code := true;
    start_vld();
    level_flag := (symbol2D & 1);
    //println("MB_read_intra_blockcoefficient_four: RUN = "+run);
    //println("MB_read_intra_blockcoefficient_two");
  end  
  
  MB_read_intra_blockcoefficient_escape: action ==>  VALUE: [level]
  guard
    vld_end(),
    escape_code = true 
  var 
    int levels,
    int pre_level
  do
    Intra_Inter := if MB_Type = I8MB then 0 else 1 end;
    levels := vld_length();
    symbol2D := (((1 << levels) - 1) << grad) + vld_result();
    //println("symbol2D "+symbol2D);
    pre_level := symbol2D + if run > MaxRun[Intra_Inter][tablenum] then 1 else if Intra_Inter = 0 then RefAbsLevel[tablenum][run] else RefAbsLevel[tablenum+7][run] end end;
    level := if level_flag=1 then -pre_level else pre_level end;
    //println("escape " + level);
    tablenum := get_tablenum(level, Intra_Inter, tablenum);
    maxlevel := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(Intra_Inter, tablenum, 0 );
    escape_code := false;
    start_vld();
    //println("MB_read_intra_blockcoefficient_escape: VALUE = "+level);
  end
  
  MB_read_chroma_blockcoefficient_one: action ==>
  guard
    vld_end(),
    coeff_coded,
    (comp=4) or (comp=5)
  do
    tablenum := 0;
    b_last   := false;
    escape_code := false;
    //println("compC--------------------------- " + comp);
    maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
    start_vld();
    //println("MB_read_chroma_blockcoefficient_one");
  end
  
  MB_read_chroma_blockcoefficient_two: action ==> LAST: [b_last]
  guard
    vld_end(),
    not b_last
  var 
    int levels
  do
    levels := vld_length();
    symbol2D := (((1 << levels) - 1) << grad) + vld_result();
    //println("symbol2D "+symbol2D);
    if symbol2D = EOB_Pos[2][tablenum] then 
      b_last := true;
    else
    	b_last := false;
    end 
    //println("MB_read_chroma_blockcoefficient_two: LAST = "+b_last);
  end
  
  MB_read_chroma_blockcoefficient_three: action ==> RUN: [run], VALUE: [level]
  guard
    vld_end(),
    not b_last,
    symbol2D < 59
  do
    //println("symbol2D "+symbol2D);
    run := VLD_Chroma_Table[tablenum][symbol2D][1];
    level :=  VLD_Chroma_Table[tablenum][symbol2D][0];
    tablenum := get_chroma_tablenum(level, tablenum);
    maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
    grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
    start_vld();    
    //println("MB_read_chroma_blockcoefficient_three: RUN = "+run);
    //println("MB_read_chroma_blockcoefficient_three: VALUE = "+level);
  end
  
  MB_read_chroma_blockcoefficient_four: action ==> RUN: [run]
  guard
    vld_end(),
    not b_last,
    symbol2D >= 59
  do
    //println("symbol2D "+symbol2D);    
      run := ((symbol2D - 59) >> 1);
      grad := 0;
      maxlevel := 11;
      escape_code := true;
      start_vld();   
      level_flag := (symbol2D & 1);
      //println("MB_read_chroma_blockcoefficient_two");
      //println("MB_read_chroma_blockcoefficient_four: RUN = "+run);
  end  
  
  MB_read_chroma_blockcoefficient_escape: action ==>  VALUE: [level]
    guard
      vld_end(),
      escape_code = true 
    var
      int levels,
      int pre_level
    do
      levels := vld_length();
      symbol2D := (((1 << levels) - 1) << grad) + vld_result();
      //println("symbol2D "+symbol2D);
      pre_level := symbol2D + if run > MaxRun[2][tablenum] then 1 else RefAbsLevel[tablenum+14][run] end;
      level := if level_flag=1 then -pre_level else pre_level end;
      //println("escape " + level);
      tablenum := get_chroma_tablenum(level, tablenum);
      maxlevel := get_golomb_grad_maxlevel(2, tablenum, 1 );
      grad     := get_golomb_grad_maxlevel(2, tablenum, 0 );
      escape_code := false;
      start_vld();
      //println("MB_read_chroma_blockcoefficient_escape: VALUE = "+level);
  end
  
  
  bool NewVLD := false;
  int VLD_Counter;
  bool First_part:=false;
  int Codeword;
  int CodeLen;
  int CodeTail;
  
  procedure start_vld()
  begin
    NewVLD := true;
    VLD_Counter := 0;
    First_part := true;
    Codeword := 0;
    CodeLen := 0;
  end
  
  function vld_result() --> int( size=30 ) : Codeword end
  function vld_length() --> int( size=30 ) : CodeLen end
  function vld_end() --> bool : not NewVLD end
  function vld_ue(int len, int info) --> int : (1 << (len >> 1)) + info - 1 end
  function vld_se(int len, int info) --> int : if ((((1 << (len >> 1)) + info - 1) & 1) = 0) then (1 - ((1 << (len >> 1)) + info) >> 1 ) else (((1 << (len >> 1)) + info) >> 1) end end
  
  action bits:[ b ] ==>
  guard
    NewVLD,
    First_part
  do
    if b then
      First_part := false;
      CodeTail := VLD_Counter + grad;
      CodeLen := VLD_Counter;
      if CodeTail = 0 then NewVLD := false; end
      // println("VLD_Counter0 "+VLD_Counter);
    else
      VLD_Counter := VLD_Counter + 1;
      // println("VLD_Counter1 "+VLD_Counter);
    end
    bit_count := bit_count + 1;   
  end
  
  action bits:[ b ] ==>
  guard
    NewVLD,
    not First_part
  do
    VLD_Counter := VLD_Counter - 1;
    Codeword := (Codeword << 1) | if b then 1 else 0 end;
    bit_count := bit_count + 1;
    if   (VLD_Counter + grad) = 0 then NewVLD := false; end
    //  println("VLD_Counter2 "+VLD_Counter);
  end      
  
  List ( type: List ( type: int(size=6), size=2), size=64 ) CBP_Table=
  [
    [63, 0],[15, 15],[31, 63],[47, 31],[ 0, 16],[ 14,32],[13,47],[11,13],[7, 14],[5, 11],
    [10,12],[8,5],[12,10],[61,7],[4,48],[55,3],[1, 2],[2,8],[59,4],[3,1],
    [62, 61],[ 9, 55],[ 6,59],[29,62],[45,29],[51,27],[23,23],[39,19],[27,30],[46,28],
    [53,9],[30,6],[43,60],[37,21],[60,44],[16,26],[21,51],[ 28,35],[ 19,18],[ 35,20],
    [ 42,24],[ 26,53],[ 44,17],[32,37],[58,39],[24,45],[20,58],[17,43],[18,42],[48,46],
    [22,36],[33,33],[25,34],[49,40],[40,52],[36,49],[34,50],[50,56],[52,25],[54,22],
    [41,54],[56,57],[38,41],[57,38]
  ];
  
  List ( type: List ( type: List ( type: int(size=5), size=2), size=7 ), size=3) VLC_Golomb_Order = //[intra/inter/chroma][tablenum][grad/maxlevel]
  [  
    [
      [2,9], [2,9], [2,9], [2,9], [2,9], [2,9], [2,9]
    ],
    [
      [3,9], [2,9], [2,9], [2,9], [2,9], [2,9], [2,9]
    ],
    [
      [2,9], [0,9], [1,9], [1,9], [0,9], [-1,-1], [-1,-1]
    ]
  ];
  
  List (type: List ( type: int(size=5), size=7), size=3) EOB_Pos= [ [ -1, 8, 8, 8, 6, 0, 0], [-1, 2, 2, 2, 2, 0, 0], [-1, 0, 2, 0, 0, 0, 0] ];
  
  List (type: List ( type: int(size=10), size=7), size=3) incVlc= [ [0,1,2,4,7,10,3000], [0,1,2,3,6,9,3000], [0,1,2,4,3000, 0, 0] ];
  
  List (type: List ( type: int(size=6), size=7), size=3 ) MaxRun= 
  [
    [22,14,9,6,4,2,1],
    [25,18,13,9,6,4,3],
    [24,19,10,7,4,-1,-1]
  ];
  
  List ( type: List ( type: int(size=6), size=26), size=19 ) RefAbsLevel= 
  [
    [ 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1],
    [ 7, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [10, 6, 4, 4, 3, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [13, 7, 5, 4, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [18, 8, 4, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [22, 7, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [27, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [ 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [ 5, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1],
    [ 7, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [10, 6, 5, 4, 3, 3, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [13, 7, 5, 4, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [17, 8, 4, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [22, 6, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [ 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1],
    [ 6, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1],
    [10, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [14, 7, 4, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [20, 7, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
  ];
  
  
  List (type: List ( type: List ( type: List ( type: int(size=8), size=2), size=64 ), size=7), size=2) VLD_Table= 
  [
    [
      [ 
        [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 2,0 ], [ -2,0 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 1,14 ], [ -1,14 ], [ 2,1 ], [ -2,1 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 3,0 ], [ -3,0 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 2,2 ], [ -2,2 ], [ 1,19 ], [ -1,19 ], [ 1,20 ], [ -1,20 ], [ 2,3 ], [ -2,3 ], [ 1,21 ], [ -1,21 ], [ 2,4 ], [ -2,4 ], [ 1,22 ], [ -1,22 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 2,0 ], [ -2,0 ], [ 1,2 ], [ -1,2 ], [ 0,0 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 3,0 ], [ -3,0 ], [ 2,1 ], [ -2,1 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 2,2 ], [ -2,2 ], [ 4,0 ], [ -4,0 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 2,3 ], [ -2,3 ], [ 3,1 ], [ -3,1 ], [ 1,11 ], [ -1,11 ], [ 2,4 ], [ -2,4 ], [ 5,0 ], [ -5,0 ], [ 1,12 ], [ -1,12 ], [ 2,5 ], [ -2,5 ], [ 1,13 ], [ -1,13 ], [ 2,6 ], [ -2,6 ], [ 2,7 ], [ -2,7 ], [ 3,2 ], [ -3,2 ], [ 6,0 ], [ -6,0 ], [ 1,14 ], [ -1,14 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 1,1 ], [ -1,1 ], [ 3,0 ], [ -3,0 ], [ 0,0 ], [ 1,2 ], [ -1,2 ], [ 2,1 ], [ -2,1 ], [ 4,0 ], [ -4,0 ], [ 1,3 ], [ -1,3 ], [ 5,0 ], [ -5,0 ], [ 1,4 ], [ -1,4 ], [ 3,1 ], [ -3,1 ], [ 2,2 ], [ -2,2 ], [ 1,5 ], [ -1,5 ], [ 6,0 ], [ -6,0 ], [ 2,3 ], [ -2,3 ], [ 1,6 ], [ -1,6 ], [ 4,1 ], [ -4,1 ], [ 7,0 ], [ -7,0 ], [ 3,2 ], [ -3,2 ], [ 2,4 ], [ -2,4 ], [ 1,7 ], [ -1,7 ], [ 2,5 ], [ -2,5 ], [ 8,0 ], [ -8,0 ], [ 1,8 ], [ -1,8 ], [ 5,1 ], [ -5,1 ], [ 3,3 ], [ -3,3 ], [ 2,6 ], [ -2,6 ], [ 9,0 ], [ -9,0 ], [ 1,9 ], [ -1,9 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 1,1 ], [ -1,1 ], [ 0,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 2,1 ], [ -2,1 ], [ 1,2 ], [ -1,2 ], [ 6,0 ], [ -6,0 ], [ 3,1 ], [ -3,1 ], [ 7,0 ], [ -7,0 ], [ 1,3 ], [ -1,3 ], [ 8,0 ], [ -8,0 ], [ 2,2 ], [ -2,2 ], [ 4,1 ], [ -4,1 ], [ 1,4 ], [ -1,4 ], [ 9,0 ], [ -9,0 ], [ 5,1 ], [ -5,1 ], [ 2,3 ], [ -2,3 ], [ 10,0 ], [ -10,0 ], [ 3,2 ], [ -3,2 ], [ 1,5 ], [ -1,5 ], [ 11,0 ], [ -11,0 ], [ 6,1 ], [ -6,1 ], [ 1,6 ], [ -1,6 ], [ 2,4 ], [ -2,4 ], [ 3,3 ], [ -3,3 ], [ 12,0 ], [ -12,0 ], [ 4,2 ], [ -4,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 0,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 1,1 ], [ -1,1 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 2,1 ], [ -2,1 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 1,2 ], [ -1,2 ], [ 3,1 ], [ -3,1 ], [ 11,0 ], [ -11,0 ], [ 4,1 ], [ -4,1 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 5,1 ], [ -5,1 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 14,0 ], [ -14,0 ], [ 6,1 ], [ -6,1 ], [ 15,0 ], [ -15,0 ], [ 16,0 ], [ -16,0 ], [ 3,2 ], [ -3,2 ], [ 1,4 ], [ -1,4 ], [ 7,1 ], [ -7,1 ], [ 17,0 ], [ -17,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 1,1 ], [ -1,1 ], [ 11,0 ], [ -11,0 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 2,1 ], [ -2,1 ], [ 14,0 ], [ -14,0 ], [ 15,0 ], [ -15,0 ], [ 3,1 ], [ -3,1 ], [ 16,0 ], [ -16,0 ], [ 1,2 ], [ -1,2 ], [ 17,0 ], [ -17,0 ], [ 4,1 ], [ -4,1 ], [ 18,0 ], [ -18,0 ], [ 5,1 ], [ -5,1 ], [ 19,0 ], [ -19,0 ], [ 20,0 ], [ -20,0 ], [ 6,1 ], [ -6,1 ], [ 21,0 ], [ -21,0 ], [ 2,2 ], [ -2,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 11,0 ], [ -11,0 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 14,0 ], [ -14,0 ], [ 15,0 ], [ -15,0 ], [ 16,0 ], [ -16,0 ], [ 1,1 ], [ -1,1 ], [ 17,0 ], [ -17,0 ], [ 18,0 ], [ -18,0 ], [ 19,0 ], [ -19,0 ], [ 20,0 ], [ -20,0 ], [ 21,0 ], [ -21,0 ], [ 2,1 ], [ -2,1 ], [ 22,0 ], [ -22,0 ], [ 23,0 ], [ -23,0 ], [ 24,0 ], [ -24,0 ], [ 25,0 ], [ -25,0 ], [ 3,1 ], [ -3,1 ], [ 26,0 ], [ -26,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ]
    ],
    
    [
      [
        [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 2,0 ], [ -2,0 ], [ 1,13 ], [ -1,13 ], [ 1,14 ], [ -1,14 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 3,0 ], [ -3,0 ], [ 1,19 ], [ -1,19 ], [ 1,20 ], [ -1,20 ], [ 2,1 ], [ -2,1 ], [ 1,21 ], [ -1,21 ], [ 1,22 ], [ -1,22 ], [ 1,23 ], [ -1,23 ], [ 1,24 ], [ -1,24 ], [ 1,25 ], [ -1,25 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 2,0 ], [ -2,0 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 2,1 ], [ -2,1 ], [ 1,10 ], [ -1,10 ], [ 1,11 ], [ -1,11 ], [ 3,0 ], [ -3,0 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 2,2 ], [ -2,2 ], [ 1,14 ], [ -1,14 ], [ 2,3 ], [ -2,3 ], [ 1,15 ], [ -1,15 ], [ 2,4 ], [ -2,4 ], [ 1,16 ], [ -1,16 ], [ 4,0 ], [ -4,0 ], [ 2,5 ], [ -2,5 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 2,6 ], [ -2,6 ], [ 3,1 ], [ -3,1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 1,1 ], [ -1,1 ], [ 2,0 ], [ -2,0 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 3,0 ], [ -3,0 ], [ 2,1 ], [ -2,1 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 2,2 ], [ -2,2 ], [ 4,0 ], [ -4,0 ], [ 1,7 ], [ -1,7 ], [ 3,1 ], [ -3,1 ], [ 2,3 ], [ -2,3 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 5,0 ], [ -5,0 ], [ 2,4 ], [ -2,4 ], [ 1,10 ], [ -1,10 ], [ 2,5 ], [ -2,5 ], [ 1,11 ], [ -1,11 ], [ 3,2 ], [ -3,2 ], [ 6,0 ], [ -6,0 ], [ 4,1 ], [ -4,1 ], [ 1,12 ], [ -1,12 ], [ 2,6 ], [ -2,6 ], [ 3,3 ], [ -3,3 ], [ 1,13 ], [ -1,13 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 2,0 ], [ -2,0 ], [ 1,1 ], [ -1,1 ], [ 3,0 ], [ -3,0 ], [ 1,2 ], [ -1,2 ], [ 2,1 ], [ -2,1 ], [ 4,0 ], [ -4,0 ], [ 1,3 ], [ -1,3 ], [ 5,0 ], [ -5,0 ], [ 1,4 ], [ -1,4 ], [ 3,1 ], [ -3,1 ], [ 2,2 ], [ -2,2 ], [ 1,5 ], [ -1,5 ], [ 6,0 ], [ -6,0 ], [ 2,3 ], [ -2,3 ], [ 1,6 ], [ -1,6 ], [ 4,1 ], [ -4,1 ], [ 7,0 ], [ -7,0 ], [ 3,2 ], [ -3,2 ], [ 1,7 ], [ -1,7 ], [ 2,4 ], [ -2,4 ], [ 8,0 ], [ -8,0 ], [ 1,8 ], [ -1,8 ], [ 3,3 ], [ -3,3 ], [ 2,5 ], [ -2,5 ], [ 5,1 ], [ -5,1 ], [ 1,9 ], [ -1,9 ], [ 9,0 ], [ -9,0 ], [ 4,2 ], [ -4,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 1,1 ], [ -1,1 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 2,1 ], [ -2,1 ], [ 1,2 ], [ -1,2 ], [ 6,0 ], [ -6,0 ], [ 3,1 ], [ -3,1 ], [ 7,0 ], [ -7,0 ], [ 1,3 ], [ -1,3 ], [ 8,0 ], [ -8,0 ], [ 2,2 ], [ -2,2 ], [ 4,1 ], [ -4,1 ], [ 1,4 ], [ -1,4 ], [ 9,0 ], [ -9,0 ], [ 5,1 ], [ -5,1 ], [ 2,3 ], [ -2,3 ], [ 1,5 ], [ -1,5 ], [ 10,0 ], [ -10,0 ], [ 3,2 ], [ -3,2 ], [ 11,0 ], [ -11,0 ], [ 1,6 ], [ -1,6 ], [ 6,1 ], [ -6,1 ], [ 3,3 ], [ -3,3 ], [ 2,4 ], [ -2,4 ], [ 12,0 ], [ -12,0 ], [ 4,2 ], [ -4,2 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ],
      [
        [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 1,1 ], [ -1,1 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 2,1 ], [ -2,1 ], [ 9,0 ], [ -9,0 ], [ 1,2 ], [ -1,2 ], [ 10,0 ], [ -10,0 ], [ 3,1 ], [ -3,1 ], [ 11,0 ], [ -11,0 ], [ 4,1 ], [ -4,1 ], [ 12,0 ], [ -12,0 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 13,0 ], [ -13,0 ], [ 5,1 ], [ -5,1 ], [ 14,0 ], [ -14,0 ], [ 6,1 ], [ -6,1 ], [ 1,4 ], [ -1,4 ], [ 15,0 ], [ -15,0 ], [ 3,2 ], [ -3,2 ], [ 16,0 ], [ -16,0 ], [ 2,3 ], [ -2,3 ], [ 7,1 ], [ -7,1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
      ],
      [
        [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 1,1 ], [ -1,1 ], [ 8,0 ], [ -8,0 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 11,0 ], [ -11,0 ], [ 12,0 ], [ -12,0 ], [ 2,1 ], [ -2,1 ], [ 13,0 ], [ -13,0 ], [ 1,2 ], [ -1,2 ], [ 14,0 ], [ -14,0 ], [ 15,0 ], [ -15,0 ], [ 3,1 ], [ -3,1 ], [ 16,0 ], [ -16,0 ], [ 17,0 ], [ -17,0 ], [ 18,0 ], [ -18,0 ], [ 4,1 ], [ -4,1 ], [ 19,0 ], [ -19,0 ], [ 20,0 ], [ -20,0 ], [ 2,2 ], [ -2,2 ], [ 1,3 ], [ -1,3 ], [ 5,1 ], [ -5,1 ], [ 21,0 ], [ -21,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
      ]
    ]      
  ];
  
  List ( type: List ( type: List ( type: int(size=8), size=2), size=64 ), size=5) VLD_Chroma_Table=
  [
    [ 
      [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 1,6 ], [ -1,6 ], [ 2,0 ], [ -2,0 ], [ 1,7 ], [ -1,7 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 1,14 ], [ -1,14 ], [ 3,0 ], [ -3,0 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 1,17 ], [ -1,17 ], [ 1,18 ], [ -1,18 ], [ 1,19 ], [ -1,19 ], [ 1,20 ], [ -1,20 ], [ 1,21 ], [ -1,21 ], [ 2,1 ], [ -2,1 ], [ 1,22 ], [ -1,22 ], [ 1,23 ], [ -1,23 ], [ 1,24 ], [ -1,24 ], [ 4,0 ], [ -4,0 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 1,1 ], [ -1,1 ], [ 2,0 ], [ -2,0 ], [ 1,2 ], [ -1,2 ], [ 1,3 ], [ -1,3 ], [ 1,4 ], [ -1,4 ], [ 1,5 ], [ -1,5 ], [ 3,0 ], [ -3,0 ], [ 1,6 ], [ -1,6 ], [ 1,7 ], [ -1,7 ], [ 2,1 ], [ -2,1 ], [ 1,8 ], [ -1,8 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 4,0 ], [ -4,0 ], [ 1,11 ], [ -1,11 ], [ 1,12 ], [ -1,12 ], [ 1,13 ], [ -1,13 ], [ 2,2 ], [ -2,2 ], [ 1,14 ], [ -1,14 ], [ 2,3 ], [ -2,3 ], [ 5,0 ], [ -5,0 ], [ 3,1 ], [ -3,1 ], [ 1,15 ], [ -1,15 ], [ 1,16 ], [ -1,16 ], [ 1,17 ], [ -1,17 ], [ 2,4 ], [ -2,4 ], [ 1,18 ], [ -1,18 ], [ 1,19 ], [ -1,19 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 1,0 ], [ -1,0 ], [ 0,0 ], [ 2,0 ], [ -2,0 ], [ 1,1 ], [ -1,1 ], [ 3,0 ], [ -3,0 ], [ 1,2 ], [ -1,2 ], [ 4,0 ], [ -4,0 ], [ 2,1 ], [ -2,1 ], [ 1,3 ], [ -1,3 ], [ 5,0 ], [ -5,0 ], [ 1,4 ], [ -1,4 ], [ 3,1 ], [ -3,1 ], [ 2,2 ], [ -2,2 ], [ 1,5 ], [ -1,5 ], [ 6,0 ], [ -6,0 ], [ 1,6 ], [ -1,6 ], [ 2,3 ], [ -2,3 ], [ 7,0 ], [ -7,0 ], [ 1,7 ], [ -1,7 ], [ 4,1 ], [ -4,1 ], [ 1,8 ], [ -1,8 ], [ 3,2 ], [ -3,2 ], [ 2,4 ], [ -2,4 ], [ 2,5 ], [ -2,5 ], [ 8,0 ], [ -8,0 ], [ 1,9 ], [ -1,9 ], [ 1,10 ], [ -1,10 ], [ 9,0 ], [ -9,0 ], [ 5,1 ], [ -5,1 ], [ 3,3 ], [ -3,3 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 1,1 ], [ -1,1 ], [ 5,0 ], [ -5,0 ], [ 2,1 ], [ -2,1 ], [ 6,0 ], [ -6,0 ], [ 1,2 ], [ -1,2 ], [ 7,0 ], [ -7,0 ], [ 3,1 ], [ -3,1 ], [ 8,0 ], [ -8,0 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 9,0 ], [ -9,0 ], [ 4,1 ], [ -4,1 ], [ 1,4 ], [ -1,4 ], [ 10,0 ], [ -10,0 ], [ 3,2 ], [ -3,2 ], [ 5,1 ], [ -5,1 ], [ 2,3 ], [ -2,3 ], [ 11,0 ], [ -11,0 ], [ 1,5 ], [ -1,5 ], [ 12,0 ], [ -12,0 ], [ 1,6 ], [ -1,6 ], [ 6,1 ], [ -6,1 ], [ 13,0 ], [ -13,0 ], [ 2,4 ], [ -2,4 ], [ 1,7 ], [ -1,7 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ]
    ],
    [
      [ 0,0 ], [ 1,0 ], [ -1,0 ], [ 2,0 ], [ -2,0 ], [ 3,0 ], [ -3,0 ], [ 4,0 ], [ -4,0 ], [ 5,0 ], [ -5,0 ], [ 6,0 ], [ -6,0 ], [ 7,0 ], [ -7,0 ], [ 8,0 ], [ -8,0 ], [ 1,1 ], [ -1,1 ], [ 9,0 ], [ -9,0 ], [ 10,0 ], [ -10,0 ], [ 11,0 ], [ -11,0 ], [ 2,1 ], [ -2,1 ], [ 12,0 ], [ -12,0 ], [ 13,0 ], [ -13,0 ], [ 3,1 ], [ -3,1 ], [ 14,0 ], [ -14,0 ], [ 1,2 ], [ -1,2 ], [ 15,0 ], [ -15,0 ], [ 4,1 ], [ -4,1 ], [ 16,0 ], [ -16,0 ], [ 17,0 ], [ -17,0 ], [ 5,1 ], [ -5,1 ], [ 1,3 ], [ -1,3 ], [ 2,2 ], [ -2,2 ], [ 18,0 ], [ -18,0 ], [ 6,1 ], [ -6,1 ], [ 19,0 ], [ -19,0 ], [ 1,4 ], [ -1,4 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ], [ -1,-1 ] 
    ]
  ];

	//remove me !!
	bool actorNotFinished := true;
	undefined: action ==>
	guard
		actorNotFinished
	do
		//println("Algo_SynpAVC_CBP doesn't manage this case yet");
		actorNotFinished := false;
	end

  schedule fsm look_for_Sequence_Header :
    // read sequence header
    look_for_Sequence_Header                      ( look_for_Sequence_Header                      ) --> look_for_Sequence_Header_done;
    look_for_Sequence_Header_done                 ( look_for_Sequence_Header_done                 ) --> read_Sequence_Header_Profile_id;
    read_Sequence_Header_Profile_id               ( read_Sequence_Header_Profile_id               ) --> read_Sequence_Header_Level_id;
    read_Sequence_Header_Level_id                 ( read_Sequence_Header_Level_id                 ) --> read_Sequence_Header_Progress_sequence;
    read_Sequence_Header_Progress_sequence        ( read_Sequence_Header_Progress_sequence        ) --> read_Sequence_Header_Width_Height;    
    
    read_Sequence_Header_Width_Height             ( read_Sequence_Header_Width_Height             ) --> read_Sequence_Header_Chroma_format;
    read_Sequence_Header_Chroma_format            ( read_Sequence_Header_Chroma_format            ) --> read_Sequence_Header_Sample_precision;
    read_Sequence_Header_Sample_precision         ( read_Sequence_Header_Sample_precision         ) --> read_Sequence_Header_Aspect_ratio_information;
    read_Sequence_Header_Aspect_ratio_information ( read_Sequence_Header_Aspect_ratio_information ) --> read_Sequence_Header_Frame_rate_code;
    read_Sequence_Header_Frame_rate_code          ( read_Sequence_Header_Frame_rate_code          ) --> read_Sequence_Header_Bit_rate_lower_upper;
    read_Sequence_Header_Bit_rate_lower_upper     ( read_Sequence_Header_Bit_rate_lower_upper     ) --> read_Sequence_Header_Low_delay;
    read_Sequence_Header_Low_delay                ( read_Sequence_Header_Low_delay                ) --> read_Sequence_Header_BBV_Buffer_size;    		 
    read_Sequence_Header_BBV_Buffer_size          ( read_Sequence_Header_BBV_Buffer_size          ) --> Picture_byte_align;
    
    //
    Picture_byte_align                            ( byte_align                                    ) --> look_for_which_Header;
    look_for_which_Header                         ( look_for_which_Header                         ) --> find_header;
    
    find_header                                   ( look_for_extension_0_header                   ) --> read_extension_0;
    find_header                                   ( look_for_user_data_header                     ) --> read_user_data;
    find_header                                   ( look_for_I_Picture_Header                     ) --> read_Picture_Header_Time_code; 
    find_header                                   ( look_for_PB_Picture_Header                    ) --> read_Picture_Coding_Type;
    find_header                                   ( look_for_Sequence_End                         ) --> look_for_Sequence_Header;  
    find_header                                   ( look_for_Next_Slice_Header                    ) --> Slice_Header_Slice_vertical_position;  
    
    read_extension_0                              ( read_sequence_display_extension               ) --> read_sequence_display_extension_further;
    read_extension_0                              ( read_copyright_extension                      ) --> read_copyright_extension_1;
    read_extension_0                              ( read_camera_parameters_extension              ) --> read_camera_parameters_extension_1;
    read_extension_0                              ( read_reserved_extension                       ) --> read_reserved_extension;
    
    read_sequence_display_extension_further       ( read_sequence_display_extension_0             ) --> Picture_byte_align;
    read_sequence_display_extension_further       ( read_sequence_display_extension_1             ) --> Picture_byte_align;    
        
    read_user_data                                ( read_user_data_0                              ) --> read_user_data;
    read_user_data                                ( read_user_data_1                              ) --> find_header;    
   
    read_copyright_extension                      ( read_copyright_extension                      ) --> read_copyright_extension_1;
    read_copyright_extension_1                    ( read_copyright_extension_1                    ) --> read_copyright_extension_2;
    read_copyright_extension_2                    ( read_copyright_extension_2                    ) --> read_copyright_extension_3;
    read_copyright_extension_3                    ( read_copyright_extension_3                    ) --> Picture_byte_align;

    read_camera_parameters_extension_1            ( read_camera_parameters_extension_1            ) --> read_camera_parameters_extension_2;
    read_camera_parameters_extension_2            ( read_camera_parameters_extension_2            ) --> read_camera_parameters_extension_3;
    read_camera_parameters_extension_3            ( read_camera_parameters_extension_3            ) --> read_camera_parameters_extension_4;
    read_camera_parameters_extension_4            ( read_camera_parameters_extension_4            ) --> read_camera_parameters_extension_5;
    read_camera_parameters_extension_5            ( read_camera_parameters_extension_5            ) --> read_camera_parameters_extension_6;
    read_camera_parameters_extension_6            ( read_camera_parameters_extension_6            ) --> read_camera_parameters_extension_7;
    read_camera_parameters_extension_7            ( read_camera_parameters_extension_7            ) --> read_camera_parameters_extension_8;
    read_camera_parameters_extension_8            ( read_camera_parameters_extension_8            ) --> read_camera_parameters_extension_9;
    read_camera_parameters_extension_9            ( read_camera_parameters_extension_9            ) --> read_camera_parameters_extension_A;
    read_camera_parameters_extension_A            ( read_camera_parameters_extension_A            ) --> read_camera_parameters_extension_B;
    read_camera_parameters_extension_B            ( read_camera_parameters_extension_B            ) --> read_camera_parameters_extension_C;
    read_camera_parameters_extension_C            ( read_camera_parameters_extension_C            ) --> Picture_byte_align;
        
    read_reserved_extension                       ( read_reserved_extension                       ) --> Picture_byte_align;
             
    // read picture header
    read_Picture_Header_Time_code                 ( read_Picture_Header_Time_code                 ) --> read_Picture_Header_Picture_distance;
    read_Picture_Header_Picture_distance          ( read_Picture_Header_Picture_distance          ) --> read_Picture_Header_Picture_distance_next;
    
    read_Picture_Header_Picture_distance_next     ( read_Picture_Header_BBV_check_times           ) --> read_Picture_Header_BBV_check_times_one;    
    read_Picture_Header_Picture_distance_next     ( read_Picture_Header_Progressive_frame         ) --> read_Picture_Header_Picture_structure;
    read_Picture_Header_BBV_check_times_one       ( read_Picture_Header_BBV_check_times_one       ) --> read_Picture_Header_Progressive_frame;
    read_Picture_Header_Progressive_frame         ( read_Picture_Header_Progressive_frame         ) --> read_Picture_Header_Picture_structure;
    
    read_Picture_Header_Picture_structure         ( read_Picture_Header_Picture_structure         ) --> read_Advanced_Pred_Mode_Disable;
    read_Advanced_Pred_Mode_Disable               ( read_Advanced_Pred_Mode_Disable               ) --> read_Picture_Header_Top_field_first;
    read_Picture_Header_Top_field_first           ( read_Picture_Header_Top_field_first           ) --> read_Picture_Header_Repeat_first_field;
    read_Picture_Header_Repeat_first_field        ( read_Picture_Header_Repeat_first_field        ) --> read_Picture_Header_Fixed_picture_qp;
    read_Picture_Header_Fixed_picture_qp          ( read_Picture_Header_Fixed_picture_qp          ) --> read_Picture_Header_Picture_qp;
    
    read_Picture_Header_Picture_qp                ( read_Picture_Header_Picture_qp                ) --> get_Picture_QP;
    get_Picture_QP                                ( get_Picture_QP                                ) --> read_Picture_Header_Picture_qp_next;
    read_Picture_Header_Picture_qp_next           ( read_Picture_Header_Skip_mode_flag            ) --> read_Picture_Header_Loop_filter_disable;
    read_Picture_Header_Picture_qp_next           ( read_Picture_Header_Loop_filter_disable       ) --> Slice_byte_align;
    read_Picture_Header_Loop_filter_disable       ( read_Picture_Header_Loop_filter_disable       ) --> Slice_byte_align; //no loopfilter now
    
    //pb picture
    read_Picture_Coding_Type                      ( read_Picture_Coding_Type                      ) --> read_PB_Picture_Distance;
    read_PB_Picture_Distance                      ( read_PB_Picture_Distance                      ) --> read_Picture_Header_Picture_distance_next;

    read_Picture_Header_Picture_qp_next           ( read_Picture_Reference_Flag                   ) --> get_Picture_Reference_Flag;
    get_Picture_Reference_Flag                    ( get_Picture_Reference_Flag                    ) --> read_No_Forward_Reference_Flag;
    read_No_Forward_Reference_Flag                ( read_No_Forward_Reference_Flag                ) --> read_PB_Reserved_Bits;
    read_PB_Reserved_Bits                         ( read_PB_Reserved_Bits                         ) --> read_PB_Skip_Mode_Flag;
    read_PB_Skip_Mode_Flag                        ( read_PB_Skip_Mode_Flag                        ) --> read_PB_Loop_filter_Disable;
    read_PB_Loop_filter_Disable                   ( read_PB_Loop_filter_Disable                   ) --> Slice_byte_align;
    
    
    // read slice header
    Slice_byte_align                              ( byte_align                                    ) --> look_for_Slice_Header;
    look_for_Slice_Header                         ( look_for_Slice_Header                         ) --> Slice_Header_Slice_vertical_position;
    Slice_Header_Slice_vertical_position          ( Slice_Header_Slice_vertical_position          ) --> Slice_Header_QP_OR_send_new_vop_BTYPE;
    Slice_Header_QP_OR_send_new_vop_BTYPE         ( Slice_Header_QP                               ) --> Slice_Header_Fixed_slice_qp_and_slice_qp;
    Slice_Header_QP_OR_send_new_vop_BTYPE         ( send_new_vop_BTYPE                            ) --> send_mb_width_BTYPE;
    Slice_Header_QP_OR_send_new_vop_BTYPE         ( read_Slice_Weighting_Flag                     ) --> get_Slice_Weighting_Flag;
    Slice_Header_Fixed_slice_qp_and_slice_qp      ( Slice_Header_Fixed_slice_qp_and_slice_qp      ) --> read_Slice_Weighting_Flag;
    read_Slice_Weighting_Flag                     ( read_Slice_Weighting_Flag                     ) --> get_Slice_Weighting_Flag;
    get_Slice_Weighting_Flag                      ( get_Slice_Weighting_Flag                      ) --> send_new_vop_BTYPE;
    
    //send BTYPE token
    send_new_vop_BTYPE                            ( send_new_vop_BTYPE                            ) --> send_mb_width_BTYPE;
    send_mb_width_BTYPE                           ( send_mb_width_BTYPE                           ) --> send_mb_height_BTYPE;
    send_mb_height_BTYPE                          ( send_mb_height_BTYPE                          ) --> send_Slice_No;
    send_Slice_No                                 ( send_Slice_No                                 ) --> StartMB;
    
    //read MB
        
    StartMB                                       ( StartMB                                       ) --> StartMB_next;
    StartMB_next                                  ( get_Skip_Run                                  ) --> get_Skip_Run_next;
    StartMB_next                                  ( do_Skip_Run                                   ) --> mb_dispatch_done;
    StartMB_next                                  ( read_MB_Type                                  ) --> get_MB_Type;
    
    StartMB_next                                  ( I_Picture                                     ) --> StartMB_next_two;
    
    get_Skip_Run_next                             ( do_Skip_Run                                   ) --> mb_dispatch_done;
    get_Skip_Run_next                             ( read_MB_Type                                  ) --> get_MB_Type;
    read_MB_Type                                  ( read_MB_Type                                  ) --> get_MB_Type;
    get_MB_Type                                   ( get_MB_Type                                   ) --> Interpret_MB_Type;
    Interpret_MB_Type                             ( Interpret_MB_Type                             ) --> Interpret_MB_Type_next;
    Interpret_MB_Type_next                        ( read_P8_SubType                               ) --> read_MB_Reference_Index;
    Interpret_MB_Type_next                        ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    Interpret_MB_Type_next                        ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    Interpret_MB_Type_next                        ( cal_MVD_Num                                   ) --> read_MB_Reference_Index;
    read_MB_Reference_Index                       ( read_MB_Reference_Index                       ) --> get_MB_Reference_Index;
    get_MB_Reference_Index                        ( get_MB_Reference_Index                        ) --> send_MB_Reference_Index;
    
    send_MB_Reference_Index                       (send_MB_Reference_Index_one                    ) --> get_MB_Reference_Index_next;
    send_MB_Reference_Index                       (send_MB_Reference_Index_two                    ) --> get_MB_Reference_Index_next;
    send_MB_Reference_Index                       (send_MB_Reference_Index_four                   ) --> get_MB_Reference_Index_next;
    
    get_MB_Reference_Index_next                   ( read_one_MVD                                  ) --> get_one_MVD;
    get_MB_Reference_Index_next                   ( read_MB_CBP                                   ) --> get_MB_CBP;
    get_MB_Reference_Index_next                   ( read_Delta_QP                                 ) --> get_Delta_QP;
    get_MB_Reference_Index_next                   ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    get_one_MVD                                   ( get_one_MVD                                   ) --> get_one_MVD_next;
    get_one_MVD_next                              ( read_one_MVD                                  ) --> get_one_MVD;
    get_one_MVD_next                              ( read_MB_CBP                                   ) --> get_MB_CBP;
    get_MB_CBP                                    ( get_MB_CBP                                    ) --> get_MB_CBP_next;
    get_MB_CBP_next                               ( read_Delta_QP                                 ) --> get_Delta_QP;
    get_Delta_QP                                  ( get_Delta_QP                                  ) --> get_Delta_QP_done;
    get_Delta_QP_done                             ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    get_MB_CBP_next                               ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    StartMB_next_two                              ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    StartMB_next_two                              ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    MB_read_I_mode_Luma_one_next                  ( MB_read_I_mode_Chroma_one                     ) --> MB_read_I_mode_Chroma_two;
    MB_read_I_mode_Luma_Three                     ( MB_read_I_mode_Luma_Three                     ) --> MB_read_I_mode_Luma_Three_next;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Luma_one                       ) --> MB_read_I_mode_Luma_one_next;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Luma_two                       ) --> MB_read_I_mode_Luma_Three;
    MB_read_I_mode_Luma_Three_next                ( MB_read_I_mode_Chroma_one                     ) --> MB_read_I_mode_Chroma_two;

    MB_read_I_mode_Chroma_two                     ( MB_read_I_mode_Chroma_two                     ) --> MB_read_I_mode_Chroma_two_next;
    MB_read_I_mode_Chroma_two_next                ( read_MB_CBP                                   ) --> get_MB_CBP;
    //get_MB_CBP                                    ( get_MB_CBP                                    ) --> get_MB_CBP_next;
    MB_read_I_mode_Chroma_two_next                ( read_Delta_QP                                 ) --> get_Delta_QP;
    MB_read_I_mode_Chroma_two_next                ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_I_mode_Chroma_two_next                ( block_done                                    ) --> block_done_next;
    get_MB_CBP_next                               ( block_done                                    ) --> block_done_next;  
    

    MB_read_intra_blockcoefficient_one            ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two            ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_two_next;
    MB_read_intra_blockcoefficient_two_next       ( MB_read_intra_blockcoefficient_three          ) --> MB_read_intra_blockcoefficient_two;
    MB_read_intra_blockcoefficient_two_next       ( MB_read_intra_blockcoefficient_four           ) --> MB_read_intra_blockcoefficient_escape;
    MB_read_intra_blockcoefficient_two_next       ( block_done                                    ) --> block_done_next;
    MB_read_intra_blockcoefficient_escape         ( MB_read_intra_blockcoefficient_escape         ) --> MB_read_intra_blockcoefficient_escape_next;
    MB_read_intra_blockcoefficient_escape_next    ( MB_read_intra_blockcoefficient_two            ) --> MB_read_intra_blockcoefficient_two_next;
    MB_read_intra_blockcoefficient_escape_next    ( block_done                                    ) --> block_done_next;
    
    MB_read_chroma_blockcoefficient_one           ( MB_read_chroma_blockcoefficient_one           ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two           ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_two_next;
    MB_read_chroma_blockcoefficient_two_next      ( MB_read_chroma_blockcoefficient_three         ) --> MB_read_chroma_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_two_next      ( MB_read_chroma_blockcoefficient_four          ) --> MB_read_chroma_blockcoefficient_escape;
    MB_read_chroma_blockcoefficient_two_next      ( block_done                                    ) --> block_done_next;
    MB_read_chroma_blockcoefficient_escape        ( MB_read_chroma_blockcoefficient_escape        ) --> MB_read_chroma_blockcoefficient_escape_next;
    MB_read_chroma_blockcoefficient_escape_next   ( MB_read_chroma_blockcoefficient_two           ) --> MB_read_chroma_blockcoefficient_two_next;
    MB_read_chroma_blockcoefficient_escape_next   ( block_done                                    ) --> block_done_next;

    block_done                                    ( block_done                                    ) --> block_done_next;
    block_done_next                               ( MB_read_intra_blockcoefficient_one            ) --> MB_read_intra_blockcoefficient_two;
    block_done_next                               ( MB_read_chroma_blockcoefficient_one           ) --> MB_read_chroma_blockcoefficient_two;
    block_done_next                               ( mb_dispatch_done                              ) --> mb_dispatch_done_next;
    block_done_next                               ( block_done                                    ) --> block_done_next;
    
    mb_dispatch_done                              ( mb_dispatch_done                              ) --> mb_dispatch_done_next;
    mb_dispatch_done_next                         ( Check_End_Of_Slice0                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice1                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice2                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice3                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice4                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice5                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice6                           ) --> find_header;
    mb_dispatch_done_next                         ( Check_End_Of_Slice7                           ) --> find_header;
    mb_dispatch_done_next                         ( StartMB                                       ) --> StartMB_next;
    mb_dispatch_done_next                         ( mb_done                                       ) --> Picture_byte_align;
    
    undefined                         ( undefined                                       ) --> undefined;
    
    
  end

  priority
  
    look_for_Slice_Header                     > look_for_which_Header;
    read_Picture_Header_BBV_check_times       > read_Picture_Header_Progressive_frame;
    read_Picture_Reference_Flag               > read_Picture_Header_Skip_mode_flag;
    read_Picture_Header_Skip_mode_flag        > read_Picture_Header_Loop_filter_disable;
//    read_Picture_Header_Loop_filter_parameter > byte_align;
    
    MB_read_I_mode_Luma_one                   > MB_read_I_mode_Luma_two;
    MB_read_I_mode_Luma_two                   > cal_MVD_Num;
    
    MB_read_intra_blockcoefficient_escape     > MB_read_intra_blockcoefficient_two;
    MB_read_chroma_blockcoefficient_escape    > MB_read_chroma_blockcoefficient_two;
    Slice_Header_QP                           > send_new_vop_BTYPE; 
    read_Slice_Weighting_Flag                 > send_new_vop_BTYPE;   
    mb_done                                   > StartMB;   
    Check_End_Of_Slice0                       > StartMB; 
    Check_End_Of_Slice1                       > StartMB;
    Check_End_Of_Slice2                       > StartMB;
    Check_End_Of_Slice3                       > StartMB;
    Check_End_Of_Slice4                       > StartMB;
    Check_End_Of_Slice5                       > StartMB;
    Check_End_Of_Slice6                       > StartMB;
    Check_End_Of_Slice7                       > StartMB;
                                                
    
    read_one_MVD                              > read_MB_CBP;
    read_MB_CBP                               > read_Delta_QP;
    read_Delta_QP                             > MB_read_intra_blockcoefficient_one;
                                                                                                                  
    MB_read_intra_blockcoefficient_one > MB_read_chroma_blockcoefficient_one > mb_dispatch_done;                  
    MB_read_intra_blockcoefficient_three > MB_read_intra_blockcoefficient_four > block_done;                      
    MB_read_chroma_blockcoefficient_three > MB_read_chroma_blockcoefficient_four > block_done;                    
    MB_read_intra_blockcoefficient_two > block_done;                                                              
    MB_read_intra_blockcoefficient_one > block_done; 
  end                                                                                                             
                                                                                                                  
end

