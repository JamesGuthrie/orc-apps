/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.P.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.P;

actor Algo_Skip_AVSJZ()
   int (size=32) Img_Type,
   int (size=32) Mb_Type,
   int (size=32) Mb_Reference,
   int (size=32) Img_mb_x,
   int (size=32) Img_mb_y,
   int (size=32) Current_mb_Data_slice_nr,
   int (size=32) Up_mb_Data_slice_nr,
   int (size=32) Left_mb_Data_slice_nr,
   int (size=32) RefFrArr_Up,
   int (size=32) RefFrArr_Left,
   int (size=32) Tmp_Mv_U_X,
   int (size=32) Tmp_Mv_U_Y,
   int (size=32) Tmp_Mv_L_X,
   int (size=32) Tmp_Mv_L_Y
   ==>
   int (size=32) Mv_x,
   int (size=32) Mv_y,
   int (size=32) Ref_Frame,
   int (size=32) Block_X,
   int (size=32) Block_Y,
   int (size=32) Blockshape_X,
   int (size=32) Blockshape_Y,
   int (size=32) ReF,
   int (size=32) Direct_Mv
   :
   int (size=32) mv_x;
   int (size=32) mv_y;
   int (size=32) mb_available_up;
   int (size=32) mb_available_left;
   int (size=32) zeromotionabove;
   int (size=32) zeromotionleft;
   int (size=32) ref_Frame;
   int (size=32) block_X;
   int (size=32) block_Y;
   int (size=32) blockshape_X;
   int (size=32) blockshape_Y;
   int (size=32) reF;
   int (size=32) direct_Mv;
   /*P_Skip: action Img_Type:[img_type],Mb_Type:[mb_type],Mb_Reference:[mb_reference],Img_mb_y:[img_mb_y],Current_mb_Data_slice_nr:[current_mb_Data_slice_nr],Up_mb_Data_slice_nr:[up_mb_Data_slice_nr],Img_mb_x:[img_mb_x],Left_mb_Data_slice_nr:[left_mb_Data_slice_nr],Tmp_Mv_L_X:[tmp_Mv_L_X],Tmp_Mv_L_Y:[tmp_Mv_L_Y],Tmp_Mv_U_X:[tmp_Mv_U_X],Tmp_Mv_U_Y:[tmp_Mv_U_Y]==>Mv_x:[mv_x],Mv_y:[mv_y]
   do
      if(img_type=0 and mb_type=0)then
         if(mb_reference=0)then
           if((img_mb_y=0 or (img_mb_y!=0 and current_mb_Data_slice_nr!=up_mb_Data_slice_nr)or(img_mb_x=0 or (img_mb_x!=0 and current_mb_Data_slice_nr!=left_mb_Data_slice_nr))))then
           	  mv_x:=0;
           	  mv_y:=0;
           else
              if((tmp_Mv_L_X=0 and tmp_Mv_L_Y=0) or(tmp_Mv_U_X=0 and tmp_Mv_U_Y=0))then
                 mv_x:=0;
           	     mv_y:=0;
              else
              //mvE=MVEPred
              end
           end
         else
         //
         end
      else
      //
      end
   end*/
   Get_Mb_Available_Up: action Img_mb_y:[img_mb_y],Current_mb_Data_slice_nr:[current_mb_Data_slice_nr],Up_mb_Data_slice_nr:[up_mb_data_slice_nr]==>
   do
      if(img_mb_y=0)then
         mb_available_up:=0;
      else
         if(current_mb_Data_slice_nr=up_mb_data_slice_nr)then
            mb_available_up:=1;
         else
            mb_available_up:=0;
         end
      end
   end
   
   Get_Mb_Available_Left: action Img_mb_x:[img_mb_x],Current_mb_Data_slice_nr:[current_mb_Data_slice_nr],Left_mb_Data_slice_nr:[left_mb_data_slice_nr]==>
   do
      if(img_mb_x=0)then
         mb_available_left:=0;
      else
         if(current_mb_Data_slice_nr=left_mb_data_slice_nr)then
            mb_available_left:=1;
         else
            mb_available_left:=0;
         end
      end
   end
   
   Get_ZeroMotionAbove: action RefFrArr_Up:[refFrArr_up],Tmp_Mv_U_X:[tmp_Mv_U_X],Tmp_Mv_U_Y:[tmp_Mv_U_Y]==>
   do
      if(mb_available_up!=0)then
         zeromotionabove:=1;
      else
         if(refFrArr_up=0 and tmp_Mv_U_X=0 and tmp_Mv_U_Y=0)then
            zeromotionabove:=1;
         else
            zeromotionabove:=0;
         end
      end
   end
   
   Get_ZeroMotionLeft: action RefFrArr_Left:[refFrArr_left],Tmp_Mv_L_X:[tmp_Mv_L_X],Tmp_Mv_L_Y:[tmp_Mv_L_Y]==>
   do
      if(mb_available_left!=0)then
         zeromotionleft:=1;
      else
         if(refFrArr_left=0 and tmp_Mv_L_X=0 and tmp_Mv_L_Y=0)then
            zeromotionleft:=1;
         else
            zeromotionleft:=0;
         end
      end
   end
   
   Not_Get_MVPred: action ==>Mv_x:[mv_x],Mv_y:[mv_y]
   guard zeromotionabove=1 or zeromotionleft=1
   do 
      mv_x:=0;
      mv_y:=0;
   end 
   
   Get_MVPred: action ==>Ref_Frame:[ref_Frame],Block_X:[block_X],Block_Y:[block_Y],Blockshape_X:[blockshape_X],Blockshape_Y:[blockshape_Y],ReF:[reF],Direct_Mv:[direct_Mv]
   guard zeromotionabove=0 and zeromotionleft=0
   do 
      ref_Frame:=0;
      block_X:=0;
      block_Y:=0;
      blockshape_X:=16;
      blockshape_Y:=16;
      reF:=0;
      direct_Mv:=0;
   end
   
   B_Skip: action ==>
   do 
   
   end
   
   end