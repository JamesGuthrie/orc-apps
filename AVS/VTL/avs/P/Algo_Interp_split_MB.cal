package avs.P;

actor Algo_Interp_split_MB () int(size=32) MbPartWidth,
	int(size=32) MbPartHeigth,
	int(size=32) INTERP
	==> int(size=9) MBPred :

	uint(size=5) count := 0;

	uint(size=5) mbpart_w;

	uint(size=5) mbpart_h;

	List(type: int(size=16), size=256) MB := [ 0 : for int i in 0 .. 255 ];

	List(type: uint(size=4), size=16) InverseScan4x4Tab := [ 0, 1, 4, 5, 2, 3, 6,
	7, 8, 9, 12, 13, 10, 11, 14, 15 ];

	get_part: action MbPartWidth:[ b ] , MbPartHeigth:[ c ] ==>
	guard
		count < 16
	do //mbpart_idx:= a;
		mbpart_w := b;
		mbpart_h := c;
	end

	get_data.mode_16x16: action INTERP:[ v ] repeat 16 * 16 ==>
	guard
		mbpart_h = 16 and mbpart_w = 16
	var
		uint pixAddr := ((InverseScan4x4Tab[count] / 4) << 6) +
		((InverseScan4x4Tab[count] mod 4) << 2)
	do
		foreach int j in 0 .. mbpart_h - 1 do
			foreach int i in 0 .. mbpart_w - 1 do
				MB[pixAddr + i + (j << 4)] := v[i + j * mbpart_w];
			end
		end
		count := count + (mbpart_w >> 2) * (mbpart_h >> 2);
	end

	get_data.mode_16x8: action INTERP:[ v ] repeat 16 * 8 ==>
	guard
		mbpart_h = 16 and mbpart_w = 8
	var
		uint pixAddr := ((InverseScan4x4Tab[count] / 4) << 6) +
		((InverseScan4x4Tab[count] mod 4) << 2)
	do
		foreach int j in 0 .. mbpart_h - 1 do
			foreach int i in 0 .. mbpart_w - 1 do
				MB[pixAddr + i + (j << 4)] := v[i + j * mbpart_w];
			end
		end //count := if mbpart_idx = 0 then 4 else 16 end;
		count := count + (mbpart_w >> 2) * (mbpart_h >> 2);
	end

	get_data.mode_8x16: action INTERP:[ v ] repeat 8 * 16 ==>
	guard
		mbpart_h = 8 and mbpart_w = 16
	var
		uint pixAddr := ((InverseScan4x4Tab[count] / 4) << 6) +
		((InverseScan4x4Tab[count] mod 4) << 2)
	do
		foreach int j in 0 .. mbpart_h - 1 do
			foreach int i in 0 .. mbpart_w - 1 do
				MB[pixAddr + i + (j << 4)] := v[i + j * mbpart_w];
			end
		end
		count := count + (mbpart_w >> 2) * (mbpart_h >> 2);
	end

	get_data.mode_8x8: action INTERP:[ v ] repeat 8 * 8 ==>
	guard
		mbpart_h = 8 and mbpart_w = 8
	var
		uint pixAddr := ((InverseScan4x4Tab[count] / 4) << 6) +
		((InverseScan4x4Tab[count] mod 4) << 2)
	do
		foreach int j in 0 .. mbpart_h - 1 do
			foreach int i in 0 .. mbpart_w - 1 do
				MB[pixAddr + i + (j << 4)] := v[i + j * mbpart_w];
			end
		end
		count := count + (mbpart_w >> 2) * (mbpart_h >> 2);
	end

	send_data: action ==> MBPred:[ [ MB[s] : for int s in 0 .. 255 ] ] repeat 16 *
		16
	guard
		count = 16
	do
		count := 0;
	end

	schedule fsm get_send_part :
		get_send_part ( get_part ) --> get_data;
		get_data ( get_data ) --> get_send_part;
		get_send_part ( send_data ) --> get_send_part;
	end

end