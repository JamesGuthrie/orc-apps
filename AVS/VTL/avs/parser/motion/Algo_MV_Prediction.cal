/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.parser.motion.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.parser.motion;

actor Algo_MV_Prediction()
    //struct img_par img;
    int (size=32) img_Type,
    //List (type:int(size=32),size=8160) mb_Data_slice_nr,
    /*
     * int (size=32) current_mb_Data_slice_nr,
    int (size=32) up_mb_Data_slice_nr,
    int (size=32) left_mb_Data_slice_nr,
    int (size=32) upleft_mb_Data_slice_nr,
    int (size=32) upright_mb_Data_slice_nr,
    int (size=32) ref_Frame,
    * 
    */
    //List(type:List (type:int(size=32),size=242),size=136) refFrArr,
	bool block_available_up,
    bool block_available_left,
	bool block_available_upleft,
	bool block_available_upright,
	int (size=32) ref_Frame,
    int (size=32) refFr_L,
    int (size=32) refFr_U,
    int (size=32) refFr_UR,
    int (size=32) refFr_UL,
    int (size=32) tmp_Mv_L,
    int (size=32) tmp_Mv_U,
    int (size=32) tmp_Mv_UL,
    int (size=32) tmp_Mv_UR,
    //List (type:List (type:List(type:int(size=32),size=2),size=136),size=242) tmp_Mv,
    int (size=32) block_X,
    int (size=32) block_Y,
    int (size=32) blockshape_X,
    int (size=32) blockshape_Y,
    int (size=32) reF,
    int (size=32) picture_Distance,
    int (size=32) img_Imgtr_last_P,
    int (size=32) img_Imgtr_last_prev_P,
    int (size=32) img_Imgtr_next_P,
    
    bool pic_end
    
        ==>
    
    int (size=32) pmv_X,
    int (size=32) pmv_Y
        
        :
    int (size=32) img_type;
    int (size=32) block_x;
    int (size=32) block_y;
    int (size=32) blockshape_x;
    int (size=32) blockshape_y;
    int (size=32) ref;
    int (size=32) picture_distance;
    int (size=32) img_imgtr_last_P;
    int (size=32) img_imgtr_last_prev_P;
    int (size=32) img_imgtr_next_P;
    int (size=32) ref_frame;
        
    int (size=32) mb_x;
    int (size=32) mb_y;
    bool          block_available_up;
    bool          block_available_left;
    bool          block_available_upright;
    bool          block_available_upleft;
    int (size=32) mv_a;
    int (size=32) mv_b; 
    int (size=32) mv_c; 
    int (size=32) mv_d; 
    int (size=32) pred_vec:=0;
    int (size=32) mvPredType;
    int (size=32) pmv_x;
    int (size=32) pmv_y;
    int (size=32) rFrameL;
    int (size=32) rFrameU;
    int (size=32) rFrameUR;
    int (size=32) hv:=0;
    List (type:int(size=32),size=3) mva;
    List (type:int(size=32),size=3) mvb;
    List (type:int(size=32),size=3) mvc;
    int (size=32) rFrameUL;
    //Macroblock*     currMB = &mb_data[img->current_mb_nr];
    
    function median( int a, int b, int c ) --> int :
    if ((a>=b and b>=c) or (c>=b and b>=a)) then b
    else if ((b>=c and c>=a) or (a>=c and c>=b))  then c
         else a
         end
    end
    end
    
    function abs (int a) --> int :
    if(a>=0) then
         a
    else
         -a
    end
    end
    
    int (size=32) sign;
    int (size=32) mult_distance;
    int (size=32) devide_distance;
    int (size=32) distance;


    
    Get_img_Type :action img_Type:[Img_Type]==>
    do
       img_type:=Img_Type;
    end
    
    I_Picture : action ==>
    guard
       img_type=0
    end
    
    Not_I_Picture : action ==>
    guard
       img_type!=0
    end
    
    Get_block_X :action block_X:[Block_X]==>
    do
       block_x:=Block_X;
    end
    
    Get_block_Y :action block_Y:[Block_Y]==>
    do
       block_y:=Block_Y;
    end
    
    Get_blockshape_X :action blockshape_X:[Blockshape_X]==>
    do
       blockshape_x:=Blockshape_X;
    end
    
    Get_blockshape_Y :action blockshape_Y:[Blockshape_Y]==>
    do
       blockshape_y:=Blockshape_Y;
    end
    
    Get_reF :action reF:[ReF]==>
    do
       ref:=ReF;
    end

    Get_picture_Distance :action picture_Distance:[Picture_Distance]==>
    do
       picture_distance:=Picture_Distance;
    end
    
    Get_img_Imgtr_last_P :action img_Imgtr_last_P:[Img_Imgtr_last_P]==>
    do
       img_imgtr_last_P:=Img_Imgtr_last_P;
    end
    
    Get_img_Imgtr_last_prev_P :action img_Imgtr_last_prev_P:[Img_Imgtr_last_prev_P]==>
    do
       img_imgtr_last_prev_P:=Img_Imgtr_last_prev_P;
    end
    
    Get_img_Imgtr_next_P :action img_Imgtr_next_P:[Img_Imgtr_next_P]==>
    do
       img_imgtr_next_P:=Img_Imgtr_next_P;
    end
    
    Get_ref_Frame :action ref_Frame:[Ref_Frame]==>
    do
       ref_frame:=Ref_Frame;
    end
    
    Getmb_x : action ==>
    do
         mb_x:=8*block_x;
    end
    
    Getmb_y : action ==>
    do
         mb_y:=8*block_y;
    end
    
    Getblock_available_up : action block_available_up:[Block_Available_Up]==>
    do
         block_available_up:= Block_Available_Up;   
    end
    
    Getblock_available_left : action block_available_left:[Block_Available_Left]==>
    do
         block_available_left:= Block_Available_Left;    
    end
    
    Getblock_available_upleft : action block_available_upleft:[Block_Available_Upleft]==>
    do
         block_available_upleft:=Block_Available_Upleft;
    end
    
    Getblock_available_upright : action block_available_upright:[Block_Available_Upright]==>
    do
         block_available_upright:=Block_Available_Upright;    
    end
    
    GetmvPreType_MVPRED_MEDIAN : action ==>
    do
         mvPredType:=0;
    end
    
    GetrFrameL : action refFr_L:[refFr_L]==>
    do
              rFrameL:=refFr_L;
    end
    
    GetrFrameU : action refFr_U:[refFr_U]==>
    do
              rFrameU:=refFr_U;
    end
    
    GetrFrameUR : action refFr_UR:[refFr_UR]==>
    do
              rFrameUR:=refFr_UR;
    end
    
    GetrFrameUL : action refFr_UL:[refFr_UL]==>
    do
              rFrameUL:=refFr_UL;
    end
    
    GetmvPreType_L : action ==>
    guard
        (rFrameL != -1 and rFrameU = -1 and rFrameUR = -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))               
    do
        mvPredType := 1;
    end
    
    GetmvPreType_U : action ==>
    guard
        (rFrameL = -1 and rFrameU != -1 and rFrameUR = -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
    do
        mvPredType := 2;
    end
    
    GetmvPreType_UR : action ==>
    guard
        (rFrameL = -1 and rFrameU = -1 and rFrameUR != -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
    do
        mvPredType := 3;
    end 
    
    Other_MvType : action ==>

    end
    
    Getmva_0 : action tmp_Mv_L:[tmp_Mv_L_X] ==>
    do
        if(block_available_left) then
           mv_a:=tmp_Mv_L_X;
           mva[0]:=tmp_Mv_L_X;
        else
           mv_a:=0;
           mva[0]:=0;
        end
    end
    
    Getmva_1 : action tmp_Mv_L:[tmp_Mv_L_Y] ==>
    do
        if(block_available_left) then
           mv_a:=tmp_Mv_L_Y;
           mva[0]:=tmp_Mv_L_Y;
        else
           mv_a:=0;
           mva[1]:=0;
        end
    end
     
    Getmvb_0 : action tmp_Mv_U:[tmp_Mv_U_X] ==>
    do
        if(block_available_up) then
           mv_b:=tmp_Mv_U_X;
           mvb[0]:=tmp_Mv_U_X;
        else
           mv_b:=0;
           mvb[0]:=0;
        end
    end 
    
    Getmvb_1 : action tmp_Mv_U:[tmp_Mv_U_Y] ==>
    do
        if(block_available_up) then
           mv_b:=tmp_Mv_U_Y;
           mvb[1]:=tmp_Mv_U_Y;
        else
           mv_b:=0;
           mvb[1]:=0;
        end
    end 
    
    Getmv_d_0 : action tmp_Mv_UL:[tmp_Mv_UL_X] ==>
    do
        if(block_available_upleft) then
           mv_d:=tmp_Mv_UL_X;
        else
           mv_d:=0;
        end
    end
    
    Getmv_d_1 : action tmp_Mv_UL:[tmp_Mv_UL_Y] ==>
    do
        if(block_available_upleft) then
           mv_d:=tmp_Mv_UL_Y;
        else
           mv_d:=0;
        end
    end
    
    Getmvc_0 : action tmp_Mv_UR:[tmp_Mv_UR_X] ==>
    do
        if(block_available_upright) then
           mv_c:=tmp_Mv_UR_X;
           mvc[0]:=tmp_Mv_UR_X;
        else
           mv_c:=mv_d;
           mvb[0]:=mv_d;
        end
    end
    
    Getmvc_1 : action tmp_Mv_UR:[tmp_Mv_UR_Y] ==>
    do
        if(block_available_upright) then
           mv_c:=tmp_Mv_UR_Y;
           mvc[1]:=tmp_Mv_UR_Y;
        else
           mv_c:=mv_d;
           mvc[1]:=mv_d;
        end
    end
    
    Scale_mva_0 : action ==>
    do
        if(mva[0]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mva[0]:=abs(mva[0]);
        if(mva[0]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameL=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameL=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mva[0] := sign*((mva[0]*mult_distance*(512/devide_distance)+256)>>9);
        end
    end
    
    Scale_mva_1 : action ==>
    do
        if(mva[1]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mva[1]:=abs(mva[1]);
        if(mva[1]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameL=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameL=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mva[1] := sign*((mva[1]*mult_distance*(512/devide_distance)+256)>>9);
        end
    end
    
    Scale_mvb_0 : action ==>
    do
        if(mvb[0]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mvb[0]:=abs(mvb[0]);
        if(mvb[0]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameU=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameU=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mvb[0] := sign*((mvb[0]*mult_distance*(512/devide_distance)+256)>>9);
        end
    end
    
    Scale_mvb_1 : action ==>
    do
        if(mvb[1]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mvb[1]:=abs(mvb[1]);
        if(mvb[1]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameU=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameU=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mvb[1] := sign*((mvb[1]*mult_distance*(512/devide_distance)+256)>>9);
        end
    end
    
    Scale_mv_d : action ==>
    do
        if(mv_d>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mv_d:=abs(mv_d);
        if(mv_d=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameUL=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameUL=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mv_d := sign*((mv_d*mult_distance*(512/devide_distance)+256)>>9);
        end
    end   
    
    Scale_mvc_0 : action ==>
    do
    if(block_available_upright=true)then
        if(mvc[0]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mvc[0]:=abs(mvc[0]);
        if(mvc[0]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameUR=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameUR=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mvc[0] := sign*((mvc[0]*mult_distance*(512/devide_distance)+256)>>9);
        end
    else
        mvc[0]:=mv_d;
    end
    end
        
    Scale_mvc_1 : action ==>
    do
    if(block_available_upright=true)then
        if(mvc[1]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mvc[1]:=abs(mvc[1]);
        if(mvc[1]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rFrameUR=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rFrameUR=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mvc[1] := sign*((mvc[1]*mult_distance*(512/devide_distance)+256)>>9);
        end
        else
           mvc[1]:=mv_d;
        end
    end
    
    GetmvPred_Median_h0 :action ==>
    guard
        mvPredType=0,
        hv=0

    end
    
    GetmvPred_Median_h1 : action ==>pmv_X:[pmv_x],pmv_Y:[pmv_y] 
    guard
        mvPredType=0,
        hv=1
    do
        if(hv=1) then
            mva[2]:=abs(mva[0]-mvb[0])+abs(mva[1]-mvb[1]);
            mvb[2]:=abs(mvb[0]-mvc[0])+abs(mvb[1]-mvc[1]);
            mvc[2]:=abs(mvc[0]-mva[0])+abs(mvc[1]-mva[1]);
            pred_vec:=median(mva[2],mvb[2],mvc[2]);
            if(pred_vec=mvb[2]) then
               pmv_x:=mvc[0];
               pmv_y:=mvc[1];
            else
               if(pred_vec = mvb[2]) then
                  pmv_x:=mva[0];
                  pmv_y:=mva[1];
               else
                  pmv_x:=mvb[0];
                  pmv_y:=mvb[1];
               end
            end
        else
            
        end
    end
    
    GetmvPred_L : action ==>
    guard
        mvPredType=1
    do
        pred_vec:= mv_a;
    end
    
    GetmvPred_U : action ==>
    guard
        mvPredType=2
    do
        pred_vec:= mv_b;
    end
    
    GetmvPred_UR : action ==>
    guard
        mvPredType=3
    do
        pred_vec:= mv_c;
    end
    
    Getmv_Is_Median : action ==>
    guard
       mvPredType = 0
    end
    
    Getmv_Not_Median_h0 : action ==>pmv_X:[pmv_x]
    guard
       mvPredType != 0,
       hv=0
    do
           pmv_x := pred_vec;
    end
    
    Getmv_Not_Median_h1 : action ==>pmv_Y:[pmv_y]
    guard
       mvPredType != 0,
       hv=1
    do
           pmv_y := pred_vec;
    end
    
    Hv_Increase : action ==>
    guard 
        hv=0
    do
        hv:=hv+1;
    end
    
    End_Block : action pic_end:[Pic_End]==>
    guard 
        hv=1,
        Pic_End=false
    do
       hv:=0;
    end
    
    End_Picture : action pic_end:[Pic_End]==>
    guard
       hv=1,
       Pic_End=true
    do
       hv:=0;
    end
    
    schedule fsm Get_img_Type:
        Get_img_Type(Get_img_Type) -->Is_I_Picture;
        Is_I_Picture(I_Picture)-->Get_img_Type;
        Is_I_Picture(Not_I_Picture)-->Get_picture_Distance;
        Get_picture_Distance(Get_picture_Distance) -->Get_img_Imgtr_last_P;
        Get_img_Imgtr_last_P(Get_img_Imgtr_last_P) -->Get_img_Imgtr_last_prev_P;
        Get_img_Imgtr_last_prev_P(Get_img_Imgtr_last_prev_P) -->Get_img_Imgtr_next_P;
        Get_img_Imgtr_next_P(Get_img_Imgtr_next_P) -->Get_block_X;      
        
        Get_block_X(Get_block_X) -->Get_block_Y;
        Get_block_Y(Get_block_Y) -->Get_blockshape_X;
        Get_blockshape_X(Get_blockshape_X) -->Get_blockshape_Y;
        Get_blockshape_Y(Get_blockshape_Y) -->Get_reF;
        Get_reF(Get_reF) -->Get_ref_Frame;
        Get_ref_Frame(Get_ref_Frame) -->Getmbx;
        Getmbx(Getmb_x) -->Getmby;
        Getmby(Getmb_y) -->Getblockavailableup;
        Getblockavailableup(Getblock_available_up) -->Getblockavailableleft;
        Getblockavailableleft(Getblock_available_left) -->Getblockavailableupright;
        Getblockavailableupright(Getblock_available_upright) -->Getblockavailableupleft;
        Getblockavailableupleft(Getblock_available_upleft) -->GetmvPreTypeMVPREDMEDIAN;
        GetmvPreTypeMVPREDMEDIAN(GetmvPreType_MVPRED_MEDIAN) -->GetrFrameL;
        GetrFrameL(GetrFrameL) -->GetrFrameU;
        GetrFrameU(GetrFrameU) -->GetrFrameUR;
        GetrFrameUR(GetrFrameUR) -->GetrFrameUL;
        GetrFrameUL(GetrFrameUL) -->GetmvPreType;
        GetmvPreType(GetmvPreType_L) -->Getmva0;
        GetmvPreType(GetmvPreType_U) -->Getmva0;
        GetmvPreType(GetmvPreType_UR) -->Getmva0;
        GetmvPreType(Other_MvType) -->Getmva0;
        Getmva0(Getmva_0) -->Getmvb0;
        Getmvb0(Getmvb_0) -->Getmvd0;
        Getmvd0(Getmv_d_0) -->Getmvc0;
        Getmvc0(Getmvc_0) -->Scalemva0;
        Scalemva0(Scale_mva_0) -->Scalemvb0;
        Scalemvb0(Scale_mvb_0) -->Scalemvd0;
        Scalemvd0(Scale_mv_d) -->Scalemvc0;
        Scalemvc0(Scale_mvc_0) -->GetmvPred;
        GetmvPred(GetmvPred_Median_h0) -->GetmvNotMedian;
        GetmvPred(GetmvPred_Median_h1) -->GetmvNotMedian;
        GetmvPred(GetmvPred_L) -->GetmvNotMedian;
        GetmvPred(GetmvPred_U) -->GetmvNotMedian;
        GetmvPred(GetmvPred_UR) -->GetmvNotMedian;
        GetmvNotMedian(Getmv_Is_Median) -->HvIncrease;
        GetmvNotMedian(Getmv_Not_Median_h0) -->HvIncrease;
        GetmvNotMedian(Getmv_Not_Median_h1) -->HvIncrease;
        
        HvIncrease(Hv_Increase) -->Getmva1;
        HvIncrease(End_Block) -->Get_block_X;
        HvIncrease(End_Picture) -->Get_img_Type;
        
        Getmva1(Getmva_1) -->Getmvb1;
        Getmvb1(Getmvb_1) -->Getmvd1;
        Getmvd1(Getmv_d_1) -->Getmvc1;
        Getmvc1(Getmvc_1) -->Scalemva1;
        Scalemva1(Scale_mva_1) -->Scalemvb1;
        Scalemvb1(Scale_mvb_1) -->Scalemvd1;
        Scalemvd1(Scale_mv_d) -->Scalemvc1;
        Scalemvc1(Scale_mvc_1) -->GetmvPred;
        
    end
    priority
        GetmvPred_Median_h0>GetmvPred_Median_h1>GetmvPred_L>GetmvPred_U>GetmvPred_UR;
        GetmvPreType_L>GetmvPreType_U>GetmvPreType_UR;
    end
end