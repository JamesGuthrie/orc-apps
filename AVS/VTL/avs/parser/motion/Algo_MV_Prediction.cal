/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.parser.motion.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.parser.motion;

import avs.Constants.*;

actor Algo_MV_Prediction()
	int(size=32) MbTypeP,
    int (size=32) img_Type,
	bool block_available_up,
    bool block_available_left,
	bool block_available_upleft,
	bool block_available_upright,
	int (size=32) ref_Frame,
    int (size=32) refFr_L,
    int (size=32) refFr_U,
    int (size=32) refFr_UR,
    int (size=32) refFr_UL,
    int (size=32) tmp_Mv_L,
    int (size=32) tmp_Mv_U,
    int (size=32) tmp_Mv_UL,
    int (size=32) tmp_Mv_UR,
    int (size=32) block_X,
    int (size=32) block_Y,
    int (size=32) blockshape_X,
    int (size=32) blockshape_Y,
    int (size=32) reF,
    int (size=32) picture_Distance,
    int (size=32) img_Imgtr_last_P,
    int (size=32) img_Imgtr_last_prev_P,
    int (size=32) img_Imgtr_next_P
    
        ==>
    
    int (size=32) pmv_X,
    int (size=32) pmv_Y
        
        :
    int (size=32) img_type;
    int (size=32) block_x;
    int (size=32) block_y;
    int (size=32) blockshape_x;
    int (size=32) blockshape_y;
    int (size=32) ref;
    int (size=32) picture_distance;
    int (size=32) img_imgtr_last_P;
    int (size=32) img_imgtr_last_prev_P;
    int (size=32) img_imgtr_next_P;
    int (size=32) ref_frame;
        
    int (size=32) mb_x;
    int (size=32) mb_y;
    bool          block_available_up;
    bool          block_available_left;
    bool          block_available_upright;
    bool          block_available_upleft;
    int (size=32) pred_vec:=0;
    int (size=32) mvPredType;
    int (size=32) pmv_x;
    int (size=32) pmv_y;
    int (size=32) rFrameL;
    int (size=32) rFrameU;
    int (size=32) rFrameUR;
    int (size=32) hv:=0;
    List (type:int(size=32),size=3) mva;
    List (type:int(size=32),size=3) mvb;
    List (type:int(size=32),size=3) mvc;
    List (type:int(size=32),size=2) mvd;
    int (size=32) rFrameUL;
    //Macroblock*     currMB = &mb_data[img->current_mb_nr];
    
    function median( int a, int b, int c ) --> int :
    if ((a>=b and b>=c) or (c>=b and b>=a)) then b
    else if ((b>=c and c>=a) or (a>=c and c>=b))  then c
         else a
         end
    end
    end
    
    function abs (int a) --> int :
    if(a>=0) then
         a
    else
         -a
    end
    end
    
    int (size=32) sign;
    int (size=32) mult_distance;
    int (size=32) devide_distance;
    int (size=32) distance;
	
	int cnt:=0;

      Get_newvop : action MbTypeP:[cmd] ==>
      guard
      	(cmd & NEWVOP)!=0
      do	
      	println(cmd + "newvopxxxx " + cnt);
      	cnt :=0 ;
      end

      Get_img_Type : action MbTypeP:[picture_type] ==>
      do
         img_type:=picture_type;
      	println("PIC " + picture_type);
      end 
    
    
	I_Picture : action ==>
	guard
	   img_type=0
	end
	
	Not_I_Picture : action 
    	picture_Distance:[Picture_Distance],
    	img_Imgtr_last_P:[Img_Imgtr_last_P],
    	img_Imgtr_last_prev_P:[Img_Imgtr_last_prev_P],
    	img_Imgtr_next_P:[Img_Imgtr_next_P]
    	==>
	guard
	   img_type!=0
    do
       picture_distance:=Picture_Distance;
       img_imgtr_last_P:=Img_Imgtr_last_P;
       img_imgtr_last_prev_P:=Img_Imgtr_last_prev_P;
       img_imgtr_next_P:=Img_Imgtr_next_P;
	end
    
    int MbType;
    
      Get_mb_Type : action MbTypeP:[MbType] ==>
      do
      	cnt := cnt + 1;
      	println("Algo_MV_Prediction MbType" + MbType);
      end 
            
    Getblock_info : action 
    	block_X:[Block_X], 
    	block_Y:[Block_Y],
    	blockshape_X:[Blockshape_X],
    	blockshape_Y:[Blockshape_Y],
    	ref_Frame:[Ref_Frame],
    	reF:[ReF],
    	block_available_up:[Block_Available_Up],
    	block_available_left:[Block_Available_Left],
    	block_available_upleft:[Block_Available_Upleft],
    	block_available_upright:[Block_Available_Upright]==>
    do
     	println("1 - Algo_MV_Prediction MbType" + MbType);
          block_x:=Block_X;
         block_y:=Block_Y;

         blockshape_x:=Blockshape_X;
         blockshape_y:=Blockshape_Y;
         
         mb_x:=8*block_x;
         mb_y:=8*block_y;

		 ref:=ReF;
         ref_frame:=Ref_Frame;

         block_available_up:= Block_Available_Up;   
         block_available_left:= Block_Available_Left;    
         block_available_upleft:=Block_Available_Upleft;
         block_available_upright:=Block_Available_Upright;    
    end
    
    GetmvPreType_MVPRED_MEDIAN : action ==>
    do
         mvPredType:=0;
    end
    
    GetrFrame : action 
    	refFr_L:[refFr_L],
    	refFr_U:[refFr_U],
    	refFr_UR:[refFr_UR],
    	refFr_UL:[refFr_UL]
    	==>
    do
              rFrameL:=refFr_L;
              rFrameU:=refFr_U;
              rFrameUR:=refFr_UR;
              rFrameUL:=refFr_UL;
    end
    
    GetmvPreType_L : action ==>
    guard
        (rFrameL != -1 and rFrameU = -1 and rFrameUR = -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and ((blockshape_x = 8 and blockshape_y = 16 and mb_x=0 and rFrameL=ref_frame)or(blockshape_x = 16 and blockshape_y = 8 and mb_y!=0 and rFrameL=ref_frame)))               
    do
        mvPredType := 1;
    end
    
    GetmvPreType_U : action ==>
    guard
        (rFrameL = -1 and rFrameU != -1 and rFrameUR = -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and blockshape_x = 16 and blockshape_y = 8 and mb_y=0 and rFrameU=ref_frame)
    do
        mvPredType := 2;
    end
    
    GetmvPreType_UR : action ==>
    guard
        (rFrameL = -1 and rFrameU = -1 and rFrameUR != -1)or(rFrameL != -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
        or(rFrameL != -1 and rFrameU != -1 and rFrameUR = -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)or(rFrameL != -1 and rFrameU = -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
        or(rFrameL = -1 and rFrameU != -1 and rFrameUR != -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)or(rFrameL = -1 and rFrameU = -1 and rFrameUR = -1 and blockshape_x = 8 and blockshape_y = 16 and mb_x!=0 and rFrameUR=ref_frame)
    do
        mvPredType := 3;
    end 
    
    Other_MvType : action ==>

    end
    
    Getmv : action 
    	tmp_Mv_L:[tmp_Mv_L] repeat 2,
    	tmp_Mv_U:[tmp_Mv_U] repeat 2,
    	tmp_Mv_UL:[tmp_Mv_UL] repeat 2,
    	tmp_Mv_UR:[tmp_Mv_UR] repeat 2
    		==>
    do
        /* get mv a */
        if(block_available_left) then
           mva:=tmp_Mv_L;
        else
           mva:=[0, 0];
        end
        /* get mv b */
        if(block_available_up) then
           mvb:=tmp_Mv_U;
        else
           mvb:=[0, 0];
        end
        /* get mv d */
        if(block_available_upleft) then
           mvd:=tmp_Mv_UL;
        else
           mvd:=[0, 0];
        end
        /* get mv c */
        if(block_available_upright) then
           mvc:=tmp_Mv_UR;
        else
           mvc:=mvd;
        end
    end
    
    procedure scale(int mv_in[1], int rframe)
    begin
        if(mv_in[0]>0)then
           sign:=1;
        else
           sign:=-1;
        end
        mv_in[0]:=abs(mv_in[0]);
        if(mv_in[0]=0)then
           //
        else
              if(img_type=1)then
                 if(ref_frame=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(ref_frame=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           mult_distance:=distance;
              if(img_type=1)then
                 if(rframe=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    if(rframe=1)then
                       distance := picture_distance*2 - img_imgtr_last_prev_P*2;
                    else
                       //assert(0);
                    end
                 end
              else
                 if(ref>=0)then
                    distance := picture_distance*2 - img_imgtr_last_P*2;
                 else
                    distance := img_imgtr_next_P*2  - picture_distance*2;
                 end
              end
           distance:=(distance+512)-(distance+512)/512*512;
           devide_distance:=distance;
           mv_in[0] := sign*((mv_in[0]*mult_distance*(512/devide_distance)+256)>>9);
        end
    end
    
    Scale_mva : action ==>
    var
    	int mv_in[1] 
    do
        mv_in[0]:=mva[0];
        scale(mv_in,rFrameL);
        mva[0]:=mv_in[0];
        mv_in[0]:=mva[1];
        scale(mv_in,rFrameL);
        mva[1]:=mv_in[0];
    end
       
    Scale_mvb : action ==>
    var
    	int mv_in[1] 
    do
        mv_in[0]:=mvb[0];
        scale(mv_in,rFrameU);
        mvb[0]:=mv_in[0];
        mv_in[0]:=mvb[1];
        scale(mv_in,rFrameU);
        mvb[1]:=mv_in[0];
	end
    
    
    Scale_mvd : action ==>
    var
    	int mv_in[1] 
    do
        mv_in[0]:=mvd[0];
        scale(mv_in,rFrameUL);
        mvd[0]:=mv_in[0];
        mv_in[0]:=mvd[1];
        scale(mv_in,rFrameUL);
        mvd[1]:=mv_in[0];
	end
    
    Scale_mvc : action ==>
    var
    	int mv_in[1] 
    do
	    if block_available_upright then
	        mv_in[0]:=mvc[0];
	        scale(mv_in,rFrameUR);
        	mvc[0]:=mv_in[0];
	    else
	        mvc[0]:=mvd[0];
	    end
	    if block_available_upright then
	        mv_in[0]:=mvc[1];
	        scale(mv_in,rFrameUR);
	        mvc[1]:=mv_in[0];
	    else
	        mvc[1]:=mvd[1];
	    end
    end
        
    GetmvPred_Median_h0 :action ==>
    guard
        mvPredType=0,
        hv=0

    end
    
    GetmvPred_Median_h1 : action ==>pmv_X:[pmv_x],pmv_Y:[pmv_y] 
    guard
        mvPredType=0,
        hv=1
    do
            mva[2]:=abs(mva[0]-mvb[0])+abs(mva[1]-mvb[1]);
            mvb[2]:=abs(mvb[0]-mvc[0])+abs(mvb[1]-mvc[1]);
            mvc[2]:=abs(mvc[0]-mva[0])+abs(mvc[1]-mva[1]);
            pred_vec:=median(mva[2],mvb[2],mvc[2]);
            if(pred_vec=mvb[2]) then
               pmv_x:=mvc[0];
               pmv_y:=mvc[1];
            else
               if(pred_vec = mvb[2]) then
                  pmv_x:=mva[0];
                  pmv_y:=mva[1];
               else
                  pmv_x:=mvb[0];
                  pmv_y:=mvb[1];
               end
            end
           println(" ****** pmv_x " + pmv_x + " ****** pmv_y " + pmv_y);
    end
    
    GetmvPred_L : action ==>
    guard
        mvPredType=1
    do
        pred_vec:= mva[hv];
    end
    
    GetmvPred_U : action ==>
    guard
        mvPredType=2
    do
        pred_vec:= mvb[hv];
    end
    
    GetmvPred_UR : action ==>
    guard
        mvPredType=3
    do
        pred_vec:= mvc[hv];
    end
    
    Getmv_Is_Median : action ==>
    guard
       mvPredType = 0
    end
    
    Getmv_Not_Median_h0 : action ==>pmv_X:[pmv_x]
    guard
       mvPredType != 0,
       hv=0
    do
           pmv_x := pred_vec;
           println(" ****** pmv_x " + pmv_x);
    end
    
    Getmv_Not_Median_h1 : action ==>pmv_Y:[pmv_y]
    guard
       mvPredType != 0,
       hv=1
    do
           pmv_y := pred_vec;
           println(" ****** pmv_y " + pmv_y);
    end
    
    Hv_Increase : action ==>
    guard 
        hv=0
    do
        hv:=hv+1;
    end
    
    End_Block : action==>
    guard 
        hv=1
    do
       hv:=0;
    end
    
    
    schedule fsm Get_mb_Type:
        Get_mb_Type(Get_newvop) -->Get_img_Type;
        Get_img_Type(Get_img_Type) -->Is_I_Picture;
        Is_I_Picture(I_Picture)-->Get_mb_Type;
        Is_I_Picture(Not_I_Picture) -->Get_mb_Type;      
		Get_mb_Type(Get_mb_Type)  -->Getblockinfo;
        Getblockinfo(Getblock_info) -->GetmvPreTypeMVPREDMEDIAN;
        GetmvPreTypeMVPREDMEDIAN(GetmvPreType_MVPRED_MEDIAN) -->GetrFrame;
        GetrFrame(GetrFrame) -->GetmvPreType;
        GetmvPreType(GetmvPreType_L) -->Getmv;
        GetmvPreType(GetmvPreType_U) -->Getmv;
        GetmvPreType(GetmvPreType_UR) -->Getmv;
        GetmvPreType(Other_MvType) -->Getmv;
        Getmv(Getmv) -->Scalemva;
        Scalemva(Scale_mva) -->Scalemvb;
        Scalemvb(Scale_mvb) -->Scalemvd;
        Scalemvd(Scale_mvd) -->Scalemvc;
        Scalemvc(Scale_mvc) -->GetmvPred;
        GetmvPred(GetmvPred_Median_h0) -->GetmvNotMedian;
        GetmvPred(GetmvPred_Median_h1) -->GetmvNotMedian;
        GetmvPred(GetmvPred_L) -->GetmvNotMedian;
        GetmvPred(GetmvPred_U) -->GetmvNotMedian;
        GetmvPred(GetmvPred_UR) -->GetmvNotMedian;
        GetmvNotMedian(Getmv_Is_Median) -->HvIncrease;
        GetmvNotMedian(Getmv_Not_Median_h0) -->HvIncrease;
        GetmvNotMedian(Getmv_Not_Median_h1) -->HvIncrease;
        
        HvIncrease(Hv_Increase) -->GetmvPred;
        HvIncrease(End_Block) -->Get_mb_Type;                
    end
    priority
    	Get_newvop > Get_mb_Type;
        GetmvPred_Median_h0>GetmvPred_Median_h1>GetmvPred_L>GetmvPred_U>GetmvPred_UR;
        GetmvPreType_L>GetmvPreType_U>GetmvPreType_UR;
    end
end