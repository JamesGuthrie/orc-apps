/*******************************************************************************************************
* COPYRIGHT AND WARRANTY INFORMATION
*
* Copyright 2003, Advanced Audio Video Coding Standard, Part II
*
* DISCLAIMER OF WARRANTY
*
* The contents of this file are subject to the Mozilla Public License
* Version 1.1 (the "License"); you may not use this file except in
* compliance with the License. You may obtain a copy of the License at
* http://www.mozilla.org/MPL/
*
* Software distributed under the License is distributed on an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific language governing rights and limitations under
* the License.
*                     
* THIS IS NOT A GRANT OF PATENT RIGHTS - SEE THE AVS PATENT POLICY.
* The AVS Working Group doesn't represent or warrant that the programs
* furnished here under are free of infringement of any third-party patents.
* Commercial implementations of AVS, including shareware, may be
* subject to royalty fees to patent holders. Information regarding
* the AVS patent policy for standardization procedure is available at 
* AVS Web site http://www.avs.parser.motion.org.cn. Patent Licensing is outside
* of AVS Working Group.
*******************************************************************************************************/
package avs.parser.motion;

actor Algo_MVReconstruct_AVSJZ()
      int (size=32) Mv_Pred_X,
      int (size=32) Mv_Pred_Y,
      int (size=32) Mvd_X,
      int (size=32) Mvd_Y,
      int (size=32) Is_P_Skip,
      bool Mv_Pred
      ==>
      int (size=32) Mv_X,
      int (size=32) Mv_Y//,
//mrl      int (size=32) Mv
      :
      
      int (size=32) Is_P_Skip;
      
      Get_P_Skip : action Is_P_Skip:[is_P_Skip]==>
      do
         Is_P_Skip:=is_P_Skip;
      end
      
      MVReconstruct_Not_Skip: action Mv_Pred_X:[mv_Pred_X],Mv_Pred_Y:[mv_Pred_Y],Mvd_X:[mvd_X],Mvd_Y:[mvd_Y]==>Mv_X:[mv_Pred_X+mvd_X],Mv_Y:[mv_Pred_Y+mvd_Y]//mrl ,Mv:[mv_Pred_X+mvd_X,mv_Pred_Y+mvd_Y]
      guard
         Is_P_Skip=0
      do
      	println("**************************** mv_Pred_X" + mv_Pred_X+ " mvd_X " + mvd_X + " mv_Pred_Y "+ mv_Pred_Y +" mvd_Y " + mvd_Y);
      end
      
      MVReconstruct_Skip_Not_Mv_Pred : action Mv_Pred:[mv_Pred]==>Mv_X:[0],Mv_Y:[0]//mrl,Mv:[0,0]
      guard
         Is_P_Skip=1,
         not mv_Pred
      end
      
      MVReconstruct_Skip_Mv_Pred : action Mv_Pred:[mv_Pred],Mv_Pred_X:[mv_Pred_X],Mv_Pred_Y:[mv_Pred_Y]==>Mv_X:[mv_Pred_X],Mv_Y:[mv_Pred_Y]
      guard
         Is_P_Skip=1,
         mv_Pred
      end
      
      schedule fsm  Get_P_Skip:
         Get_P_Skip(Get_P_Skip)-->MVReconstruct;
         MVReconstruct(MVReconstruct_Not_Skip)-->Get_P_Skip;
         MVReconstruct(MVReconstruct_Skip_Not_Mv_Pred)-->Get_P_Skip;
         MVReconstruct(MVReconstruct_Skip_Mv_Pred)-->Get_P_Skip;
      end
end