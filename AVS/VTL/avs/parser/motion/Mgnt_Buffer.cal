package avs.parser.motion;

import avs.Constants.*;

actor Mgnt_Buffer()
	  int (size=32) Is_P_Skip,
	  int(size=32) MbType,
      int (size=32) img_Mb_X,
      int (size=32) img_Mb_Y,
      int (size=32) blockshape_X,
      int (size=32) blockshape_Y,
      int (size=32) IsIntraMb,
      int (size=32) Ref_Frame,
      int (size=32) Ref,
      int (size=32) Mv_X,
      int (size=32) Mv_Y
      ==>
	  int (size=32) Is_P_SkipOut,
      bool mb_available_up,
      bool mb_available_left,
	  bool block_available_up,
	  bool block_available_left,
	  bool block_available_upleft,
	  bool block_available_upright,
	  	  
      int (size=32) refFr_L,
      int (size=32) refFr_U,
      int (size=32) refFr_UR,
      int (size=32) refFr_UL,
      int (size=32) tmp_Mv_L,
      int (size=32) tmp_Mv_U,
      int (size=32) tmp_Mv_UL,
      int (size=32) tmp_Mv_UR,
      
      int (size=32) block_X,
      int (size=32) block_Y,
      int (size=32) blockshape_X_Out,
      int (size=32) blockshape_Y_Out,
      
	  int(size=32) MbTypeP
      :
      int (size=32) Img_Type;
      int (size=32) Img_Mb_X;
      int (size=32) Img_Mb_Y;
      int (size=32) Block_X;
      int (size=32) Block_Y;
      int (size=32) Blockshape_X;
      int (size=32) Blockshape_Y;
      
      int (size=32) MB_WIDTH; //number of MB per lines
	  
	  int (size=32) Pic_Block_X;
	  int (size=32) Pic_Block_Y;
	  int (size=32) mb_x;
	  int (size=32) mb_y;
	  
	  
	  int (size=32) count;
	  
	  bool mb_available_up;
	  bool mb_available_left;
	  bool mb_available_upright;
	  bool block_available_up;
	  bool block_available_left;
	  bool block_available_upleft;
	  bool block_available_upright;
	  
      
      int(size=32) mv_tab[240][136][2]:= [ [[0, 0] : for int i in 0 .. 135 ]: for int j in 0 .. 239 ];
      int(size=32) refFrArr[136][240]:=[[-1 : for int i in 0 .. 239]: for int j in 0 .. 135 ];
      
      int(size=32) p_skip;
      
      Get_newvop : action MbType:[cmd] ==> MbTypeP:[cmd]
      guard
      	(cmd & NEWVOP)!=0
      end

      Get_Img_Type : action MbType:[picture_type, w, h] ==> MbTypeP:[picture_type]
      do
         Img_Type:=picture_type;
         MB_WIDTH := w;
         count:=0;
         Block_X:=0;
         Block_Y:=0;
      end
      
      I_Picture : action ==>
      guard
         Img_Type=0
      end
      
      Not_I_Picture : action ==>
      guard
         Img_Type!=0
      end
      
      int Mb_Type;
      bool isIntra;   
      
      Get_Mb_type: action 
      	MbType:[mbtype]
      	==>
      do
      	Mb_Type :=mbtype;
      	isIntra:= (Img_Type=1 && Mb_Type > 4) || (Img_Type=2 && Mb_Type > 22);
      end
      
      Get_Loc : action img_Mb_X:[img_Mb_X], img_Mb_Y:[img_Mb_Y]==> 
      do
         Img_Mb_X:=img_Mb_X;
         Img_Mb_Y:=img_Mb_Y;
	  	 mb_available_up:=(Img_Mb_Y>0);
	     mb_available_left:=(Img_Mb_X>0);
	     mb_available_upright:=(mb_available_up)&&(Img_Mb_X<MB_WIDTH);
      end
      
      IntraMb : action 
      	Is_P_Skip:[skip],
      	IsIntraMb:[isIntraMb],
      	blockshape_X:[blockshape_X],
      	blockshape_Y:[blockshape_Y] ==>
      guard
         isIntra
      do
          mv_tab[2*Img_Mb_X][2*Img_Mb_Y]:=[0,0];
          mv_tab[2*Img_Mb_X+1][2*Img_Mb_Y]:=[0,0];
          mv_tab[2*Img_Mb_X][2*Img_Mb_Y+1]:=[0,0];
          mv_tab[2*Img_Mb_X+1][2*Img_Mb_Y+1]:=[0,0];
      end
      
      Set_Count : action 
      	IsIntraMb:[isIntraMb],
      	Is_P_Skip:[skip]
      	==>
      guard
         not isIntra
      do
         p_skip := skip;
      end
            
      Get_Blockshape : action 
      	blockshape_X:[blockshape_X], 
      	blockshape_Y:[blockshape_Y]==>
      do
         Blockshape_X:=blockshape_X;
         Blockshape_Y:=blockshape_Y;
      end
            
      
      Get_Mb_pos : action  ==> 
      do 
         mb_x :=8*Block_X;
         mb_y :=8*Block_Y;
	     block_available_up:=(mb_available_up || (mb_y > 0));
	     block_available_left:=(mb_available_left || (mb_x > 0));
	     block_available_upleft:=block_available_up&&block_available_left;
// FIXME block_available_upright; to be simplified
         if(mb_y>0)then
         	if(mb_x<8)then
         		if(mb_y=8)then
         			if(Blockshape_X = 16)then
         			   block_available_upright := false;
         			else
         			   block_available_upright := true; 
         			end
         		else
         			if(mb_x+Blockshape_X !=8)then
         			   block_available_upright := true;
         			else
         			   block_available_upright := false; 
         			end
         		end
         	else
         		if(mb_x+Blockshape_X != 16)then
         		   block_available_upright := true;
         		else
         		   block_available_upright := false;
         		end
         	end
         else
             if(mb_x+Blockshape_X != 16)then
                block_available_upright := block_available_up;
             else
                block_available_upright := mb_available_upright;
             end
         end  
      end
      
      Get_Pic_Block_pos : action  ==>
      do
         Pic_Block_X:=2*Img_Mb_X+Block_X;
         Pic_Block_Y:=2*Img_Mb_Y+Block_Y;
      end
      
      get_refFr_16x16 : action 
      	Ref_Frame:[ref_Frame],
      	Ref:[ref]
      		==>
      guard
         Blockshape_X=16,
         Blockshape_Y=16
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y][Pic_Block_X+1]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X+1]:=ref_Frame;
      end
      
      get_refFr_16x8 : action 
      	Ref_Frame:[ref_Frame],
      	Ref:[ref]
      		==>
      guard
         Blockshape_X=16,
         Blockshape_Y=8
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y][Pic_Block_X+1]:=ref_Frame;
      end
      
      get_refFr_8x16 : action 
      	Ref_Frame:[ref_Frame],
      	Ref:[ref]
      		==>
      guard
         Blockshape_X=8,
         Blockshape_Y=16
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
         refFrArr[Pic_Block_Y+1][Pic_Block_X]:=ref_Frame;
      end
      
      get_refFr_8x8 : action 
      	Ref_Frame:[ref_Frame],
      	Ref:[ref]
      		==>
      guard
         Blockshape_X=8,
         Blockshape_Y=8
      do
         refFrArr[Pic_Block_Y][Pic_Block_X]:=ref_Frame;
      end
      
      Get_block_available : action 
      	==>
      		mb_available_up:[mb_available_up],
      		mb_available_left:[mb_available_left],
      		block_available_up:[block_available_up],
      		block_available_left:[block_available_left],
      		block_available_upleft:[block_available_upleft],
      		block_available_upright:[block_available_upright]
      end
    
      
      Get_refFr : action 
      	==>
      		refFr_L:[refFr_left],
      		refFr_U:[refFr_up],
      		refFr_UL:[refFr_up_left],
      		refFr_UR:[refFr_up_right]  
      var
      	int(size=32) refFr_left,
      	int(size=32) refFr_up,
      	int(size=32) refFr_up_left,
      	int(size=32) refFr_up_right
      do
      	refFr_left := if block_available_left then refFrArr[Pic_Block_Y][Pic_Block_X-1] else -1 end;
      	refFr_up := if block_available_up then refFrArr[Pic_Block_Y-1][Pic_Block_X] else -1 end;
      	refFr_up_left := if block_available_upleft then refFrArr[Pic_Block_Y-1][Pic_Block_X-1] else -1 end; 
      	refFr_up_right := if(block_available_upright=true)then
      	                                      refFrArr[Pic_Block_Y-1][Pic_Block_X+Blockshape_X/8]
      	                                   else
      	                                      if(block_available_upleft)then
      	                                         refFrArr[Pic_Block_Y-1][Pic_Block_X-1]
      	                                      else
      	                                         -1
      	                                      end
      	                                   end;
      end

      Get_tab_Mv : action 
      	==>
      		Is_P_SkipOut:[p_skip],
      		tmp_Mv_L : [mv_up] repeat 2,
      		tmp_Mv_U : [mv_left] repeat 2,
      		tmp_Mv_UL : [mv_up_left] repeat 2,
      		tmp_Mv_UR : [mv_up_right] repeat 2,
      		blockshape_X_Out:[Blockshape_X],
      		blockshape_Y_Out:[Blockshape_Y],
      		MbTypeP:[Mb_Type]
      var 
      	 int(size=32) mv_up[2],
      	 int(size=32) mv_left[2],
      	 int(size=32) mv_up_left[2],
      	 int(size=32) mv_up_right[2],
      	 int (size=32) mv_d[2]
      do
      	 mv_up:= if block_available_left then 
      				[mv_tab[Pic_Block_X-1][Pic_Block_Y][0], mv_tab[Pic_Block_X-1][Pic_Block_Y][1]] 
      	        else [0,0] end;                                       
		 mv_left:=if block_available_up then 
					[mv_tab[Pic_Block_X][Pic_Block_Y-1][0], mv_tab[Pic_Block_X][Pic_Block_Y-1][1]] 
      	         else [0,0] end;
         mv_up_left := if block_available_upleft then 
         					[mv_tab[Pic_Block_X-1][Pic_Block_Y-1][0], mv_tab[Pic_Block_X-1][Pic_Block_Y-1][1]] 
      	               else [0, 0] end;
         mv_d := if block_available_upleft then 
         			[mv_tab[Pic_Block_X-1][Pic_Block_Y-1][0], mv_tab[Pic_Block_X-1][Pic_Block_Y-1][1]]
         		 else [0, 0] end;
      	mv_up_right := if block_available_upright then 
      						[mv_tab[Pic_Block_X+Blockshape_X/8][Pic_Block_Y-1][0], mv_tab[Pic_Block_X+Blockshape_X/8][Pic_Block_Y-1][1]] 
      	               else mv_d end;
      end
                        
      Send_Block_pos: action ==>block_X:[Block_X], block_Y:[Block_Y]
      end
      
      get_Mv_16x16 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=16,
         Blockshape_Y=16
      do
         mv_tab[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         mv_tab[Pic_Block_X+1][Pic_Block_Y]:=[mv_X,mv_Y];
         mv_tab[Pic_Block_X][Pic_Block_Y+1]:=[mv_X,mv_Y];
         mv_tab[Pic_Block_X+1][Pic_Block_Y+1]:=[mv_X,mv_Y];
      end
      
      get_Mv_16x8 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=16,
         Blockshape_Y=8
      do
         mv_tab[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         mv_tab[Pic_Block_X+1][Pic_Block_Y]:=[mv_X,mv_Y];
      end
      
      get_Mv_8x16 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=8,
         Blockshape_Y=16
      do
         mv_tab[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
         mv_tab[Pic_Block_X][Pic_Block_Y+1]:=[mv_X,mv_Y];
      end
      
      get_Mv_8x8 : action Mv_X:[mv_X],Mv_Y:[mv_Y]==>
      guard
         Blockshape_X=8,
         Blockshape_Y=8
      do
         mv_tab[Pic_Block_X][Pic_Block_Y]:=[mv_X,mv_Y];
      end
      
      Get_count : action ==>
      guard
          count+(Blockshape_Y>>3)*(Blockshape_X>>3)<4
      do
         count:=count+(Blockshape_Y>>3)*(Blockshape_X>>3);
         if(Block_X=0 and Block_Y=0) then 
         
            if(Blockshape_X=8 and Blockshape_Y=8) then
               Block_X:=1;
               Block_Y:=0;
            end
            
            if(Blockshape_X=8 and Blockshape_Y=16) then
               Block_X:=1;
               Block_Y:=0;
            end
            
            if(Blockshape_X=16 and Blockshape_Y=8) then
               Block_X:=0;
               Block_Y:=1;
            end
          
         else
         
            if(Block_X=1 and Block_Y=0) then 
            
               if(Blockshape_X=8 and Blockshape_Y=8) then
                  Block_X:=0;
                  Block_Y:=1;
               end
               
            else
            
               if(Block_X=0 and Block_Y=1)then
               
                  if(Blockshape_X=8 and Blockshape_Y=8) then
                     Block_X:=1;
                     Block_Y:=1;
                  end
                  
               end
               
            end
         
         end
         
      end
 
      Macro_End : action ==>
      guard
          count+(Blockshape_Y>>3)*(Blockshape_X>>3)>3
      do
          count:=0;
          Block_X:=0;
          Block_Y:=0;
      end
            
            
      schedule fsm Get_Mb_type :
          //Picture
          Get_Mb_type(Get_newvop)-->Get_Img_Type;
          Get_Img_Type(Get_Img_Type)-->Is_I_Picture;
          Is_I_Picture(I_Picture)-->Get_Mb_type;
          Is_I_Picture(Not_I_Picture)-->Get_Mb_type;
          Get_Mb_type(Get_Mb_type)-->Get_Loc;
          //Macroblock
          Get_Loc(Get_Loc)-->Is_I8MB;
          
          
          Is_I8MB (IntraMb)-->Get_Mb_type;
          Is_I8MB (Set_Count)-->Get_Blockshape;
          Get_Blockshape(Get_Blockshape) --> Get_Mb_pos;
          Get_Mb_pos (Get_Mb_pos) -->Get_Pic_Block_pos;
          Get_Pic_Block_pos (Get_Pic_Block_pos) -->Get_refFr_X_X;
          
          Get_refFr_X_X (get_refFr_16x16) -->Get_block_available;
          Get_refFr_X_X (get_refFr_16x8) -->Get_block_available;
          Get_refFr_X_X (get_refFr_8x16) -->Get_block_available;
          Get_refFr_X_X (get_refFr_8x8) -->Get_block_available;
          
          Get_block_available (Get_block_available) -->Get_refFr;
          Get_refFr (Get_refFr) -->Get_tab_Mv;
          Get_tab_Mv (Get_tab_Mv) -->Send_Block_pos;
          Send_Block_pos (Send_Block_pos) -->Get_Mv;
          
          Get_Mv (get_Mv_16x16) -->Get_count;
          Get_Mv (get_Mv_16x8) -->Get_count;
          Get_Mv (get_Mv_8x16) -->Get_count;
          Get_Mv (get_Mv_8x8) -->Get_count;
          
          Get_count (Get_count) -->Get_Mb_type;
          Get_count (Macro_End) -->Get_Mb_type;
      end
      
      priority
      	Get_newvop > Get_Mb_type;
      end
end