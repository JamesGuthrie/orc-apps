package avs.parser.motion;

actor Picture_Distance()
    int(size=32) Img_Type,
    int(size=32) picture_distance
    ==>
    int(size=32) picture_distance_out,
    int(size=32) img_Imgtr_last_P,
    int(size=32) img_Imgtr_last_prev_P,
    int(size=32) img_Imgtr_next_P
    :
    int(size=32) picture_distance_pre;
    int(size=32) Img_Imgtr_last_P;
    int(size=32) Img_Imgtr_last_prev_P;
    int(size=32) Img_Imgtr_next_P;
    int(size=32) img_Type;
    
    intialize : action ==>
    do
        Img_Imgtr_last_P:=0;
        Img_Imgtr_next_P:=0;
        picture_distance_pre:=0;
    end
    
    Get_picture_distance : action picture_distance:[picture_distance],Img_Type:[Img_Type]==>
    do
        img_Type:=Img_Type;
        Img_Imgtr_last_prev_P:=Img_Imgtr_last_P;
        Img_Imgtr_last_P:=Img_Imgtr_next_P;
        Img_Imgtr_next_P:=picture_distance_pre;
        picture_distance_pre:=picture_distance;
    end
    
    Send_Info : action ==>picture_distance_out:[picture_distance_pre],img_Imgtr_last_P:[Img_Imgtr_last_P],img_Imgtr_last_prev_P:[Img_Imgtr_last_prev_P],img_Imgtr_next_P:[Img_Imgtr_next_P]
    guard
        img_Type!=0
    do
       
    end
    
    Not_Send_Info : action ==>
    guard
        img_Type=0
    do
    
    end
    
    schedule fsm intialize:
       intialize(intialize)-->Get_picture_distance;
       Get_picture_distance(Get_picture_distance)-->is_send_info;
       is_send_info(Send_Info) -->Get_picture_distance;
       is_send_info(Not_Send_Info) -->Get_picture_distance;
    end
end