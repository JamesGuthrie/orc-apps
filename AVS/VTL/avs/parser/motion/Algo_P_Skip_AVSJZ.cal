package avs.parser.motion;

actor Algo_P_Skip_AVSJZ()
    int (size=32) Is_P_Skip,
    bool mb_available_up,
    bool mb_available_left,
    int (size=32) refFr_L,
    int (size=32) refFr_U,
    int (size=32) refFr_UR,
    int (size=32) refFr_UL,
    int (size=32) tmp_Mv_L,
    int (size=32) tmp_Mv_U,
    int (size=32) tmp_Mv_UL,
    int (size=32) tmp_Mv_UR
    ==>
    int (size=32) refFr_L_out,
    int (size=32) refFr_U_out,
    int (size=32) refFr_UR_out,
    int (size=32) refFr_UL_out,
    int (size=32) tmp_Mv_L_out,
    int (size=32) tmp_Mv_U_out,
    int (size=32) tmp_Mv_UL_out,
    int (size=32) tmp_Mv_UR_out
    :
    
    bool mb_available_up;
    bool mb_available_left;
    int (size=32) refFrArr_up;
    int (size=32) tmp_Mv_U[2];
    int (size=32) refFrArr_left;
    int (size=32) tmp_Mv_L[2];
    int (size=32) zeromotionabove;
    int (size=32) zeromotionleft;
    
    P_Skip : action Is_P_Skip:[is_P_Skip]==>
    guard 
        is_P_Skip=1
    do
    	println("mmmmmmmmmmmmmmmmmmmmmmmmm is_P_Skip " + is_P_Skip);
    end
    
    Not_P_Skip : action Is_P_Skip:[is_P_Skip]==>
    guard 
        is_P_Skip=0
    do
    	println("qqqqqqqqqqqqqqqqqqqqqqqqq is_P_Skip " + is_P_Skip);
    end
    
    Getblock_available_info : action 
    	mb_available_up:[Mb_available_up],
    	mb_available_left:[Mb_available_left],
    	refFr_UL:[refFr_UL], 
    	refFr_UR:[refFr_UR],
    	tmp_Mv_UL:[tmp_Mv_UL] repeat 2,
    	tmp_Mv_UR:[tmp_Mv_UR] repeat 2,
    	refFr_L:[refFr_L],
    	refFr_U:[refFr_U],
    	tmp_Mv_L:[tmp_Mv_L] repeat 2,
    	tmp_Mv_U:[tmp_Mv_U] repeat 2
    	==>
    		refFr_UL_out:[refFr_UL], 
    		refFr_UR_out:[refFr_UR],
    		tmp_Mv_UL_out:[tmp_Mv_UL]repeat 2,
    		tmp_Mv_UR_out:[tmp_Mv_UR]repeat 2,
    		refFr_L_out:[refFr_L],
    		refFr_U_out:[refFr_U],
    		tmp_Mv_L_out:[tmp_Mv_L] repeat 2,
    		tmp_Mv_U_out:[tmp_Mv_U] repeat 2
    end
            
        
    //////////////////////////////////////////////////////////////
   Get_Mb_Available: action 
    	mb_available_up:[Mb_available_up],
    	mb_available_left:[Mb_available_left]
    	==>
   do
      mb_available_up:=Mb_available_up;
      mb_available_left:=Mb_available_left;
   end
   
   Get_ZeroMotionAbove: action 
   	 refFr_U:[RefFrArr_up],
   	 tmp_Mv_U:[Tmp_Mv_U] repeat 2
   	 	==>
   do
      refFrArr_up:=RefFrArr_up;
      tmp_Mv_U:=Tmp_Mv_U;
      if(mb_available_up!=false)then
         zeromotionabove:=1;
      else
         if(refFrArr_up=0 and tmp_Mv_U[0]=0 and tmp_Mv_U[1]=0)then
            zeromotionabove:=1;
         else
            zeromotionabove:=0;
         end
      end
      println("zeromotionabove " + zeromotionabove);
   end
   
   Get_ZeroMotionLeft: action 
   	 refFr_L:[RefFrArr_left],
   	 tmp_Mv_L:[Tmp_Mv_L] repeat 2
   	 ==>
   do
      refFrArr_left:=RefFrArr_left;
      tmp_Mv_L:=Tmp_Mv_L;
      if(mb_available_left!=false)then
         zeromotionleft:=1;
      else
         if(refFrArr_left=0 and tmp_Mv_L[0]=0 and tmp_Mv_L[1]=0)then
            zeromotionleft:=1;
         else
            zeromotionleft:=0;
         end
      end
      println("zeromotionleft " + zeromotionleft);
   end
   
   Not_Get_MVPred: action 
   	  refFr_UR:[RefFrArr_UR],
   	  refFr_UL:[RefFrArr_UL],
   	  tmp_Mv_UL:[Tmp_Mv_UL] repeat 2,
   	  tmp_Mv_UR:[Tmp_Mv_UR] repeat 2
      	==>
     	refFr_U_out:[refFrArr_up],
     	refFr_L_out:[refFrArr_left],
     	refFr_UR_out:[RefFrArr_UR],
     	refFr_UL_out:[RefFrArr_UL],
     	tmp_Mv_U_out:[[0,0]]repeat 2,
     	tmp_Mv_L_out:[[0,0]]repeat 2,
     	tmp_Mv_UL_out:[[0,0]]repeat 2,
     	tmp_Mv_UR_out:[[0,0]]repeat 2
   guard zeromotionabove=1 or zeromotionleft=1
   do
   	println("Not_Get_MVPred");
   end 
 
   Get_MVPred: action 
   	 refFr_UR:[RefFrArr_UR],
   	 refFr_UL:[RefFrArr_UL],
   	 tmp_Mv_UL:[Tmp_Mv_UL] repeat 2,
   	 tmp_Mv_UR:[Tmp_Mv_UR] repeat 2
     	==>
     	refFr_U_out:[refFrArr_up],
     	refFr_L_out:[refFrArr_left],
     	refFr_UR_out:[RefFrArr_UR],
     	refFr_UL_out:[RefFrArr_UL],
     	tmp_Mv_U_out:[tmp_Mv_U]repeat 2,
     	tmp_Mv_L_out:[tmp_Mv_L]repeat 2,
     	tmp_Mv_UL_out:[Tmp_Mv_UL]repeat 2,
     	tmp_Mv_UR_out:[Tmp_Mv_UR]repeat 2
   guard zeromotionabove=0 and zeromotionleft=0
   do
   	println("Get_MVPred");
   end
   
   

   schedule fsm Is_P_Skip:
          Is_P_Skip(P_Skip)-->Get_Mb_Available;
          Is_P_Skip(Not_P_Skip)-->Getblock_available_info;
          
          Getblock_available_info(Getblock_available_info)-->Is_P_Skip;
          
          Get_Mb_Available (Get_Mb_Available) -->Get_ZeroMotionAbove;
          Get_ZeroMotionAbove(Get_ZeroMotionAbove) -->Get_ZeroMotionLeft;
          Get_ZeroMotionLeft(Get_ZeroMotionLeft) -->Is_Get_MvPred;
          Is_Get_MvPred(Not_Get_MVPred) -->Is_P_Skip;
          Is_Get_MvPred(Get_MVPred) -->Is_P_Skip;
     end
end