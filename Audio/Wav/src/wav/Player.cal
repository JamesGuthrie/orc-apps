/*
 * Copyright (c) 2013, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Malgorzata Wiszniewska

package wav;

import std.audio.Audio.*;

actor Player() 
	uint(size=32) SampleRate, 
	uint(size=16) SampleSizeInBits, 
	uint(size=16) Channels,
	uint ChunkSize, 
	uint(size=8) Data 
		==> :
		
	int numberOfBytes := 0;
	int counter := 0;

	getParameters: action SampleRate:[sr], SampleSizeInBits:[ssib], Channels:[ch], ChunkSize:[chs] ==> 
	do
		audio_initAudioFormat(sr, ssib, ch);
		numberOfBytes := chs;
	end
	
	receive: action Data:[d] ==>
	do 
		audio_receive(d);
		counter := counter + 1;
	end
	
	play: action ==>
	do
		audio_play();
	end
	
	checkMaxBuffer: action ==>
	guard
		audio_bufferFull()
	do
	end
	
	stop: action ==>
	guard
		counter = numberOfBytes
	do
		counter := 0;
	end
	
	close: action ==>
	do
		audio_close();
	end
	
	schedule fsm Init:
		Init(getParameters) --> FillBuffer;
		FillBuffer(receive) --> FillBuffer;
		FillBuffer(checkMaxBuffer) --> PlayB;
		FillBuffer(stop) --> Play;
		PlayB(play) --> FillBuffer;
		Play(play) --> Kill;
		Kill(close) --> Init;
	end
	
	priority
		checkMaxBuffer > stop > receive;
	end
end