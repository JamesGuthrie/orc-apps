/*
**********************************************************************************

                           
                            ---------------
         (list) bloc_16===>|               |
                           |               |
         (list) bloc_4 ===>|               |===>(list) bloc1_4
                           |   extract     |
        (list)  address===>|               |===>(list) bloc2_4
                           |               |
                           |               |
                            ---------------
Cet actionneur reçoit les colonnes de chaque macrobloc P(pattern) et SW(search window)
Afin d'extraire les colonnes correspondants aux adresses recus pour sw

***********************************************************************************
*/
package motion;

actor Extract () 
int col_pat,
//bloc de taille 16
int col_sw,
//block de taille 40
int address_y, bool start_inter_h, bool start_inter_q ==> int col_pat_1,
//bloc de taille 16
int col_sw_1
//block de taille 16
:

	int compteur1;

	int compteur2;

	int cpt;

	int pattern_H = 16;

	int pattern_H_1 = 4;

	List(type: int(size=8), size=16) buf0 := [ 0 : for int i in 1 .. 16 ];

	List(type: int(size=8), size=40) buf1 := [ 0 : for int i in 1 .. 40 ];

	List(type: int(size=8), size=4) buf2 := [ 0 : for int i in 1 .. 4 ];

	List(type: int(size=8), size=9) buf3 := [ 0 : for int i in 1 .. 9 ];

	List(type: int(size=8), size=15) buf4 := [ 0 : for int i in 1 .. 15 ];

	List(type: int(size=8), size=pattern_H) bloc1 := [ 0 : for int i in 1 ..
	pattern_H ];

	List(type: int(size=8), size=pattern_H) bloc2 := [ 0 : for int i in 1 ..
	pattern_H ];

	List(type: int(size=8), size=pattern_H_1) bloc10 := [ 0 : for int i in 1 ..
	pattern_H_1 ];

	List(type: int(size=8), size=pattern_H_1) bloc20 := [ 0 : for int i in 1 ..
	pattern_H_1 ];

	bool extract;

	bool read;

	bool read1;

	bool read2;

	bool extract1;

	bool extract2;

	int y;

	bool start_inter_h_temp_1;

	bool start_inter_q_temp_1;

	int pix_sw;

	int pix_p;

	Init: action ==>
	do
	//println("init3 ");
		y := 0;
		read := true;
		extract := false;
		compteur2 := 0;
	end

	Read: action address_y:[ addr ], start_inter_h:[ start_inter_h_temp ] ==>
	guard
		read = true
	do
		read := false;
		y := addr;
		compteur1 := 0;
		start_inter_h_temp_1 := start_inter_h_temp;
		cpt := 0;
	end

	RempColP1_a: action col_pat:[ val1 ] ==>
	guard
		cpt < 15
	do
		buf0[cpt] := val1;
		cpt := cpt + 1;
	end

	RempColP2_a: action col_pat:[ val1 ] ==>
	guard
		cpt = 15
	do
		buf0[cpt] := val1;
		cpt := 0;
	end

	RempColSw1_a: action col_sw:[ val2 ] ==>
	guard
		cpt < 40
	do
		buf1[cpt] := val2;
		cpt := cpt + 1;
	end

	RempColSw2_a: action col_sw:[ val2 ] ==>
	guard
		cpt = 40
	do
		buf1[cpt] := val2;
		cpt := 0;
		extract := true;
	end

	Extract: action ==>
	guard
		extract = true
	var
		int i , int j
	do
	//println("-----extract_extr-----");
		j := y;
		i := 0;
		while j < (y + pattern_H) do
			bloc2[i] := buf1[j];
			j := j + 1;
			i := i + 1;
		end
		j := 0;
		i := 0;
		while j < pattern_H do
			bloc1[i] := buf0[j];
			j := j + 1;
			i := i + 1;
		end
		extract := false;
		compteur1 := compteur1 + 1;
		//println("bloc1_EXTR:"+bloc1);

		//println("bloc2_EXTR:"+bloc2);

	end

	EnvoiCol1_a: action ==> col_pat_1:[ pix_p ], col_sw_1:[ pix_sw ]
	guard
		cpt < 15
	do
		pix_p := bloc1[cpt];
		pix_sw := bloc2[cpt];
		cpt := cpt + 1;
	end

	EnvoiCol2_a: action ==> col_sw_1:[ pix_sw ], col_pat_1:[ pix_p ]
	guard
		cpt = 15
	do
		pix_p := bloc1[cpt];
		pix_sw := bloc2[cpt];
		//cpt:=0;

	end

	Incr1: action ==>
	guard
		compteur1 < 16
	do
		cpt := 0;
	end

	Incr2_a: action ==>
	guard
		compteur1 = 16,
		start_inter_h_temp_1 = false
	do
	//println("-----incr2_b_extr-----");
		read := true;
	end

	Incr2_b: action ==>
	guard
		compteur1 = 16,
		start_inter_h_temp_1 = true
	do
	//println("-----incr2_b_extr-----");
		read1 := true;
	end
	//////////////////////////////////////////////////////////////////////////////		
	Read1: action address_y:[ addr ], start_inter_q:[ start_inter_q_temp ] ==>
	guard
		read1 = true
	do
		read1 := false;
		y := addr;
		// 	println("-----read1_extr-----");
		start_inter_q_temp_1 := start_inter_q_temp;
		compteur1 := 0;
		println("++++++++++++++addr_extraction_h++++++++++++++:" + addr);
		extract1 := true;
	end

	RempColP1_b: action col_pat:[ val1 ] ==>
	guard
		cpt < 3
	do
		buf2[cpt] := val1;
		cpt := cpt + 1;
	end

	RempColP2_b: action col_pat:[ val1 ] ==>
	guard
		cpt = 3
	do
		buf2[cpt] := val1;
		cpt := 0;
	end

	RempColSw1_b: action col_sw:[ val2 ] ==>
	guard
		cpt < 8
	do
		buf3[cpt] := val2;
		cpt := cpt + 1;
	end

	RempColSw2_b: action col_sw:[ val2 ] ==>
	guard
		cpt = 8
	do
		buf3[cpt] := val2;
		cpt := 0;
	end

	Extract1: action ==>
	//col_sw_1:[bloc10], col_pat_1:[bloc20]

	guard
		extract1 = true
	var
		int i , int j
	do
		j := y;
		i := 0;
		while i < 4 do
			bloc20[i] := buf3[j];
			j := j + 2;
			i := i + 1;
		end
		j := 0;
		i := 0;
		while j < 4 do
			bloc10[i] := buf2[j];
			j := j + 1;
			i := i + 1;
		end
		//println("bloc1_extraction_h_sw:"+bloc10);

		//println("bloc2_extraction_h_p:"+bloc20);
		extract1 := false;
		compteur1 := compteur1 + 1;
	end

	EnvoiCol1_b: action ==> col_pat_1:[ pix_p ], col_sw_1:[ pix_sw ]
	guard
		cpt < 3
	do
		pix_p := bloc10[cpt];
		pix_sw := bloc20[cpt];
		cpt := cpt + 1;
	end

	EnvoiCol2_b: action col_sw:[ val1 ] ==> col_sw_1:[ pix_sw ], col_pat_1:[ pix_p
		]
	guard
		cpt = 3
	do
		buf2[cpt] := val1;
		pix_sw := bloc20[cpt];
		pix_p := bloc10[cpt];
		cpt := 0;
	end

	Incr3: action ==>
	guard
		compteur1 < 4
	do
	//	println("-----incr3_extr-----");
		extract1 := true;
	end

	Incr4_a: action ==>
	guard
		compteur1 = 4,
		start_inter_q_temp_1 = false
	do
	//	println("-----incr4_a_extr-----");
		read1 := true;
	end

	Incr4_b: action ==>
	guard
		compteur1 = 4,
		start_inter_q_temp_1 = true
	do
	//	println("-----incr4_b_extr-----");
		read2 := true;
	end

	Read2: action address_y:[ addr ] ==>
	guard
		read2 = true
	do
	//  	println("-----read2_extr-----");
		read2 := false;
		y := addr;
		compteur1 := 0;
		println("###########addr_extraction_q###########:" + addr);
		cpt := 0;
		//extract2:=true;

	end

	RempColP1_c: action col_pat:[ val1 ] ==>
	guard
		cpt < 3
	do
		buf2[cpt] := val1;
		cpt := cpt + 1;
	end

	RempColP2_c: action col_pat:[ val1 ] ==>
	guard
		cpt = 3
	do
		buf2[cpt] := val1;
		cpt := 0;
	end

	RempColSw1_c: action col_sw:[ val2 ] ==>
	guard
		cpt < 14
	do
		buf4[cpt] := val2;
		cpt := cpt + 1;
	end

	RempColSw2_c: action col_sw:[ val2 ] ==>
	guard
		cpt = 14
	do
		buf4[cpt] := val2;
		cpt := 0;
		extract2 := true;
	end

	Extract2: action ==>
	guard
		extract2 = true
		//,start_gen_temp_1=true

	var
		int i , int j
	do
	//	println("-----extract2_extr-----");

	//	println("val1_extraction_q_sw:"+val1);

	//	println("val2_extraction_q_p:"+val2);
		j := y;
		i := 0;
		while i < 4 do
			bloc20[i] := buf4[j];
			j := j + 4;
			i := i + 1;
		end
		j := 0;
		i := 0;
		while j < 4 do
			bloc10[i] := buf2[j];
			j := j + 1;
			i := i + 1;
		end
		//println("bloc1_extraction_q_sw:"+bloc10);

		//println("bloc2_extraction_q_p:"+bloc20);
		extract1 := false;
		compteur1 := compteur1 + 1;
	end

	EnvoiCol1_c: action ==> col_sw_1:[ pix_sw ], col_pat_1:[ pix_p ]
	guard
		cpt < 3
	do
		pix_sw := bloc20[cpt];
		pix_p := bloc10[cpt];
		cpt := cpt + 1;
	end

	EnvoiCol2_c: action col_sw:[ val1 ] ==> col_sw_1:[ pix_sw ], col_pat_1:[ pix_p
		]
	guard
		cpt = 3
	do
		pix_sw := bloc20[cpt];
		pix_p := bloc10[cpt];
		cpt := 0;
	end

	Incr5: action ==>
	guard
		compteur1 < 4
	do
	//	println("-----incr5_extr-----");
		extract2 := true;
	end

	Incr6_a: action ==>
	guard
		compteur1 = 4,
		compteur2 < 8
	do
	//	println("-----incr6_a_extr-----");
		read2 := true;
		compteur2 := compteur2 + 1;
	end

	Incr6_b: action ==>
	guard
		compteur1 = 4,
		compteur2 = 8
	do
	//	println("-----incr6_b_extr-----");
		read1 := true;
		compteur2 := 0;
	end

	schedule fsm state1 :
	state1 ( Init ) --> state2;
	state2 ( Read ) --> state3;
	state3 ( RempColP1_a ) --> state3;
	state3 ( RempColP1_a ) --> state4;
	state4 ( RempColSw1_a ) --> state4;
	state4 ( RempColSw1_a ) --> state5;
	state5 ( Extract ) --> state6;
	state6 ( EnvoiCol1_a ) --> state6;
	state6 ( EnvoiCol1_a ) --> state7;
	state7 ( Incr1 ) --> state3;
	state7 ( Incr2_a ) --> state2;
	state7 ( Incr2_b ) --> state8;
	state8 ( Read1 ) --> state9;
	state9 ( RempColP1_b ) --> state9;
	state9 ( RempColP1_b ) --> state10;
	state10 ( RempColSw1_b ) --> state10;
	state10 ( RempColSw1_b ) --> state11;
	state11 ( Extract1 ) --> state12;
	state12 ( EnvoiCol1_b ) --> state12;
	state12 ( EnvoiCol1_b ) --> state13;
	state13 ( Incr3 ) --> state9;
	state13 ( Incr4_a ) --> state8;
	state13 ( Incr4_b ) --> state14;
	state14 ( Read2 ) --> state15;
	state15 ( RempColP1_c ) --> state15;
	state15 ( RempColP1_c ) --> state16;
	state16 ( RempColSw1_c ) --> state16;
	state16 ( RempColSw1_c ) --> state17;
	state17 ( Extract2 ) --> state18;
	state18 ( EnvoiCol1_c ) --> state18;
	state18 ( EnvoiCol1_c ) --> state19;
	state19 ( Incr5 ) --> state15;
	state19 ( Incr6_a ) --> state14;
	state19 ( Incr6_b ) --> state8;
	end

end