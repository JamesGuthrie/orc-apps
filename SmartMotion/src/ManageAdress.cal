/*
**********************************************************************************

                           
                            ---------------
         (list) addr_in===>|               |===>(list) addr_out
                           |               |
          (bool)strobe ===>|               |===>(int) index_memory
                           |     manage    |
      (bool)LS_flag_in ===>|               |===>(int) number_of_matching
                           |               |
            (int)index ===>|               |===>(bool) LS_flag_out
                            ---------------
Cet acteur reçoit une addresse quelconque associée d'un indexe, puis en se basant
sur ce dernier,il genere les addresses correspondantes.


***********************************************************************************
*/
package motion ; actor ManageAdress ()
//(width2,height2,accuracy1,accuracy2)

//List addr_in,
int addr_in_x, int addr_in_y, int index, bool LS_flag_in, bool start_gen ==> int
address_x, int address_y, int index_memory, int number_of_matching, bool
LS_flag_out, bool start_inter_h, bool start_inter_q, int mode :

	int width2 := 56;

	int height2 := 40;

	int index_temp;

	int nofm_temp;

	int nofm_temp_munis;

	int x_address;

	int y_address;

	int x;

	int y;

	int index_memory_temp;

	bool LSflag_out_temp;

	int i;

	int j;

	int k;

	bool read;

	bool compute;

	List(type: int(size=8), size=9) F := [ 0 : for int i in 1 .. 9 ];

	List(type: int(size=8), size=9) P := [ 0 : for int i in 1 .. 9 ];

	List(type: int(size=8), size=9) Q := [ 0 : for int i in 1 .. 9 ];

	int r;

	int mode_temp;

	bool start_interpolation;

	bool start_inter_h_temp;

	bool start_inter_q_temp;

	int nofm_temp_1;

	bool SDSP := false;

	bool quit := false;

	int compteur;

	int accuracy1 := 1;

	int accuracy2 := 1;

	initialize ==>
	do
		j := 0;
		i := 0;
		mode_temp := 0;
		x_address := (width2 - 16) / 2;
		y_address := (height2 - 16) / 2;
		nofm_temp := 9;
		LSflag_out_temp := false;
		F[0] := 0;
		F[1] := 1;
		F[2] := 2;
		F[3] := 3;
		F[4] := 4;
		F[5] := 5;
		F[6] := 6;
		F[7] := 7;
		F[8] := 8;
		///////////////////////////
		P[0] := x_address;
		P[1] := x_address;
		P[2] := x_address + 1;
		P[3] := x_address + 2;
		P[4] := x_address + 1;
		P[5] := x_address;
		P[6] := x_address - 1;
		P[7] := x_address - 2;
		P[8] := x_address - 1;
		///////////////////////
		Q[0] := y_address;
		Q[1] := y_address - 2;
		Q[2] := y_address - 1;
		Q[3] := y_address;
		Q[4] := y_address + 1;
		Q[5] := y_address + 2;
		Q[6] := y_address + 1;
		Q[7] := y_address;
		Q[8] := y_address - 1;
		start_interpolation := false;
		start_inter_h_temp := false;
		start_inter_q_temp := false;
		SDSP := false;
		compute := false;
	end

	Init0: action start_gen:[ start_gen_temp ] ==> address_x:[ x ], address_y:[ y
		], index_memory:[ index_memory_temp ], number_of_matching:[ nofm_temp ],
		LS_flag_out:[ LSflag_out_temp ], mode:[ mode_temp ], start_inter_h:[
		start_inter_h_temp ]
	guard
		j = 0
	do
	//	println("*****init0_AGU0***** ");
		x := P[j];
		y := Q[j];
		index_memory_temp := F[j];
		j := j + 1;
	end

	Init1: action start_gen:[ start_gen_temp ] ==> address_x:[ x ], address_y:[ y
		], index_memory:[ index_memory_temp ], LS_flag_out:[ LSflag_out_temp ],
		start_inter_h:[ start_inter_h_temp ]
	guard
		j > 0,
		j < 8
	do
	//			println("*****init1_AGU0***** ");
		x := P[j];
		y := Q[j];
		index_memory_temp := F[j];
		j := j + 1;
	end

	Init2: action start_gen:[ start_gen_temp ] ==> address_x:[ x ], address_y:[ y
		], index_memory:[ index_memory_temp ], LS_flag_out:[ LSflag_out_temp ],
		start_inter_h:[ start_inter_h_temp ]
	guard
		j = 8
	do
	//			println("*****init2_AGU0***** ");
		x := P[j];
		y := Q[j];
		index_memory_temp := F[j];
		read := true;
	end

	Read: action addr_in_x:[ address_in_x ], addr_in_y:[ address_in_y ], index:[
		index_in ], LS_flag_in:[ LSflag_in_temp ] ==>
	guard
		read = true,
		LSflag_in_temp = false
	do
	//			println("*****read_AGU0***** ");

	//	adress_temp:=address_in;
		x_address := address_in_x;
		y_address := address_in_y;
		index_temp := index_in;
		compute := true;
	end

	Compute: action ==>
	guard
		compute = true
	do
	//     println("*****compute_AGU0***** ");
		if (index_temp = 0) then
			nofm_temp := 5;
			LSflag_out_temp := true;
			F[0] := 1;
			F[1] := 2;
			F[2] := 3;
			F[3] := 4;
			F[4] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address + 1;
			P[2] := x_address;
			P[3] := x_address - 1;
			P[4] := x_address;
			///////////////////////
			Q[0] := y_address - 1;
			Q[1] := y_address;
			Q[2] := y_address + 1;
			Q[3] := y_address;
			Q[4] := y_address;
		end
		if (index_temp = 1) then
			nofm_temp := 6;
			LSflag_out_temp := false;
			F[0] := 1;
			F[1] := 2;
			F[2] := 3;
			F[3] := 7;
			F[4] := 8;
			F[5] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address + 1;
			P[2] := x_address + 2;
			P[3] := x_address - 2;
			P[4] := x_address - 1;
			P[5] := x_address;
			///////////////////////
			Q[0] := y_address - 2;
			Q[1] := y_address - 1;
			Q[2] := y_address;
			Q[3] := y_address;
			Q[4] := y_address - 1;
			Q[5] := y_address;
		end
		if (index_temp = 2) then
			nofm_temp := 4;
			LSflag_out_temp := false;
			F[0] := 1;
			F[1] := 2;
			F[2] := 3;
			F[3] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address + 1;
			P[2] := x_address + 2;
			P[3] := x_address;
			///////////////////////
			Q[0] := y_address - 2;
			Q[1] := y_address - 1;
			Q[2] := y_address;
			Q[3] := y_address;
		end
		if (index_temp = 3) then
			nofm_temp := 6;
			LSflag_out_temp := false;
			F[0] := 1;
			F[1] := 2;
			F[2] := 3;
			F[3] := 4;
			F[4] := 5;
			F[5] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address + 1;
			P[2] := x_address + 2;
			P[3] := x_address + 1;
			P[4] := x_address;
			P[5] := x_address;
			///////////////////////
			Q[0] := y_address - 2;
			Q[1] := y_address - 1;
			Q[2] := y_address;
			Q[3] := y_address + 1;
			Q[4] := y_address + 2;
			Q[5] := y_address;
		end
		if (index_temp = 4) then
			nofm_temp := 4;
			LSflag_out_temp := false;
			F[0] := 3;
			F[1] := 4;
			F[2] := 5;
			F[3] := 0;
			///////////////////////
			P[0] := x_address + 2;
			P[1] := x_address + 1;
			P[2] := x_address;
			P[3] := x_address;
			///////////////////////
			Q[0] := y_address;
			Q[1] := y_address + 1;
			Q[2] := y_address + 2;
			Q[3] := y_address;
		end
		if (index_temp = 5) then
			nofm_temp := 6;
			LSflag_out_temp := false;
			F[0] := 3;
			F[1] := 4;
			F[2] := 5;
			F[3] := 6;
			F[4] := 7;
			F[5] := 0;
			///////////////////////
			P[0] := x_address + 2;
			P[1] := x_address + 1;
			P[2] := x_address;
			P[3] := x_address - 1;
			P[4] := x_address - 2;
			P[5] := x_address;
			///////////////////////
			Q[0] := y_address;
			Q[1] := y_address + 1;
			Q[2] := y_address + 2;
			Q[3] := y_address + 1;
			Q[4] := y_address;
			Q[5] := y_address;
		end
		if (index_temp = 6) then
			nofm_temp := 4;
			LSflag_out_temp := false;
			F[0] := 5;
			F[1] := 6;
			F[2] := 7;
			F[3] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address - 1;
			P[2] := x_address - 2;
			P[3] := x_address;
			///////////////////////
			Q[0] := y_address + 2;
			Q[1] := y_address + 1;
			Q[2] := y_address;
			Q[3] := y_address;
		end
		if (index_temp = 7) then
			nofm_temp := 6;
			LSflag_out_temp := false;
			F[0] := 5;
			F[1] := 6;
			F[2] := 7;
			F[3] := 8;
			F[4] := 1;
			F[5] := 0;
			///////////////////////
			P[0] := x_address;
			P[1] := x_address - 1;
			P[2] := x_address - 2;
			P[3] := x_address - 1;
			P[4] := x_address;
			P[5] := x_address;
			///////////////////////
			Q[0] := y_address + 2;
			Q[1] := y_address + 1;
			Q[2] := y_address;
			Q[3] := y_address - 1;
			Q[4] := y_address - 2;
			Q[5] := y_address;
		end
		if (index_temp = 8) then
			nofm_temp := 4;
			LSflag_out_temp := false;
			F[0] := 7;
			F[1] := 8;
			F[2] := 1;
			F[3] := 0;
			///////////////////////
			P[0] := x_address - 2;
			P[1] := x_address - 1;
			P[2] := x_address;
			P[3] := x_address;
			///////////////////////
			Q[0] := y_address;
			Q[1] := y_address - 1;
			Q[2] := y_address - 2;
			Q[3] := y_address;
		end
		compute := false;
		nofm_temp_1 := nofm_temp;
		nofm_temp_munis := nofm_temp - 1;
		if nofm_temp_1 = 5 then
			SDSP := true;
		end
		r := 0;
	end

	Genere0: action start_gen:[ start_gen_temp ] ==> address_x:[ x ], address_y:[
		y ], index_memory:[ index_memory_temp ], number_of_matching:[ nofm_temp ],
		LS_flag_out:[ LSflag_out_temp ], mode:[ mode_temp ], start_inter_h:[
		start_inter_h_temp ]
	guard
		r = 0
	do
	//println("-----genere0_AGU0-----");
		mode_temp := 0;
		x := P[r];
		y := Q[r];
		index_memory_temp := F[r];
		r := r + 1;
	end

	Genere1: action start_gen:[ start_gen_temp ] ==> address_x:[ x ], address_y:[
		y ], index_memory:[ index_memory_temp ], LS_flag_out:[ LSflag_out_temp ],
		start_inter_h:[ start_inter_h_temp ]
	guard
		r > 0,
		r < nofm_temp_munis
	do
	// println("-----genere1_AGU0-----");
		x := P[r];
		y := Q[r];
		index_memory_temp := F[r];
		r := r + 1;
	end

	Genere2_a: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], index_memory:[ index_memory_temp ], LS_flag_out:[
		LSflag_out_temp ], start_inter_h:[ start_inter_h_temp ]
	guard
		r = nofm_temp_munis,
		SDSP = false
	do
	//  println("-----genere2_a_AGU0-----");
		x := P[r];
		y := Q[r];
		index_memory_temp := F[r];
	end

	Genere2_b: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], index_memory:[ index_memory_temp ], LS_flag_out:[
		LSflag_out_temp ], start_inter_h:[ start_inter_h_temp ]
	guard
		r = nofm_temp_munis,
		SDSP = true,
		accuracy1 = 1
	do
	//    println("-----genere2_b_AGU0-----");
		x := P[r];
		y := Q[r];
		index_memory_temp := F[r];
		start_inter_h_temp := true;
		start_interpolation := true;
		compteur := 0;
	end

	Genere2_c: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], index_memory:[ index_memory_temp ], LS_flag_out:[
		LSflag_out_temp ], start_inter_h:[ start_inter_h_temp ]
	guard
		r = nofm_temp_munis,
		SDSP = true,
		accuracy1 = 0
	do
	//    println("-----genere2_c_AGU0-----");
		x := P[r];
		y := Q[r];
		index_memory_temp := F[r];
		start_inter_h_temp := false;
		quit := true;
	end

	Ack1: action ==>
	guard
		start_interpolation = true
	do
	//	println("-----ack1_AGU0-----");
		P := [ 0, 1, 2, 0, 1, 2, 0, 1, 2 ];
		Q := [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ];
		start_interpolation := false;
		start_inter_q_temp := false;
		nofm_temp := 9;
		k := 0;
	end

	Genere_h_0: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], number_of_matching:[ nofm_temp ], mode:[ mode_temp ],
		start_inter_q:[ start_inter_q_temp ]
	guard
		k = 0
	do
	//	println("-----genere_h_0_AGU0-----");
		mode_temp := 1;
		x := P[k];
		y := Q[k];
		index_memory_temp := F[r];
		k := k + 1;
	end

	Genere_h_1: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], start_inter_q:[ start_inter_q_temp ]
	guard
		k > 0,
		k < 8
	do
	//	println("-----genere_h_1_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		k := k + 1;
	end

	Genere_h_2: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], start_inter_q:[ start_inter_q_temp ]
	guard
		k = 8,
		accuracy2 = 1
	do
	//	println("-----genere_h_2_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		start_inter_q_temp := true;
		start_interpolation := true;
	end

	Genere_h_3: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], start_inter_q:[ start_inter_q_temp ]
	guard
		k = 8,
		accuracy2 = 0
	do
	//	println("-----genere_h_3_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		start_inter_q_temp := false;
		quit := true;
	end

	Ack2: action ==>
	guard
		start_interpolation = true
	do
	//println("-----ack2_AGU0-----");
		P := [ 0, 1, 2, 0, 1, 2, 0, 1, 2 ];
		Q := [ 0, 0, 0, 1, 1, 1, 2, 2, 2 ];
		start_interpolation := false;
		nofm_temp := 9;
		k := 0;
	end

	Genere_q_0: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ], number_of_matching:[ nofm_temp ], mode:[ mode_temp ]
	guard
		k = 0
	do
	//println("-----genere_q_0_AGU0-----");
		mode_temp := 1;
		x := P[k];
		y := Q[k];
		index_memory_temp := F[r];
		k := k + 1;
	end

	Genere_q_1: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ]
	guard
		k > 0,
		k < 8
	do
	//println("-----genere_q_1_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		k := k + 1;
	end

	Genere_q_21: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ]
	guard
		k = 8,
		compteur < 16
	do
	//	println("-----genere_q_21_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		compteur := compteur + 1;
		start_interpolation := true;
	end

	Genere_q_22: action start_gen:[ start_gen_temp ] ==> address_x:[ x ],
		address_y:[ y ]
	guard
		k = 8,
		compteur = 16
	do
	//	println("-----genere_q_22_AGU0-----");
		x := P[k];
		y := Q[k];
		index_memory_temp := F[k];
		quit := true;
	end

	Fin: action ==>
	guard
		quit = true
	do
		quit := false;
	end

	schedule fsm state1 :
	state1 ( Init0 ) --> state2;
	state2 ( Init1 ) --> state2;
	state2 ( Init2 ) --> state3;
	state3 ( Read ) --> state4;
	state4 ( Compute ) --> state5;
	state5 ( Genere0 ) --> state6;
	state6 ( Genere1 ) --> state6;
	state6 ( Genere2_a ) --> state3;
	state6 ( Genere2_b ) --> state7;
	state6 ( Genere2_c ) --> state13;
	state7 ( Ack1 ) --> state8;
	state8 ( Genere_h_0 ) --> state9;
	state9 ( Genere_h_1 ) --> state9;
	state9 ( Genere_h_2 ) --> state10;
	state9 ( Genere_h_3 ) --> state13;
	state10 ( Ack2 ) --> state11;
	state11 ( Genere_q_0 ) --> state12;
	state12 ( Genere_q_1 ) --> state12;
	state12 ( Genere_q_21 ) --> state7;
	state12 ( Genere_q_22 ) --> state13;
	state13 ( Fin ) --> state1;
	end

end
