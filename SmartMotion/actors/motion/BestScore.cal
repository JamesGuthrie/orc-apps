/*
 * Authors: julien.dubois@u-bourgogne.fr , elhamziwajdi@yahoo.fr
 */
package motion ;
actor BestScore () 	int (size=16)score, 
					int (size=12)sad_4x4_0, 
					int (size=12)sad_4x4_1, 
					int	(size=12)sad_4x4_2, 
					int (size=12)sad_4x4_3, 
					int (size=12)sad_4x4_4, 
					int (size=12)sad_4x4_5, 
					int (size=12)sad_4x4_6, 
					int	(size=12)sad_4x4_7, 
					int (size=12)sad_4x4_8, 
					int (size=12)sad_4x4_9, 
					int (size=12)sad_4x4_10, 
					int (size=12)sad_4x4_11, 
					int	(size=12)sad_4x4_12, 
					int (size=12)sad_4x4_13, 
					int (size=12)sad_4x4_14, 
					int (size=12)sad_4x4_15, 
					int (size=8)address_x, 
					int	(size=8)address_y, 
					int (size=8)index, 
					int (size=8)nofm, 
					bool flag_in, 
					int (size=8)mode 
					==> 
					int (size=16)b_sc, 
					int	(size=8)addr_out_x, 
					int (size=8)addr_out_y, 
					int (size=8)addr_half_x, 
					int (size=8)addr_half_y, 
					int (size=8)index_0, 
					bool LS_flag_out,
					int (size=12)HQsc,
					int (size=12)HQBestsc,
					int (size=8)adrs_x,
					int (size=8)adrs_y 
					:

	int (size=16)sc;

	int (size=17)sc_temp;

	int (size=8)index_temp;

	int (size=8)nofm_temp;

	int (size=8)nofm_temp_munis;

	int (size=8)index_0_temp;

	int (size=8)addr_temp_x;

	int (size=8)addr_temp_y;

	int (size=32)compteur1;

	int (size=32)compteur2;

	bool LSflag_out_temp;

	bool LSflag_in_temp1;

	bool envoi1;

	bool envoi2;

	int (size=8)mode_temp_1;

	bool SDSP := false;

	int (size=8)addr_half_x_temp;

	int (size=8)addr_half_y_temp;

	List(type: int(size=8), size=2) z := [ 0 : for int i in 1 .. 2 ];

	List(type: int(size=8), size=16) addresse_4x4_x := [ 0 : for int i in 1 .. 16
	];

	List(type: int(size=8), size=16) addresse_4x4_y := [ 0 : for int i in 1 .. 16
	];

	List(type: int(size=8), size=2) addr_B_4x4_0_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_1_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_2_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_3_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_4_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_5_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_6_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_7_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_8_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_9_temp_1 := [ 0 : for int i in 1 ..
	2 ];

	List(type: int(size=8), size=2) addr_B_4x4_10_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	List(type: int(size=8), size=2) addr_B_4x4_11_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	List(type: int(size=8), size=2) addr_B_4x4_12_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	List(type: int(size=8), size=2) addr_B_4x4_13_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	List(type: int(size=8), size=2) addr_B_4x4_14_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	List(type: int(size=8), size=2) addr_B_4x4_15_temp_1 := [ 0 : for int i in 1
	.. 2 ];

	int (size=13)B_4x4_0_temp_1 := 0;

	int (size=13)B_4x4_1_temp_1 := 0;

	int (size=13) B_4x4_2_temp_1 := 0;

	int (size=13) B_4x4_3_temp_1 := 0;

	int (size=13) B_4x4_4_temp_1 := 0;

	int (size=13) B_4x4_5_temp_1 := 0;

	int (size=13) B_4x4_6_temp_1 := 0;

	int (size=13) B_4x4_7_temp_1 := 0;

	int (size=13) B_4x4_8_temp_1 := 0;

	int (size=13) B_4x4_9_temp_1 := 0;

	int (size=13) B_4x4_10_temp_1 := 0;

	int (size=13) B_4x4_11_temp_1 := 0;

	int (size=13) B_4x4_12_temp_1 := 0;

	int (size=13) B_4x4_13_temp_1 := 0;

	int (size=13) B_4x4_14_temp_1 := 0;

	int (size=13) B_4x4_15_temp_1 := 0;
	
	
	init: action nofm:[ nofm ], mode:[ mode ] ==>
	do
		nofm_temp := nofm;
		nofm_temp_munis := nofm_temp - 1;
		mode_temp_1 := mode;
		sc_temp := 65280;
		B_4x4_0_temp_1 := 4080;
		B_4x4_1_temp_1 := 4080;
		B_4x4_2_temp_1 := 4080;
		B_4x4_3_temp_1 := 4080;
		B_4x4_4_temp_1 := 4080;
		B_4x4_5_temp_1 := 4080;
		B_4x4_6_temp_1 := 4080;
		B_4x4_7_temp_1 := 4080;
		B_4x4_8_temp_1 := 4080;
		B_4x4_9_temp_1 := 4080;
		B_4x4_10_temp_1 := 4080;
		B_4x4_11_temp_1 := 4080;
		B_4x4_12_temp_1 := 4080;
		B_4x4_13_temp_1 := 4080;
		B_4x4_14_temp_1 := 4080;
		B_4x4_15_temp_1 := 4080;
		compteur1 := 0;
		if nofm_temp = 5 then
			SDSP := true;
			compteur2 := 0;
		end
		index_temp := 0;
		envoi1 := false;
		envoi2 := false;
	end

	cmp_pix_a: action score:[ sc1 ], sad_4x4_0:[ B_4x4_0 ], sad_4x4_1:[ B_4x4_1 ],
		sad_4x4_2:[ B_4x4_2 ], sad_4x4_3:[ B_4x4_3 ], sad_4x4_4:[ B_4x4_4 ],
		sad_4x4_5:[ B_4x4_5 ], sad_4x4_6:[ B_4x4_6 ], sad_4x4_7:[ B_4x4_7 ],
		sad_4x4_8:[ B_4x4_8 ], sad_4x4_9:[ B_4x4_9 ], sad_4x4_10:[ B_4x4_10 ],
		sad_4x4_11:[ B_4x4_11 ], sad_4x4_12:[ B_4x4_12 ], sad_4x4_13:[ B_4x4_13 ],
		sad_4x4_14:[ B_4x4_14 ], sad_4x4_15:[ B_4x4_15 ], address_x:[ x ],
		address_y:[ y ], index:[ index ], flag_in:[ LSflag_in_temp ] ==>
	guard
		mode_temp_1 = 0,
		compteur1 < nofm_temp_munis
	do
		LSflag_in_temp1 := LSflag_in_temp;
		z[0] := x;
		z[1] := y;
		if sc1 < sc_temp then
			sc_temp := sc1;
			addr_temp_x := x;
			addr_temp_y := y;
			index_temp := index;
		end
		if B_4x4_0 < B_4x4_0_temp_1 then
			B_4x4_0_temp_1 := B_4x4_0;
			addr_B_4x4_0_temp_1[0] := x;
			addr_B_4x4_0_temp_1[1] := y;
		end
		if B_4x4_1 < B_4x4_1_temp_1 then
			B_4x4_1_temp_1 := B_4x4_1;
			addr_B_4x4_1_temp_1[0] := x;
			addr_B_4x4_1_temp_1[1] := y;
		end
		if B_4x4_2 < B_4x4_2_temp_1 then
			B_4x4_2_temp_1 := B_4x4_2;
			addr_B_4x4_2_temp_1[0] := x;
			addr_B_4x4_2_temp_1[1] := y;
		end
		if B_4x4_3 < B_4x4_3_temp_1 then
			B_4x4_3_temp_1 := B_4x4_3;
			addr_B_4x4_3_temp_1[0] := x;
			addr_B_4x4_3_temp_1[1] := y;
		end
		if B_4x4_4 < B_4x4_4_temp_1 then
			B_4x4_4_temp_1 := B_4x4_4;
			addr_B_4x4_4_temp_1[0] := x;
			addr_B_4x4_4_temp_1[1] := y;
		end
		if B_4x4_5 < B_4x4_5_temp_1 then
			B_4x4_5_temp_1 := B_4x4_5;
			addr_B_4x4_5_temp_1[0] := x;
			addr_B_4x4_5_temp_1[1] := y;
		end
		if B_4x4_6 < B_4x4_6_temp_1 then
			B_4x4_6_temp_1 := B_4x4_6;
			addr_B_4x4_6_temp_1[0] := x;
			addr_B_4x4_6_temp_1[1] := y;
		end
		if B_4x4_7 < B_4x4_7_temp_1 then
			B_4x4_7_temp_1 := B_4x4_7;
			addr_B_4x4_7_temp_1[0] := x;
			addr_B_4x4_7_temp_1[1] := y;
		end
		if B_4x4_8 < B_4x4_8_temp_1 then
			B_4x4_8_temp_1 := B_4x4_8;
			addr_B_4x4_8_temp_1[0] := x;
			addr_B_4x4_8_temp_1[1] := y;
		end
		if B_4x4_9 < B_4x4_9_temp_1 then
			B_4x4_9_temp_1 := B_4x4_9;
			addr_B_4x4_9_temp_1[0] := x;
			addr_B_4x4_9_temp_1[1] := y;
		end
		if B_4x4_10 < B_4x4_10_temp_1 then
			B_4x4_10_temp_1 := B_4x4_10;
			addr_B_4x4_10_temp_1[0] := x;
			addr_B_4x4_10_temp_1[1] := y;
		end
		if B_4x4_11 < B_4x4_11_temp_1 then
			B_4x4_11_temp_1 := B_4x4_11;
			addr_B_4x4_11_temp_1[0] := x;
			addr_B_4x4_11_temp_1[1] := y;
		end
		if B_4x4_12 < B_4x4_12_temp_1 then
			B_4x4_12_temp_1 := B_4x4_12;
			addr_B_4x4_12_temp_1[0] := x;
			addr_B_4x4_12_temp_1[1] := y;
		end
		if B_4x4_13 < B_4x4_13_temp_1 then
			B_4x4_13_temp_1 := B_4x4_13;
			addr_B_4x4_13_temp_1[0] := x;
			addr_B_4x4_13_temp_1[1] := y;
		end
		if B_4x4_14 < B_4x4_14_temp_1 then
			B_4x4_14_temp_1 := B_4x4_14;
			addr_B_4x4_14_temp_1[0] := x;
			addr_B_4x4_14_temp_1[1] := y;
		end
		if B_4x4_15 < B_4x4_15_temp_1 then
			B_4x4_15_temp_1 := B_4x4_15;
			addr_B_4x4_15_temp_1[0] := x;
			addr_B_4x4_15_temp_1[1] := y;
		end
		compteur1 := compteur1 + 1;
	end

	cmp_pix_b: action score:[ sc1 ], sad_4x4_0:[ B_4x4_0 ], sad_4x4_1:[ B_4x4_1 ],
		sad_4x4_2:[ B_4x4_2 ], sad_4x4_3:[ B_4x4_3 ], sad_4x4_4:[ B_4x4_4 ],
		sad_4x4_5:[ B_4x4_5 ], sad_4x4_6:[ B_4x4_6 ], sad_4x4_7:[ B_4x4_7 ],
		sad_4x4_8:[ B_4x4_8 ], sad_4x4_9:[ B_4x4_9 ], sad_4x4_10:[ B_4x4_10 ],
		sad_4x4_11:[ B_4x4_11 ], sad_4x4_12:[ B_4x4_12 ], sad_4x4_13:[ B_4x4_13 ],
		sad_4x4_14:[ B_4x4_14 ], sad_4x4_15:[ B_4x4_15 ], address_x:[ x ],
		address_y:[ y ], index:[ index ], flag_in:[ LSflag_in_temp ] ==>
	guard
		mode_temp_1 = 0,
		compteur1 = nofm_temp_munis
	do
		z[0] := x;
		z[1] := y;
		if sc1 < sc_temp then
			sc_temp := sc1;
			addr_temp_x := x;
			addr_temp_y := y;
			index_temp := index;
		end
		if B_4x4_0 < B_4x4_0_temp_1 then
			B_4x4_0_temp_1 := B_4x4_0;
			addr_B_4x4_0_temp_1[0] := x;
			addr_B_4x4_0_temp_1[1] := y;
		end
		if B_4x4_1 < B_4x4_1_temp_1 then
			B_4x4_1_temp_1 := B_4x4_1;
			addr_B_4x4_1_temp_1[0] := x;
			addr_B_4x4_1_temp_1[1] := y;
		end
		if B_4x4_2 < B_4x4_2_temp_1 then
			B_4x4_2_temp_1 := B_4x4_2;
			addr_B_4x4_2_temp_1[0] := x;
			addr_B_4x4_2_temp_1[1] := y;
		end
		if B_4x4_3 < B_4x4_3_temp_1 then
			B_4x4_3_temp_1 := B_4x4_3;
			addr_B_4x4_3_temp_1[0] := x;
			addr_B_4x4_3_temp_1[1] := y;
		end
		if B_4x4_4 < B_4x4_4_temp_1 then
			B_4x4_4_temp_1 := B_4x4_4;
			addr_B_4x4_4_temp_1[0] := x;
			addr_B_4x4_4_temp_1[1] := y;
		end
		if B_4x4_5 < B_4x4_5_temp_1 then
			B_4x4_5_temp_1 := B_4x4_5;
			addr_B_4x4_5_temp_1[0] := x;
			addr_B_4x4_5_temp_1[1] := y;
		end
		if B_4x4_6 < B_4x4_6_temp_1 then
			B_4x4_6_temp_1 := B_4x4_6;
			addr_B_4x4_6_temp_1[0] := x;
			addr_B_4x4_6_temp_1[1] := y;
		end
		if B_4x4_7 < B_4x4_7_temp_1 then
			B_4x4_7_temp_1 := B_4x4_7;
			addr_B_4x4_7_temp_1[0] := x;
			addr_B_4x4_7_temp_1[1] := y;
		end
		if B_4x4_8 < B_4x4_8_temp_1 then
			B_4x4_8_temp_1 := B_4x4_8;
			addr_B_4x4_8_temp_1[0] := x;
			addr_B_4x4_8_temp_1[1] := y;
		end
		if B_4x4_9 < B_4x4_9_temp_1 then
			B_4x4_9_temp_1 := B_4x4_9;
			addr_B_4x4_9_temp_1[0] := x;
			addr_B_4x4_9_temp_1[1] := y;
		end
		if B_4x4_10 < B_4x4_10_temp_1 then
			B_4x4_10_temp_1 := B_4x4_10;
			addr_B_4x4_10_temp_1[0] := x;
			addr_B_4x4_10_temp_1[1] := y;
		end
		if B_4x4_11 < B_4x4_11_temp_1 then
			B_4x4_11_temp_1 := B_4x4_11;
			addr_B_4x4_11_temp_1[0] := x;
			addr_B_4x4_11_temp_1[1] := y;
		end
		if B_4x4_12 < B_4x4_12_temp_1 then
			B_4x4_12_temp_1 := B_4x4_12;
			addr_B_4x4_12_temp_1[0] := x;
			addr_B_4x4_12_temp_1[1] := y;
		end
		if B_4x4_13 < B_4x4_13_temp_1 then
			B_4x4_13_temp_1 := B_4x4_13;
			addr_B_4x4_13_temp_1[0] := x;
			addr_B_4x4_13_temp_1[1] := y;
		end
		if B_4x4_14 < B_4x4_14_temp_1 then
			B_4x4_14_temp_1 := B_4x4_14;
			addr_B_4x4_14_temp_1[0] := x;
			addr_B_4x4_14_temp_1[1] := y;
		end
		if B_4x4_15 < B_4x4_15_temp_1 then
			B_4x4_15_temp_1 := B_4x4_15;
			addr_B_4x4_15_temp_1[0] := x;
			addr_B_4x4_15_temp_1[1] := y;
		end
		addresse_4x4_x[0] := addr_B_4x4_0_temp_1[0];
		addresse_4x4_y[0] := addr_B_4x4_0_temp_1[1];
		addresse_4x4_x[1] := addr_B_4x4_1_temp_1[0];
		addresse_4x4_y[1] := addr_B_4x4_1_temp_1[1];
		addresse_4x4_x[2] := addr_B_4x4_2_temp_1[0];
		addresse_4x4_y[2] := addr_B_4x4_2_temp_1[1];
		addresse_4x4_x[3] := addr_B_4x4_3_temp_1[0];
		addresse_4x4_y[3] := addr_B_4x4_3_temp_1[1];
		addresse_4x4_x[4] := addr_B_4x4_4_temp_1[0];
		addresse_4x4_y[4] := addr_B_4x4_4_temp_1[1];
		addresse_4x4_x[5] := addr_B_4x4_5_temp_1[0];
		addresse_4x4_y[5] := addr_B_4x4_5_temp_1[1];
		addresse_4x4_x[6] := addr_B_4x4_6_temp_1[0];
		addresse_4x4_y[6] := addr_B_4x4_6_temp_1[1];
		addresse_4x4_x[7] := addr_B_4x4_7_temp_1[0];
		addresse_4x4_y[7] := addr_B_4x4_7_temp_1[1];
		addresse_4x4_x[8] := addr_B_4x4_8_temp_1[0];
		addresse_4x4_y[8] := addr_B_4x4_8_temp_1[1];
		addresse_4x4_x[9] := addr_B_4x4_9_temp_1[0];
		addresse_4x4_y[9] := addr_B_4x4_9_temp_1[1];
		addresse_4x4_x[10] := addr_B_4x4_10_temp_1[0];
		addresse_4x4_y[10] := addr_B_4x4_10_temp_1[1];
		addresse_4x4_x[11] := addr_B_4x4_11_temp_1[0];
		addresse_4x4_y[11] := addr_B_4x4_11_temp_1[1];
		addresse_4x4_x[12] := addr_B_4x4_12_temp_1[0];
		addresse_4x4_y[12] := addr_B_4x4_12_temp_1[1];
		addresse_4x4_x[13] := addr_B_4x4_13_temp_1[0];
		addresse_4x4_y[14] := addr_B_4x4_14_temp_1[1];
		addresse_4x4_x[14] := addr_B_4x4_14_temp_1[0];
		addresse_4x4_y[15] := addr_B_4x4_15_temp_1[1];
		addresse_4x4_x[15] := addr_B_4x4_15_temp_1[0];
		envoi1 := true;
	end

	envoi_pix_a: action ==> b_sc:[ sc ], addr_out_x:[ addr_temp_x ], addr_out_y:[
		addr_temp_y ], LS_flag_out:[ LSflag_out_temp ], index_0:[ index_0_temp ]

	guard
		SDSP = false
	do
		sc := sc_temp;
		index_0_temp := index_temp;
		LSflag_out_temp := LSflag_in_temp1;
		envoi1 := false;
	end

	envoi_pix_b_1: action ==> b_sc:[ sc ], addr_out_x:[ addr_temp_x ],
		addr_out_y:[ addr_temp_y ]
	guard
		envoi1 = true,
		SDSP = true
		
	do
		sc := sc_temp;
		compteur2 := 0;
	end

	envoi_pix_b_2: action ==> addr_half_x:[ addr_half_x_temp ], addr_half_y:[
		addr_half_y_temp ]
	guard
		envoi1 = true,
		SDSP = true

	do
		sc := sc_temp;
		addr_half_x_temp := addresse_4x4_x[compteur2];
		addr_half_y_temp := addresse_4x4_y[compteur2];
		compteur2 := compteur2 + 1;
		envoi1 := false;
	end

	incr100: action ==>
	guard
		compteur2 < 16
	do
		envoi1 := true;
	end

	incr200: action ==>
	guard
		compteur2 = 16
	do
		println("incr200 ");
	end

	cmp_sub_a: action score:[ sc1 ], address_x:[ x ], address_y:[ y ] ==> adrs_x:[ x ],
						adrs_y:[ y ],	HQsc:[ sc1 ]
	guard
		mode_temp_1 = 1,
		compteur1 < nofm_temp_munis
	do
		z[0] := x;
		z[1] := y;
		if sc1 < sc_temp then
			sc_temp := sc1;
			addr_temp_x := x;
			addr_temp_y := y;
		end
		compteur1 := compteur1 + 1;
	end

	cmp_sub_b: action score:[ sc1 ], address_x:[ x ], address_y:[ y ] ==> adrs_x:[ x ],
						adrs_y:[ y ],	HQsc:[ sc1 ]
	guard
		mode_temp_1 = 1,
		compteur1 = nofm_temp_munis
	do
		z[0] := x;
		z[1] := y;
		if sc1 < sc_temp then
			sc_temp := sc1;
			addr_temp_x := x;
			addr_temp_y := y;
		end
		envoi2 := true;
	end

	envoi_sub: action ==> addr_half_x:[ addr_half_x_temp ], addr_half_y:[
		addr_half_y_temp ], HQBestsc:[ sc_temp ]

	guard
		envoi2 = true
	do
		sc := sc_temp;
		addr_half_x_temp := addr_temp_x;
		addr_half_y_temp := addr_temp_y;
		envoi2 := false;
	end

	schedule fsm state1 :
	state1 ( init ) --> state2;
	state2 ( cmp_pix_a ) --> state2;
	state2 ( cmp_pix_b ) --> state3;
	state3 ( envoi_pix_a ) --> state1;
	state3 ( envoi_pix_b_1 ) --> state4;
	state4 ( envoi_pix_b_2 ) --> state5;
	state5 ( incr100 ) --> state4;
	state5 ( incr200 ) --> state1;
	state2 ( cmp_sub_a ) --> state2;
	state2 ( cmp_sub_b ) --> state3;
	state3 ( envoi_sub ) --> state1;
	end

end