/*
 * Authors: julien.dubois@u-bourgogne.fr , elhamziwajdi@yahoo.fr
 */
package motion ; 
actor Memory ()
				int (size=8)image_p,
				int (size=8)image_sw,
				int (size=8)address_x, 
				int (size=8)addr_half_x, 
				int (size=8)addr_half_y, 
				bool start_inter_h, 
				bool start_inter_q 
				==> 
				bool start_gen, 
				int (size=8)col_pat, 
				int (size=8)col_sw, 
				bool start_h, 
				bool start_q 
				:

	int (size=8)width1 := 16;

	int (size=8)height1 := 16;

	int (size=8)width2 := 56;

	int (size=8)height2 := 40;

	List(type: int(size=8), size=width1 * height1) P := [ 0 : for int i in 1 ..
	width1 * height1 ];

	List(type: int(size=8), size=16) P1 := [ 0 : for int i in 1 .. 16 ];

	List(type: int(size=8), size=width2 * height2) SW := [ 0 : for int i in 1 ..
	width2 * height2 ];

	List(type: int(size=8), size=16) addresse_4x4_x := [ 0 : for int i in 1 .. 16
	];

	List(type: int(size=8), size=16) addresse_4x4_y := [ 0 : for int i in 1 .. 16
	];

	List(type: int(size=8), size=165) half_t := [ 0 : for int i in 1 .. 165 ];
	List(type: int(size=8), size=81) H_mem := [ 0 : for int i in 1 .. 81 ];
	List(type: int(size=8), size=361) quart_t := [ 0 : for int i in 1 .. 361 ];
	List(type: int(size=8), size=225) Q_mem := [ 0 : for int i in 1 .. 225 ];
	List(type: int(size=8), size=2) addr_int := [ 0 : for int i in 1 .. 2 ];

	List(type: int(size=8), size=16) col1 := [ 0 : for int i in 1 .. 16 ];

	List(type: int(size=8), size=40) col2 := [ 0 : for int i in 1 .. 40 ];

	List(type: int(size=8), size=9) col3 := [ 0 : for int i in 1 .. 9 ];

	List(type: int(size=8), size=15) col4 := [ 0 : for int i in 1 .. 15 ];

	List(type: int(size=8), size=4) col5 := [ 0 : for int i in 1 .. 4 ];

	bool start_gen_temp;

	bool read0;

	bool read1;

	bool envoi;

	bool ack0;

	int (size=8)x;

	int (size=8)pattern_H = height1;

	int (size=8)pattern_L = width1;

	int (size=8)SW_H = height2;

	int (size=8)SW_L = width2;

	int (size=8)inc;

	int cpt1;

	int cpt;

	bool inter_h;

	bool read_address;

	int (size=32)u;

	int (size=32)w;

	int (size=32)w1;

	int (size=8)width_h;

	int (size=8)width_sw;

	bool read11;

	bool envoi1;

	bool ack10;

	bool ack20;

	bool read21;

	bool envoi11;

	bool start_inter_h_temp_1;

	bool start_inter_q_temp_1;

	bool inter_q;

	int (size=32)adddr;

	int (size=8)width_q;

	int (size=32)inc1;

	int (size=32)i0;

	int (size=32)j0;

	int (size=6)compteur;

	int (size=4)compteur1;

	int (size=6)compteur3;

	int (size=5)compteur4;
	
	int (size=13)compteur5;

	bool wait;

	int (size=9)pix_sw;

	int (size=9)pix_p;

	int (size=8)accuracy2;

	function inte(int valeur) --> int :
		if (valeur < 0) then
			0
		else
			valeur
		end
	end
	Init: action ==>
	do
		read0 := true;
		ack0 := false;
		read1 := false;
		envoi := false;
		wait := false;
		inc := 0;
		inc1 := 0;
		compteur := 0;
		compteur1 := 0;
		compteur3 := 0;
		compteur4 := 0;
		compteur5 := 0;
		accuracy2:=1;
		cpt1 := 0;
		cpt := 0;
		i0 := 0;
		j0 := 0;
	end
	Read_Pa1: action
					image_p:[image1_temp] 
					==>
	guard
		compteur5<255
	do
	P[compteur5]:=image1_temp;
	compteur5 := compteur5 + 1;
	end
	
	Read_Pa2: action
				image_p:[image1_temp] 
				==>
	guard
		compteur5=255
	do
	P[compteur5]:=image1_temp;
	compteur5 := 0;
	end
	
	Read_Sw1: action
				image_sw:[image2_temp] 
				==>
	guard
		compteur5<2239
	do
	SW[compteur5]:=image2_temp;
	compteur5 := compteur5 + 1;
	end
	
	Read_Sw2: action
	image_sw:[image2_temp] 
		==>
	guard
		compteur5=2239
	do
	SW[compteur5]:=image2_temp;
	compteur5 := 0;
	ack0 := true;
	end
	

	Ack0: action ==> start_gen:[ start_gen_temp ]
	guard
		ack0 = true
	do
		start_gen_temp := true;
		ack0 := false;
		read1 := true;
	end

	Read1: action address_x:[ addr ], start_inter_h:[ start_inter_h_temp ] ==>
		start_h:[ start_inter_h_temp ]
	guard
		read1 = true
	do
		start_inter_h_temp_1 := start_inter_h_temp;
		read1 := false;
		compteur := 0;
		x := addr;
		envoi := true;
	end

	Compute_a: action ==>
	guard
		envoi = true
	var
		int m
	do
		m := 0;
		while (m < pattern_H) do
			col1[m] := P[m * pattern_L + inc];
			m := m + 1;
		end
		m := 0;
		while m < SW_H do
			col2[m] := SW[m * SW_L + x + inc];
			m := m + 1;
		end
		compteur := compteur + 1;
		envoi := false;
	end

	EnvoiColP1_a: action ==> col_pat:[ pix_p ]
	guard
		cpt < 15
	do
		pix_p := col1[cpt];
		cpt := cpt + 1;
	end

	EnvoiColP2_a: action ==> col_pat:[ pix_p ]
	guard
		cpt = 15
	do
		pix_p := col1[cpt];
		cpt := 0;
	end

	EnvoiColSW1_a: action ==> col_sw:[ pix_sw ]
	guard
		cpt < 39
	do
		pix_sw := col2[cpt];
		cpt := cpt + 1;
	end

	EnvoiColSW2_a: action ==> col_sw:[ pix_sw ]
	guard
		cpt = 39
	do
		pix_sw := col2[cpt];
		cpt := 0;
	end

	Incr1: action ==>
	guard
		compteur < 16
	do
		envoi := true;
		inc := inc + 1;
	end

	Incr2: action ==>
	guard
		compteur = 16,
		start_inter_h_temp_1 = false
	do
		ack0 := true;
		inc := 0;
	end

	Incr3: action ==>
	guard
		compteur = 16,
		start_inter_h_temp_1 = true
	do
		read_address := true;
		compteur := 0;
		inc := 0;
	end

	Read_address: action addr_half_x:[ addr_half_x ], addr_half_y:[ addr_half_y ]
		==>
	guard
		read_address = true
	do
		addresse_4x4_x[compteur] := addr_half_x;
		addresse_4x4_y[compteur] := addr_half_y;
		width_h := 11;
		width_sw := 56;
		inc := 0;
		compteur := compteur + 1;
		read_address := false;
	end

	Incr_read1: action ==>
	guard
		compteur < 16
	do
		read_address := true;
	end

	Incr_read2: action ==>
	guard
		compteur = 16
	var
		int i , int j , int j1
	do
	
		i := 0;
		j := 0;
		while i < 16 do
			addresse_4x4_x[i] := addresse_4x4_x[i] + 4 * j;
			i := i + 1;
			j := j + 1;
			if j = 4 then
				j := 0;
			end
		end
		i := 0;
		j := 0;
		j1 := 0;
		while i < 16 do
			addresse_4x4_y[i] := addresse_4x4_y[i] + 4 * j1;
			i := i + 1;
			j := j + 1;
			if j = 4 then
				j := 0;
				j1 := j1 + 1;
			end
		end
		wait := true;
	end

	Wait: action ==>
	guard
		wait = true
	var
		int m1 , int m2
	do
		width_q := 19;
		w1 := 3 * width_h + 1;
		m1 := 0;
		m2 := 0;
		while m1 < 16 do
			P1[m1] := P[cpt1 + m2];
			m1 := m1 + 1;
			m2 := m2 + 1;
			if m2 = 4 then
				m2 := 0;
				cpt1 := cpt1 + 16;
			end
		end
		wait := false;
		inter_h := true;
	end

	Inter_h: action ==>
	guard
		inter_h = true
	var
		int i , int j , int k , int k1 , int r1 , int r2
	do
		w := addresse_4x4_x[compteur3] + 56 * addresse_4x4_y[compteur3];
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 3 do
			half_t[i + j * width_h] := SW[u - 3 * width_sw + k - 1];
			i := i + 2;
			k := k + 1;
			if k = 6 then
				i := 0;
				k := 0;
				j := j + 1;
				u := u + width_sw;
			end
		end
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 3 do
			half_t[i + 1 + j * width_h] := rshift(inte((SW[u - 3 * width_sw + k - 3] + SW[u - 3
			* width_sw + k + 3] - 5 * (SW[u - 3 * width_sw + k - 2] + SW[u - 3 *
			width_sw + k + 2]) + 20 * (SW[u - 3 * width_sw + k - 1] + SW[u - 3 *
			width_sw + k + 1]))),5);
			i := i + 2;
			k := k + 1;
			if k = 5 then
				i := 0;
				k := 0;
				j := j + 1;
				u := u + width_sw;
			end
		end
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 3 do
			half_t[i + (j + 12) * width_h] := SW[u + 4 * width_sw + k - 1];
			i := i + 2;
			k := k + 1;
			if k = 6 then
				i := 0;
				k := 0;
				j := j + 1;
				u := u + width_sw;
			end
		end
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 3 do
			half_t[i + 1 + (j + 12) * width_h] := rshift(inte((SW[u + 4 * width_sw + k - 3] +
			SW[u + 4 * width_sw + k + 3] - 5 * (SW[u + 4 * width_sw + k - 2] + SW[u + 4
			* width_sw + k + 2]) + 20 * (SW[u + 4 * width_sw + k - 1] + SW[u + 4 *
			width_sw + k + 1]))),5);
			i := i + 2;
			k := k + 1;
			if k = 5 then
				i := 0;
				k := 0;
				j := j + 1;
				u := u + width_sw;
			end
		end
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 9 do
			half_t[i + (j + 4) * width_h] := SW[u + k - 1];
			i := i + 2;
			k := k + 1;
			if k = 6 then
				i := 0;
				k := 0;
				j := j + 2;
				u := u + width_sw;
			end
		end
		i := 0;
		j := 0;
		k := 0;
		u := w;
		while j < 9 do
			half_t[i + 1 + (j + 4) * width_h] := rshift(inte((SW[u + k - 3] + SW[u + k + 3] - 5
			* (SW[u + k - 2] + SW[u + k + 2]) + 20 * (SW[u + k - 1] + SW[u + k + 1]))),5);
			i := i + 2;
			k := k + 1;
			if k = 5 then
				i := 0;
				k := 0;
				j := j + 2;
				u := u + width_sw;
			end
		end
		
		i := 0;
		while i < 11 do
			half_t[i + 3 * width_h] := rshift(inte((half_t[i] + half_t[i + 8 * width_h] - 5 *
			(half_t[i + 1 * width_h] + half_t[i + 6 * width_h]) + 20 * (half_t[i + 2 *
			width_h] + half_t[i + 4 * width_h]) + 16)) ,5);
			i := i + 1;
		end
		i := 0;
		while i < 11 do
			half_t[i + 5 * width_h] := rshift(inte((half_t[i + width_h] + half_t[i + 10 *
			width_h] - 5 * (half_t[i + 2 * width_h] + half_t[i + 8 * width_h]) + 20 *
			(half_t[i + 4 * width_h] + half_t[i + 6 * width_h]) + 16)),5);
			i := i + 1;
		end
		i := 0;
		while i < 11 do
			half_t[i + 7 * width_h] := rshift(inte((half_t[i + 2 * width_h] + half_t[i + 12 *
			width_h] - 5 * (half_t[i + 4 * width_h] + half_t[i + 10 * width_h]) + 20 *
			(half_t[i + 6 * width_h] + half_t[i + 8 * width_h]) + 16)),5);
			i := i + 1;
		end
		i := 0;
		while i < 11 do
			half_t[i + 9 * width_h] := rshift(inte((half_t[i + 4 * width_h] + half_t[i + 13 *
			width_h] - 5 * (half_t[i + 6 * width_h] + half_t[i + 12 * width_h]) + 20 *
			(half_t[i + 8 * width_h] + half_t[i + 12 * width_h]) + 16)),5);
			i := i + 1;
		end
		i := 0;
		while i < 11 do
			half_t[i + 11 * width_h] := rshift(inte((half_t[i + 6 * width_h] + half_t[i + 14 *
			width_h] - 5 * (half_t[i + 8 * width_h] + half_t[i + 13 * width_h]) + 20 *
			(half_t[i + 10 * width_h] + half_t[i + 12 * width_h]) + 16)) ,5);
			i := i + 1;
		end
		i := 0;
		j := 0;
		while j < 9 do
			H_mem[i + j * 9] := half_t[i + 1 + (3 + j) * width_h];
			i := i + 1;
			if i = 9 then
				i := 0;
				j := j + 1;
			end
		end
	
		if accuracy2 = 1 then
			i := 0;
			j := 0;
			k := 0;
			r1 := 0;
			r2 := 0;
			while j < 9 do
				quart_t[i + 1 + (r1 + 1) * width_q] := half_t[w1 + k + r2 * width_h];
				i := i + 2;
				k := k + 1;
				if k = 9 then
					r1 := r1 + 2;
					r2 := r2 + 1;
					k := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			r1 := 0;
			r2 := 0;
			while j < 9 do
				quart_t[i + (r1 + 1) * width_q] := rshift((half_t[w1 + k - 1 + r2 *
				width_h] + half_t[w1 + k + r2 * width_h] + 1), 1);
				i := i + 2;
				k := k + 1;
				if k = 10 then
					r1 := r1 + 2;
					r2 := r2 + 1;
					k := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			k1 := 0;
			r1 := 0;
			r2 := 0;
			while j < 10 do
				quart_t[i + 1 + r1 * width_q] := rshift((half_t[w1 + k + r2 * width_h] +
				half_t[w1 + k + (r2 - 1) * width_h] + 1), 1);
				i := i + 2;
				k := k + 1;
				if k = 9 then
					r1 := r1 + 2;
					r2 := r2 + 1;
					k := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			k1 := 0;
			r1 := 0;
			r2 := 0;
			while j < 5 do
				quart_t[i + r1 * width_q] := rshift((half_t[w1 + k - 1 + r2 * width_h] +
				half_t[w1 + k + (r2 - 1) * width_h] + 1), 1);
				i := i + 4;
				k := k + 2;
				k1 := k1 + 1;
				if k1 = 5 then
					r1 := r1 + 4;
					r2 := r2 + 2;
					k := 0;
					k1 := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			k1 := 0;
			r1 := 0;
			r2 := 0;
			while j < 5 do
				quart_t[i + 2 + r1 * width_q] := rshift((half_t[w1 + k + 1 + r2 * width_h]
				+ half_t[w1 + k + (r2 - 1) * width_h] + 1), 1);
				i := i + 4;
				k := k + 2;
				k1 := k1 + 1;
				if k1 = 5 then
					r1 := r1 + 4;
					r2 := r2 + 2;
					k := 0;
					k1 := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			k1 := 0;
			r1 := 0;
			r2 := 0;
			while j < 5 do
				quart_t[i + (r1 + 2) * width_q] := rshift((half_t[w1 + k - 1 + r2 *
				width_h] + half_t[w1 + k + (r2 + 1) * width_h] + 1), 1);
				i := i + 4;
				k := k + 2;
				k1 := k1 + 1;
				if k1 = 5 then
					r1 := r1 + 4;
					r2 := r2 + 2;
					k := 0;
					k1 := 0;
					i := 0;
					j := j + 1;
				end
			end
			i := 0;
			j := 0;
			k := 0;
			k1 := 0;
			r1 := 0;
			r2 := 0;
			while j < 5 do
				quart_t[i + 2 + (r1 + 2) * width_q] := rshift((half_t[w1 + k + 1 + r2 *
				width_h] + half_t[w1 + k + (r2 + 1) * width_h] + 1), 1);
				i := i + 4;
				k := k + 2;
				k1 := k1 + 1;
				if k1 = 5 then
					r1 := r1 + 4;
					r2 := r2 + 2;
					k := 0;
					k1 := 0;
					i := 0;
					j := j + 1;
				end
			end
		end
		inter_h := false;
		ack10 := true;
	end
	Ack10: action ==> start_gen:[ start_gen_temp ]
	guard
		ack10 = true
	do
		start_gen_temp := true;
		ack10 := false;
		read11 := true;
	end

	Read11: action address_x:[ addr ], start_inter_q:[ start_inter_q_temp ] ==>
		start_q:[ start_inter_q_temp ]
	guard
		read11 = true
	do
		start_inter_q_temp_1 := start_inter_q_temp;
		read11 := false;
		compteur1 := 0;
		x := addr;
		envoi1 := true;
	end

	Compute_b: action ==>
	guard
		envoi1 = true
	var
		int m
	do
		m := 0;
		while m < 4 do
			col5[m] := P1[m * 4 + inc];
			m := m + 1;
		end
		m := 0;
		while m < 9 do
			col3[m] := H_mem[m * 9 + x + inc1];
			m := m + 1;
		end
		compteur1 := compteur1 + 1;
		envoi1 := false;
	end

	EnvoiColP1_b: action ==> col_pat:[ pix_p ]
	guard
		cpt < 3
	do
		pix_p := col5[cpt];
		cpt := cpt + 1;
	end

	EnvoiColP2_b: action ==>  col_pat:[ pix_p ]
	guard
		cpt = 3
	do
		pix_p := col5[cpt];
		cpt := 0;
	end

	EnvoiColSW1_b: action ==> col_sw:[ pix_sw ]
	guard
		cpt < 8
	do
		pix_sw := col3[cpt];
		cpt := cpt + 1;
	end

	EnvoiColSW2_b: action ==> col_sw:[ pix_sw ]
	guard
		cpt = 8
	do
		pix_sw := col3[cpt];
		cpt := 0;
	end

	Incr11: action ==>
	guard
		compteur1 < 4
	do
		envoi1 := true;
		inc := inc + 1;
		inc1 := inc1 + 2;
	end

	Incr12: action ==>
	guard
		compteur1 = 4,
		start_inter_q_temp_1 = false
	do
		ack10 := true;
		inc := 0;
		inc1 := 0;
	end

	Incr13: action ==>
	guard
		compteur1 = 4,
		start_inter_q_temp_1 = true
	do
		read_address := true;
		inc := 0;
		inc1 := 0;
	end

	Read_address1: action addr_half_x:[ addr_half_x_temp ], addr_half_y:[
		addr_half_y_temp ] ==>
	guard
		read_address = true
	do
		addr_int[0] := addr_half_x_temp;
		addr_int[1] := addr_half_y_temp;
		inter_q := true;
		width_h := 11;
		width_q := 19;
		inc := 0;
		adddr := addr_int[0] + 9 * (addr_int[1] + 3);
		w1 := 2 * (addr_int[0] + width_q * addr_int[1]);
		read_address := false;
		inter_q := true;
	end

	Inter_q: action ==>
	guard
		inter_q = true
	var
		int i , int j
	do
		i := 0;
		j := 0;
		while j < 15 do
			Q_mem[i + j * 15] := quart_t[w1 + i + j * width_q];
			i := i + 1;
			if i = 15 then
				i := 0;
				j := j + 1;
			end
		end
		inter_q := false;
		ack20 := true;
	end

	Ack20: action ==> start_gen:[ start_gen_temp ]
	guard
		ack20 = true
	do
		start_gen_temp := true;
		ack20 := false;
		read21 := true;
	end

	Read21: action address_x:[ addr ] ==>
	guard
		read21 = true
	do
		inc := 0;
		inc1 := 0;
		read21 := false;
		compteur1 := 0;
		x := addr;
		envoi11 := true;
	end

	Compute_c: action ==>
	guard
		envoi11 = true
	var
		int m
	do
		m := 0;
		while m < 4 do
			col5[m] := P1[m * 4 + inc];
			m := m + 1;
		end
		m := 0;
		while m < 15 do
			col4[m] := Q_mem[m * 15 + x + inc1];
			m := m + 1;
		end
		compteur1 := compteur1 + 1;
		envoi11 := false;
	end

	EnvoiColP1_c: action ==> col_pat:[ pix_p ]
	guard
		cpt < 3
	do
		pix_p := col5[cpt];
		cpt := cpt + 1;
	end

	EnvoiColP2_c: action ==> col_pat:[ pix_p ]
	guard
		cpt = 3
	do
		pix_p := col5[cpt];
		cpt := 0;
	end

	EnvoiColSW1_c: action ==> col_sw:[ pix_sw ]
	guard
		cpt < 14
	do
		pix_sw := col4[cpt];
		cpt := cpt + 1;
	end

	EnvoiColSW2_c: action ==> col_sw:[ pix_sw ]
	guard
		cpt = 14
	do
		pix_sw := col4[cpt];
		cpt := 0;
	end

	Incr21: action ==>
	guard
		compteur1 < 4
	do
		envoi11 := true;
		inc := inc + 1;
		inc1 := inc1 + 4;
	end

	Incr22_a: action ==>
	guard
		compteur1 = 4,
		compteur4 < 8
	do
		ack20 := true;
		inc := 0;
		compteur4 := compteur4 + 1;
		inc1 := 0;
	end

	Incr22_b: action addr_half_x:[ addr_half_x ], addr_half_y:[ addr_half_y ] ==>
	guard
		compteur1 = 4,
		compteur4 = 8
	do
		inc := 0;
		inc1 := 0;
		compteur1 := 0;
		compteur4 := 0;
		compteur3 := compteur3 + 1;
		j0 := j0 + 1;
		if j0 = 4 then
			i0 := i0 + 64;
			j0 := 0;
		end
		cpt1 := i0 + 4 * j0;
		wait := true;
		if compteur3 = 16 then
			wait := false;
		end
	end
	schedule fsm state1 :
	state1 ( Init ) --> state2;
	state2 ( Read_Pa1 ) --> state2;
	state2 ( Read_Pa2 ) --> state21;
	state21 ( Read_Sw1 ) --> state21;
	state21 ( Read_Sw2 ) --> state3;
	state3 ( Ack0 ) --> state4;
	state4 ( Read1 ) --> state5;
	state5 ( Compute_a ) --> state6;
	state6 ( EnvoiColP1_a ) --> state6;
	state6 ( EnvoiColP2_a ) --> state7;
	state7 ( EnvoiColSW1_a ) --> state7;
	state7 ( EnvoiColSW2_a ) --> state8;
	state8 ( Incr1 ) --> state5;
	state8 ( Incr2 ) --> state3;
	state8 ( Incr3 ) --> state9;
	state9 ( Read_address ) --> state10;
	state10 ( Incr_read1 ) --> state9;
	state10 ( Incr_read2 ) --> state11;
	state11 ( Wait ) --> state12;
	state12 ( Inter_h ) --> state13;
	state13 ( Ack10 ) --> state14;
	state14 ( Read11 ) --> state15;
	state15 ( Compute_b ) --> state16;
	state16 ( EnvoiColP1_b ) --> state16;
	state16 ( EnvoiColP2_b ) --> state17;
	state17 ( EnvoiColSW1_b ) --> state17;
	state17 ( EnvoiColSW2_b ) --> state18;
	state18 ( Incr11 ) --> state15;
	state18 ( Incr12 ) --> state13;
	state18 ( Incr13 ) --> state19;
	state19 ( Read_address1 ) --> state20;
	state20 ( Inter_q ) --> state21;
	state21 ( Ack20 ) --> state22;
	state22 ( Read21 ) --> state23;
	state23 ( Compute_c ) --> state24;
	state24 ( EnvoiColP1_c ) --> state24;
	state24 ( EnvoiColP2_c ) --> state25;
	state25 ( EnvoiColSW1_c ) --> state25;
	state25 ( EnvoiColSW2_c ) --> state26;
	state26 ( Incr21 ) --> state23;
	state26 ( Incr22_a ) --> state21;
	state26 ( Incr22_b ) --> state11;
	end

end      	