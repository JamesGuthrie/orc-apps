/*
 * Authors: julien.dubois@u-bourgogne.fr , elhamziwajdi@yahoo.fr
 */
package motion ; 
actor SAD () int (size=8)col_pat, int (size=8)col_sw, int (size=8)mode, int
(size=8)number_of_matching ==> int (size=16)score, int (size=12)sad_4x4_0, int
(size=12)sad_4x4_1, int (size=12)sad_4x4_2, int (size=12)sad_4x4_3, int (size=12)sad_4x4_4, int (size=12)sad_4x4_5, int
(size=12)sad_4x4_6, int (size=12)sad_4x4_7, int (size=12)sad_4x4_8, int (size=12)sad_4x4_9, int (size=12)sad_4x4_10, int
(size=12)sad_4x4_11, int (size=12)sad_4x4_12, int (size=12)sad_4x4_13, int (size=12)sad_4x4_14, int (size=12)sad_4x4_15 :

	int compteur;

	int compteur1;

	int (size=9)temp;

	int (size=11)mad_temp;
	
	int (size=12)mad_temp_1;
	
	int (size=16)sc;

	int (size=8)mode_temp_1;

	bool envoyer;

	int (size=13)mad_4x4_0 := 0;

	int (size=13)mad_4x4_1 := 0;

	int (size=13)mad_4x4_2 := 0;

	int (size=13)mad_4x4_3 := 0;

	int (size=13)B_4x4_0 := 0;

	int (size=13)B_4x4_1 := 0;

	int (size=13)B_4x4_2 := 0;

	int (size=13)B_4x4_3 := 0;

	int (size=13)B_4x4_4 := 0;

	int (size=13)B_4x4_5 := 0;

	int (size=13)B_4x4_6 := 0;

	int (size=13)B_4x4_7 := 0;

	int (size=13)B_4x4_8 := 0;

	int (size=13)B_4x4_9 := 0;

	int (size=13)B_4x4_10 := 0;

	int (size=13)B_4x4_11 := 0;

	int (size=13)B_4x4_12 := 0;

	int (size=13)B_4x4_13 := 0;

	int (size=13)B_4x4_14 := 0;

	int (size=13)B_4x4_15 := 0;

	int (size=14)B_4x8_0 := 0;

	int (size=14)B_4x8_1 := 0;

	int (size=14)B_4x8_2 := 0;

	int (size=14)B_4x8_3 := 0;

	int (size=14)B_4x8_4 := 0;

	int (size=14)B_4x8_5 := 0;

	int (size=14)B_4x8_6 := 0;

	int (size=14)B_4x8_7 := 0;

	int (size=14) B_8x4_0 := 0;

	int (size=14) B_8x4_1 := 0;

	int (size=14) B_8x4_2 := 0;

	int (size=14) B_8x4_3 := 0;

	int (size=14) B_8x4_4 := 0;

	int (size=14) B_8x4_5 := 0;

	int (size=14) B_8x4_6 := 0;

	int (size=14) B_8x4_7 := 0;

	int (size=15) B_8x8_0 := 0;

	int (size=15) B_8x8_1 := 0;

	int (size=15) B_8x8_2 := 0;

	int (size=15) B_8x8_3 := 0;

	int (size=16) B_8x16_0 := 0;

	int (size=16) B_8x16_1 := 0;

	int (size=16) B_16x8_0 := 0;

	int (size=16) B_16x8_1 := 0;

	int (size=17) B_16x16 := 0;

	int (size=12) sc_4x4;

	int (size=8) nofm_temp;

	List(type: int(size=8), size=16) buf0 := [ 0 : for int i in 1 .. 16 ];
	//Pattern Pix
	List(type: int(size=8), size=16) buf1 := [ 0 : for int i in 1 .. 16 ];
	//SW Pix
	List(type: int(size=8), size=4) buf2 := [ 0 : for int i in 1 .. 4 ];
	//Pattern Sub
	List(type: int(size=8), size=4) buf3 := [ 0 : for int i in 1 .. 4 ];
	//SW sub
	int cpt;

	init0: action number_of_matching:[ nofm ], mode:[ mode_temp ] ==>
	do
	//	println("-----init0_MAD0-----");
		mode_temp_1 := mode_temp;
		nofm_temp := nofm;
	end

	init1: action ==>
	do
	//	println("-----init_MAD0-----");
		compteur := 0;
		compteur1 := 0;
		cpt:=0;
		temp := 0;
	//	temp1 := 0;
		mad_temp := 0;
		mad_temp_1 := 0;
		envoyer := false;
	end

	RempColPSW1_a: action col_pat:[ val1 ], col_sw:[ val2 ] ==>
	guard
		mode_temp_1 = 0,
		cpt < 15
	do
		buf0[cpt] := val1;
		//pattern
		buf1[cpt] := val2;
		//search window
		cpt := cpt + 1;
	end

	RempColPSW2_a: action col_pat:[ val1 ], col_sw:[ val2 ] ==>
	guard
		mode_temp_1 = 0,
		cpt = 15
	do
		buf0[cpt] := val1;
		buf1[cpt] := val2;
		cpt := 0;
	end
int buff0;
int buff1;
	calcul_mad0: action ==>
	guard
		mode_temp_1 = 0
	var
		int j
	do
		j := 0;
		while j < 16 do
			temp := buf1[j] - buf0[j];
			buff0:=buf0[j];
			buff1:=buf1[j];
			if temp < 0 then
				temp := -temp;
			end
			mad_temp := temp + mad_temp;
			j := j + 1;
			if j = 4 then
				mad_4x4_0 := mad_4x4_0 + mad_temp;
				mad_temp := 0;
			//	println("mad_4x4_0:"+mad_4x4_0);
			end
			if j = 8 then
				mad_4x4_1 := mad_4x4_1 + mad_temp;
				mad_temp := 0;
			//	println("mad_4x4_1:"+mad_4x4_1);
			end
			if j = 12 then
				mad_4x4_2 := mad_4x4_2 + mad_temp;
				mad_temp := 0;
			//	println("mad_4x4_2:"+mad_4x4_2);
			end
			if j = 16 then
				mad_4x4_3 := mad_4x4_3 + mad_temp;
				mad_temp := 0;
			//	println("mad_4x4_3:"+mad_4x4_3);
			end
		end
		compteur := compteur + 1;
	end

	Wait1: action ==>
	guard
		mode_temp_1 = 0,
		compteur < 16
	do
		if compteur = 4 then
			B_4x4_0 := mad_4x4_0;
			mad_4x4_0 := 0;
			B_4x4_4 := mad_4x4_1;
			mad_4x4_1 := 0;
			B_4x4_8 := mad_4x4_2;
			mad_4x4_2 := 0;
			B_4x4_12 := mad_4x4_3;
			mad_4x4_3 := 0;
			/////B_4x8_i
			B_4x8_0 := B_4x4_0 + B_4x4_4;
			B_4x8_4 := B_4x4_8 + B_4x4_12;
		end
		if compteur = 8 then
			B_4x4_1 := mad_4x4_0;
			mad_4x4_0 := 0;
			B_4x4_5 := mad_4x4_1;
			mad_4x4_1 := 0;
			B_4x4_9 := mad_4x4_2;
			mad_4x4_2 := 0;
			B_4x4_13 := mad_4x4_3;
			mad_4x4_3 := 0;
			/////B_4x8_i
			B_4x8_1 := B_4x4_1 + B_4x4_5;
			B_4x8_5 := B_4x4_9 + B_4x4_13;
			/////B_8x4_i
			B_8x4_0 := B_4x4_0 + B_4x4_1;
			B_8x4_2 := B_4x4_4 + B_4x4_5;
			B_8x4_4 := B_4x4_8 + B_4x4_9;
			B_8x4_6 := B_4x4_12 + B_4x4_13;
			/////B_8x8_i
			B_8x8_0 := B_8x4_0 + B_8x4_2;
			B_8x8_2 := B_8x4_4 + B_8x4_6;
			/////B_8x16_i
			B_8x16_0 := B_8x8_0 + B_8x8_2;
		end
		if compteur = 12 then
			B_4x4_2 := mad_4x4_0;
			mad_4x4_0 := 0;
			B_4x4_6 := mad_4x4_1;
			mad_4x4_1 := 0;
			B_4x4_10 := mad_4x4_2;
			mad_4x4_2 := 0;
			B_4x4_14 := mad_4x4_3;
			mad_4x4_3 := 0;
			/////B_4x8_i
			B_4x8_2 := B_4x4_2 + B_4x4_6;
			B_4x8_6 := B_4x4_10 + B_4x4_14;
		end
		cpt := 0;
	end

	Wait2: action ==>
	guard
		mode_temp_1 = 0,
		compteur = 16
	do
		B_4x4_3 := mad_4x4_0;
		mad_4x4_0 := 0;
		B_4x4_7 := mad_4x4_1;
		mad_4x4_1 := 0;
		B_4x4_11 := mad_4x4_2;
		mad_4x4_2 := 0;
		B_4x4_15 := mad_4x4_3;
		mad_4x4_3 := 0;
		/////B_4x8_i
		B_4x8_3 := B_4x4_3 + B_4x4_7;
		B_4x8_7 := B_4x4_11 + B_4x4_15;
		/////B_8x4_i
		B_8x4_1 := B_4x4_2 + B_4x4_3;
		B_8x4_3 := B_4x4_6 + B_4x4_7;
		B_8x4_5 := B_4x4_10 + B_4x4_11;
		B_8x4_7 := B_4x4_14 + B_4x4_15;
		/////B_8x8_i
		B_8x8_1 := B_8x4_1 + B_8x4_3;
		B_8x8_3 := B_8x4_5 + B_8x4_7;
		/////B_8x16_i
		B_8x16_1 := B_8x8_1 + B_8x8_3;
		/////B_16x8_i
		B_16x8_0 := B_8x8_0 + B_8x8_1;
		B_16x8_1 := B_8x8_2 + B_8x8_3;
		/////B_16x16
		B_16x16 := B_16x8_0 + B_16x8_1;
		//sc := B_16x16;
		println("score"+B_16x16);
		nofm_temp := nofm_temp - 1;
		cpt := 0;
		envoyer := true;
	end

	envoi1: action ==> score:[ sc ], sad_4x4_0:[ B_4x4_0 ], sad_4x4_1:[ B_4x4_1 ],
		sad_4x4_2:[ B_4x4_2 ], sad_4x4_3:[ B_4x4_3 ], sad_4x4_4:[ B_4x4_4 ],
		sad_4x4_5:[ B_4x4_5 ], sad_4x4_6:[ B_4x4_6 ], sad_4x4_7:[ B_4x4_7 ],
		sad_4x4_8:[ B_4x4_8 ], sad_4x4_9:[ B_4x4_9 ], sad_4x4_10:[ B_4x4_10 ],
		sad_4x4_11:[ B_4x4_11 ], sad_4x4_12:[ B_4x4_12 ], sad_4x4_13:[ B_4x4_13 ],
		sad_4x4_14:[ B_4x4_14 ], sad_4x4_15:[ B_4x4_15 ]
	guard
		envoyer = true,
		nofm_temp > 0,
		mode_temp_1 = 0
	do
	//println("-----envoi1_MAD0-----");
		sc := B_16x16;
		envoyer := false;

	end

	envoi2: action ==> score:[ sc ], sad_4x4_0:[ B_4x4_0 ], sad_4x4_1:[ B_4x4_1 ],
		sad_4x4_2:[ B_4x4_2 ], sad_4x4_3:[ B_4x4_3 ], sad_4x4_4:[ B_4x4_4 ],
		sad_4x4_5:[ B_4x4_5 ], sad_4x4_6:[ B_4x4_6 ], sad_4x4_7:[ B_4x4_7 ],
		sad_4x4_8:[ B_4x4_8 ], sad_4x4_9:[ B_4x4_9 ], sad_4x4_10:[ B_4x4_10 ],
		sad_4x4_11:[ B_4x4_11 ], sad_4x4_12:[ B_4x4_12 ], sad_4x4_13:[ B_4x4_13 ],
		sad_4x4_14:[ B_4x4_14 ], sad_4x4_15:[ B_4x4_15 ]
	guard
		envoyer = true,
		nofm_temp = 0,
		mode_temp_1 = 0
	do
	//println("-----envoi2_MAD0-----");
		sc := B_16x16;
		envoyer := false;
	end
	////////////////////////////////////////////////////
	RempColPSW1_b: action col_pat:[ val1 ], col_sw:[ val2 ] ==>
	guard
		mode_temp_1 = 1,
		cpt < 3
	do
		buf2[cpt] := val1;
		//pattern
		buf3[cpt] := val2;
		//search window
		cpt := cpt + 1;
	end

	RempColPSW2_b: action col_pat:[ val1 ], col_sw:[ val2 ] ==>
	guard
		mode_temp_1 = 1,
		cpt = 3
	do
		buf2[cpt] := val1;
		buf3[cpt] := val2;
		cpt := 0;
	end

	calcul_sub_mad0: action ==>
	guard
		mode_temp_1 = 1
	var
		int j
	do
	//	println("-------------------calcul_SUB_mad0_MAD---------------------");
		j := 0;
		while j < 4 do
			temp := buf3[j] - buf2[j];
			if temp <= 0 then
				temp := -temp;
			end
			mad_temp_1 := temp + mad_temp_1;
			j := j + 1;
		end
		compteur1 := compteur1 + 1;
	end

	Wait3: action ==>
	guard
		mode_temp_1 = 1,
		compteur1 < 4
	do
		cpt := 0;
	end

	Wait4: action ==>
	guard
		mode_temp_1 = 1,
		compteur1 = 4
	do
		envoyer := true;
		cpt := 0;
	end

	envoi_sub_a: action ==> score:[ sc_4x4 ]
	guard
		envoyer = true,
		nofm_temp > 0,
		mode_temp_1 = 1
	do
	//	println("-----------------------envoi1_MAD-------------------------");
		println("mad_temp_1:"+mad_temp_1);
		sc_4x4 := mad_temp_1;
		mad_temp := 0;
		envoyer := false;
		compteur1 := 0;
	end

	envoi_sub_b: action ==> score:[ sc_4x4 ]
	guard
		envoyer = true,
		nofm_temp = 0,
		mode_temp_1 = 1
	do
	//	println("-----------------------envoi1_MAD-------------------------");
		println("mad_temp_1:"+mad_temp_1);
		sc_4x4 := mad_temp_1;
		mad_temp := 0;
		envoyer := false;
		compteur1 := 0;
	end

	schedule fsm state0 :
	state0 ( init0 ) --> state1;
	state1 ( init1 ) --> state2;
	state2 ( RempColPSW1_a ) --> state2;
	state2 ( RempColPSW2_a ) --> state3;
	state3 ( calcul_mad0 ) --> state4;
	state4 ( Wait1 ) --> state2;
	state4 ( Wait2 ) --> state5;
	state5 ( envoi1 ) --> state1;
	state5 ( envoi2 ) --> state0;
	state2 ( RempColPSW1_b ) --> state2;
	state2 ( RempColPSW2_b ) --> state3;
	state3 ( calcul_sub_mad0 ) --> state4;
	state4 ( Wait3 ) --> state2;
	state4 ( Wait4 ) --> state5;
	state5 ( envoi_sub_a ) --> state1;
	state5 ( envoi_sub_b ) --> state0;
	end
	
end
