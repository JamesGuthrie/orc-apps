package V2.parser.tools;
import  V2.common.BitstreamReadUtils.*;
import  V2.common.commonPackage.*;
import  V2.parser.packages.parserPackage.*;

/******************************************************************************
 * Unit decription
 *****************************************************************************/
unit parserTools :

	/**************************************************************************
	 * function getCOCidx
	 *************************************************************************/
	function getCOCidx(	bool cocExists[2][NB_COMPONENT_MAX],
						uint(size=32) Ccoc
	) --> uint(size=1)
	:
		if cocExists[1][Ccoc] then
			1
		else
			0
		end
	end
	/**************************************************************************
	 * procedure getNumberOfCodingPasses
	 *************************************************************************/
  	procedure getNumberOfCodingPasses (	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
  										uint(size=32) res[1] 	) 
  	var
  		uint(size=32) p  := 1,
  		uint(size=32) n  := 1
  	begin
		getBits(1, fifo, res);
  		while (n <= 7) && (res[0] = ((1<<n)-1)) do
  			p := p + res[0];
  			n := p - 1;
  			getBits(n, fifo, res);
  		end
  		if n > 7 then
  			res[0] := p;
  		else
  			res[0] := res[0] + p;
  		end
	end
/******************************************************************************
 ******************************************************************************
 ******************************************************************************
 * CodestreamTools decription
 ******************************************************************************
 ******************************************************************************
 *****************************************************************************/

	/**************************************************************************
	 * CodestreamTools global variables
	 *************************************************************************/
	uint(size= 8) IDXX            =  0;
	uint(size= 8) IDXY            =  1;
	uint(size= 8) TX0             =  2;
	uint(size= 8) TX1             =  3;
	uint(size= 8) TY0             =  4;
	uint(size= 8) TY1             =  5;
	uint(size= 8) TCX0            =  6;
	uint(size= 8) TCX1            =  7;
	uint(size= 8) TRX0            =  8;
	uint(size= 8) TRX1            =  9;
	uint(size= 8) TCY0            = 10;
	uint(size= 8) TCY1            = 11;
	uint(size= 8) TRY0            = 12;
	uint(size= 8) TRY1            = 13;
	uint(size= 8) PPX             = 14;
	uint(size= 8) PPY             = 15;
	uint(size= 8) CST_STRUCT_SIZE = 16;
	/**************************************************************************
	 * procedure getTX0_TX1
	 *************************************************************************/
  	procedure getTX0_TX1 (	uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) sot[SOT_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
  	) 
  	var
  		uint(size=32) numXtiles = (siz[X_SIZ] - siz[XTO_SIZ] + (siz[XT_SIZ]-1)) / siz[XT_SIZ],
  		uint(size=32) p         = sot[I_SOT] mod numXtiles
  	begin
  		cst[IDXX] := p;
  		cst[TX0]  := siz[XTO_SIZ] + p * siz[XT_SIZ];
  		cst[TX1]  := cst[TX0] + siz[XT_SIZ];
  		if cst[TX0] < siz[XO_SIZ] then
  			cst[TX0] := siz[XO_SIZ];
  		end
  		if cst[TX1] > siz[X_SIZ] then
  			cst[TX1] := siz[X_SIZ];
  		end
 // 		println("getTX0_TX1 : "+cst[TX0]+" "+cst[TX1]);
	end
	/**************************************************************************
	 * procedure getTY0_TY1
	 *************************************************************************/
  	procedure getTY0_TY1 (	uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) sot[SOT_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
  	)
  	var
  		uint(size=32) numXtiles = (siz[X_SIZ] - siz[XTO_SIZ] + (siz[XT_SIZ]-1)) / siz[XT_SIZ],
  		uint(size=32) q         = sot[I_SOT] / numXtiles
  	begin
  		cst[IDXY] := q;
  		cst[TY0]  := siz[YTO_SIZ] + q * siz[YT_SIZ];
  		cst[TY1]  := cst[TY0] + siz[YT_SIZ];
  		if cst[TY0] < siz[YO_SIZ] then
  			cst[TY0] := siz[YO_SIZ];
  		end
  		if cst[TY1] > siz[Y_SIZ] then
  			cst[TY1] := siz[Y_SIZ];
  		end
//		println("getTY0_TY1 : "+cst[TY0]+" "+cst[TY1]);
	end
	/**************************************************************************
	 * procedure getTRX0_TRX1
	 *************************************************************************/
  	procedure getTRX0_TRX1 (uint(size= 8) r_idx,
  							uint(size= 8) c_idx,
  							uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) coc[COC_STRUCT_SIZE],
  						 	uint(size=16) cst[CST_STRUCT_SIZE]
  	) 
  	var
  		uint(size= 8) sp0  = coc[SP_COC + c_idx * COD_MAX] - r_idx,
  		uint(size=32) xr   = siz[XR_SIZ + c_idx],
  		uint(size=32) tcx0 = (cst[TX0] + (xr-1)) / xr,
  		uint(size=32) tcx1 = (cst[TX1] + (xr-1)) / xr
  	begin
  		cst[TCX0] := tcx0;
  		cst[TCX1] := tcx1;
  		cst[TRX0] := (tcx0>>sp0);
  		if (tcx0 & ((1<<sp0)-1)) != 0 then
  			cst[TRX0] := cst[TRX0] + 1;
  		end
  		cst[TRX1] := (tcx1>>sp0);
  		if (tcx1 & ((1<<sp0)-1)) != 0 then
  			cst[TRX1] := cst[TRX1] + 1;
  		end
// 		println("getTRX0_TRX1 : "+cst[TRX0]+" "+cst[TRX1]); 		
	end
	/**************************************************************************
	 * procedure getTRY0_TRY1
	 *************************************************************************/
  	procedure getTRY0_TRY1 (uint(size= 8) r_idx,
  							uint(size= 8) c_idx,
  							uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) coc[COC_STRUCT_SIZE],
  						 	uint(size=16) cst[CST_STRUCT_SIZE]
  	) 
  	var
  		uint(size= 8) sp0  = coc[SP_COC + c_idx * COD_MAX] - r_idx,
  		uint(size=32) yr   = siz[YR_SIZ + c_idx],
  		uint(size=32) tcy0 = (cst[TY0] + (yr-1)) / yr,
  		uint(size=32) tcy1 = (cst[TY1] + (yr-1)) / yr
  	begin
  		cst[TCY0] := tcy0;
  		cst[TCY1] := tcy1;
  		cst[TRY0] := (tcy0>>sp0);
  		if (tcy0 & ((1<<sp0)-1)) != 0 then
  			cst[TRY0] := cst[TRY0] + 1;
  		end
  		cst[TRY1] := (tcy1>>sp0);
  		if (tcy1 & ((1<<sp0)-1)) != 0 then
  			cst[TRY1] := cst[TRY1] + 1;
  		end
// 		println("getTRY0_TRY1 : "+cst[TRY0]+" "+cst[TRY1]);
	end
	/**************************************************************************
	 * procedure getPPX_PPY
	 *************************************************************************/
  	procedure getPPX_PPY (	uint(size= 8) r_idx,
  							uint(size= 8) c_idx,
  							uint(size=32) coc[COC_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
  	)
  	var
  		uint(size= 8) s  = coc[S_COC + c_idx]&0x1,
  		uint(size= 8) pp = coc[SP_COC + c_idx * COD_MAX + SP_PP_OFFSET+r_idx]
  	begin
  		if (s != 0) then
  			cst[PPX] :=  pp & 0x0f;
  			cst[PPY] := (pp >> 4) & 0x0f;
  		else
  			cst[PPX] := 15;
  			cst[PPY] := 15;
  		end
//		println("getPPX_PPY : "+cst[PPX]+" "+cst[PPY]);
	end
	/**************************************************************************
	 * function getNumPrecinctsWide
	 *************************************************************************/
  	function getNumPrecinctsWide (uint(size=16) cst[CST_STRUCT_SIZE]) --> uint(size=8)
  	var
  		uint(size=16) tmp = cst[TRX1] & ((1<<cst[PPX])-1),
  		uint(size= 8) ret = (cst[TRX1] >> cst[PPX]) - (cst[TRX0] >> cst[PPX])
  	:
  		if cst[TRX1] = cst[TRX0] then
  			0
  		else
  			if tmp = 0 then
  				ret
  			else
  				ret+1
  			end
  		end
	end
	/**************************************************************************
	 * function getNumPrecinctsHigh
	 *************************************************************************/
  	function getNumPrecinctsHigh (uint(size=16) cst[CST_STRUCT_SIZE]) --> uint(size=8)
  	var
  		uint(size=16) tmp = cst[TRY1] & ((1<<cst[PPY])-1),
  		uint(size= 8) ret = (cst[TRY1] >> cst[PPY]) - (cst[TRY0] >> cst[PPY])
  	:
  		if cst[TRY1] = cst[TRY0] then
  			0
  		else
  			if tmp = 0 then
  				ret
  			else
  				ret+1
  			end
  		end
	end
	/**************************************************************************
	 * procedure getSubbandSize
	 *************************************************************************/
  	procedure  getSubbandSize (	uint(size= 8) r_idx,
  								uint(size= 8) c_idx,
  								uint(size= 8) s_idx,
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) csl[CSL_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
  	var
  		uint(size= 8) sp0    = coc[SP_COC + c_idx * COD_MAX] - r_idx,
  		uint(size=16) tmp    = (1<<sp0) - 1,
  		uint(size=16) subX  := (cst[TCX1] - cst[TCX0] + tmp) >> sp0,
  		uint(size=16) subY  := (cst[TCY1] - cst[TCY0] + tmp) >> sp0,
  		uint(size= 8) ceilX := 0,
  		uint(size= 8) ceilY := 0
  	begin
  		if r_idx != 0 then
  			ceilX :=  subX & 1;
  			subX  := (subX + 1) >> 1;
  			ceilY :=  subY & 1;
  			subY  := (subY + 1) >> 1;
  		end
  		if s_idx = 1 || s_idx = 3 then
  			csl[subbandX] := subX - ceilX;
  		else
  		  	csl[subbandX] := subX;
  		end
  		if s_idx = 2 || s_idx = 3 then
  			csl[subbandY] := subY - ceilY;
   		else
  		  	csl[subbandY] := subY;
   		end
//		println("getSubbandSize : "+csl[subbandX]+" "+csl[subbandY]);
	end
	/**************************************************************************
	 * procedure getCodeBlockSizeDefault
	 *************************************************************************/
  	procedure getCodeBlockSizeDefault (	uint(size= 8) c_idx,
  										uint(size=32) coc[COC_STRUCT_SIZE],
  										uint(size=16) csl[CSL_STRUCT_SIZE]
  	)
  	begin
	  	csl[cbSizeX] := coc[SP_COC + c_idx * COD_MAX + 1] + 2;
	  	csl[cbSizeY] := coc[SP_COC + c_idx * COD_MAX + 2] + 2;
//		println("getCodeBlockSizeDefault : "+csl[cbSizeX]+" "+csl[cbSizeY]);
	end
	/**************************************************************************
	 * procedure getPrecinctSize
	 *************************************************************************/
  	procedure getPrecinctSize (	uint(size=16) csl[CSL_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
  	var
  		uint(size= 8) ppx         = cst[PPX],
  		uint(size= 8) ppy         = cst[PPY],
  		uint(size= 8) nbPrecinctX = csl[subbandX] >> ppx,
  		uint(size= 8) nbPrecinctY = csl[subbandY] >> ppy,
  		uint(size= 8) tmpX       := csl[pmaxX] - nbPrecinctX - 1,
  		uint(size= 8) tmpY       := csl[pmaxY] - nbPrecinctY - 1
  	begin
  		csl[precinctX] := ppx;
  		csl[precinctY] := ppy;
	  	if ppx != 15 || ppy != 15 then
	  		if tmpX <= 1 then
	  			tmpX := tmpX + 1;
	  		end
  			csl[precinctX] := ppx - LOG2[tmpX];
  			if tmpY <= 1 then
	  			tmpY := tmpY + 1;
	  		end
  			csl[precinctY] := ppy - LOG2[tmpY];
	  	end
//		println("getPrecinctSize : "+csl[precinctX]+" "+csl[precinctY]);
	end
	/**************************************************************************
	 * procedure getZoneSize
	 *************************************************************************/
  	procedure  getZoneSize (uint(size=16) csl[CSL_STRUCT_SIZE])
  	begin
  		csl[zoneSizeX] := csl[subbandX] - (csl[pX]<<csl[precinctX]);
  		csl[zoneSizeY] := csl[subbandY] - (csl[pY]<<csl[precinctY]);
  		if ((1<<csl[precinctX]) < csl[zoneSizeX]) && (csl[pmaxX] != 0) then
  			csl[zoneSizeX] := (1<<csl[precinctX]);
  		end
  		if ((1<<csl[precinctY]) < csl[zoneSizeY]) && (csl[pmaxY] != 0) then
  			csl[zoneSizeY] := (1<<csl[precinctY]);
  		end
//		println("getZoneSize : "+csl[zoneSizeX]+" "+csl[zoneSizeY]);
	end
	/**************************************************************************
	 * procedure getCodeBlockSize
	 *************************************************************************/
  	procedure  getCodeBlockSize (	uint(size=16) idx[IDX_STRUCT_SIZE],
  		  							uint(size=16) csl[CSL_STRUCT_SIZE],
  	    							uint(size= 8) cblk_w[CB_S_MAX][CB_W_MAX][CB_H_MAX],
									uint(size= 8) cblk_h[CB_S_MAX][CB_W_MAX][CB_H_MAX]
  		  						 
  	)
  	var
  		uint(size=16) cbSize_X   := csl[cbSizeX],
  		uint(size=16) cbSize_Y   := csl[cbSizeY],
  		uint(size=16) zoneSize_X  = csl[zoneSizeX] - (idx[H_IDX]<<cbSize_X),
  		uint(size=16) zoneSize_Y  = csl[zoneSizeY] - (idx[W_IDX]<<cbSize_Y)
  	begin
    	cbSize_X   := 1 << cbSize_X;
  		if zoneSize_X < cbSize_X then
    		cbSize_X := zoneSize_X;
    	end
  		cbSize_Y   := 1 << cbSize_Y;
    	if zoneSize_Y < cbSize_Y then
    		cbSize_Y := zoneSize_Y;
    	end
    	cblk_w[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := cbSize_X;
  		cblk_h[idx[S_IDX]][idx[W2_IDX]][idx[H2_IDX]] := cbSize_Y;
//		println("getCodeBlockSize : "+cbSize_X+" "+cbSize_Y);
	end
	/**************************************************************************
	 * procedure getNbCodeBlock
	 *************************************************************************/
  	procedure  getNbCodeBlock (	uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=16) csl[CSL_STRUCT_SIZE])
  	begin
  		/* csl_hcb */
  		idxEnd[H_IDX] := 0;
  		if (1<<csl[cbSizeX]) < csl[zoneSizeX] then 
  			idxEnd[H_IDX] := (csl[zoneSizeX] - 1) >> csl[cbSizeX];
  		end
   		/* csl_wcb */
  		idxEnd[W_IDX] := 0;
  		if (1<<csl[cbSizeY]) < csl[zoneSizeY] then 
  			idxEnd[W_IDX] := (csl[zoneSizeY] - 1) >> csl[cbSizeY];
  		end
//		println("getNbCodeBlock : "+idxEnd[H_IDX]+" "+idxEnd[W_IDX]);
	end
	/**************************************************************************
	 * procedure genCblkIdx
	 *************************************************************************/
  	procedure  genCblkIdx ( uint(size=16) idx[IDX_STRUCT_SIZE],
  							uint(size=16) csl[CSL_STRUCT_SIZE]
  	)
   	var
  		uint(size= 8) nbCbX      := 0,
  		uint(size= 8) nbCbY      := 0,
  		uint(size=16) zoneSize_X := (1<<csl[precinctX]),
  		uint(size=16) zoneSize_Y := (1<<csl[precinctY])
  	begin
  		if zoneSize_X > csl[subbandX] then
  			zoneSize_X := csl[subbandX]; 
  		end
  		if zoneSize_Y > csl[subbandY] then
  			zoneSize_Y := csl[subbandY]; 
  		end
  		if (1<<csl[cbSizeX]) < zoneSize_X then
  			nbCbX := (zoneSize_X-1) >> csl[cbSizeX];
  		end
  		if (1<<csl[cbSizeY]) < zoneSize_Y then
  			nbCbY := (zoneSize_Y-1) >> csl[cbSizeY];
  		end
  		idx[H2_IDX] := idx[H_IDX] + (csl[pX] << nbCbX);
  		idx[W2_IDX] := idx[W_IDX] + (csl[pY] << nbCbY);
//		println("genCblkIdx : "+idx[H2_IDX]+" "+idx[W2_IDX]);
 	end
	/**************************************************************************
	 * fonction ifPrecValidX
	 *************************************************************************/
	function ifPrecValidX(	uint(size= 8) nl,
							uint(size=32) siz[SIZ_STRUCT_SIZE],
  						 	uint(size=16) idx[IDX_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
	) --> bool
	var
		uint(size=32) tmp = siz[XR_SIZ + idx[C_IDX]] << (cst[PPX] + nl)
	:
		if (idx[pX_loop] mod tmp) = 0 then
			true
		else
			if idx[pX_loop] != cst[TX0] then
				false
			else
				if (cst[TRX0] & ((1<<cst[PPX])-1)) = 0 then
					false
				else
					true
				end
			end
		end
	end
	/**************************************************************************
	 * fonction ifPrecValidY
	 *************************************************************************/
	function ifPrecValidY(	uint(size= 8) nl,
							uint(size=32) siz[SIZ_STRUCT_SIZE],
  						 	uint(size=16) idx[IDX_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
	) --> bool
	var
		uint(size=32) tmp = siz[YR_SIZ + idx[C_IDX]] << (cst[PPY] + nl)
	:
		if (idx[pY_loop] mod tmp) = 0 then
			true
		else
			if idx[pY_loop] != cst[TY0] then
				false
			else
				if (cst[TRY0] & ((1<<cst[PPY])-1)) = 0 then
					false
				else
					true
				end
			end
		end
	end
	/**************************************************************************
	 * fonction ifPrecValid
	 *************************************************************************/
	function ifPrecValid(	uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) coc[COC_STRUCT_SIZE],
  						 	uint(size=16) idx[IDX_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
	) --> bool
	var
		uint(size= 8) idx_c = idx[C_IDX],
		uint(size= 8) idx_r = idx[R_IDX],	
		uint(size= 8) sp0   = coc[SP_COC + idx_c],
		uint(size= 8) nl    = sp0 - idx_r
	:
		if ((coc[SG_COC + idx_c] >> 24) != 4) || ((coc[S_COC + idx_c]&0x1) = 0) then
			true
		else
			ifPrecValidX(nl,siz, idx, cst ) && ifPrecValidY(nl,siz, idx, cst)
		end
	end
	/**************************************************************************
	 * procedure getNumPrec
	 *************************************************************************/
  	procedure  getNumPrec (	uint(size=32) siz[SIZ_STRUCT_SIZE],
  							uint(size=32) coc[COC_STRUCT_SIZE],
  						 	uint(size=16) idx[IDX_STRUCT_SIZE],
  						 	uint(size=16) csl[CSL_STRUCT_SIZE],
  							uint(size=16) cst[CST_STRUCT_SIZE]
  	)
  	var
		uint(size= 8) idx_c = idx[C_IDX],
		uint(size= 8) idx_r = idx[R_IDX],	
		uint(size= 8) nl    = coc[SP_COC + idx_c] - idx_r,
		uint(size=32) xr    = siz[XR_SIZ + idx_c],
		uint(size=32) yr    = siz[YR_SIZ + idx_c]
  	begin
  		if (coc[S_COC + idx_c] & 0x1) != 0 then
  			csl[pX]    := ((idx[pX_loop] / xr) >> (nl + cst[PPX])) - (cst[TRX0] >> cst[PPX]);
  			csl[pY]    := ((csl[pY_loop] / yr) >> (nl + cst[PPY])) - (cst[TRY0] >> cst[PPY]);
  			csl[pmaxX] := getNumPrecinctsWide(cst);
  			csl[pmaxY] := getNumPrecinctsHigh(cst);
  		else
  			csl[pX]    := 0;
  			csl[pY]    := 0;
  			csl[pmaxX] := 0;
  			csl[pmaxY] := 0;
  		end
	end

/******************************************************************************
 ******************************************************************************
 ******************************************************************************
 * Codestream decription
 ******************************************************************************
 ******************************************************************************
 *****************************************************************************/
	/**************************************************************************
	 * procedure loopIncr_cprl
	 *************************************************************************/
  	procedure loopIncr_cprl (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
 	begin
 		if (idx[L_IDX] = idxEnd[L_IDX]-1) then
 			if (idx[R_IDX] = idxEnd[R_IDX]-1) then
 				if (idx[pX_loop] = idxEnd[pX_loop]-1) then
 					if (idx[pY_loop] = idxEnd[pY_loop]-1) then
 						idx[C_IDX]   := idx[C_IDX] + 1;
 						idx[pY_loop] := 0;//cst_TY0;
 					else
 						idx[pY_loop] := idx[pY_loop] + 1;
 					end
	 				idx[pX_loop] := 0;//cst_TX0;
 				else
 					idx[pX_loop] := idx[pX_loop] + 1;
 				end
 				idx[R_IDX] := 0;
 			else
 				idx[R_IDX] := idx[R_IDX] + 1;
 			end
 			idx[L_IDX] := 0;
 		else
 			idx[L_IDX] := idx[L_IDX] + 1;
 		end
 		if idx[C_IDX] != idxEnd[C_IDX] then
			getPPX_PPY(idx[R_IDX], idx[C_IDX], coc, cst);
			getTRX0_TRX1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
			getTRY0_TRY1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
		end
 	end
	/**************************************************************************
	 * procedure loopIncr_lrcp
	 *************************************************************************/
   	procedure loopIncr_lrcp (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
   	)
 	begin
 		if (idx[pX_loop] = idxEnd[pX_loop]-1) then
 			if (idx[pY_loop] = idxEnd[pY_loop]-1) then
 				if (idx[C_IDX] = idxEnd[C_IDX]-1) then
		 			if (idx[R_IDX] = idxEnd[R_IDX]-1) then
 						idx[L_IDX] := idx[L_IDX] + 1;
 						idx[R_IDX] := 0;
 					else
 						idx[R_IDX] := idx[R_IDX] + 1;
 					end
 					idx[C_IDX] := 0;
 				else
 					idx[C_IDX] := idx[C_IDX] + 1;
 				end
 				getPPX_PPY(idx[R_IDX], idx[C_IDX], coc, cst);
				getTRX0_TRX1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
				getTRY0_TRY1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
 				idxEnd[pY_loop] := getNumPrecinctsHigh(cst);
 				idxEnd[pX_loop] := getNumPrecinctsWide(cst);
 				idx[pY_loop] := 0;
  			else
 				idx[pY_loop] := idx[pY_loop] + 1;  			
 			end
 			idx[pX_loop] := 0;
 		else
 			idx[pX_loop] := idx[pX_loop] + 1;
 		end
 	end
	/**************************************************************************
	 * procedure loopIncr_rlcp
	 *************************************************************************/
   	procedure loopIncr_rlcp (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
   	)
 	begin
 		if (idx[pX_loop] = idxEnd[pX_loop]-1) then
 			if (idx[pY_loop] = idxEnd[pY_loop]-1) then
 				if (idx[C_IDX] = idxEnd[C_IDX]-1) then
		 			if (idx[L_IDX] = idxEnd[L_IDX]-1) then
 						idx[R_IDX] := idx[R_IDX] + 1;
 						idx[L_IDX] := 0;
 					else
 						idx[L_IDX] := idx[L_IDX] + 1;
 					end
 					idx[C_IDX] := 0;
 				else
 					idx[C_IDX] := idx[C_IDX] + 1;
 				end
 				getPPX_PPY(idx[R_IDX], idx[C_IDX], coc, cst);
				getTRX0_TRX1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
				getTRY0_TRY1(idx[R_IDX], idx[C_IDX], siz, coc, cst);
 				idxEnd[pY_loop] := getNumPrecinctsHigh(cst);
 				idxEnd[pX_loop] := getNumPrecinctsWide(cst);
 				idx[pY_loop] := 0;
  			else
 				idx[pY_loop] := idx[pY_loop] + 1;  			
 			end
 			idx[pX_loop] := 0;
 		else
 			idx[pX_loop] := idx[pX_loop] + 1;
 		end
 	end
 	/**************************************************************************
	 * procedure loopInit_main
	 *************************************************************************/
  	procedure loopInit_main (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) sot[SOT_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
 	begin
 		idx[C_IDX]    := 0;
 		idx[R_IDX]    := 0;
 		idx[L_IDX]    := 0;
  		idxEnd[C_IDX] := siz[C_SIZ];
  		idxEnd[R_IDX] := coc[SP_COC] + 1;
  		idxEnd[L_IDX] := (coc[SG_COC] >> 8) & 0xffff;  		
		getTY0_TY1(siz, sot, cst);
		getTX0_TX1(siz, sot, cst);
		getPPX_PPY(0, 0, coc, cst);
 		getTRX0_TRX1(0, 0, siz, coc, cst);
 		getTRY0_TRY1(0, 0, siz, coc, cst);
		if DEBUG_TRACE = true then
			if (coc[SG_COC] >> 24) = 4 then
				println("===== readCompPosResLy");
			end
			if (coc[SG_COC] >> 24) = 1 then
				println("===== readResLyCompPos");
			end
			if (coc[SG_COC] >> 24) = 0 then
				 println("===== readLyResCompPos");
			end
 		end
 		if (coc[S_COC]&0x1) != 0 then
  			if (coc[SG_COC] >> 24) = 4 then
				idx[pY_loop]    := cst[TCY0];
				idx[pX_loop]    := cst[TCX0];
	  			idxEnd[pY_loop] := cst[TCY1];
  				idxEnd[pX_loop] := cst[TCX1];
  			else
 				idx[pY_loop]     := 0;
				idx[pX_loop]     := 0;
 				idxEnd[pY_loop] := getNumPrecinctsHigh(cst);
 				idxEnd[pX_loop] := getNumPrecinctsWide(cst);
  			end
  		else
  			idx[pY_loop]    := 0;
			idx[pX_loop]    := 0;
  			idxEnd[pY_loop] := 1;
  			idxEnd[pX_loop] := 1;
  		end
	end
	/**************************************************************************
	 * procedure loopStart_main
	 *************************************************************************/
   	procedure loopStart_main (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) csl[CSL_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
 	begin
		if (coc[SG_COC + idx[C_IDX]] >> 24) = 4 then
			getNumPrec(siz, coc, idx, csl, cst);
		else
			csl[pX]    := idx[pX_loop];
  			csl[pY]    := idx[pY_loop];
  			csl[pmaxX] := idxEnd[pX_loop];
  			csl[pmaxY] := idxEnd[pY_loop];
		end
 	end
	/**************************************************************************
	 * procedure loopIncr_main
	 *************************************************************************/
   	procedure loopIncr_main (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) siz[SIZ_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE]
  	)
 	begin
 		if (coc[SG_COC + idx[C_IDX]] >> 24) = 4 then
 			loopIncr_cprl(idx, idxEnd, siz, coc, cst);
 		else
 			if (coc[SG_COC + idx[C_IDX]] >> 24) = 1 then
 				loopIncr_rlcp(idx, idxEnd, siz, coc, cst);
 			else
 				loopIncr_lrcp(idx, idxEnd, siz, coc, cst);
 			end
 		end
 	end
	/**************************************************************************
	 * procedure loopInit_swh
	 *************************************************************************/
  	procedure  loopInit_swh (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) csl[CSL_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE],
  								uint(size= 8) cblk_w[CB_S_MAX][CB_W_MAX][CB_H_MAX],
								uint(size= 8) cblk_h[CB_S_MAX][CB_W_MAX][CB_H_MAX]
  	)
  	begin
  		if (idx[R_IDX] = 0) then
 			idx[S_IDX]    := 0;
 			idxEnd[S_IDX] := 1;
			getPPX_PPY(idx[R_IDX], idx[C_IDX], coc, cst);
 		else
 			idx[S_IDX]    := 1;
 			idxEnd[S_IDX] := 4;
			getPPX_PPY(idx[R_IDX]-1, idx[C_IDX], coc, cst);
 		end
 		idx[P_IDX] := csl[pY] * csl[pmaxX] + csl[pX];
 		idx[W_IDX] := 0;
 		idx[H_IDX] := 0;
 		getSubbandSize(idx[R_IDX], idx[C_IDX], idx[S_IDX], coc, csl, cst);
		getCodeBlockSizeDefault(idx[C_IDX], coc, csl);
	 	getPrecinctSize(csl, cst);
	    getZoneSize(csl);
		getNbCodeBlock(idxEnd, csl);
		genCblkIdx(idx, csl);
		getCodeBlockSize(idx, csl, cblk_w, cblk_h);
	end
	/**************************************************************************
	 * procedure loopIncr_swh
	 *************************************************************************/
  	procedure loopIncr_swh (	uint(size=16) idx[IDX_STRUCT_SIZE],
  								uint(size=16) idxEnd[IDX_STRUCT_SIZE],
  								uint(size=32) coc[COC_STRUCT_SIZE],
  								uint(size=16) csl[CSL_STRUCT_SIZE],
  								uint(size=16) cst[CST_STRUCT_SIZE],
  								uint(size= 8) cblk_w[CB_S_MAX][CB_W_MAX][CB_H_MAX],
								uint(size= 8) cblk_h[CB_S_MAX][CB_W_MAX][CB_H_MAX]	  						 
  	)
 	begin
 		if (idx[H_IDX] = idxEnd[H_IDX]) then
 			if (idx[W_IDX] = idxEnd[W_IDX]) then
				idx[S_IDX] := idx[S_IDX] + 1;
 				idx[W_IDX] := 0;
 				idx[H_IDX] := 0;
 				if idx[S_IDX] != idxEnd[S_IDX] then
 				 	getSubbandSize(idx[R_IDX], idx[C_IDX], idx[S_IDX], coc, csl, cst);
	 				getCodeBlockSizeDefault(idx[C_IDX], coc, csl);
 				 	getPrecinctSize(csl, cst);
 				    getZoneSize(csl);
	 				getNbCodeBlock(idxEnd, csl);
	 			end
			else
 				idx[W_IDX] := idx[W_IDX] + 1;
 			end
 			idx[H_IDX] := 0;
 		else
 			idx[H_IDX] := idx[H_IDX] + 1;
 		end
		if idx[S_IDX] != idxEnd[S_IDX] then
 			getSubbandSize(idx[R_IDX], idx[C_IDX], idx[S_IDX], coc, csl, cst);
	 		getCodeBlockSizeDefault(idx[C_IDX], coc, csl);
 			getPrecinctSize(csl, cst);
 			getZoneSize(csl);
 			genCblkIdx(idx, csl);
 			getCodeBlockSize(idx, csl, cblk_w, cblk_h);
 		end
 	end
end