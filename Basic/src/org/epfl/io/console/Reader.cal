/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package org.epfl.io.console;

// Author: Richard Thavot <richard.thavot@epfl.ch>

import system.io.Console.*; 

/**
 * The actor is a standard implmentation for reading byte from a File.
 */
actor Reader() ==> int(size=8) Stream :

	int N = 3;
	
	int fcounter := 0;
	int desc := 0;
	

	initialize ==>
	do
		desc := openConsole("Reader");
	end
	
	/*
	 * Sends N bytes previously read in the file
	 */
	sendInt : action ==> Stream:[x]
	var int x = readInteger(desc)
	do
		write(desc,"input: " + x + "\n");
	end

	/*
	 * Updates the fsize variable
	 */
	readAgain : action ==>
	guard (fcounter < N)
	do
		fcounter := fcounter + 1;
		write(desc,"write an integer\n");
	end

	
	/*The scheduler*/
	schedule fsm  open:
		open  ( readAgain )  --> read;
		read ( sendInt )  --> open;
	end


end