

/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package org.epfl.io.file;

// Author: Richard Thavot <richard.thavot@epfl.ch>

import system.io.AccessFile.* ;

/**
 * The actor is a standard implmentation for writting byte in a File.
 */
actor WriterN () uint(size=2) Flag,
	int(size=8) Stream
	==> :

	int(size=32) desc;
	
	uint bcounter;
	
	List(type:int(size=8), size=LSIZE) buffer;

	initialize ==>
	do
		desc := 0;
		bcounter := 0;
	end
	
	openFile : action Flag:[ f ] ==>
	guard f = SOF
	do
		desc := openFile("copy");
	end

	readNByte : action Stream:[ b ] ==>
	guard bcounter < LSIZE
	do
		buffer[bcounter] := b;
		bcounter := bcounter + 1;
	end

	writeBuf : action ==> 
	guard bcounter > 0
	do
		writeBytes(desc, buffer, bcounter);
		bcounter := 0;
	end
	
	closeFile : action Flag:[ f ] ==>
	guard (f = EOF)
	do
		desc := closeFile(desc);
	end

	
	/*The scheduler*/
	schedule fsm  open:
		open   ( openFile )  --> read;
		
		read ( readNByte )  --> read;
		read ( writeBuf ) --> read;
		read ( closeFile ) --> open;
	end

	priority 
		readNByte > writeBuf > closeFile;
	end
	
	
	
end