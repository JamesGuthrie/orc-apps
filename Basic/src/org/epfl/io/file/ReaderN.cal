/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Richard Thavot <richard.thavot@epfl.ch>

package org.epfl.io.file;

import system.io.AccessFile.*; 

/**
 * The actor is a standard implmentation for reading byte from a File.
 */
actor ReaderN() ==> uint(size=2) Flag, int(size=8) Stream :

	int N := 1; /*Defines the number of loop*/

	uint fsize;
	uint fcounter;
	uint bsize;
	uint bcounter;
	int desc;
	
	List(type:int(size=8), size=LSIZE) buffer;
	
	initialize ==>
	do
		desc := 0;
		fcounter := 0;
		fsize := 0;
		bsize := 0;
		bcounter := 0;
	end
	
	/*
	 * Opens the File given by the input stimulus.
	 * Then initalize the fsize varibale with the lenght of the file.
	 */
	openFile : action ==>  Flag:[SOF]
	guard N > 0
	do
		desc := openFile("");
		if( desc != 0 )then
			fsize := sizeOfFile(desc);
			fcounter := fsize;
		end
		N := N - 1;
	end
	
	/*
	 *  Reads N bytes from the file as while the variable fsize is greater than 0.
	 */
	readNByte : action ==> 
	do
		bsize := if fcounter>LSIZE then LSIZE else fcounter end;
		readBytes(desc,buffer,bsize);
		bcounter := 0;
	end
	
	/*
	 * Sends N bytes previously read in the file
	 */
	sendNByte : action ==> Stream:[buffer[index]]
	guard (bcounter < bsize)
	var uint index = bcounter
	do
		fcounter := fcounter - 1;
		bcounter := bcounter + 1;
	end

	/*
	 * Updates the fsize variable
	 */
	readAgain : action ==>
	guard (fcounter > 0)
	end
	
	/*
	 * Closes the file when the fsize variable reaches 0.
	 */
	closeFile : action ==> Flag:[EOF]
	do
		desc := closeFile(desc);
	end

	
	/*The scheduler*/
	schedule fsm  open:
		open   ( openFile )  --> read;
		
		read ( readNByte )  --> send;
		
		send ( sendNByte ) --> send;
		send ( readAgain ) --> read;
		send ( closeFile ) --> open;
	end

	priority 
		sendNByte > readAgain > closeFile;
	end
	

end