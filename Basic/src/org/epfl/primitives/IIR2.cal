

/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package org.epfl.primitives; // Author: Richard Thavot <richard.thavot@epfl.ch>
import system.io.AccessFile.* ;

/**
 * The actor is a standard implmentation for reading byte from a File.
 */
actor IIR2 () int X, int Y ==> int S :

	int LINE = 8;
	int BLOCK = 8*LINE;
	
	List(type: int, size=BLOCK) s := [0 : for int i in 1 .. BLOCK];

	List(type: int, size=LINE) x := [0 : for int i in 1 .. LINE];

	List(type: int, size=BLOCK) y := [0 : for int i in 1 .. BLOCK];

	List(type: int, size=LINE) q := [ 2, 3, 4, 5, 6, 7, 8, 9 ];
	
	int NL := 0;
	
	action Y:[v] repeat BLOCK ==> 
	guard NL > 7
	do
		y := v;
		NL := 0;
	end

	eat: action X:[v] repeat LINE ==>
	do
		x := v;
		NL := NL + 1;
	end
	
	compute : action ==>
	do
		foreach int i in 0 .. LINE - 1 do
			s[i] := x[i] - y[7*NL+i] / q[i];
		end
	end

	produce: action ==> S:[ s ] repeat LINE
	end

	schedule fsm s0 :
		s0 (eat) --> s1;
		s1 (compute) --> s2;
		s2 (produce) --> s0;
	end

end