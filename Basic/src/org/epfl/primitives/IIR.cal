/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package org.epfl.primitives;

// Author: Richard Thavot <richard.thavot@epfl.ch>

import system.io.AccessFile.*; 

/**
 * The actor is a standard implmentation for reading byte from a File.
 */
actor IIR() int X, int Y ==> int S :
	
	int DEPTH = 4;
	
	List(type:int, size=DEPTH) x;
	List(type:int, size=DEPTH) y;
	
	List(type:int, size=DEPTH) a := [1, -2, 1, 0];
	List(type:int, size=DEPTH) b := [0, 5, 1, -3];
	
	int impulse;
	
	procedure computeIIR()
	begin
		impulse := 0;
		foreach int i in 0 .. DEPTH-1 do
			impulse := impulse + x[i] * a[i] + y[i] * b[i];
		end
	end
	
	
	init : action X:[v] ==> S:[impulse]
	do
		foreach int i in 1 .. DEPTH-1 do
			x[i-1] := x[i];
			y[i-1] := 0;
		end
		x[DEPTH-1] := v;
		y[DEPTH-1] := 0;
		computeIIR();
	end


	fire : action X:[v], Y:[w] ==> S:[impulse]
	do
		foreach int i in 1 .. DEPTH-1 do
			x[i-1] := x[i];
			y[i-1] := y[i-1];
		end
		x[DEPTH-1] := v;
		y[DEPTH-1] := w;
		computeIIR();
	end
	
	priority
		fire > init;
	end

end