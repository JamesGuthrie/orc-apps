/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

package org.epfl.primitives;

// Author: Richard Thavot <richard.thavot@epfl.ch>

import system.io.AccessFile.*; 

/**
 * The actor is a standard implmentation for reading byte from a File.
 */
actor BlockGenerator() ==> int Stream :

	int N := 64; /*Defines the number of loop*/

	uint i;
	
	
	
	/**
	 * 
	 */
	List(type:int, size=64) ref := [
		52, 55, 61,  66,  70,  61, 64, 73,
		63, 59, 55,  90, 109,  85, 69, 72,
		62, 59, 68, 113, 144, 104, 66, 73,
		63, 58, 71, 122, 154, 106, 70, 69,
		67, 61, 68, 104, 126,  88, 68, 70,
		79, 65, 60,  70,  77,  68, 58, 75,
		85, 71, 64,  59,  55,  61, 65, 83,
		87, 79, 69,  68,  65,  76, 78, 94
	];
	
	initialize ==>
	do
		i := 0;
	end
	
	start: action ==>
	guard N > 0
	do
		N := N - 1;
	end
	
	sendByte : action ==> Stream:[ref[index]]
	var uint index = i
	do
		i := i + 1;
	end

	stop : action ==>
	guard i >= 64
	do
		i := 0;
	end
	
	/*The scheduler*/
	schedule fsm  beginning:
		beginning ( start )    --> sending;
		
		sending   ( sendByte ) --> sending;
		sending   ( stop )     --> beginning;
	end

	priority 
		stop > sendByte;
	end
	

end