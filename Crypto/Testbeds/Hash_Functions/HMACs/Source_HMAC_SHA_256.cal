/**
 * This FU generates test vectors of input message and their golden responses for HMAC using SHA-256. 
 * Test vectors are taken from http://tools.ietf.org/html/rfc4231#section-4.1.
 * Note: The current implementation does not yet support the Keys with size greater than 64 bytes. The 
 * support for keys with size greater than 64 bytes will be added later.
 * 
 * FU ID: Source_HMAC_SHA_256
 * Six output port
 *   1) uint(size=8) OP1_Key: the key
 *   2) uint(size=64) OP2_MessageSize: the size of input message. 
 *   3) uint(size=8) OP3_Message: the input message to be authenticated.
 *	 4) uint(size=8) OP4_HashSize_Bytes: the size of output hash (message digest) of SHA-256 in bytes.
 *	 5) uint(size=8) OP5_HashSize_Bytes: the size of output hash (message digest) of SHA-256 in double words. 
 *   6) uint(size=32) OP6_GR: the golden response HMAC message.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 */
 
package Hash_Functions.HMACs;

actor Source_HMAC_SHA_256() ==> uint(size=8) OP1_Key, uint(size=64) OP2_MessageSize, uint(size=8) OP3_Message, uint(size=8) OP4_HashSize_Bytes, uint(size=8) OP5_HashSize_DWords, uint(size=32) OP6_GR:

	int iterations := 2;
	int iterCounter := 1;
	
	int KEY_SIZE = 4;
	// Key
	List(type:uint(size=8), size=KEY_SIZE+1) key = [KEY_SIZE, 0x4a, 0x65, 0x66, 0x65];

	uint(size=64) MESSAGE_SIZE = 28; // 28 bytes.
	List(type:uint(size=8),size=MESSAGE_SIZE) M := [ // Input message
			0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x79, 0x61, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 
			0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x3f
		];
	uint HASH_SIZE = 8; // 8 QWords or 256 bits
	List(type:uint(size=32),size=HASH_SIZE) gr := [ // Golden response (HMAC)
			0x5bdcc146, 0xbf60754e, 0x6a042426, 0x089575c7, 0x5a003f08, 0x9d273983, 0x9dec58b9, 0x64ec3843
		];
	
	bool messageSent := false;
	sendMessage:
	action ==> OP1_Key:[key] repeat KEY_SIZE+1, OP2_MessageSize:[MESSAGE_SIZE], OP3_Message:[M] repeat MESSAGE_SIZE 
	guard not messageSent
	do
		messageSent := true;
	end

	bool grSent := false;
	sendGR:
	action ==> OP4_HashSize_Bytes:[HASH_SIZE*4], OP5_HashSize_DWords:[HASH_SIZE], OP6_GR:[gr] repeat HASH_SIZE
	guard not grSent
	do
		grSent := true;
	end
	
	reset:
	action ==>
	guard iterCounter < iterations and messageSent and grSent
	do
		iterCounter := iterCounter + 1;
		messageSent := false;
		grSent := false;
	end
	
end
