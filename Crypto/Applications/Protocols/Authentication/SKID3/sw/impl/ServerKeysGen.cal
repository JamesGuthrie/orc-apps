/**
 * This FU generates test data to simulate the Skid3 user authentication protocol. 
 * It sends test keys for the PRGs (for both the client and the server), the keys to be used for HMAC operations, 
 * and the hash size of the hashing operation used in the HMAC.
 * 
 * FU ID: Source_Skid3
 * Three output ports:
 *   1) uint(size=8) OP2_Server_PRG_Key: the key for the server's PRG. 
 *   2) uint(size=8) OP3_HMAC_Key: the keys for the HMAC operations.
 *	 3) uint(size=8) OP4_Hash_Size: the size of output hash (message digest) of SHA-256 in bytes.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 */
 
package Protocols.Authentication.SKID3.sw.impl;

actor ServerKeysGen() ==> uint(size=8) OP2_Server_PRG_Key, uint(size=8) OP3_HMAC_Key, uint(size=8) OP4_Hash_Size:

	int SERVER_PRG_KEY_SIZE = 8;
	// PRG Key Server
	List(type:uint(size=8), size=SERVER_PRG_KEY_SIZE+1) SERVER_PRG_KEY = [SERVER_PRG_KEY_SIZE, 0x65,0x66,0x65,0x4a, 0x4a,0x65,0x66,0x65];

	bool keysSent4PRG := false;
	sendKeys4PRG:
	action ==> OP2_Server_PRG_Key:[SERVER_PRG_KEY] repeat SERVER_PRG_KEY_SIZE+1
	guard not keysSent4PRG
	do
		keysSent4PRG := true;
	end
		
	int HMAC_KEY_SIZE = 4;
	// HMAC Key
	List(type:uint(size=8), size=HMAC_KEY_SIZE+1) HMAC_KEY = [HMAC_KEY_SIZE, 0x4a, 0x65, 0x66, 0x65];	

	bool HMACkeySent1 := false;
	sendHMACKey1:
	action ==> OP3_HMAC_Key:[HMAC_KEY] repeat HMAC_KEY_SIZE+1
	guard not HMACkeySent1
	do
		HMACkeySent1 := true;
	end

	bool HMACkeySent2 := false;
	sendHMACKey2:
	action ==> OP3_HMAC_Key:[HMAC_KEY] repeat HMAC_KEY_SIZE+1
	guard not HMACkeySent2
	do
		HMACkeySent2 := true;
	end

	bool hashSizeSent := false;
	sendHashSize:
	action ==> OP4_Hash_Size:[32] // The size of hash generated by SHA-256 in bytes.  
	guard not hashSizeSent
	do
		hashSizeSent := true;
	end	
	
end
