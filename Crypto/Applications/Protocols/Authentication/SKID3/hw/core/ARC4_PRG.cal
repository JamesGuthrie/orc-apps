/**
 * This FU gives implementation of ARC4_PRG (stream cipher) in RVC-CAL.
 * The terms and names of variables used in this FU follow the Wikipedia page of RC4:
 * http://en.wikipedia.org/wiki/RC4
 * 
 * FU ID: ARC4_PRG
 * One input ports:
 *   1) uint(size=8) Key: key (the first byte is the key size))
 * One output port:
 *   1) uint(size=8) OP: output byte (pseudo random number).
 * 
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 * 			   Thavot Richard @ EPFL
 * Last Modified: 26.04.2012
 */

package Protocols.Authentication.SKID3.hw.core;

actor ARC4_PRG() uint(size=8) Key ==> uint(size=8) OP:

	uint KEY_SIZE_MAX = 256; // maximum key size (in byte)
	List(type:uint(size=8), size=KEY_SIZE_MAX) key := [0: for int a in 1 .. KEY_SIZE_MAX];
	List(type:uint(size=8), size=256) S := [a: for int a in 0 .. 255]; // S-box

	uint keySize := 0; // size of the received key (in byte)
	getSize :action Key:[k] ==>
	do
		keySize := k;
	end
		
	procedure swap(int a, int b)
	var uint(size=8) temp
	begin	
		temp := S[a];
		S[a] := S[b];
		S[b] := temp;
	end
	
	// Key-scheduling action, which also reads the key from the input port.
	uint(size=8) keyCounter := 0; // index of the current key byte 
	getKey : action Key:[k] ==>
	do
		key[keyCounter] := k;
		keyCounter := keyCounter + 1;
	end
	
	compute : action ==>
	guard keyCounter >= keySize
	var int b, int c
	do
		b := 0;
		foreach int a in 0 .. 255 do
			// b := (b + S[a] + key[a mod keySize]) mod 256;
			c := a - ((a / keySize) * keySize); // == a mod keySize
			b := (b + S[a] + key[c]) & 255; // x mod 256 <=> x & 255. 
			swap(a,b);
		end
	end

	// Main action: PRG.
	int i := 0;
	int j := 0;
	int byte := 0;
	generate : action ==> OP:[byte]
	do
	   // x mod 256 <=> x & 255.
		i := (i + 1) & 255;
		j := (j + S[i]) & 255;
		swap(i,j);
		byte := (S[(S[i] + S[j]) & 255]);
	end
	
	schedule fsm start :
		//Get size
		start ( getSize ) --> setting;
		//Get key and compute ...
		setting ( getKey ) --> setting;
		setting ( compute ) --> generator;
		//Generate
		generator ( generate ) --> generator;
	end
	
	priority
		compute  > getKey;
	end
	
end