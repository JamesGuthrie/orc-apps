/**
 * This FU is part of a CAL implementation of Secure Hash Algorithms (SHA-256) specified in FIPS-180-3.
 * It performs the SHA-256 hash computation. 
 * 
 * FU ID: SHA_256 (This FU is not named as 'SHA-256' because '-' cannot be used the CAL actor names)
 * One FU parameter:
 * 	 1) bool IS_SHA256: run in SHA-256 mode? (true = SHA-256, false = SHA-224)
 * Two input port:
 * 		1) int(size=32) IP1_N: the number of input message blocks
 * 		2) uint(size=32) IP2_M: the input message (as double word stream)
 * One output port:
 * 		2) uint(size=32) OP2_M: the output (message digest)
 *
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2010
 * 			  Richard Thavot @ EPFL  
 * Last modified: 26.04.2012 
 */

package Protocols.Authentication.SKID3.hw.core;

actor SHA_256(bool IS_SHA256) int(size=32) IP1_N, uint(size=32) IP2_M ==> uint(size=32) OP:
	// Receive the number of messages to be processed and init hash variables for SHA-224.
	int N := 0; // Number of messages.
		
	// State variables:
	List(type:uint(size=32),size=64) K := [ // SHA-256 constants K.
		0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];
	List(type:uint(size=32),size=64) W := [0: for int i in 0 .. 63]; // Message schedule.
	List(type:uint(size=32),size=16) M := [0: for int i in 0 .. 15]; // Message.
	
	// replace the list(size=8) by 8 vars to be more efficient in hardware
	uint(size=32) H0;
	uint(size=32) H1;
	uint(size=32) H2;
	uint(size=32) H3;
	uint(size=32) H4;
	uint(size=32) H5;
	uint(size=32) H6;
	uint(size=32) H7;
	
	int messageCounter := 0; // count the number of messages processed.
	int wordCounter := 0; // count the number of words processed.

	// Rotate right shift of 32 bit numbers.
	function ROTR32(uint(size=32) x, int n ) --> uint(size=32):
		(x >> n) | (x << (32-n))
	end 

	// SHA-224 and SHA-256 function 'Ch'.
	function Ch(uint(size=32) x, uint(size=32) y, uint(size=32) z) --> uint(size=32):
		(x & y) ^ (~x & z)
	end

	// SHA-224 and SHA-256 function 'Maj'.
	function Maj(uint(size=32) x, uint(size=32) y, uint(size=32) z) --> uint(size=32):
		(x & y) ^ (x & z) ^ (y & z)
	end
	
	// SHA-224 and SHA-256 function 'BigSigma0'.
	function BigSigma0(uint(size=32) x) --> uint(size=32):
		ROTR32(x,2) ^ ROTR32(x,13) ^ ROTR32(x,22) 
	end
	
	// SHA-224 and SHA-256 function 'BigSigma1'.
	function BigSigma1(uint(size=32) x) --> uint(size=32):
		ROTR32(x,6) ^ ROTR32(x,11) ^ ROTR32(x,25)
	end

	// SHA-224 and SHA-256 function 'SmallSigma0'.
	function SmallSigma0(uint(size=32) x) --> uint(size=32):
		ROTR32(x,7) ^ ROTR32(x,18) ^ (x >> 3)
	end

	// SHA-224 and SHA-256 function 'SmallSigma1'.
	function SmallSigma1(uint(size=32) x) --> uint(size=32):
		ROTR32(x,17) ^ ROTR32(x,19) ^ (x >> 10)
	end
	
	init:
	action IP1_N:[n] ==>
	do
		N := n;
		// Initialize Initial hash values for SHA-224.
		if IS_SHA256 = false then
			H0 := 0xC1059ED8;
			H1 := 0x367CD507;
			H2 := 0x3070DD17;
			H3 := 0xF70E5939;
			H4 := 0xFFC00B31;
			H5 := 0x68581511;
			H6 := 0x64F98FA7;
			H7 := 0xBEFA4FA4;
		else
			H0 := 0x6a09e667; 
			H1 := 0xbb67ae85; 
			H2 := 0x3c6ef372; 
			H3 := 0xa54ff53a; 
			H4 := 0x510e527f; 
			H5 := 0x9b05688c; 
			H6 := 0x1f83d9ab; 
			H7 := 0x5be0cd19;
		end

		messageCounter := 0; // Reset message counter.
		wordCounter := 0; // Reset word counter.
	end
	
	
	// Receive the message.
	receiveMessage.recv:
	action IP2_M:[m] ==>
	do
		M[wordCounter] := m;
		wordCounter := wordCounter + 1;
	end
	
	// Hash input messages.
	hashMessage:
	action ==>
	guard wordCounter >= 16
	var
		// Working variables:
		uint(size=32) a,
		uint(size=32) b,
		uint(size=32) c,
		uint(size=32) d,
		uint(size=32) e,
		uint(size=32) f,
		uint(size=32) g,
		uint(size=32) h,
		// Temporary variables:
		uint(size=32) T1,
		uint(size=32) T2,
		
		int t := 0
	do
		// Prepare Message schedule.		
		while(t < 64) do
			if t <= 15 then
				W[t] := M[t];			
			else
				W[t] := SmallSigma1(W[t-2]) + W[t-7] + SmallSigma0(W[t-15]) + W[t-16];
			end
			
			t := t + 1;
		end
		
		// Initialize working variables.
		a := H0;
		b := H1;
		c := H2;
		d := H3;
		e := H4;
		f := H5;
		g := H6;
		h := H7;
				
		// 64 Computation cycles.
		t := 0;
		while(t < 64) do
			T1 := h + BigSigma1(e) + Ch(e,f,g) + K[t] + W[t];
			T2 := BigSigma0(a) + Maj(a,b,c);
			h := g;
			g := f;
			f := e;
			e := d + T1;
			d := c;
			c := b;
			b := a;
			a := T1 + T2;		

			t := t + 1;
		end
		
		// Compute intermediate hash values.
		H0 := a + H0;
		H1 := b + H1;
		H2 := c + H2;
		H3 := d + H3;
		H4 := e + H4;
		H5 := f + H5;
		H6 := g + H6;
		H7 := h + H7;

		wordCounter := 0;
	end
	
	// Increment message counter.
	handleMessage.new : action ==>
	do
		messageCounter := messageCounter + 1;
	end
	
	handleMessage.done : action ==>
	guard messageCounter >= N
	end

	// Output the final generated hash (message digest).
	outputHash.h0: action ==> OP:[H0] end
	outputHash.h1: action ==> OP:[H1] end
	outputHash.h2: action ==> OP:[H2] end
	outputHash.h3: action ==> OP:[H3] end
	outputHash.h4: action ==> OP:[H4] end
	outputHash.h5: action ==> OP:[H5] end
	outputHash.h6: action ==> OP:[H6] end
	outputHash.h7: action ==> OP:[H7] end
	
	schedule fsm start :
		start ( init ) --> handleMessage;
		
		handleMessage ( handleMessage.new ) --> receiveMessage;
		handleMessage ( handleMessage.done ) --> outputHash_h0;
		
		receiveMessage ( receiveMessage ) --> receiveMessage;
		receiveMessage ( hashMessage ) --> handleMessage;
		
		outputHash_h0 ( outputHash.h0 ) --> outputHash_h1;
		outputHash_h1 ( outputHash.h1 ) --> outputHash_h2;
		outputHash_h2 ( outputHash.h2 ) --> outputHash_h3;
		outputHash_h3 ( outputHash.h3 ) --> outputHash_h4;
		outputHash_h4 ( outputHash.h4 ) --> outputHash_h5;
		outputHash_h5 ( outputHash.h5 ) --> outputHash_h6;
		outputHash_h6 ( outputHash.h6 ) --> outputHash_h7;
		outputHash_h7 ( outputHash.h7 ) --> start;
	end
	
	
	priority 
		hashMessage > receiveMessage.recv;
		handleMessage.done > handleMessage.new;
	end
	
end
