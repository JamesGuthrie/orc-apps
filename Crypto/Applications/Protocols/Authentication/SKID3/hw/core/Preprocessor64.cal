/**
 * This FU is part of a CAL implementation of Secure Hash Algorithms (SHA-1, SHA-2) specified in FIPS-180-3.
 * It performs the following steps as part of the preprocessing operation of the algorithm: 
 * 1) Padding of the input message to be a multiple of 64 bytes (512 bits).
 * 2) Parsing of the input message into multiple message block each of size 64 bytes (512 bits). 
 * 
 * FU ID: Preprocessor64
 * Two input port:
 * 		1) int(size=64) IP1_Size: the size of the input message
 * 		2) uint(size=8) IP2_M: the input message (as byte stream) 
 * Two output port:
 * 		1) int(size=32) OP1_N: the number of input message blocks
 * 		2) uint(size=8) OP2_M: the message block (16 bytes each)
 *
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2010
 * 			  Richard Thavot @ EFPL
 * Last modified: 26.04.2012
 */

package Protocols.Authentication.SKID3.hw.core;

actor Preprocessor64() uint(size=64) IP1_Size, uint(size=8) IP2_M ==> int(size=32) OP1_N, uint(size=8) OP2_M:
	// State variables:
	uint BLOCK_SIZE_MOD = 63; // Used for modulo operation. Note: x mod 64 <==> x & 63.
	int(size=64) messageSize := 0; // Size of the current message in bytes.
	int(size=64) messageSizeBit := 0;

	int byteCounter := 0;
	
	// Receive message size and calculates:
	// 1) numZeroBytes: Number of zeros bytes to be padded.
	// 2) N: Number of 64 byte (512 bits) message blocks including 
	//    the padding, 0x80 byte and message size.
	// number 41 = 1 (80Byte) + 8 (sizeByte) + 32 (Round Half Up With BLOCK_SIZE)
	// >> 6 = div by BLOCK_SIZE thus / 64
	// << 3 = mul by Byte to Bit thus * 8
	receiveSize:
	action IP1_Size:[mSize] ==> OP1_N:[(mSize + 41) >> 6]
	do
		messageSize := mSize;
		messageSizeBit := mSize << 3;
		byteCounter := 0;
	end
	
	// Receive and forward input message byte by byte.
	send.receiveAndForwardMessage:
	action IP2_M:[b] ==> OP2_M:[b]
	do
		byteCounter := byteCounter + 1;
	end
	
	// Once input message is finished, forward byte 0x80 (the most significant bit as 1).
	done.forward80Byte:
	action ==> OP2_M:[0x80]
	guard byteCounter >= messageSize
	end	 
	
	// Forward the number of zeros bytes to be padded to make the message blocks to be of 64 bytes.
	send.forwardZeroBytes:
	action ==> OP2_M:[0x00]
	do	
		byteCounter := byteCounter + 1;
	end
	
	// only when (BLOCK_SIZE_MOD - 8) is reached
	done.forwardZeroBytes:
	action ==> OP2_M:[0x00]
	guard (byteCounter & BLOCK_SIZE_MOD) = (BLOCK_SIZE_MOD - 8)
	do	
		byteCounter := 0;
	end

	// Forward the message size as last 2 dwords of the last message block.
	// >> 8 : for selecting next byte
	send.forwardSize.send:
	action ==> OP2_M:[messageSizeBit & 0xff]
	do
		messageSizeBit := messageSizeBit >> 8;
		byteCounter := byteCounter + 1;
	end
	
	done.forwardSize :
	action ==>
	guard byteCounter >= 8
	end
	

	schedule fsm start :
		start ( receiveSize ) --> message;
		
		message ( send.receiveAndForwardMessage ) --> message;
		message ( done.forward80Byte ) --> forward;
		
		forward ( send.forwardZeroBytes ) --> forward;
		forward ( done.forwardZeroBytes ) --> fsize;
		
		fsize ( send.forwardSize) --> fsize;
		fsize ( done.forwardSize) --> start;
	end
	
	//All done actions have a higher priority than send actions
	priority
		done > send;
	end
	
end
