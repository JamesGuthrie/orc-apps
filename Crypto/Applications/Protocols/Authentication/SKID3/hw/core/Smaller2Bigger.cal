/**
 * This FU is part of a CAL Cryptographic Tool Library (CTL) Utilities.
 * It combines a sequence of byte/word/double-word tokens into a sequence of word/double-word/quad-word tokens.
 * 
 * FU ID: Smaller2Bigger
 * One FU parameter:
 * 	 1) bool IS_BIG_ENDIAN: output bits in big-endian? (true = big-endian, false = little-endian)
 * Two Constants:
 * Note: Constants are being used instead of FU parameters because FU parameters are currently not fully 
 *       supported by Orcc. These constants will become FU parameters later.
 *	 1) int IP_PORT_SIZE: input port size (default: 8; possible values: 8, 16, 32)
 *	 2) int OP_PORT_SIZE: output port size (default: 32; possible values: 16, 32, 64)
 *	 Note: The value of IN_NUM_TOKENS (the number of input tokens to be used to generate one output token) 
 *          is calculated by IN_NUM_TOKENS := OP_PORT_SIZE / IP_PORT_SIZE.		
 * One input port:
 * 	 1) uint(size=IP_PORT_SIZE) IP: the input
 * One output port:
 * 	 1) uint(size=OP_PORT_SIZE) OP: the output token
 *
 * Last modified: 01.09.2011
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

package Protocols.Authentication.SKID3.hw.core;

actor Smaller2Bigger (bool IS_BIG_ENDIAN) uint(size=IP_PORT_SIZE) IP ==> uint(size=OP_PORT_SIZE) OP:
	
	int IP_PORT_SIZE = 8;
	int OP_PORT_SIZE = 32;
	
	// the number of input tokens to be used to generate one output token.
	int IN_NUM_TOKENS = OP_PORT_SIZE / IP_PORT_SIZE;
	
	uint(size=OP_PORT_SIZE) result := 0;
	int tokenCounter := 0;

	convert:
	action IP:[token] ==> 
	guard tokenCounter < IN_NUM_TOKENS
	do
		if IS_BIG_ENDIAN then
			result := (result << IP_PORT_SIZE) | token;
		else
			result := result | (token << (tokenCounter*IP_PORT_SIZE));
		end	
//println("convert "+tokenCounter+" "+result);
		tokenCounter := tokenCounter + 1;
	end

	send:
	action ==> OP:[v]
	guard tokenCounter = IN_NUM_TOKENS
	var
		uint(size=OP_PORT_SIZE) v := 0
	do
		tokenCounter := 0;
		v := result;
		result := 0;
//println("send "+tokenCounter+" "+result);
	end
	
	priority
		convert > send;
	end

end
