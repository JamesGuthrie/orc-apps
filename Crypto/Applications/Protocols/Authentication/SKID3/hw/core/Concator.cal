/**
 * This utility FU allows to concate two unsigned byte streams with the possibility to have unequal 
 * number of tokens in each stream.
 * 
 * FU ID: Concator
 * Four input ports:
 *   1) int(size=64) IP1_S1Size: the number of tokens in the first stream (S1).  
 *   2) uint(size=8) IP2_S1: the first stream (S1).
     3) int(size=64) IP3_S2Size: the number of tokens in the second stream (S2). 
 *   4) uint(size=8) IP4_S2: the second stream (S2).
 * Two output ports:
 *   1) int(size=64) OP1_Size: the number of tokens in the concatinated stream (S).  
 *   2) uint(size=8) OP2_S: the the concatinated stream (S).
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last Modified: 05.04.2012
 */
 
package Protocols.Authentication.SKID3.hw.core;

actor Concator() int(size=64) IP1_S1Size, uint(size=8) IP2_S1, int(size=64) IP3_S2Size, uint(size=8) IP4_S2
	==> 
	int(size=64) OP1_Size, uint(size=8) OP2_S:

	int(size=64) counter := 0; 
	int(size=64) s1Size := 0;
	int(size=64) s2Size := 0;
	
	int step_index := 1;
	getSizes:
	action IP1_S1Size:[s1], IP3_S2Size:[s2] ==> OP1_Size:[s1Size+s2Size]
	guard step_index = 1
	do
		s1Size := s1;
		s2Size := s2; 

		counter := 0;
		step_index := 2;		
	end

	sendS1:
 	action IP2_S1:[s1] ==> OP2_S:[s1]
 	guard step_index = 2 and counter < s1Size
 	do
 		counter := counter + 1;
 		if(counter = s1Size) then
 		 	step_index := 3;
 		 	counter := 0;
 		end 		 
	end

	sendS2:
 	action IP4_S2:[s2] ==> OP2_S:[s2]
 	guard step_index = 3 and counter < s2Size
 	do
 		counter := counter + 1; 	
 		if(counter = s2Size) then
 		 	step_index := 1;
 		end 		
	end

end
