/**
 * This FU generates test data to simulate the server's side of the SKID3 user authentication protocol. 
 * It sends test key for the PRG, the keys to be used for HMAC operations, the hash size of the hashing 
 * operation used in the HMAC and the test server's data (the nounce rS and the HMAC H2).
 * 
 * FU ID: Client_Source
 * Four output ports:
 *   1) uint(size=8) OP1_PRG_Key: the key for the client's PRG. 
 *   2) uint(size=8) OP2_HMAC_Key: the keys for the HMAC operations.
 *	 3) int(size=8) OP3_Hash_Size: the size of output hash (message digest) of SHA-256 in bytes.
 *   4) uint(size=8) OP4_Channel: the channel to send the test client's data.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last Modified: 05.04.2012
 */
 
package Protocols.Authentication.SKID3;

actor Server_Source() ==> uint(size=8) OP1_PRG_Key, uint(size=8) OP2_HMAC_Key, int(size=8) OP3_Hash_Size, uint(size=8) OP4_Channel:

	int PRG_KEY_SIZE = 8;
	// PRG Key Server
	List(type:uint(size=8), size=PRG_KEY_SIZE+1) PRG_KEY = [PRG_KEY_SIZE, 0x65,0x66,0x65,0x4a, 0x4a,0x65,0x66,0x65];


	bool keySent4PRG := false;
	sendKey4PRG:
	action ==> OP1_PRG_Key:[PRG_KEY] repeat PRG_KEY_SIZE+1  
	guard not keySent4PRG
	do
		keySent4PRG := true;
	end
		
	int HMAC_KEY_SIZE = 4;
	// HMAC Key
	List(type:uint(size=8), size=HMAC_KEY_SIZE+1) HMAC_KEY = [HMAC_KEY_SIZE, 0x4a, 0x65, 0x66, 0x65];	

	bool HMACkeySent1 := false;
	sendHMACKey1:
	action ==> OP2_HMAC_Key:[HMAC_KEY] repeat HMAC_KEY_SIZE+1
	guard not HMACkeySent1
	do
		HMACkeySent1 := true;
	end

	bool HMACkeySent2 := false;
	sendHMACKey2:
	action ==> OP2_HMAC_Key:[HMAC_KEY] repeat HMAC_KEY_SIZE+1
	guard not HMACkeySent2
	do
		HMACkeySent2 := true;
	end

	bool hashSizeSent := false;
	sendHashSize:
	action ==> OP3_Hash_Size:[32] // The size of hash generated by SHA-256 in bytes.  
	guard not hashSizeSent
	do
		hashSizeSent := true;
	end	

	bool clientDataSent := false;
	sendClientData:
	action ==> OP4_Channel:[100, 0x5e, // clients ID and clients's nounce rC -- 2 bytes
	 // client's HMAC H2 -- 32 bytes (256 bits).
	0x96,0x74,0x02,0x54, 0x03,0x1e,0x83,0xbb, 0x63,0xae,0xfe,0x1e, 0x90,0xcf,0x0c,0x28,
	0x5d,0x8a,0xb7,0x4f, 0x63,0x1b,0xe4,0x26, 0xc2,0xf0,0x97,0xf7, 0x16,0x14,0xdc,0xf4] 
	guard not clientDataSent
	do
		clientDataSent := true;
	end	
	
end
