/**
 * This FU is part of the RVC-CAL implementation of the HMAC (http://tools.ietf.org/html/rfc2104). 
 * It receives the key and generates two padded keys (in-padded key and out-padedd key).
 * 
 * FU ID: Pad_Key
 * One input ports:
 *   1) uint(size=8) IP1_Key: the key to be padded.
 * Four output ports:
 *   1) int(size=64) OP1_Pad_Size: the size of the in-padded and out-padded keys (this size depends on the input 
 *   block size of the underlying hashing algorithm. 
 *   2) uint(size=8) OP2_Ipad_Key: the in-padded key. 
 *   3) uint(size=8) OP3_Opad_Key: the out-padded key.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * 			  Thavot Richard @ EPFL
 * Last Modified: 26.04.2012
 */
 
package Protocols.eBanking.hPINhTAN.SKID3.core;

actor Pad_Key() uint(size=8) IP1_Key ==> int(size=64) OP1_Pad_Size, uint(size=8) OP2_Ipad_Key, uint(size=8) OP3_Opad_Key:

	uint BLOCK_SIZE = 64; // Block size for input message of SHA-1 and SHA-2.
	int KEY_SIZE := 20;
	int(size=64) counter := 0;
	uint(size=8) opad := 0x5c;
	uint(size=8) ipad := 0x36;
	
	// Read size
	sendPadSize:
	action IP1_Key:[kSize] ==> OP1_Pad_Size:[BLOCK_SIZE]
	do
		counter := 0;
		if (kSize > BLOCK_SIZE) then
			KEY_SIZE := BLOCK_SIZE;
		else	
			KEY_SIZE := kSize;
		end
	end

	// Read token until KEY_SIZE is reached
	applyPad:
	action IP1_Key:[x] ==> OP2_Ipad_Key:[(x ^ ipad)], OP3_Opad_Key:[(x ^ opad)] 
	do
		counter := counter + 1;
	end
	
	// Send token until BLOCK_SIZE is reached
	applyPadZero:
	action ==> OP2_Ipad_Key:[(0x00 ^ ipad)], OP3_Opad_Key:[(0x00 ^ opad)] 
	guard counter >= KEY_SIZE
	do
		counter := counter + 1;
	end
	
	// Restart when BLOCK_SIZE is reached
	reset:
	action ==>
	guard counter >= BLOCK_SIZE
	end
	
	schedule fsm start:
		start(sendPadSize) --> padding;
		
		padding(applyPad) --> padding;
		padding(applyPadZero) --> padding;
		padding(reset) --> start;
		
	end
	
	priority
		reset > applyPadZero > applyPad ;
	end

end
