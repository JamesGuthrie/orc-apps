/**
 * This FU is part of a CAL Cryptographic Tool Library (CTL) Utilities.
 * It splits a sequence of word/double-word/quad-word tokens into a sequence of byte/word/double-word tokens.
 * 
 * FU ID: Bigger2Smaller
 * One FU parameter:
 * 	 1) bool IS_BIG_ENDIAN: output bits in big-endian? (true = big-endian, false = little-endian)
 * Two Constants:
 * Note: Constants are being used instead of FU parameters because FU parameters are currently not fully 
 *       supported by Orcc. These constants will become FU parameters later.
 *	 1) int IP_PORT_SIZE: input port size (default: 32; possible values: 16, 32, 64)
 *	 2) int OP_PORT_SIZE: output port size (default: 8; possible values: 8, 16, 32)
 *	 Note: The value of OP_NUM_TOKENS (the number of output tokens to be generated from one input token) 
 *          is calculated by OP_NUM_TOKENS := IP_PORT_SIZE / OP_PORT_SIZE.
 * One input port:
 * 	 1) uint(size=IP_PORT_SIZE) IP: the input
 * One output port:
 * 	 1) uint(size=OP_PORT_SIZE) OP: the output token
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 * 			   Thavot Richard @ EPFL
 * Last modified: 01.09.2011
 */

package Protocols.eBanking.hPINhTAN.SKID3.core;

actor Bigger2Smaller (bool IS_BIG_ENDIAN) uint(size=IP_PORT_SIZE) IP ==> uint(size=OP_PORT_SIZE) OP:
	
	int IP_PORT_SIZE = 32;
	int OP_PORT_SIZE = 8;
	
	
	// This number is used to extract each OP_PORT_SIZE from input.
	uint(size=OP_PORT_SIZE) OP_MASK_VALUE = (1 << OP_PORT_SIZE) - 1;
	//
	uint(size=IP_PORT_SIZE) word := 0;
	//
	uint i := IP_PORT_SIZE;
	
	//Read Bigger value
	get:
	action IP:[value] ==>
	do
		word := value;
		i := 0;
	end
	
	//Send Smaller values
	send:
	action ==> OP:[token]
	guard i < IP_PORT_SIZE
	var uint(size=OP_PORT_SIZE) token
	do
		if IS_BIG_ENDIAN then // big-endian
				i := i + OP_PORT_SIZE;
				token := (word >> (IP_PORT_SIZE-i)) & OP_MASK_VALUE;
		else // little-endian
			token := (word >> i) & OP_MASK_VALUE;
			i := i + OP_PORT_SIZE;
		end
	end
	
	
	priority
		send > get;
	end

end
