/**
 * This FU is part of a RVC-CAL implementation of SKID3 user authentication protocol.
 * This FU (as part of the client's implementation) receives the server's data (the nonce rS and the HMAC H1) from the communication channel,
 * prepares data for HMAC operations (H1' and H2) and sends the needed data to its helper FU (Client_Sender).
 * 
 * FU ID: ClientReceiver
 * Two FU parameter: 
 * 	 This FU gets the UIDs of both the server and its own as FU parameters.
 * 	 1) int clientID: the UID of the client.
 *   2) int serverID: the UID of the server.
 * Three input port:
 * 	 1) uint(size=8) IP1_PRG: the nonce from pseudo random generator (PRG).
 *   2) int(size=8) IP2_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC.
 *   3) uint(size=8) IP3_Channel: the communication channel to receive server's data (the nonce rS and the HMAC H1).  
 * Four output port:
 * 	 1) int(size=64) OP1_Message_Size: the size (in bytes) of the message to be HMACed.
 *   2) uint(size=8) OP2_Message: the message to be HMACed.
 *   3) int(size=64) OP3_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC. 
 *   4) uint(size=8) OP4_Link: the link to exchange data between this FU and the Client_Sender FU.
 *   Note: OP1_Message_Size and OP3_Hash_Size ports have to be 64-bit in size to match the corresponding input ports in the HMAC.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * 			  Thavot Richard @ EPFL
 * Last modified: 15.06.2012
 */

package Protocols.eBanking.hPINhTAN.SKID3.impl;

actor ClientReceiver(int(size=8) clientID, int(size=8) serverID) uint(size=8) IP1_PRG, int(size=8) IP2_Hash_Size, uint(size=8) IP3_Channel 
	==> 
	int(size=64) OP1_Message_Size, uint(size=8) OP2_Message,  int(size=64) OP3_Hash_Size,  uint(size=8) OP4_Link:

	// used global var for working around a bug of HDL (casting pb??)
	uint(size=8) param_clientID := 0;
	uint(size=8) param_serverID := 0;
	
	
	uint(size=8) rC := 0; // My nonce.
	uint(size=8) rS := 0; // Server's nonce.
	
	int(size=8) hashSize := 0; // Number of bytes.	
	int counter := 0;
	
	initialize ==>
	do
		param_clientID := clientID;
		param_serverID := serverID;
	end
	

	receiveConfigurations:
	action IP1_PRG:[r], IP2_Hash_Size:[hSize] ==>
	do
		rC := r;
		hashSize := hSize;
		counter := 0;
	end
	
	// Process server's nonce (rS)
	processServerNonce:
	action IP3_Channel:[r] ==>
	do
		rS := r;
	end

	// Process (receive and forward) the server's HMAC (H1)
	processServerHMAC.recv:
	action IP3_Channel:[h] ==> OP4_Link:[h]
	do
		counter := counter + 1;		
	end
	
	processServerHMAC.done:
	action ==>
	guard counter >= hashSize
	end
 
	// Prepare data to generate our copy of the server's HMAC (i.e., H1'). Client_Sender actor will verify if H1' equals H1.  	
	sendHMACData1.rS:
	action ==> OP1_Message_Size:[3], OP2_Message:[rS], OP3_Hash_Size:[hashSize]
	end
	
	sendHMACData1.rC:
	action ==> OP2_Message:[rC]
	end
	
	sendHMACData1.idS:
	action ==> OP2_Message:[param_serverID]
	end

	// Prepare data to generate the HMAC on server's nonce (i.e., H2), which will be sent to the server for authentication.
	sendHMACData2.rC:
	action ==> OP1_Message_Size:[3], OP2_Message:[rC], OP3_Hash_Size:[hashSize]
	end
	
	sendHMACData2.rS:
	action ==>OP2_Message:[rS]
	end
	
	sendHMACData2.idC:
	action ==> OP2_Message:[param_clientID]
	end

	schedule fsm start:
		start(receiveConfigurations) --> processServerNonce;
		
		processServerNonce (processServerNonce) --> processServerHMAC;
		
		processServerHMAC (processServerHMAC.recv) --> processServerHMAC;
		processServerHMAC (processServerHMAC.done) --> sendHMACData1_rS;
		
		sendHMACData1_rS (sendHMACData1.rS) --> sendHMACData1_rC;
		sendHMACData1_rC (sendHMACData1.rC) --> sendHMACData1_ID;
		sendHMACData1_ID (sendHMACData1.idS) --> sendHMACData2_rC;
		
	 	sendHMACData2_rC  (sendHMACData2.rC) --> sendHMACData2_rS;
	 	sendHMACData2_rS ( sendHMACData2.rS ) --> sendHMACData2_cID;
	 	sendHMACData2_cID( sendHMACData2.idC) --> start;
	end
	
	priority
		processServerHMAC.done > processServerHMAC.recv;
	end

end
