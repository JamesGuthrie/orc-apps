// Sends the same HMAC key twice to support two HMAC operations involved in the SKID3 protocol.
	
package Protocols.eBanking.hPINhTAN.SKID3.impl;

actor DuplicateKey() uint(size=8) IP_Key ==> uint(size=8) OP_Key:

	int keySize := 0;
	int counter1 := 0;
	int counter2 := 0;
	List(type:uint(size=8), size=64) Key := [0: for int i in 0 .. 63];
	
	sendKeySize:
	action IP_Key:[s] ==> OP_Key:[s]
	do
		keySize := s;
		counter1 := 0;
	end
	
	sendKey:
	action IP_Key:[k] ==> OP_Key:[k]
	guard counter1 < keySize
	do
		Key[counter1] := k;
		counter1 := counter1 + 1;		
	end
	
	sendDuplicatedKeySize:
	action ==>  OP_Key:[keySize]
	guard counter1 >= keySize 
	do
		counter2 := 0;
	end

	sendDuplicatedKey:
	action ==> OP_Key:[Key[counter2-1]]
	guard counter2 < keySize 
	do
		counter2 := counter2 + 1;
	end
	
	reset:
	action ==> guard counter2 >= keySize end

	schedule fsm processSize:
		processSize (sendKeySize) --> processKey;
		processKey (sendKey) --> processKey;

		processKey (sendDuplicatedKeySize) --> sendDuplicatedKey;
		sendDuplicatedKey (sendDuplicatedKey) --> sendDuplicatedKey;

		sendDuplicatedKey (reset) --> processSize;
	end
end
