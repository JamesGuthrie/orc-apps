/**
 * This FU is part of the RVC-CAL implementation of hPIN/hTAN protocols based eBanking system.
 * It sends the hash size of the underlying hash algorithm being used and the same key for all 
 * the PRG FUs used in the implementation of Token's functions (generation of mapping table for PIN input, 
 * and client side implementations of SKID3 and hTAN protocols) and Server's functions (server side 
 * implementations of SKID3 and hTAN protocols). In practice, Token and Server can have different (independent)
 * keys for all PRG modules.     
 * 
 * FU ID: Source
 * Two output ports:
 *   1) uint(size=8) OP1_PRG_Key: the key for the client's PRG. 
 *	 2) int(size=8) OP2_Hash_Size: the size of output hash (message digest) of SHA-256 in bytes.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last Modified: 15.06.2012
 */
 
package Protocols.eBanking.hPINhTAN;

actor Source() ==> uint(size=8) OP1_PRG_Key, int(size=8) OP2_Hash_Size:

	int PRG_KEY_SIZE = 8;
	// PRG Key Server
	List(type:uint(size=8), size=PRG_KEY_SIZE+1) PRG_KEY = [PRG_KEY_SIZE, 0x65,0x66,0x65,0x4a, 0x4a,0x65,0x66,0x65];

	bool keySent4PRG := false;
	sendKey4PRG:
	action ==> OP1_PRG_Key:[PRG_KEY] repeat PRG_KEY_SIZE+1  
	guard not keySent4PRG
	do
		keySent4PRG := true;
	end

	bool hashSizeSent := false;
	sendHashSize:
	action ==> OP2_Hash_Size:[32] // The size of hash generated by SHA-256 in bytes.  
	guard not hashSizeSent
	do
		hashSizeSent := true;
	end

end
