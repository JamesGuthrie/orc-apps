/**
 * This FU is part of a RVC-CAL implementation of hTAN transaction authentication protocol.
 * This FU (as part of the server's implementation) authenticates STD data of the transaction by comparing the HMAC messages (H2 and H2') 
 * and sends its own HMAC on its nonce (i.e., H1) to allow the client to authenticate it. Afterwards, the success/failure of the transaction
 * is notified to the client by sending an HMAC H3 embedding the success/failure of the transaction. 
 * 
 * FU ID: ServerSender
 * Four input port:
 * 	 1) uint(size=8) IP1_PRG: the nonce from pseudo random generator (PRG).
 *   2) int(size=8) IP2_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC.
 *   3) uint(size=8) IP3_HMAC: the HMAC.
 *   4) uint(size=8) IP4_Link: the link to exchange data between this FU and the Server_Receiver FU. 
 * One output port:
 * 	 1) uint(size=8) OP1_Channel: the communication channel to send out its data (the nonce rS and the HMAC H1).
 *   2) uint(size=8) OP2_Status: the status (success/failure) of the transaction authentication. 
 *   
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last modified: 15.06.2012
 */

package Protocols.eBanking.hPINhTAN.hTAN.impl;

actor ServerSender() uint(size=8) IP1_PRG, int(size=8) IP2_Hash_Size, uint(size=8) IP3_HMAC, uint(size=8) IP4_Link  
	==> 
	uint(size=8) OP1_Channel, uint(size=8) OP2_Status:

	uint(size=8) rS := 0; // My nonce.
	int(size=8) hashSize := 0; // Number of bytes.	
	int counter := 0;
	int errors := 0; // Authentication errors.	

	receiveConfigurations:
	action IP1_PRG:[r], IP2_Hash_Size:[hSize] ==> OP1_Channel:[rS]
	do
		rS := r;
		hashSize := hSize;
		counter := 0;
	end

	// Now send the HMAC on client's nonce (i.e., H1) to the client so that client can authenticate me.
	sendHMACData1:
	action IP3_HMAC:[h] ==> OP1_Channel:[h]
	do
		counter := counter + 1;		
	end
	
	// Authenticate (compare) the HMAC sent by the client (H2 received on port IP4_Link) 
	// with my own copy of the client's HMAC (H2' received on port IP3_HMAC) 
	authenticateHMAC:
	action IP3_HMAC:[h1], IP4_Link:[h2] ==> 
	do
		if( h1 != h2 ) then
			errors := errors + 1;
		end	
		counter := counter + 1;
	end
	
	// Report the successful authentication.
	authenticationSuccess:
	action ==> OP2_Status:[1]
	guard errors = 0
	end
	
	// Report the failed authentication.
	authenticationFail:
	action ==> OP2_Status:[0]
	end
 
	done:
	action ==>
	guard counter >= hashSize 
	do 
		counter := 0;		
	end

	// Forward the final HMAC embedding the success/failure of the transaction.
	sendHMACData2:
	action IP3_HMAC:[h] ==> OP1_Channel:[h]
	do
		counter := counter + 1;		
	end	

	schedule fsm start:
		start(receiveConfigurations) --> sendData1;
		
		sendData1(sendHMACData1) --> sendData1;
		sendData1(done) --> authenticateHMAC;
		
		authenticateHMAC(authenticateHMAC) --> authenticateHMAC;
		authenticateHMAC(done) --> authenticate; 
		
		authenticate(authenticationSuccess) --> sendData2;
		authenticate(authenticationFail) --> Halt;

		sendData2(sendHMACData2) --> sendData2;
		sendData2(done) --> start;
		
		Halt(done) --> Halt;
	end
	
	priority
		done > sendHMACData1;
		done > authenticateHMAC;
		authenticationSuccess > authenticationFail;
		done > sendHMACData2;
	end

end
