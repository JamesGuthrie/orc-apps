/**
 * This FU is part of a RVC-CAL implementation of hTAN transaction authentication protocol.
 * This FU (as part of the server's implementation) receives the client's authentication request, transaction's data (STD, NSTD)
 * and client's HMAC (H2), prepares data for HMAC operations (H1, H2', and H3) and sends the needed data to its helper FU (ServerSender).
 * 
 * FU ID: ServerReceiver
 * One FU parameter: 
 * 	 This FU gets its own UID as an FU parameter.
 *   1) int serverID: the UID of the server.
 * Three input port:
 * 	 1) uint(size=8) IP1_PRG: the nonce from pseudo random generator (PRG).
 *   2) int(size=8) IP2_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC.
 *   3) uint(size=8) IP3_Channel: the communication channel to receive client's data (the UID, the nonce rC and the HMAC H2). 
 * Four output port:
 * 	 1) int(size=64) OP1_Message_Size: the size (in bytes) of the message to be HMACed.
 *   2) uint(size=8) OP2_Message: the message to be HMACed.
 *   3) int(size=64) OP3_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC. 
 *   4) uint(size=8) OP4_Link: the link to exchange data between this FU and the Server_Sender FU.
 *   Note: OP1_Message_Size and OP3_Hash_Size ports have to be 64-bit in size to match the corresponding input ports in the HMAC. 
 *
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last modified: 15.06.2012
 */

package Protocols.eBanking.hPINhTAN.hTAN.impl;

actor ServerReceiver(int(size=8) serverID) uint(size=8) IP1_PRG, int(size=8) IP2_Hash_Size, uint(size=8) IP3_Numeric_Channel, String IP4_Text_Channel, uint(size=8) IP5_Status 
	==> 
	int(size=64) OP1_Message_Size, uint(size=8) OP2_Message,  int(size=64) OP3_Hash_Size,  uint(size=8) OP4_Link:

	// used global var for working around a bug of HDL (casting pb??)
	uint(size=8) param_serverID := 0;

	int(size=8) clientID := 0;
	uint(size=8) rS := 0; // My nonce
	uint(size=8) rC := 0; // Client's nonce.
	List(type:uint(size=8), size=4) STD := [0, 0, 0, 0]; // STD data (amount involved in the transaction).
	String NSTD := ""; // NSTD data for (description for the transaction).	
	
	int(size=8) hashSize := 0; // Number of bytes.	
	int counter := 0;
	
	initialize ==> 
	do
		param_serverID := serverID;
	end

	receiveConfigurations:
	action IP1_PRG:[r], IP2_Hash_Size:[hSize] ==>
	do
		rS := r;
		hashSize := hSize;
		counter := 0;
	end
	
	// Process clients's ID.
	processClientsData.id:
	action IP3_Numeric_Channel:[id] ==> 
	do
		clientID := id;		
	end

	// Process clients's transaction data.
	processClientsData.td:
	action IP3_Numeric_Channel:[std] repeat 4, IP4_Text_Channel:[nstd] ==> 
	do
		STD[0] := std[0];
		STD[1] := std[1];
		STD[2] := std[2];
		STD[3] := std[3];
		NSTD := nstd;
	end
	
	// Process clients's nonce (rC).
	processClientsData.rC:
	action IP3_Numeric_Channel:[r] ==> 
	do
		rC := r;
	end

	// Prepare data to generate the HMAC on client's nonce (i.e., H1), which will be sent to the client for authentication.
	sendHMACData1.rS:
	action ==> OP1_Message_Size:[6], OP2_Message:[rS], OP3_Hash_Size:[hashSize]
	end
	
	sendHMACData1.rC:
	action ==> OP2_Message:[rC]
	end
	
	sendHMACData1.std:
	action ==> OP2_Message:[STD] repeat 4
	end

	// Process (receive and compare) clients' id.
	bool clientIDValidated := false;
	processClientHMAC.id:
	action IP3_Numeric_Channel:[id] ==>
	guard counter = 0 and not clientIDValidated
	do
		if(clientID = id) then
			 clientIDValidated := true;
		end	 
		counter := counter + 1;
	end
	
	processClientHMAC.idValidationFailed:
	action ==>
	guard counter = 1 and not clientIDValidated
	do 
		println("Error: Client ID (sent in 2nd-level HMAC) did not match!\nServer reseting!");
		counter := counter + 1;
	end
	
	// Process (receive and forward) the client's HMAC (H2) on my nonce.
	processClientHMAC.recv:
	action IP3_Numeric_Channel:[h] ==> OP4_Link:[h]
	guard clientIDValidated
	do
		counter := counter + 1;			
	end
	
	processClientHMAC.done:
	action ==>
	guard counter >= hashSize+1
	end

	// Prepare data to generate my copy of the client's HMAC (i.e., H2'). Server_Sender actor will verify if H2' equals H2.
	sendHMACData2.rC:
	action ==> OP1_Message_Size:[6], OP2_Message:[rC], OP3_Hash_Size:[hashSize]
	end
	
	sendHMACData2.rS:
	action ==> OP2_Message:[rS]
	end
	
	sendHMACData2.STD:
	action ==> OP2_Message:[STD] repeat 4
	end
	
	uint(size=8) status := 0; // 1 = success, 0, error.
	processStatus:
	action IP5_Status:[s] ==> 
	guard s = 1 or s = 0 
	do 
		status := s;		
	end

	// Prepare data to generate the final HMAC embedding the success/failure of the transaction. Server_Sender actor will forward this HMAC to the client.
	sendHMACData3.rC:
	action ==> OP1_Message_Size:[7], OP2_Message:[rC], OP3_Hash_Size:[hashSize]
	end
	
	sendHMACData3.rS:
	action ==> OP2_Message:[rS]
	end
	
	sendHMACData3.status:
	action ==> OP2_Message:[status]
	end

	sendHMACData3.STD:
	action ==> OP2_Message:[STD] repeat 4
	end

	schedule fsm start:
	
		start(receiveConfigurations) --> processClientsData_id;
		
		processClientsData_id(processClientsData.id) --> processClientsData_td;
		processClientsData_td(processClientsData.td) --> processClientsData_rC;
		processClientsData_rC(processClientsData.rC) --> sendHMACData1_rS;

		sendHMACData1_rS(sendHMACData1.rS) --> sendHMACData1_rC;
		sendHMACData1_rC(sendHMACData1.rC) --> sendHMACData1_std;
		sendHMACData1_std(sendHMACData1.std) --> listenChannel;
		
		listenChannel(processClientHMAC.id) --> listenChannel;
		listenChannel(processClientHMAC.idValidationFailed) --> start;
			
		listenChannel(processClientHMAC.recv) --> listenChannel;
		listenChannel(processClientHMAC.done) --> sendHMACData2_rC;
		
		sendHMACData2_rC (sendHMACData2.rC) --> sendHMACData2_rS;
		sendHMACData2_rS (sendHMACData2.rS) --> sendHMACData2_STD;
		sendHMACData2_STD(sendHMACData2.STD) --> process_status;
		
		process_status (processStatus) --> sendHMACData3_rS;
		
		sendHMACData3_rS(sendHMACData3.rS) --> sendHMACData3_rC;
		sendHMACData3_rC(sendHMACData3.rC) --> sendHMACData3_status;
		sendHMACData3_status(sendHMACData3.status) --> sendHMACData3_std;
		sendHMACData3_std(sendHMACData3.STD) --> start;
	end
	
	priority
		processClientHMAC.done > processClientHMAC.recv; 
	end

end
