/**
 * This FU is part of a RVC-CAL implementation of hTAN transaction authentication protocol.
 * This FU (as part of the client's implementation) initiates the protocol by sending its UID, the nonce rC and the STD, authenticates the server by 
 * comparing the HMAC messages (H1 and H1') and sends its own HMAC on server's nonce (ie., H2) to allow the server to authenticate it. In addition, it 
 * also compares (H3 and H3') to find status (success/failure) of the transaction.
 * 
 * FU ID: ClientSender
 * One FU parameter: 
 * 	 This FU gets its UID as an FU parameter.
 * 	 1) int clientID: the UID of the client. 
 * Four input port:
 * 	 1) uint(size=8) IP1_PRG: the nonce from pseudo random generator (PRG).
 *   2) int(size=8) IP2_Hash_Size: the hash size (in bytes) of the Hash operation (e.g. SHA-1, SHA-2 etc.) used in the HMAC.
 *   3) uint(size=8) IP3_HMAC: the HMAC.
 *   4) uint(size=8) IP4_Numeric_Link: the link to exchange numeric data between this FU and the ClientReceiver FU.
 *   5) String IP5_Text_Link: the link to exchange textual data between this FU and the ClientReceiver FU.  
 * One output port:
 * 	 1) uint(size=8) OP1_Numeric_Channel: the communication channel to send its data (the UID, the nonce rC, the STD and the HMACs).
 *   2) String OP2_Numeric_Channel: the communication channel to send its NSTD.
 *   3) uint(size=8) OP2_Status: the status (success/failure) of the transaction authentication. 
 *   
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * 			  Thavot Richard @ EPFL
 * Last modified: 15.06.2012
 */

package Protocols.eBanking.hPINhTAN.hTAN.impl;

actor ClientSender(int(size=8) clientID) uint(size=8) IP1_PRG, int(size=8) IP2_Hash_Size, uint(size=8) IP3_HMAC, uint(size=8) IP4_Numeric_Link, String IP5_Text_Link  
	==> 
	uint(size=8) OP1_Numeric_Channel, String OP2_Text_Channel, uint(size=8) OP3_Status:

	uint(size=8) rC := 0; // My nonce.
	List(type:uint(size=8), size=4) STD := [0, 0, 0, 0]; // STD data (amount involved in the transaction).
	String NSTD := ""; // NSTD data for (description for the transaction).	
	
	int(size=8) hashSize := 0; // Number of bytes.
	int counter := 0;
	int errors := 0; // Authentication errors.	

	receiveConfigurations:
	action IP1_PRG:[r], IP2_Hash_Size:[hSize], IP4_Numeric_Link:[std] repeat 4, IP5_Text_Link:[nstd] ==>
	do
		rC := r;
		hashSize := hSize;
		STD[0] := std[0];
		STD[1] := std[1];
		STD[2] := std[2];
		STD[3] := std[3];
		NSTD := nstd;
		counter := 0;		
	end
	
	// Sends the client ID to initiate the protocol.
	initiateProtocol.idC:
	action ==> OP1_Numeric_Channel:[clientID]
	end

	// Sends the transaction's data.
	initiateProtocol.TD:
	action ==> OP1_Numeric_Channel:[STD] repeat 4, OP2_Text_Channel:[NSTD]
	end
	
	// Sends the nonce rC.
	initiateProtocol.rC:
	action ==> OP1_Numeric_Channel:[rC]
	end

	// Authenticate (compare) the HMAC sent by server (H1 received on port IP4_Link) 
	// with my own copy of the server's HMAC (H1' received on port IP3_HMAC) 
	authenticateHMAC1:
	action IP3_HMAC:[h1], IP4_Numeric_Link:[h2] ==> 
	do
		if( h1 != h2 ) then
			errors := errors + 1;
		end	
		counter := counter + 1;
	end
	
	// Report the successful STD authentication.
	authenticateSTD.Success:
	action ==> OP3_Status:[1]
	guard errors = 0
	end
	
	// Report the failed STD authentication.
	authenticateSTD.Fail:
	action ==> OP3_Status:[0]
	end
 
	// Sends the client ID.
	sendData.idC:
	action ==> OP1_Numeric_Channel:[clientID]
	end
	
	// Now send the HMAC computed over server's nonce (i.e., H2) to the server so that server can also authenticate me.
	sendData.hmac:
	action IP3_HMAC:[h] ==> OP1_Numeric_Channel:[h]
	do
		counter := counter + 1;		
	end
	
	done:
	action ==> 
	guard counter >= hashSize
	do
		counter := 0;		
	end

	// Authenticate (compare) the HMAC sent by server (H5) to unveil the transaction's status (success/failure) for amount mentioned by STD.
	authenticateHMAC2:
	action IP3_HMAC:[h1], IP4_Numeric_Link:[h2] ==> 
	do
		if( h1 != h2 ) then
			errors := errors + 1;
		end	
		counter := counter + 1;
	end
	
	// Report the successful STD authentication.
	authenticateTS.Success:
	action ==> OP3_Status:[3]
	guard errors = 0
	end
	
	// Report the failed STD authentication.
	authenticateTS.Fail:
	action ==> OP3_Status:[2]
	end	
	

	schedule fsm start:
		start(receiveConfigurations) --> initiateProtocol_idC;
		
		initiateProtocol_idC(initiateProtocol.idC) --> initiateProtocol_TD;
		initiateProtocol_TD(initiateProtocol.TD) --> initiateProtocol_rC;
		initiateProtocol_rC(initiateProtocol.rC) --> authenticateHMAC_state1;
		
		authenticateHMAC_state1(authenticateHMAC1) --> authenticateHMAC_state1;
		authenticateHMAC_state1(done) --> authenticate_STD;
		 
		authenticate_STD(authenticateSTD.Success) --> sendData_idc;
		authenticate_STD(authenticateSTD.Fail) --> Halt;
		
		Halt(done) --> Halt;
		
	 	sendData_idc(sendData.idC) --> sendData_hmac;
	 	sendData_hmac(sendData.hmac) --> sendData_hmac;	 	
	 	sendData_hmac(done) --> authenticateHMAC_state2;
	 	
		authenticateHMAC_state2(authenticateHMAC2) --> authenticateHMAC_state2;
		authenticateHMAC_state2(done) --> authenticate_TS;
		 
		authenticate_TS(authenticateTS.Success) --> start;
		authenticate_TS(authenticateTS.Fail) --> Halt;
			 	
	end
	
	priority
		done > authenticateHMAC1;
		done > sendData.hmac;
		authenticateSTD.Success > authenticateSTD.Fail;
		done > authenticateHMAC2;
		authenticateTS.Success > authenticateTS.Fail;		
	end

end
