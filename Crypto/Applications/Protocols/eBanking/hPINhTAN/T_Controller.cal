/**
 * This FU is part of the RVC-CAL implementation of hPIN/hTAN protocols based eBanking system.
 * It serves as the controller of the Token T module and manages all the communication within its internal modules 
 * (Console, hPIN and hTAN), and with external modules (Computer C and Server S).  
 * 
 * FU ID: T_Controller
 * Eleven input ports:
 *  // Data channels from Console.
 *  1) uint(size=8) IP1_Console_NC: receives PIN and OKStatus from Console in numeric format.
 *  // Data channels from C.
 *  2) uint(size=8) IP2_C_NC: receives numeric data from C (NC = Numeric Channel). 
 *  3) String IP3_C_TC: receives textual data from C (TC = Textual Channel).
 *  // Data channels from S.
 *  4) uint(size=8) IP4_S_NC: receives data from S in numeric format (NC = Numeric Channel).
 * 	// hPIN
 *  5) uint(size=8) IP5_hPIN_Hash: receives the hash output from the hPIN>SHA2.
 *  6) uint(size=8) IP6_hPIN_MAC: receives the MAC output from the hPIN>HMAC.  
 *  7) uint(size=8) IP7_hPIN_Status: receives the status of the authentication hPIN>SKID3_Client.
 *  8) uint(size=8) IP8_hPIN_NC: receives the numeric data from hPIN>SKID3_Client to be tunneled to S via OP10_S_NC.
 * 	// hTAN
 *  9) uint(size=8) IP9_hTAN_Status: receives the status of the authentication hTAN.
 *  10) uint(size=8) IP10_hTAN_NC: receives the numeric data from hTAN to be tunneled to S via OP10_S_NC.
 * 	11) String IP11_hTAN_TC: receives the textual data from hTAN to be tunneled to S via OP11_S_TC. 
 * 
 * Sixteen output ports:
 *  // Console.
 * 	1) String OP1_Console_TC: sends textual PIN to Console.
 * 	2) uint(size=8) OP2_Status: sends status code Console for required signaling and output messages.
 * 	// hPIN
 * 	3) uint(size=64) OP3_hPIN_SHA2_MS: sends the size of the message (to be hashed) to hPIN>SHA2.
 * 	4) uint(size=8) OP4_hPIN_SHA2_M: sends the message (to be hashed) to hPIN>SHA2.
 * 	5) uint(size=8) OP5_hPIN_HMAC_Key: sends the HMAC key needed for HMAC operation via hPIN>HMAC.
 * 	6) uint(size=64) OP6_hPIN_HMAC_MS: sends the size of the message (to generate MAC) to hPIN>HMAC.
 * 	7) uint(size=8) OP7_hPIN_HMAC_M: sends the message (to generate MAC) to hPIN>HMAC. 
 * 	5) uint(size=8) OP8_hPIN_SKID3_Key: sends the HMAC key needed for HMAC operations in hPIN>SKID3_Client.
 * 	6) uint(size=8) OP9_hPIN_NC: sends the authentications-oriented numeric data (received from S on IP4_S_NC during the 
 * 	hPIN session) to the input channel of hPIN>SKID3_Client.
 * 	// Data channels to S (used in both hPIN and hTAN protocols).
 * 	7) uint(size=8) OP10_S_NC: sends the numeric data (authentications-oriented data for hPIN and hTAN protocol and STD) to S.
 * 	8) String OP11_S_TC: sends the textual NSTD data to S.
 *  // Data channels to C (used in both hPIN and hTAN protocols).
 * 	9) uint(size=8) OP12_C_NC: sends the signals and status codes to C.
 * 	// hTAN
 * 	10) uint(size=8) OP13_hTAN_HMACKey: sends the HMAC key needed for HMAC operations in hTAN.
 * 	11) uint(size=8) OP14_hTAN_NC: sends the authentications-oriented data numeric data (received from S on IP4_S_NC during the 
 *  hTAN session) to the input channel of hTAN.
 * 	12) uint(size=8) OP15_hTAN_STD: sends the STD data to the hTAN. 
 * 	13) String OP16_hTAN_NSTD: sends the NSTD data to the hTAN.
 * 
 * Developer: Junaid Jameel Ahmad @ Uni-Konstanz 2012
 * Last Modified: 15.06.2012
 */
 
package Protocols.eBanking.hPINhTAN;

actor T_Controller ()
	// Console Manger
	uint(size=8) IP1_Console_NC, // PIN and OKStatus from console in Numeric format.
	// Client's Untrusted Computer
	uint(size=8) IP2_C_NC, // Computer's Numeric Channel.
	String IP3_C_TC, // Computer's Text Channel.
	// Server
	uint(size=8) IP4_S_NC, // Server's Numeric Channel.
	// hPIN
	uint(size=8) IP5_hPIN_Hash,
	uint(size=8) IP6_hPIN_MAC,	
	uint(size=8) IP7_hPIN_Status,
	uint(size=8) IP8_hPIN_NC, // Tunneled to Server via OP10_S_NC.	
	// hTAN
	uint(size=8) IP9_hTAN_Status,
	uint(size=8) IP10_hTAN_NC, // Tunneled to Server via OP10_S_NC.	
	String IP11_hTAN_TC // Tunneled to Server via OP11_S_TC.

	==> 

	// Console Manger
	String OP1_Console_TC,
	uint(size=8) OP2_Status,
	// hPIN
	uint(size=64) OP3_hPIN_SHA2_MS,
	uint(size=8) OP4_hPIN_SHA2_M,
	uint(size=8) OP5_hPIN_HMAC_Key,
	uint(size=64) OP6_hPIN_HMAC_MS,
	uint(size=8) OP7_hPIN_HMAC_M,	
	uint(size=8) OP8_hPIN_SKID3_Key,
	uint(size=8) OP9_hPIN_NC,
	// Data channels to Server(used in both hPIN and hTAN).
	uint(size=8) OP10_S_NC,
	String OP11_S_TC,
	uint(size=8) OP12_C_NC,
	// hTAN
	uint(size=8) OP13_hTAN_HMACKey,
	uint(size=8) OP14_hTAN_NC,
	uint(size=8) OP15_hTAN_STD,	
	String OP16_hTAN_NSTD:

	// KT*
	List(type:uint(size=8), size=32) Stored_KT := [0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
												   0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f];
	// PIN*
	List(type:uint(size=8), size=32) Stored_PIN := [0xc3,0x36,0x93,0xdb,0x42,0x01,0x4f,0xd9,0x0e,0xdd,0x2e,0x88,0xaf,0xad,0xda,0x23,
													0x61,0x58,0x45,0x41,0x56,0xf6,0x39,0x90,0x3b,0x49,0x20,0x73,0x78,0x5f,0x9d,0x8f];

	List(type:uint(size=8), size=32) PIN := [0: for int i in 0 .. 31];
	List(type:uint(size=8), size=32) KT := [0: for int i in 0 .. 31];
	List(type:uint(size=8), size=32) hashed_KT := [0: for int i in 0 .. 31];
	
	uint(size=8) s := 38;

	int clientID := 100;

	okSuccess:
	action IP1_Console_NC:[okStatus] ==> OP12_C_NC:[okStatus]
	guard okStatus = 1
	end
	
	okFail:
	action IP1_Console_NC:[okStatus] ==> OP12_C_NC:[okStatus]
	guard okStatus = 0
	end
	
	uint(size=8) IDU := 0;
	receiveIDU:
	action IP2_C_NC:[id] ==> 
	guard IDU = 0
	do
		IDU := id;
	end
	
	IDUSuccess:
	action ==> OP2_Status:[1], OP12_C_NC:[1] 
	guard IDU = clientID
	end

	IDUFail:
	action ==> OP2_Status:[0], OP12_C_NC:[0]
	guard IDU != clientID
	end
	
//---------- hPIN ----------//
	hPIN.start:
	action ==> OP2_Status:[6] // Display hPIN start message.
	end

	hPIN.finish:
	action ==> OP2_Status:[7] // Display hPIN finished.
	end

	int pinCounter := 0;
	hPIN.requestNextPINCharacter:
	action IP1_Console_NC:[status] ==> OP12_C_NC:[1] 
	guard status = 1 and pinCounter < 4
	end
	
	hPIN.readNextPINCharacter:
	action IP3_C_TC:[b] ==> OP1_Console_TC:[b]
	guard pinCounter < 4  
	do	
		pinCounter := pinCounter + 1;
	end

	hPIN.readNumericPIN:
	action IP1_Console_NC:[b] repeat 4 ==> OP3_hPIN_SHA2_MS:[5], OP4_hPIN_SHA2_M:[b] repeat 4
	guard pinCounter = 4  
	do	
		foreach int i in 0 .. 3 do
			PIN[i] := b[i];
		end		
	end

	hPIN.sendSalt:
	action ==> OP4_hPIN_SHA2_M:[s] 	
	end

	bool KTRecovered := false;
	hPIN.recoverKT:
	action IP5_hPIN_Hash:[h] repeat 32 ==> OP3_hPIN_SHA2_MS:[32], OP4_hPIN_SHA2_M:[KT] repeat 32 
	guard not KTRecovered
	do
		foreach int i in 0 .. 31 do
			KT[i] := Stored_KT[i] ^ h[i];			
		end
		KTRecovered := true;		
	end

	bool hashedKTReceived := false;
	hPIN.getHashedKT:
	action IP5_hPIN_Hash:[h] repeat 32 ==> OP5_hPIN_HMAC_Key:[32]
	guard not hashedKTReceived
	do
		foreach int i in 0 .. 31 do
			hashed_KT[i] := h[i];			
		end
		hashedKTReceived := true;
	end	

	bool HMACPINDataSent := false;
	hPIN.sendHMACPINData:
	action ==> OP5_hPIN_HMAC_Key:[KT] repeat 32, OP6_hPIN_HMAC_MS:[5], OP7_hPIN_HMAC_M:[PIN[0], PIN[1], PIN[2], PIN[3], s] // 4 (PIN) + 1 (s) = 5 
	guard not HMACPINDataSent		    
	do
		HMACPINDataSent := true;
	end	

	hPIN.getHMACPIN:
	action IP6_hPIN_MAC:[h] repeat 32 ==> 
	do
		foreach int i in 0 .. 31 do
			PIN[i] := h[i];
		end
	end	
	
	bool PINValidated := false;
	int cT := 0;
	int vT = 3;

	hPIN.validatePIN:
	action ==>
	guard cT < vT
	do
		cT := cT + 1;
		foreach int i in 0 .. 31 do
			if(PIN[i] = Stored_PIN[i]) then
				PINValidated := true;
			else
				PINValidated := false;
				i := 32;
			end
		end		
	end		
	
	hPIN.PINSuccess:
	action ==> OP2_Status:[3], OP12_C_NC:[1]
	guard cT < vT and PINValidated
	end	

	hPIN.PINFail:
	action ==> OP2_Status:[4], OP12_C_NC:[0]
	guard cT < vT and not PINValidated
	end

	hPIN.PINFailAndLock:
	action ==> OP2_Status:[5], OP12_C_NC:[111] // 111 is the code signaling the locking of the USB-Token.
	guard cT = vT and not PINValidated
	end	

//---------- Mutual Authentication ------------//
	hPIN.sendHMACSize:
	action ==> OP8_hPIN_SKID3_Key:[32]
	end
	
	hPIN.sendHMACKey:
	action ==> OP8_hPIN_SKID3_Key:[hashed_KT] repeat 32
	end

	hPIN.tunnelData1:
	action IP8_hPIN_NC:[x] ==> OP10_S_NC:[x]	
	end

	hPIN.tunnelData2:
	action IP4_S_NC:[x] ==> OP9_hPIN_NC:[x]
	end

	hPIN.authenticateServerSuccess:
	action IP7_hPIN_Status:[b] ==> OP2_Status:[b], OP12_C_NC:[1]
	guard b = 1 
	end
	
	hPIN.authenticateServerFail:
	action IP7_hPIN_Status:[b] ==>  OP2_Status:[b], OP12_C_NC:[0]
	guard b = 2 
	end	

//---------- hTAN ------------//
	hTAN.requestOKForNewTransaction:
	action ==> OP1_Console_TC:["New_hTAN"]
	end

	hTAN.requestOKToConfirmTransaction:
	action ==> OP1_Console_TC:["Confirm_TD"]
	end

	hTAN.OKSuccess:
	action IP1_Console_NC:[x] ==> OP12_C_NC:[1]
	guard x = 1
	end

	hTAN.OKFail:
	action IP1_Console_NC:[x] ==> OP12_C_NC:[0]
	guard x = 0
	end
	
	hTAN.start:
	action ==> OP2_Status:[8] // Display hTAN start message.
	end

	hTAN.finish:
	action ==> OP2_Status:[9] // Display hTAN finished.
	end

	List(type:uint(size=8), size=4) STD := [0, 0, 0, 0];
	String NSTD := "";
	hTAN.receiveTransactionalData:
	action IP2_C_NC:[std] repeat 4, IP3_C_TC:[nstd] ==> OP1_Console_TC:["Transaction data: STD = "+((STD[3]<<24)|(STD[2]<<16)|(STD[1]<<8)|STD[0])+" NSTD = "+NSTD+"!"]
	do
		STD[0] := std[0];
		STD[1] := std[1];
		STD[2] := std[2];
		STD[3] := std[3];
		NSTD := nstd;
	end
	
	hTAN.forwardTransactionalData:
	action ==> OP15_hTAN_STD:[STD] repeat 4, OP16_hTAN_NSTD:[NSTD]
	end
		
	hTAN.sendHMACSize:
	action ==> OP13_hTAN_HMACKey:[32]
	end
	
	hTAN.sendHMACKey:
	action ==> OP13_hTAN_HMACKey:[hashed_KT] repeat 32
	end

	hTAN.tunnelData1NC:
	action IP10_hTAN_NC:[x] ==> OP10_S_NC:[x]	
	end

	hTAN.tunnelData2NC:
	action IP4_S_NC:[x] ==> OP14_hTAN_NC:[x]
	end

	hTAN.tunnelData1TC:
	action IP11_hTAN_TC:[x] ==> OP11_S_TC:[x]	
	end

	hTAN.TransactionSuccess:
	action IP9_hTAN_Status:[b] ==> OP2_Status:[b], OP12_C_NC:[1]
	guard b = 1 
	do	
		b := 10;
	end
	
	hTAN.TransactionFail:
	action IP9_hTAN_Status:[b] ==> OP2_Status:[b], OP12_C_NC:[0]
	guard b != 1 
	do	
		b := 11;
	end

// ------------------- reset and locking ----------//
	reset:
	action ==>
	do
		KTRecovered := false;
		PINValidated := false;
		HMACPINDataSent := false;
		hashedKTReceived := false;
		pinCounter := 0;
		
		STD[0] := 0;
		STD[1] := 0;
		STD[2] := 0;
		STD[3] := 0;
		NSTD := "";
	end
	
	bool locked := false;
	lock:
	action ==> guard not locked
	do 
		locked := true;
	end
	
// ---------- FSM ----------//

	schedule fsm start:	
		start (okSuccess) --> receive_IDU;
		start (okFail) --> reset;
		
// Receive and Validate IDU
		receive_IDU (receiveIDU) --> verify_IDU;
		verify_IDU (IDUSuccess) --> hPIN_start;
		verify_IDU (IDUFail) --> locked;

//hPIN
		hPIN_start (hPIN.start) --> hPIN_processPIN;
		// Process PIN
		hPIN_processPIN (hPIN.requestNextPINCharacter) --> hPIN_processPIN;
		hPIN_processPIN (hPIN.readNextPINCharacter) --> hPIN_processPIN;
		hPIN_processPIN (hPIN.readNumericPIN) --> hPIN_sendSalt;
		// Send Salt
		hPIN_sendSalt (hPIN.sendSalt) --> hPIN_recoverKT;
		// Recover KT = KT* ^ h(PIN || s) and generate hashed edition of KT.
		hPIN_recoverKT (hPIN.recoverKT) --> hPIN_receiveHash;
		hPIN_receiveHash (hPIN.getHashedKT) --> hPIN_sendHMACPIN;
		// Generate PIN* = HMAC (KT, PIN || s);
		hPIN_sendHMACPIN (hPIN.sendHMACPINData) --> hPIN_receiveHMAC;
		hPIN_receiveHMAC (hPIN.getHMACPIN) --> hPIN_PINValidation;
		// PIN Validation.
		hPIN_PINValidation (hPIN.validatePIN) --> hPIN_PINValidationStatus;
		
		hPIN_PINValidationStatus (hPIN.PINSuccess) --> hPIN_sendHMACSize;
		hPIN_PINValidationStatus (hPIN.PINFail) --> reset;
		hPIN_PINValidationStatus (hPIN.PINFailAndLock) --> locked;
		
		// Mutual authentication via SKID3.
		hPIN_sendHMACSize (hPIN.sendHMACSize) --> hPIN_sendHMACKey;
		hPIN_sendHMACKey (hPIN.sendHMACKey) --> hPIN_authenticateServer;
		
		hPIN_authenticateServer (hPIN.tunnelData1) --> hPIN_authenticateServer;
		hPIN_authenticateServer (hPIN.tunnelData2) --> hPIN_authenticateServer;
		hPIN_authenticateServer (hPIN.authenticateServerSuccess) --> hPIN_finish;
		hPIN_authenticateServer (hPIN.authenticateServerFail) --> locked;
		
		hPIN_finish (hPIN.finish) --> hTAN_new;
		
//hTAN		
		hTAN_new (hTAN.requestOKForNewTransaction) --> hTAN_validate_NewOK;
		hTAN_validate_NewOK (hTAN.OKSuccess) --> hTAN_start;
		hTAN_validate_NewOK (hTAN.OKFail) --> locked;
		
		hTAN_start (hTAN.start) --> hTAN_receiveTransactionalData;
		hTAN_receiveTransactionalData (hTAN.receiveTransactionalData) --> hTAN_confirmTransactionalData;

		hTAN_confirmTransactionalData (hTAN.requestOKToConfirmTransaction) --> hTAN_validate_ConfirmOK;
		hTAN_validate_ConfirmOK (hTAN.OKSuccess) --> hTAN_forwardTransactionalData;
		hTAN_validate_ConfirmOK (hTAN.OKFail) --> locked;
		
		hTAN_forwardTransactionalData (hTAN.forwardTransactionalData) --> hTAN_sendHMACSize;

		hTAN_sendHMACSize (hTAN.sendHMACSize) --> hTAN_sendHMACKey;
		hTAN_sendHMACKey (hTAN.sendHMACKey) --> hTAN_authenticateTransaction;
		
		hTAN_authenticateTransaction (hTAN.tunnelData1NC) --> hTAN_authenticateTransaction;
		hTAN_authenticateTransaction (hTAN.tunnelData2NC) --> hTAN_authenticateTransaction;
		hTAN_authenticateTransaction (hTAN.tunnelData1TC) --> hTAN_authenticateTransaction;
		hTAN_authenticateTransaction (hTAN.TransactionSuccess) --> hTAN_finish;
		hTAN_authenticateTransaction (hTAN.TransactionFail) --> locked;
		
		hTAN_finish (hTAN.finish) --> reset;

		reset (reset) --> start;
		locked (lock) --> locked;
	end

	priority
		hPIN.requestNextPINCharacter > hPIN.readNextPINCharacter > hPIN.readNumericPIN;
		
		hPIN.recoverKT > hPIN.getHashedKT > hPIN.getHMACPIN;
		
		hPIN.tunnelData1 > hPIN.tunnelData2 > hPIN.authenticateServerSuccess > hPIN.authenticateServerFail;

		hTAN.tunnelData1NC > hTAN.tunnelData2NC > hTAN.tunnelData1TC > hTAN.TransactionSuccess > hTAN.TransactionFail;
	end

end
