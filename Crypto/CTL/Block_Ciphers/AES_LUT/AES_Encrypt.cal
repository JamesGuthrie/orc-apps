/**
 * A test-case example created for pipeling experiments. 
 * Developer: Junaid Jameel Ahmad @ EPFL 2013
 */

package Block_Ciphers.AES_LUT;

import Block_Ciphers.AES_LUT.Tables.Te0;
import Block_Ciphers.AES_LUT.Tables.Te1;
import Block_Ciphers.AES_LUT.Tables.Te2;
import Block_Ciphers.AES_LUT.Tables.Te3;
import Block_Ciphers.AES_LUT.Tables.Te4;
import Block_Ciphers.AES_LUT.Tables.rcon;

actor AES_Encrypt () /*uint(size=8) IP1_Plaintext, uint(size=8) IP3_KeyEx ==> uint(size=8) OP_Ciphertext:*/ ==>:

	// The following variables are values for AES-128.
	int keySize := 32;
	int Nk := (keySize >> 2); // = keySize/4 = Nk @ FIPS 197
	int Nr := 6 + Nk; // keySize = [16, 24, 32] => Nr = [10, 12, 14] (Nr = number of rounds)
	List(type:uint(size=32), size=60) keyEx := [ // keysize = 32
		0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f, 0xa573c29f, 0xa176c498, 0xa97fce93, 0xa572c09c, 0x1651a8cd, 0x0244beda, 0x1a5da4c1, 0x0640bade, 0xae87dff0, 0x0ff11b68, 0xa68ed5fb, 0x03fc1567, 0x6de1f148, 0x6fa54f92, 0x75f8eb53, 0x73b8518d, 0xc656827f, 0xc9a79917, 0x6f294cec, 0x6cd5598b, 0x3de23a75, 0x524775e7, 0x27bf9eb4, 0x5407cf39, 0x0bdc905f, 0xc27b0948, 0xad5245a4, 0xc1871c2f, 0x45f5a660, 0x17b2d387, 0x300d4d33, 0x640a820a, 0x7ccff71c, 0xbeb4fe54, 0x13e6bbf0, 0xd261a7df, 0xf01afafe, 0xe7a82979, 0xd7a5644a, 0xb3afe640, 0x2541fe71, 0x9bf50025, 0x8813bbd5, 0x5a721c0a, 0x4e5a6699, 0xa9f24fe0, 0x7e572baa, 0xcdf8cdea, 0x24fc79cc, 0xbf0979e9, 0x371ac23c, 0x6d68de36];	
	
	int ksIndex := 0; // Index for the key scheduling array.
	
	List(type:uint(size=8), size=16) text := [0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff]; 
	
	bool fired := false;
	
	@xronos_pipeline(Debug)
	encrypt:
	action ==> //IP1_Plaintext:[text] repeat 16 ==> OP_Ciphertext:[text] repeat 16
	guard not fired
	var
		// State variables
		uint(size=32) s0, uint(size=32) s1, uint(size=32) s2, uint(size=32) s3,
		// Temporary state variables
		uint(size=32) t0, uint(size=32) t1, uint(size=32) t2, uint(size=32) t3
	do
		s0 := ((text[0] << 24) | (text[1] << 16) | (text[2] << 8) | text[3]) ^ keyEx[0];
		s1 := ((text[4] << 24) | (text[5] << 16) | (text[6] << 8) | text[7]) ^ keyEx[1];
		s2 := ((text[8] << 24) | (text[9] << 16) | (text[10] << 8) | text[11]) ^ keyEx[2];
		s3 := ((text[12] << 24) | (text[13] << 16) | (text[14] << 8) | text[15]) ^ keyEx[3];
		ksIndex := 0;
		
		@xronos_unroll
    	foreach int r in 0 .. Nr-1 do    	
	        t0 :=
	            Te0[(s0 >> 24)       ] ^
	            Te1[(s1 >> 16) & 0xff] ^
	            Te2[(s2 >>  8) & 0xff] ^
	            Te3[(s3      ) & 0xff] ^
	            keyEx[ksIndex+4]; 
	        t1 :=
	            Te0[(s1 >> 24)       ] ^
	            Te1[(s2 >> 16) & 0xff] ^
	            Te2[(s3 >>  8) & 0xff] ^
	            Te3[(s0      ) & 0xff] ^
	            keyEx[ksIndex+5];
	        t2 :=
	            Te0[(s2 >> 24)       ] ^
	            Te1[(s3 >> 16) & 0xff] ^
	            Te2[(s0 >>  8) & 0xff] ^
	            Te3[(s1      ) & 0xff] ^
	            keyEx[ksIndex+6];
	        t3 :=
	            Te0[(s3 >> 24)       ] ^
	            Te1[(s0 >> 16) & 0xff] ^
	            Te2[(s1 >>  8) & 0xff] ^
	            Te3[(s2      ) & 0xff] ^
	            keyEx[ksIndex+7];
	
	        ksIndex := ksIndex + 8;
	        r := r + 1;
	        if (r < Nr-1) then
		        s0 :=
		            Te0[(t0 >> 24)       ] ^
		            Te1[(t1 >> 16) & 0xff] ^
		            Te2[(t2 >>  8) & 0xff] ^
		            Te3[(t3      ) & 0xff] ^
		            keyEx[ksIndex+0];
		        s1 :=
		            Te0[(t1 >> 24)       ] ^
		            Te1[(t2 >> 16) & 0xff] ^
		            Te2[(t3 >>  8) & 0xff] ^
		            Te3[(t0      ) & 0xff] ^
		            keyEx[ksIndex+1];
		        s2 :=
		            Te0[(t2 >> 24)       ] ^
		            Te1[(t3 >> 16) & 0xff] ^
		            Te2[(t0 >>  8) & 0xff] ^
		            Te3[(t1      ) & 0xff] ^
		            keyEx[ksIndex+2];
		        s3 :=
		            Te0[(t3 >> 24)       ] ^
		            Te1[(t0 >> 16) & 0xff] ^
		            Te2[(t1 >>  8) & 0xff] ^
		            Te3[(t2      ) & 0xff] ^
		            keyEx[ksIndex+3];
		    end
		end
		
		s0 :=
			(Te4[(t0 >> 24)       ] & 0xff000000) ^
			(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
			(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
			(Te4[(t3      ) & 0xff] & 0x000000ff) ^
			keyEx[ksIndex+0];
		text[0] := (s0 >> 24) & 0xff; text[1] := (s0 >> 16) & 0xff;
		text[2] := (s0 >> 8) & 0xff; text[3] := s0 & 0xff;		 

		s1 :=
			(Te4[(t1 >> 24)       ] & 0xff000000) ^
			(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
			(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
			(Te4[(t0      ) & 0xff] & 0x000000ff) ^
			keyEx[ksIndex+1];
		text[4] := (s1 >> 24) & 0xff; text[5] := (s1 >> 16) & 0xff;
		text[6] := (s1 >> 8) & 0xff; text[7] := s1 & 0xff;

		s2 :=
			(Te4[(t2 >> 24)       ] & 0xff000000) ^
			(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
			(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
			(Te4[(t1      ) & 0xff] & 0x000000ff) ^
			keyEx[ksIndex+2];
		text[8] := (s2 >> 24) & 0xff; text[9] := (s2 >> 16) & 0xff;
		text[10] := (s2 >> 8) & 0xff; text[11] := s2 & 0xff;		 

		s3 :=
			(Te4[(t3 >> 24)       ] & 0xff000000) ^
			(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
			(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
			(Te4[(t2      ) & 0xff] & 0x000000ff) ^
			keyEx[ksIndex+3];
		text[12] := (s3 >> 24) & 0xff; text[13] := (s3 >> 16) & 0xff;
		text[14] := (s3 >> 8) & 0xff; text[15] := s3 & 0xff;
		
		fired := true;		
	end
end
