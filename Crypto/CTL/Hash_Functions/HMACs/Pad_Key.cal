package Hash_Functions.HMACs;

actor Pad_Key() uint(size=8) IP1_Key ==> uint(size=64) OP1_Pad_Size, uint(size=8) OP2_Ipad_Key, uint(size=8) OP3_Opad_Key:

	uint BLOCK_SIZE = 64; // Block size for input message of SHA-1 and SHA-2.
	int(size=65) counter := 0;
	uint(size=8) opad := 0x5c;
	uint(size=8) ipad := 0x36;

	bool sizeSent := false;
	
	sendPadSize:
	action ==> OP1_Pad_Size:[BLOCK_SIZE] 
	guard not sizeSent
	do
		sizeSent := true;
	end

	applyPad:
	action IP1_Key:[x] ==> OP2_Ipad_Key:[(x ^ ipad)], OP3_Opad_Key:[(x ^ opad)] 
	guard counter < BLOCK_SIZE
	do
		counter := counter + 1;
	end
	
	applyPadZero:
	action ==> OP2_Ipad_Key:[(0x00 ^ ipad)], OP3_Opad_Key:[(0x00 ^ opad)] 
	guard counter < BLOCK_SIZE
	do
		counter := counter + 1;
	end
	
	
	priority
		sendPadSize > applyPad > applyPadZero;
	end

end