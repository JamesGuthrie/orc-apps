/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the ISO/IEC 23002-4 for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the ISO/IEC 23002-4  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

Buffer store edge value from current macrobloc and provide edge for intra-decoding
Edge are provided from bottom to top, then corner, then left to right 
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/
package ch.epfl.mpeg4.part10.cbp.intraPred;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;

actor Buffer_Neighbour_FullMb ( int MB_WIDTH , bool IsChroma)
	uint(size=6)  Mb_Type,
	uint(size=7)  MbLocation,
	uint(size=8) MB_IN
		==> 
	uint(size=16) EDGE 
		:
		
	// Port size declaration
	int MB_WIDTH_MAX    = 16;

  	// Index of the macroblock in the current line
  	uint(size=13) mbIndex := 0;
  	uint(size=6)  mbType  := 0;
  	
	//List containing edge pixel value 
	uint(size=16) topEdge[MAX_PICWIDTH_BLK * MB_WIDTH_MAX];
	uint(size=16) leftEdge[MB_WIDTH_MAX];
	uint(size=16) topLeftEdge := 0;
	
	//FIXME! PICWIDTH used
	uint(size=16) result[MAX_PICWIDTH_BLK * MB_WIDTH_MAX];
	
  
  	//Mb_Type_OK : Send value of edge needed and store the edge of macroblock decoded
  	readMbType: action Mb_Type:[MbType], MbLocation:[MbxInPic , MbyInPic] ==>
   	do 
  		// position of the current macroblock in the line
  		mbIndex := MbxInPic; 
  		mbType  := MbType; // mbType is equal to 1  		
  	end  
  
  	//Receive pixel value from current decoded macroblock
  	mbNeighbour.luma: action MB_IN:[mbPix] repeat 256 ==> 
  	guard
  		MB_WIDTH = MB_WIDTH_LUMA
  	do
  		//Store bottom , right and bottom right edge
  		topLeftEdge := topEdge[MB_WIDTH-1+ mbIndex*MB_WIDTH];
  		foreach int s in 0 .. MB_WIDTH-1
  		do
  			topEdge[s+ mbIndex *MB_WIDTH]:= mbPix[s+(MB_WIDTH-1)*MB_WIDTH];
  		end
  		leftEdge :=  [mbPix[s*MB_WIDTH-1]:for int s in 1 .. MB_WIDTH_LUMA];
  	end
  
  	//Receive pixel value from current decoded macroblock
  	mbNeighbour.chroma: action MB_IN:[mbPix] repeat 64 ==> 
  	guard
  		MB_WIDTH = MB_WIDTH_CHROMA
  	do
  		//Store bottom , right and bottom right edge
  		topLeftEdge := topEdge[MB_WIDTH-1+ mbIndex*MB_WIDTH];
  		foreach int s in 0 .. MB_WIDTH-1
  		do
  			topEdge[s+ mbIndex *MB_WIDTH]:= mbPix[s+(MB_WIDTH-1)*MB_WIDTH];
  		end
  		leftEdge :=  [mbPix[s*MB_WIDTH-1]:for int s in 1 .. MB_WIDTH_CHROMA];
  	end
  
  	computeEdge.luma: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2*MB_WIDTH_LUMA]	] repeat 2*MB_WIDTH_LUMA+1
	guard
		Is_Intra_16x16(mbType) or (Is_Intra_NxN(mbType) and IsChroma),
		MB_WIDTH = MB_WIDTH_LUMA
  	do
		
		foreach int s in 0 .. MB_WIDTH-1
		do
  			result[s]:= leftEdge[s];
  		end
  		result[MB_WIDTH]:= topLeftEdge;
  		
  		foreach int s in 0 .. MB_WIDTH-1 
		do
  			result[MB_WIDTH+1+s]:= topEdge [s+ mbIndex *MB_WIDTH];
  		end

  	end
  
	computeEdge.chroma: action ==> EDGE:[ [ result[s] : for int s in 0 .. 2*MB_WIDTH_CHROMA]	] repeat 2*MB_WIDTH_CHROMA+1
	guard
		Is_Intra_16x16(mbType) or (Is_Intra_NxN(mbType) and IsChroma),
  		MB_WIDTH = MB_WIDTH_CHROMA
	do
		foreach int s in 0 .. MB_WIDTH-1
		do
  			result[s]:= leftEdge[s];
  		end
  		result[MB_WIDTH]:= topLeftEdge;
  		
  		foreach int s in 0 .. MB_WIDTH-1 
		do
  			result[MB_WIDTH+1+s]:= topEdge [s+ mbIndex *MB_WIDTH];
  		end

  	end

  	computeEdge.skip: action ==>
  	guard
  		not Is_Intra_16x16(mbType) and not (Is_Intra_NxN(mbType) and IsChroma)
   	end

	schedule fsm ReadMbType:
		ReadMbType   (readMbType    )--> ComputeEdge;
		ComputeEdge  (computeEdge   )--> Mb_Neighbour;
		Mb_Neighbour (mbNeighbour   )--> ReadMbType;
	end
end