/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.cbp.synParser.modular.decodePicture;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

actor Algo_MergeDataFromSlcDataAndMbLayer()
	bool          SkipMbLayer,
	uint(size=6)  MbType,
	uint(size=4)  RemIntraYxYPredMode
		==>
	uint(size=4)  IntraPredMode,
	int (size=8)  ScalingList
		:	

	uint(size=6) mb_type;
	/**************************************************************************
  	 * 
  	 *************************************************************************/
	isNotMbType.isSkip : action
		SkipMbLayer    :[skip]
			==>
	guard
		skip = true
	end
	/**************************************************************************
  	 * 
  	 *************************************************************************/
	getMbType : action
		SkipMbLayer    :[skip],
		MbType         :[mb_type_p]
			==>
	guard
		skip = false
	do
		mb_type := mb_type_p;
	end
	/**************************************************************************
  	 * 
  	 *************************************************************************/
	MbLayer.IsIntra4x4: action
		RemIntraYxYPredMode :[rem_intra_4x4_pred_mode] repeat 16
			==>
		ScalingList   :[[16 : for int i in 0 .. 15]] repeat 16,
		IntraPredMode :[intra_pred_mode] repeat 17
	guard
		mb_type = BLOCK_TYPE_I_4x4
	var
		List(type: uint(size=4), size=17) intra_pred_mode
	do
		intra_pred_mode[0] := 1;
		foreach int i in 0 .. 15
		do
			intra_pred_mode[i+1] := rem_intra_4x4_pred_mode[i];
		end
	end
  	/**************************************************************************
  	 * 
  	 *************************************************************************/
	MbLayer.IsIntra16x16: action
			==>
		IntraPredMode :[ 3 , (mb_type - BLOCK_TYPE_INTRA_16x16_MIN) & 3],
		ScalingList   :[[16 : for int i in 0 .. 15]] repeat 16
	guard
		mb_type >= BLOCK_TYPE_INTRA_16x16_MIN,
		mb_type <= BLOCK_TYPE_INTRA_16x16_MAX
	end
  	/**************************************************************************
  	 * 
  	 *************************************************************************/
	MbLayer.IsIntraPCM: action
			==>
		IntraPredMode  :[4]
	guard
		mb_type = BLOCK_TYPE_I_PCM
	end
  	/**************************************************************************
  	 * 
  	 *************************************************************************/
	MbLayer.IsNotIntra: action
			==>
		ScalingList :[[16 : for int i in 0 .. 15]] repeat 16
	guard
		mb_type > BLOCK_TYPE_INTRA_MAX
	end
  	/**************************************************************************
  	 * 
  	 *************************************************************************/
	schedule fsm getMbType:
		getMbType   (isNotMbType )--> getMbType;
		getMbType   (getMbType   )--> ReadMbLayer;
		ReadMbLayer (MbLayer     )--> getMbType;
	end
end
