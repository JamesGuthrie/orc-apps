/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package ch.epfl.mpeg4.part10.cbp.selectMacroblock;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

actor SelectMbForChroma ()
	uint(size=6)  Mb_Type,

	int (size=9)  CoeffAcr,
	int (size=10) MbFromIntra,
	int (size=10) MbFromInter,
	uint(size=8)  MbFromPcm
		==>
	uint(size=8)  MbOut
		:

	uint(size=16) mbType;

	GetMbType: action Mb_Type :[valMbType] ==>
	do
		mbType := valMbType;
	end

  /*
	GetIntra4x4:action X0:[x] repeat 8*8 ==> X:[x] repeat 8*8
	guard
    	sel = 0
	end
  */
	GetIntra16x16:action
			MbFromIntra :[x] repeat 64,
			CoeffAcr    :[y] repeat 64
				==>
			MbOut       :[z] repeat 64 
		guard
			mbType <= BLOCK_TYPE_INTRA_MAX,
			mbType != BLOCK_TYPE_I_PCM
		var
			uint(size=8) z[64]
		do
			foreach int i in 0 .. 63
			do
				z[i] := x[i] + y[i];
			end
		end
  
	GetInter: action
			MbFromInter :[x] repeat 64,
			CoeffAcr    :[y] repeat 64
				==>
			MbOut       :[z] repeat 64
		guard
	    	mbType > BLOCK_TYPE_INTRA_MAX
		var
			uint(size=8) z[64]
		do
			foreach int i in 0 .. 63
			do
				z[i] := x[i] + y[i];
			end
		end
	
	GetPCM: action
			MbFromPcm :[x] repeat 64
				==>
			MbOut     :[x] repeat 64
		guard
			mbType = BLOCK_TYPE_I_PCM
		end

	schedule fsm GetMbType:
		GetMbType (GetMbType )--> GetMacroBlock;

		GetMacroBlock (GetIntra16x16 )--> GetMbType;
		GetMacroBlock (GetInter )--> GetMbType;
		GetMacroBlock (GetPCM )--> GetMbType;
	end
	priority
		GetInter > GetIntra16x16 > GetPCM;
	end
end
