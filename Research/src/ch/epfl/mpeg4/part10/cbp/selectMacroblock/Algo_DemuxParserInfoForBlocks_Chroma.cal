/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package ch.epfl.mpeg4.part10.cbp.selectMacroblock;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_DemuxParserInfoForBlocks_Chroma()
	uint(size=6)  MBType,
	bool          ConstrainedIFlag,
	uint(size=7)  MbLocation,
	bool          NeighbourAvail
	
		==>
	bool          NeighbourAvail_Intra
		:

	List( type:bool, size=MAX_PICWIDTH_BLK) is_intra := [false : for int i in 0 .. MAX_PICWIDTH_BLK-1];
	bool          intra_top_left := false;	
	uint(size=13) curr_pos       := 0;
	bool          CurrValIsIntra := false;

/*
*
* Actions
*
*/

	MBTypeIsPCM: action
			MBType           :[ValMBType],
			ConstrainedIFlag :[c_intra_flag]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_PCM
		do
			CurrValIsIntra := true;
		end


	MBTypeIsIntra: action
			MBType             :[ValMBType]
				==>
		guard
			ValMBType <= BLOCK_TYPE_INTRA_MAX,
			ValMBType != BLOCK_TYPE_I_PCM
		do
			CurrValIsIntra := true;	
			
		end

	SendNeighbourIntra: action
			ConstrainedIFlag :[c_intra_flag],
			MbLocation   :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA , NeighbourB , NeighbourC , NeighbourD]
				==>
			NeighbourAvail_Intra  :[NeighA, NeighB, NeighC, NeighD]
		var
			bool NeighA,
			bool NeighB,
			bool NeighC,
			bool NeighD
		do
			curr_pos    := MbLocxInPic;
			NeighA := NeighbourA && (is_intra[(curr_pos-1) & 0x3F] or not (c_intra_flag));
			NeighB := NeighbourB && (is_intra[curr_pos & 0x3F] or not(c_intra_flag));
			NeighC := NeighbourC && (is_intra[(curr_pos+1) & 0x3F] or not(c_intra_flag)) && NeighB;
			NeighD := NeighbourD && (intra_top_left or not (c_intra_flag));
		end

	SendInfosDone: action ==>
		do
			intra_top_left     := is_intra[curr_pos];
			is_intra[curr_pos] := CurrValIsIntra;
		end

	MBTypeIsInter: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType > BLOCK_TYPE_INTRA_MAX
		do
			CurrValIsIntra := false;
		end

	GetConstrIAndFstMbInter: action
			ConstrainedIFlag :[c_intra_flag]	
				==>
		end	

	UpdateIsIntra: action
			MbLocation     :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA , NeighbourB , NeighbourC , NeighbourD]
				==>
		do
			curr_pos    := MbLocxInPic;
		end	

	schedule fsm CheckMbType:
		CheckMbType    (MBTypeIsInter           )--> SendInterInfos1;
		CheckMbType    (MBTypeIsPCM             )--> SendPCMInfos1;
		CheckMbType    (MBTypeIsIntra           )--> SendIntraInfos1;

		SendIntraInfos1 (SendNeighbourIntra      )--> SendIntraInfos2;
		SendIntraInfos2 (SendInfosDone           )--> CheckMbType;

		SendInterInfos1 (GetConstrIAndFstMbInter )--> SendInterInfos2;
		SendInterInfos2 (UpdateIsIntra           )--> SendInterInfos3;
		SendInterInfos3 (SendInfosDone           )--> CheckMbType;

		SendPCMInfos1   (UpdateIsIntra           )--> SendPCMInfos2;
		SendPCMInfos2   (SendInfosDone           )--> CheckMbType;
	end

	priority
		MBTypeIsInter > MBTypeIsIntra > MBTypeIsPCM;
	end

end