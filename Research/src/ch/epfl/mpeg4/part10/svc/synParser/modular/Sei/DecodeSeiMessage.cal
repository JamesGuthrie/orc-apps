/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its contributors may be used 
 *     to endorse or promote products derived from this software without specific 
 *     prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
 /**
 * This actor get the supplemental enhancement information messages.
 * 
 * @input ValVLD
 * 		Result of the entropy decoding
 * 
 * @output DecodeNextNal
 * 		Indicates when the parser can decode an other NAL.
 * 
 * @output TypeOfVLD, VLD_Param
 *		Information given in order to realize the entropy decoding
 * 
 * @see implements the table located in 7.3.2.3, 7.3.2.3.1 and D.1 in the SVC
 *      standard
 *  
 * @author : Damien de Saint Jorre
 */
 
package org.mpeg4.part10.svc.synParser.modular.Sei;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor DecodeSeiMessage()
	int (size=32) ValVLD
		==>
	int (size=6)  TypeOfVLD,
	int (size=32) VLD_Param
		:

	uint(size=32) payloadType;
	uint(size=32) payloadSize;

	resetStateVariables: action ==>
	do
		payloadType := 0;
		payloadSize := 0;
	end

	//Launch f(8) or u(8) decoding.
	decodeNextByte: action ==> TypeOfVLD:[READ_BITS], VLD_Param:[8]
	end

	// if( next_bits(8) == 0xFF ) {
	//   ff_byte =f(8);
	//   payloadType += 255;
	// }
	addValueToPayloadType: action ValVLD:[decodingResult]==>
	guard
		decodingResult = 0xFF
	do
		payloadType := payloadType + 255;
	end

	// last_payload_type_byte = u(8);
	// payloadType += last_payload_type_byte;
	getLastPayloadTypeByte: action ValVLD:[decodingResult] ==>
	do
		payloadType := payloadType + decodingResult;
	end

	// if( next_bits(8) == 0xFF ) {
	//   ff_byte =f(8);
	//   payloadSize += 255;
	// }
	addValueToPayloadSize: action ValVLD:[decodingResult] ==>
	guard
		decodingResult = 255
	do
		payloadSize := payloadSize + 255;
	end

	// last_payload_size_byte = u(8);
	// payloadSize += last_payload_size_byte;
	getLastPayloadSizeByte: action ValVLD:[decodingResult] ==>
	do
		payloadSize := payloadSize + decodingResult;
	end

	// We launch the actor corresponding to payloadType
	seiPayload: action ==> TypeOfVLD:[LAUNCH_ACTOR, BYTE_ALIGNED_REQUIRED],
		VLD_Param :[PAYLOAD_ACTORS_MIN + payloadType]
	do
		println("payloadType : "+payloadType);
	end

	// From sei_rbsp():
	// we test if it's the end of the Nal
	askMoreRbspData: action ==> TypeOfVLD:[MORE_RBSP_DATA]
	end

	// if there isn't more data, we decode the next Nal
	checkMoreRbspData.isTrue: action ValVLD:[moreRbspData] ==>
	guard
		moreRbspData != 0
	end

	// if there is more data, we will decode the next message.
	checkMoreRbspData.isFalse: action ValVLD:[moreRbspData] ==>
	guard
		moreRbspData = 0
	end

	schedule fsm ResetStateVariables:
		ResetStateVariables   (resetStateVariables    )--> GetByteForPayloadType;
		GetByteForPayloadType (decodeNextByte         )--> TestValPayTypeResult;
		TestValPayTypeResult  (addValueToPayloadType  )--> GetByteForPayloadType;
		TestValPayTypeResult  (getLastPayloadTypeByte )--> GetByteForPayloadSize;

		GetByteForPayloadSize (decodeNextByte         )--> TestValPaySizeResult;
		TestValPaySizeResult  (addValueToPayloadSize  )--> GetByteForPayloadSize;
		TestValPaySizeResult  (getLastPayloadSizeByte )--> SeiPayload;

		SeiPayload        (seiPayload        )--> AskMoreRbspData;
		AskMoreRbspData   (askMoreRbspData   )--> CheckMoreRbspData;
		CheckMoreRbspData (checkMoreRbspData )--> ResetStateVariables;
	end
	priority
		addValueToPayloadType > getLastPayloadTypeByte;
		addValueToPayloadSize > getLastPayloadSizeByte;
	end
end