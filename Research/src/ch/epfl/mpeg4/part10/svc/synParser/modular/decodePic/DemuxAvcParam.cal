/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package ch.epfl.mpeg4.part10.svc.synParser.modular.decodePic;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor DemuxAvcParam()
	bool          IsSvcSlice,
	int (size=32) Pps4Header,
	int (size=5)  Pps4Data,
	uint(size=32) SpsParam4SlcData,
	int (size=32) SpsParam4SlcHead
		==>
	int (size=32) Pps4HeaderAvc,
	int (size=32) Pps4HeaderSvc,
	int (size=5)  Pps4DataAvc,
	int (size=5)  Pps4DataSvc,
	uint(size=32) SpsParamAvcData,
	uint(size=32) SpsParamSvcData,
	int (size=32) SpsParamAvcHead,
	int (size=32) SpsParamSvcHead
		:

	uint(size=8) nbSpsData;
	bool         isSvc;

	forward1stPart.avc: action IsSvcSlice:[isSvcSlc], Pps4Data:[ppsData] repeat 3,
		Pps4Header:[ppsHeader] repeat 5, SpsParam4SlcData:[spsData] repeat 9,
		SpsParam4SlcHead:[spsHead] repeat 10 ==>
		Pps4DataAvc:[ppsData] repeat 3, Pps4HeaderAvc:[ppsHeader] repeat 5,
		SpsParamAvcData:[spsData] repeat 9, SpsParamAvcHead:[spsHead] repeat 10
	guard
		not isSvcSlc
	do
		nbSpsData := spsHead[2] + 1;
		isSvc     := isSvcSlc;
	end

	forward1stPart.svc: action IsSvcSlice:[isSvcSlc], Pps4Data:[ppsData] repeat 3,
		Pps4Header:[pps] repeat 5, SpsParam4SlcData:[sps] repeat 9,
		SpsParam4SlcHead:[spsHead] repeat 10 ==>
		Pps4DataSvc:[ppsData] repeat 3, Pps4HeaderSvc:[pps] repeat 5,
		SpsParamSvcData:[sps] repeat 9, SpsParamSvcHead:[spsHead] repeat 10
	guard
		isSvcSlc
	do
		nbSpsData := spsHead[2] + 1;
		isSvc     := isSvcSlc;
	end

	forwardSpsData.launch.avc: action SpsParam4SlcHead:[sps] ==>
		SpsParamAvcHead:[sps]
	guard
		nbSpsData > 0 and not isSvc
	do
		nbSpsData := nbSpsData - 1;
	end

	forwardSpsData.launch.svc: action SpsParam4SlcHead:[sps] ==>
		SpsParamSvcHead:[sps]
	guard
		nbSpsData > 0 and isSvc
	do
		nbSpsData := nbSpsData - 1;
	end

	forwardSpsData.done.avc: action ==>
	guard
		nbSpsData = 0 and not isSvc
	end

	forwardSpsData.done.svc: action ==>
	guard
		nbSpsData = 0 and isSvc
	end

	schedule fsm Forward1stPart :
		Forward1stPart (forward1stPart        )--> ForwardSpsData;
		ForwardSpsData (forwardSpsData.launch )--> ForwardSpsData;
		ForwardSpsData (forwardSpsData.done   )--> Forward1stPart;
	end
end
