/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package ch.epfl.mpeg4.part10.svc.synParser.modular.decodeSps;

import ch.epfl.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor Decode_Hrd_Parameters()
	int (size=32) ValVLD
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VldParam
		:

	bool DEBUG_FLAG_DECODED = false;

	uint(size=6) cpbCnt;
	uint(size=6) iLoop;

	readCpbBitRate.asked: action ==> TypeOfVLD :[VLD_UE, READ_BITS, READ_BITS],
	                                 VldParam  :[            4     ,    4    ]
	end

	readCpbBitRate.done: action ValVLD :[cpbCntMinus1, bitRateScale,
		cpbSizeScale] ==>
	do
		if(DEBUG_FLAG_DECODED)then
			println("cpb_cnt_minus1 : "+cpbCntMinus1);
			println("bit_rate_scale : "+bitRateScale);
			println("cpb_size_scale : "+cpbSizeScale);
		end
		cpbCnt := cpbCntMinus1 + 1;
		iLoop := 0;
	end

	launchLoop: action ==> TypeOfVLD :[VLD_UE, VLD_UE, READ_BITS],
	                       VldParam  :[                    1    ]
	guard
		iLoop < cpbCnt
	end

	readBitRate.done: action ValVLD :[bitRateValueMinus1, cpbSizeValueMinus1,
		cbrFlag] ==>
	do
		if(DEBUG_FLAG_DECODED)then
			println("bit_rate_value_minus1["+iLoop+"] : "+bitRateValueMinus1);
			println("cpb_size_value_minus1["+iLoop+"] : "+cpbSizeValueMinus1);
			println("cbr_flag["+iLoop+"] : "+cbrFlag);
		end
		iLoop := iLoop + 1;
	end

	readParametersLeft.asked: action ==>
		TypeOfVLD :[READ_BITS , READ_BITS , READ_BITS , READ_BITS],
		VldParam  :[    5     ,     5     ,     5     ,     5    ]
	end

	readParametersLeft.done: action ValVLD :[initialCpb, cpbRemovalDelay,
		dpbOutputDelay, timeOffsetLength] ==> TypeOfVLD :[SKIP_NAL]
	do
		if(DEBUG_FLAG_DECODED)then
			println("initial_cpb_removal_delay_length_minus1 : "+initialCpb);
			println("cpb_removal_delay_length_minus1 : "+cpbRemovalDelay);
			println("dpb_output_delay_length_minus1 : "+dpbOutputDelay);
			println("time_offset_length : "+timeOffsetLength);
		end
	end


	schedule fsm AskReadCpbBitRate:
		AskReadCpbBitRate  (readCpbBitRate.asked     )--> ReadCpbBitRateDone;
		ReadCpbBitRateDone (readCpbBitRate.done      )--> CheckLoop;

		CheckLoop          (launchLoop               )--> ReadBitRateDone;
		CheckLoop          (readParametersLeft.asked )--> EndOfHrdParam;

		ReadBitRateDone    (readBitRate.done         )--> CheckLoop;

		EndOfHrdParam      (readParametersLeft.done  )--> AskReadCpbBitRate;
	end
	priority
		launchLoop > readParametersLeft.asked;
	end
end