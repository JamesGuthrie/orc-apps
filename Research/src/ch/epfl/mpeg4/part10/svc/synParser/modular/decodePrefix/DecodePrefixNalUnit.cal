/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package ch.epfl.mpeg4.part10.svc.synParser.modular.decodePrefix;

import ch.epfl.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor DecodePrefixNalUnit()
	uint(size=2)  NalRefIdc,
	int (size=32) ValVLD
		==>
	int (size=6)  TypeOfVLD,
	int (size=32) VLDParam,
	bool          SkipRefBase
		:

	bool DEBUG = true;

	bool idr;
	bool prefNalUnitAddExt;
	bool storeRefBasePic;
	bool useRefBasePic;

	askNalUnitHeadSvcExt: action ==>
		TypeOfVLD:[[READ_BITS : for int i in 0 .. 10]] repeat 11,
		VLDParam:[1, 1, 6, 1, 3, 4, 3, 1, 1, 1, 2]
	end

	getNalUnitHeadSvcExt: action ValVLD:[valDecoded] repeat 11 ==>
	do
		if(DEBUG)then
			println("\n\t**************PrefixNal**************");
			println("\t\tidr_flag : "+valDecoded[1]);
			println("\t\tpriority_id : "+valDecoded[2]);
			println("\t\tno_inter_layer_pred_flag : "+valDecoded[3]);
			println("\t\tdependency_id : "+valDecoded[4]);
			println("\t\tquality_id : "+valDecoded[5]);
			println("\t\ttemporal_id : "+valDecoded[6]);
			println("\t\tuse_ref_base_pic_flag : "+valDecoded[7]);
			println("\t\tdiscardable_flag : "+valDecoded[8]);
			println("\t\toutput_flag : "+valDecoded[9]);
		end
		idr := (valDecoded[1] != 0);
		useRefBasePic := (valDecoded[7] != 0);
	end

	getNalRefIdc.isEqualTo0: action NalRefIdc:[nalRefIdc] ==>
		TypeOfVLD:[SKIP_NAL], SkipRefBase:[true]
	guard
		nalRefIdc = 0
	end

	getNalRefIdc.isNotEqualTo0: action NalRefIdc:[nalRefIdc] ==>
		TypeOfVLD:[READ_BITS], VLDParam:[1]
	guard
		nalRefIdc != 0
	end

	getStoreRefBasePic: action ValVLD:[storeRefBasePicFlag] ==> SkipRefBase:[skipRefBase]
	var
		bool skipRefBase
	do
		storeRefBasePic := (storeRefBasePicFlag != 0);
		skipRefBase := (not useRefBasePic and not storeRefBasePic) or idr;
		if(DEBUG) then
			println("\t\tstore_ref_base_pic_flag : "+storeRefBasePicFlag);
		end
	end

	launchDecRefBasePicMark.launch: action ==> TypeOfVLD:[LAUNCH_ACTOR],
		VLDParam:[REF_BASE_PIC_MARKING], SkipRefBase:[false]
	guard
		(useRefBasePic or storeRefBasePic) and not idr
	end

	launchDecRefBasePicMark.skip: action ==> SkipRefBase:[true]
	end

	askPrefixNalUnitAddExt: action ==> TypeOfVLD:[READ_BITS], VLDParam:[1]
	end

	getPrefixNalUnitAddExt: action ValVLD:[prefixNalUnitAdd]==>
	do
		prefNalUnitAddExt := (prefixNalUnitAdd != 0);
		if(DEBUG) then
			println("\t\tprefix_nal_unit_additional_extension_flag : "+prefixNalUnitAdd);
		end
	end

	askMoreRbspData: action ==> VLDParam:[MORE_RBSP_DATA]
	guard
		prefNalUnitAddExt
	end

	askPrefixNalUnitExt: action ValVLD:[moreRbspData] ==>
		TypeOfVLD:[READ_BITS], VLDParam:[1]
	guard
		moreRbspData != 0
	end

	getPrefixNalUnitExt: action ValVLD:[prefixNalUnitExt] ==>
		TypeOfVLD:[MORE_RBSP_DATA]
	do
		if(DEBUG) then
			println("\t\tprefix_nal_unit_extension_flag : "+prefixNalUnitExt);
		end
	end

	endWhileLoop: action ValVLD:[moreRbspData] ==> TypeOfVLD:[SKIP_NAL]
	guard
		moreRbspData = 0
	end

	endOfNal: action ==> TypeOfVLD:[SKIP_NAL]
	end

	schedule fsm AskNalUnitHeadSvcExt:
		AskNalUnitHeadSvcExt (askNalUnitHeadSvcExt )--> GetNalUnitHeadSvcExt;
		GetNalUnitHeadSvcExt (getNalUnitHeadSvcExt )--> CheckNalRefIdc;

		CheckNalRefIdc (getNalRefIdc.isEqualTo0    )--> AskNalUnitHeadSvcExt;
		CheckNalRefIdc (getNalRefIdc.isNotEqualTo0 )--> GetStoreRefBasePic;

		GetStoreRefBasePic      (getStoreRefBasePic      )--> LaunchDecRefBasePicMark;
		LaunchDecRefBasePicMark (launchDecRefBasePicMark )--> AskPrefixNalUnitAddExt;
		AskPrefixNalUnitAddExt  (askPrefixNalUnitAddExt  )--> GetPrefixNalUnitAddExt;
		GetPrefixNalUnitAddExt  (getPrefixNalUnitAddExt  )--> CheckPrefixNalUnit;
		CheckPrefixNalUnit      (askMoreRbspData         )--> CheckMoreRbspData;
		CheckPrefixNalUnit      (endOfNal                )--> AskNalUnitHeadSvcExt;

		CheckMoreRbspData (askPrefixNalUnitExt )--> GetPrefixNalUnitExt;
		CheckMoreRbspData (endWhileLoop        )--> AskNalUnitHeadSvcExt;

		GetPrefixNalUnitExt (getPrefixNalUnitExt )--> CheckMoreRbspData;
	end
	priority
		launchDecRefBasePicMark.launch > launchDecRefBasePicMark.skip;
		askMoreRbspData     > endOfNal;
		askPrefixNalUnitExt > endWhileLoop;
	end
end