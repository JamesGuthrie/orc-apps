/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package ch.epfl.mpeg4.part10.svc.synParser.modular.decodePrefix;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor MgntDecodePrefix()
	int (size=6)  PrefixTypeOfVLD,
	int (size=32) PrefixVLDParam,
	uint(size=5)  RefBaseMarkTypeOfVLD,
	int (size=32) RefBaseMarkVLDParam,
	int (size=32) ValDecoded
		==>
	int (size=32) PrefixValVLD,
	int (size=32) RefBaseMarkValVLD,
	uint(size=5)  TypeOfVLD,
	int (size=32) VldParam
		:

	prefix.vld.with1Param: action PrefixTypeOfVLD:[typeOfVLD],
		PrefixVLDParam:[param] ==> TypeOfVLD:[typeOfVLD], VldParam:[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	end

	prefix.getVldVal: action ValDecoded:[vldecoding] ==>
		PrefixValVLD:[vldecoding]
	end

	prefix.launchRefBaseMark: action PrefixTypeOfVLD:[typeOfVLD],
		PrefixVLDParam:[actorLaunched] ==>
	guard
		typeOfVLD = LAUNCH_ACTOR
	end

	prefix.done: action PrefixTypeOfVLD:[typeOfVLD] ==> TypeOfVLD:[SKIP_NAL]
	guard
		typeOfVLD = SKIP_NAL
	end

	refBaseMark.vld.withoutParam: action RefBaseMarkTypeOfVLD:[typeOfVLD]
		==> TypeOfVLD:[typeOfVLD]
	guard
		NbParamForFunction(typeOfVLD) = 0,
		typeOfVLD  != SKIP_NAL
	end

	refBaseMark.vld.with1Param: action RefBaseMarkTypeOfVLD:[typeOfVLD],
		RefBaseMarkVLDParam:[param] ==> TypeOfVLD:[typeOfVLD], VldParam:[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	end

	refBaseMark.getVldVal: action ValDecoded:[vldecoding] ==>
		RefBaseMarkValVLD:[vldecoding]
	end

	refBaseMark.done: action RefBaseMarkTypeOfVLD :[typeOfVLD] ==>
	guard
		typeOfVLD = SKIP_NAL
	end

	schedule fsm LaunchPrefix:
		LaunchPrefix (prefix.vld               )--> PrefixGetVld;
		LaunchPrefix (prefix.launchRefBaseMark )--> LaunchRefBaseMark;
		LaunchPrefix (prefix.done              )--> LaunchPrefix;

		PrefixGetVld (prefix.getVldVal )--> LaunchPrefix;

		LaunchRefBaseMark (refBaseMark.vld  )--> RefBaseMarkGetVld;
		LaunchRefBaseMark (refBaseMark.done )--> LaunchPrefix;

		RefBaseMarkGetVld (refBaseMark.getVldVal )--> LaunchRefBaseMark;
	end
end