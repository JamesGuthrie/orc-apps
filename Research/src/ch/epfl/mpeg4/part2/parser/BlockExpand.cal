package ch.epfl.mpeg4.part2.parser;

import org.mpeg4.part2.Constants.BLOCK_SIZE;
import org.mpeg4.part2.Constants.SAMPLE_SZ;
import org.mpeg4.part2.Constants.SAMPLE_COUNT_SZ;

actor BlockExpand () 
	int(size=SAMPLE_COUNT_SZ) RUN, int(size=SAMPLE_SZ) VALUE, bool LAST 
	==> 
	int(size=SAMPLE_SZ) QFS :

	int(size=SAMPLE_COUNT_SZ) count;

	int(size=SAMPLE_SZ) qfs[64];
	
	start: action ==>
	do
		qfs := [0 : for int i in 0 .. 63];
		count := 0;
	end

	last: action RUN:[ run ], VALUE:[ value ], LAST:[ last ]  ==> QFS:[ qfs ] repeat 64
	guard last
	do
		qfs[count + run] := value;
	end

	run: action RUN:[ run ], VALUE:[ value ], LAST:[ last ] ==>
	do
		qfs[count + run] := value;
		count := count + run + 1;
	end
		
	schedule fsm start :
		start (start) --> run;
		run (run) --> run;
		run (last) --> start;
	end
	
	priority last > run; end

end