// MVReconstruct.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2006 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.

package ch.epfl.mpeg4.part2.parser;

import std.util.Math.*;
import org.mpeg4.part2.Constants.FOURMV;
import org.mpeg4.part2.Constants.BTYPE_SZ;
import org.mpeg4.part2.Constants.CLOSEST_POW2_MAXW_IN_MB;
import org.mpeg4.part2.Constants.MB_COORD_SZ;
import org.mpeg4.part2.Constants.MV_SZ;
import org.mpeg4.part2.Constants.FCODE_MASK;
import org.mpeg4.part2.Constants.FCODE_SHIFT;
import org.mpeg4.part2.Constants.INTER;
import org.mpeg4.part2.Constants.NEWVOP;
import org.mpeg4.part2.Constants.MOTION;

actor MVRecon ()
	int(size=BTYPE_SZ) BTYPE, int(size=MV_SZ) MVIN 
	==>
	int(size=MV_SZ) MV :

	// Motion vector line buffers - pointer behavior must be implemented exactly as in MVSequence.cal
	int(size=MB_COORD_SZ) mbx := 0;

	// Current macroblock x position
	bool top_edge := true;
	bool right_edge := false;
	// Top edge macroblock flag
	int(size=4) comp := 0;

	int(size=MB_COORD_SZ) mbwidth := 0;

	// Macroblock width of current vop
	// A0, A1 used for component index.
	// A2 used to select y vs x.
	// Also, locations 0-7 are reserved for all blocks without motion vectors. This protocol
	// must be identical to the buffer addressing in MVSequence.cal which generates pointers.
	// MAXW_IN_MB MUST BE A POWER OF 2, and no more than 2**(MB_COORD_SZ-4).
	int BUF_SIZE = CLOSEST_POW2_MAXW_IN_MB * 8;

	int(size=4) Y_SELECT = 4;

	int(size=MB_COORD_SZ + 3) ptr;
	int(size=MB_COORD_SZ + 3) ptr_left;
	int(size=MB_COORD_SZ + 3) ptr_above;
	int(size=MB_COORD_SZ + 3) ptr_above_right;

	List(type: int(size=MV_SZ), size=BUF_SIZE) buf := [ 0 : for int i in 1 .. BUF_SIZE ];

	int(size=MV_SZ) f;
	
	int(size=MV_SZ) mv_rsize;

	int(size=MV_SZ) mv_range;

	int(size=MV_SZ) mv_low;

	int(size=MV_SZ) mv_high;
	
		// Compute the MVs - written so that same actions used for both x,y
	int(size=MV_SZ) mv_x;

	int(size=MV_SZ) mv_y;

	int(size=MV_SZ + 2) sum_x;

	int(size=MV_SZ + 2) sum_y;


	

	// New VOP
	start: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	var
		int(size=4) fcode = (cmd & FCODE_MASK) >> FCODE_SHIFT
	do
		mbx := 0;
		top_edge := true;
		right_edge := false;
		comp := 0;
		ptr := 8;
		if fcode > 0 then
			mv_rsize := fcode - 1;
			f := 1 << mv_rsize;
			mv_high := 32*f- 1;
			mv_low := -32*f;
			mv_range := 64*f;
		end	
	end
	
	get_w_h: action BTYPE:[w, h] ==>
	do
		mbwidth := w;
		ptr_left := 16;
		ptr_above := 8*w + 8;
		ptr_above_right := 8*w;
	end

	// No motion vector
	read.noMotion: action BTYPE:[ cmd ] ==>
	guard
		(cmd & INTER) = 0 or (cmd & MOTION) = 0, (cmd & NEWVOP) = 0
	var
		int(size=MB_COORD_SZ + 3) p = (ptr | comp)
	do
		if comp < 4 then
			buf[p] := 0;
			buf[(p | Y_SELECT)] := 0;
		end
	end

	bool fourmv;

	// Motion vectors - detect fourmv
	read.motion: action BTYPE:[ cmd ] ==>
	guard
		(cmd & INTER) != 0,
		(cmd & MOTION) != 0,
		(cmd & NEWVOP) = 0
	do
		if comp = 0 then
			fourmv := (cmd & FOURMV) != 0;
			sum_x := 0;
			sum_y := 0;
		end
	end

	// No need to compute any more MVs for chroma or for luma blocks > 1 if not fourmv
	compute.done: action ==>
	guard
		comp > 3 or (comp != 0 and not fourmv)
	end

	int a;
	int b;
	int c;
	
	// cf. 14496-2 sec.7.6.5
	// block 0   1      above->2    above_right->2
	compute.predict.y0: action ==>
	guard
		comp = 0
	var
		int(size=16) pl = if mbx = 0 then 0 else ptr_left end,
		int(size=16) pa = if top_edge then 0 else ptr_above end,
		int(size=16) par = if top_edge or right_edge then 0 else ptr_above_right end
	do
		a := pl + 1;
		b := pa + 2;
		c := par + 2;
	end

	// block 1    0      above->3    above_right->2
	compute.predict.y1: action ==>
	guard
		comp = 1
	var
		int(size=16) pa = if top_edge then 0 else ptr_above end, 
		int(size=16) par = if top_edge or right_edge then 0 else ptr_above_right end
	do
		a := ptr;
		b := pa + 3;
		c := par + 2;
	end

	// block 2 left->3       0            1
	compute.predict.y2: action ==>
	guard
		comp = 2
	var
		int(size=16) pl = if mbx = 0 then 0 else ptr_left end
	do
		a := pl + 3;
		b := ptr;
		c := ptr + 1;
	end

	// block 3    2          0            1
	compute.predict.y3: action ==>
	do
		a := ptr + 2;
		b := ptr;
		c := ptr + 1;
	end
		
	// Compute MVs for all Y components in FOURMV mode, otherwise just one
	compute.start: action MVIN:[ mag_x, res_x, mag_y, res_y ] ==>
	var 		
		int pred
	do
		if f = 1 or mag_x = 0 then
			mv_x := mag_x;
		else
			mv_x := (abs(mag_x) - 1) * f + res_x + 1;
			if  mag_x < 0 then
				mv_x := -mv_x;
			end
		end
		
		pred := if comp >= 2 or not top_edge then median(buf[a], buf[b], buf[c]) else buf[a] end;
		mv_x := pred + mv_x;
		if (mv_x < mv_low)  then
			mv_x := mv_x + mv_range;
		end
		if (mv_x > mv_high) then
			mv_x := mv_x - mv_range;
		end
		
		sum_x := sum_x + mv_x;
		
		if f = 1 or mag_y = 0 then
			mv_y := mag_y;
		else
			mv_y := (abs(mag_y) - 1) * f + res_y + 1;
			if  mag_y < 0 then
				mv_y := -mv_y;
			end
		end
		
		pred := if comp >= 2 or not top_edge then median(buf[a+4], buf[b+4], buf[c+4]) else buf[a+4] end;
		mv_y := pred + mv_y;
		if ( mv_y < mv_low )  then
			mv_y := mv_x + mv_range;
		end
		if (mv_y > mv_high) then
			mv_y := mv_y - mv_range;
		end
		sum_y := sum_y + mv_y;
	end


	write.luma: action ==> MV:[ mv_x, mv_y ]
	guard
		comp < 4
	var
		int(size=MB_COORD_SZ + 3) p = ptr + comp
	do
		buf[p] := mv_x;
		buf[p + Y_SELECT] := mv_y;
	end

	function uvclip_1(int v) --> int :
		(v >> 1) | if (v & 3) = 0 then 0 else 1 end
	end

	function uvclip_4(int v) --> int
	var
		bool sign = v < 0,
		int absv = if sign then
			-v
		else
			v
		end,
//		int resv = (absv - ((absv >> 4) << 4)),
		int resv = (absv & 15),
		// resv := |v|%16
		int delta = if resv < 3 then 0 else if resv > 13 then 2 else 1 end end,
		int vv = ((absv >> 4) << 1) + delta :
		if sign then
			-vv
		else
			vv
		end
	end

	// Written to be called four times in succession ( u.x, u.y, v.x, v.y )
	write.chroma: action ==> MV:[ mv_x, mv_y ]
	var
		int(size=MV_SZ) mv_x = if fourmv then uvclip_4(sum_x) else uvclip_1(sum_x) end, 
		int(size=MV_SZ) mv_y = if fourmv then uvclip_4(sum_y) else uvclip_1(sum_y) end
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			mbx := mbx + 1;
			if right_edge then
				mbx := 0;
				right_edge := false;
				top_edge := false;
			else
				if mbx = (mbwidth - 1) then
					right_edge := true;
				end
			end
			ptr := if ptr = 8 then BUF_SIZE - 8 else ptr - 8 end;
			ptr_left := if ptr_left = 8 then BUF_SIZE - 8 else ptr_left - 8 end;
			ptr_above := if ptr_above = 8 then BUF_SIZE - 8 else ptr_above - 8 end;
			ptr_above_right := if ptr_above_right = 8 then BUF_SIZE - 8 else ptr_above_right - 8 end;
		end
	end

	schedule fsm read :
		read ( start ) --> get_w_h;
		get_w_h (get_w_h) --> read;
		read ( read.motion ) --> compute;
		read ( read.noMotion ) --> advance;
		compute ( compute.done ) --> write;
		compute ( compute.predict ) --> predict;
		predict ( compute.start ) --> write;
		write ( write ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.noMotion > read.motion;
		compute.done > compute.predict;
		compute.predict.y0 > compute.predict.y1 > compute.predict.y2 > compute.predict.y3;
		write.luma > write.chroma;
	end

end