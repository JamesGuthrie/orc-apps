/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Ghislain Roquier <ghislain.roquier@epfl.ch>
package ch.epfl.mpeg4.part2.texture;

import org.mpeg4.part2.Constants.*;

actor InverseACPred () 
	int(size=SAMPLE_SZ) PQF,
	int POS,
	int(size=2) AC_PRED_DIR,
	bool SKIPPED
	==>
	int(size=SAMPLE_SZ) QF:

int MAXW_IN_MB = 121;

int(size=SAMPLE_SZ) ac_buf[2][MAXW_IN_MB][6][14];

luma: action AC_PRED_DIR:[ s ], POS:[ mby, mbx, comp ], PQF:[ pqf ] repeat 64, SKIPPED:[skipped] ==> QF:[ pqf ] repeat 64
var
 	bool acpred_flag = s > 0,
 	bool top = s = 2,
 	int curr_line = mby & 1,
 	int prev_line = (mby - 1) & 1 
do
	if acpred_flag and not skipped then
		if comp = 0 then
			if top then 
				if mby != 0 then
					foreach int i in 1 .. 7 do
						pqf[i] := pqf[i] + ac_buf[prev_line][mbx][2][i - 1];
					end					
				end
			else
				if mbx != 0 then
					foreach int i in 1 .. 7 do
						pqf[8 * i] := pqf[8 * i] + ac_buf[curr_line][mbx-1][1][7 + i - 1];
					end
				end
			end
		elsif comp = 1 then
			if top then
				if mby != 0 then
					foreach int i in 1 .. 7 do
						pqf[i] := pqf[i] + ac_buf[prev_line][mbx][3][i - 1];
					end
				end
			else
				foreach int i in 1 .. 7 do
					pqf[8 * i] := pqf[8 * i] + ac_buf[curr_line][mbx][0][7 + i - 1];
				end
			end
		elsif comp = 2 then
			if top then
				foreach int i in 1 .. 7 do
					pqf[i] := pqf[i] + ac_buf[curr_line][mbx][0][i - 1];
				end
			else
				if mbx != 0 then
					foreach int i in 1 .. 7 do
						pqf[8 * i] := pqf[8 * i] + ac_buf[curr_line][mbx-1][3][7 + i - 1];
					end
				end
			end
		elsif comp = 3 then
			if top then
				foreach int i in 1 .. 7 do
					pqf[i] := pqf[i] + ac_buf[curr_line][mbx][1][i - 1];
				end
			else
				foreach int i in 1 .. 7 do
					pqf[8 * i] := pqf[8 * i] + ac_buf[curr_line][mbx][2][7 + i - 1];
				end
			end
		else // comp = 4, 5 
			if top and  mby != 0 then
				foreach int i in 1 .. 7 do
					pqf[i] := pqf[i] + ac_buf[prev_line][mbx][comp][i - 1];
				end
			elsif not top and mbx != 0 then
				foreach int i in 1 .. 7 do
					pqf[8 * i] := pqf[8 * i] + ac_buf[curr_line][mbx-1][comp][7 + i - 1];
				end
			end
		end
	end
	
	foreach int i in 1 .. 7 do
		ac_buf[curr_line][mbx][comp][i - 1] := pqf[i];
		ac_buf[curr_line][mbx][comp][7 + i - 1] := pqf[8*i];
	end
end

end
