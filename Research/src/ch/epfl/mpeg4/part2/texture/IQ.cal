// MPEG4_algo_Inversequant.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// MPEG-4 inverse quantization function
//
// Author: Ghislain Roquier(ghislain.roquier@epfl.ch)
// Rewrote the actor at block level
// The actor has now the SDF property
package ch.epfl.mpeg4.part2.texture;

import std.util.Math.*;
import org.sc29.wg11.mpeg4.part2.Constants.*;

actor IQ () int(size=SAMPLE_SZ) QF, int(size=QUANT_SZ) QP ==> int(size=SAMPLE_SZ) F :
	
	function sign(int x) --> int : 
		if x = 0 then 0 else if x < 0 then -1 else 1 end end
	end
	

	action QP:[ qp ], QF:[ qf ] repeat 64 ==> F:[ f ] repeat 64
	var
		// even
		int(size=2) round = (qp & 1) ^ 1,
		List(type: int(size=SAMPLE_SZ), size=64) f
	do
		f[0] := qf[0];
		foreach int i in 1 .. 63 do
			f[i] := sign(qf[i]) * ((qp * (2 * (abs(qf[i])) + 1)) - round);
			f[i] := clip_i32(f[i], -2048, 2047);
		end 
	end
end
