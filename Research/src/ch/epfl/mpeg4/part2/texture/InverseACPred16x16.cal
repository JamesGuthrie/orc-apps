package ch.epfl.mpeg4.part2.texture;

import std.util.BitOps.* ;

actor InverseACPred16x16 () int(size=13) PQF,
int POS,
uint(size=2) AC_PRED_DIR,
bool SKIPPED
==>
int(size=13) QF
:

int MAXW_IN_MB = 120;

int(size=13) ac_buf[2][MAXW_IN_MB][4][14];

action AC_PRED_DIR:[ s ], POS:[ mby, mbx, comp ], PQF:[ pqf ] repeat 64, SKIPPED:[skipped] ==> QF:[ qf ] repeat 64
var
	List(type:int(size=13), size=64) qf := [pqf[i] : for int i in 0 .. 63],
 	bool acpred_flag = s != 0,
 	bool top = s = 2,
 	int curr_line = mby & 1,
 	int prev_line = (mby - 1) & 1 
do
	if acpred_flag and not skipped then
		if comp = 0 then
			if top then 
				if mby != 0 then
					foreach int i in 1 .. 7 do
						qf[i] := qf[i] + ac_buf[prev_line][mbx][2][i - 1];
					end					
				end
			else
				if mbx != 0 then
					foreach int i in 1 .. 7 do
						qf[8 * i] := qf[8 * i] + ac_buf[curr_line][mbx-1][1][7 + i - 1];
					end
				end
			end
		elsif comp = 1 then
			if top then
				if mby != 0 then
					foreach int i in 1 .. 7 do
						qf[i] := qf[i] + ac_buf[prev_line][mbx][3][i - 1];
					end
				end
			else
				foreach int i in 1 .. 7 do
					qf[8 * i] := qf[8 * i] + ac_buf[curr_line][mbx][0][7 + i - 1];
				end
			end
		elsif comp = 2 then
			if top then
				foreach int i in 1 .. 7 do
					qf[i] := qf[i] + ac_buf[curr_line][mbx][0][i - 1];
				end
			else
				if mbx != 0 then
					foreach int i in 1 .. 7 do
						qf[8 * i] := qf[8 * i] + ac_buf[curr_line][mbx-1][3][7 + i - 1];
					end
				end
			end
		else
			if top then
				foreach int i in 1 .. 7 do
					qf[i] := qf[i] + ac_buf[curr_line][mbx][1][i - 1];
				end
			else
				foreach int i in 1 .. 7 do
					qf[8 * i] := qf[8 * i] + ac_buf[curr_line][mbx][2][7 + i - 1];
				end
			end
		end
	end
	
	foreach int i in 1 .. 7 do
		ac_buf[curr_line][mbx][comp][i - 1] := qf[i];
		ac_buf[curr_line][mbx][comp][7 + i - 1] := qf[8*i];
	end
end

end
