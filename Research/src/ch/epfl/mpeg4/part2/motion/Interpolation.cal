package ch.epfl.mpeg4.part2.motion;

import org.mpeg4.part2.Constants.*;

actor Interpolation () 
	int(size=PIX_SZ) RD, int(size=FLAG_SZ) halfpel 
	==> 
	uint(size=PIX_SZ) MOT :

	action halfpel:[ flags ], RD:[ rd ] repeat 81 ==> MOT:[mot] repeat 64
	var 
		int(size=PIX_SZ) mot[64]
	do
		if (flags >> 1) = 0 then
			mot := [ rd[9*j+k] : for int j in 0 .. 7, for int k in 0 .. 7 ];
		else
			if (flags >> 1) = 1 then
				mot := [ (rd[9 * j + k] + rd[9 * (j + 1) + k] + 1 - (flags & 1)) >> 1 : for int j in 0 .. 7, for int k in 0 .. 7 ];
			else
				if (flags >> 1) = 2 then
					mot := [ (rd[9 * j + k] + rd[9 * j + k + 1] + 1 - (flags & 1)) >> 1 : for int j in 0 .. 7, for int k in 0 .. 7 ];
				else
					mot := [ (rd[9 * j + k] + rd[9 * j + k + 1] + rd[9 * (j + 1) + k] + rd[9 * (j + 1) + k + 1] + 2 - (flags & 1)) >> 2 : for int j in 0 .. 7, for int k in 0 .. 7 ];
				end
			end
		end
	end
	
end