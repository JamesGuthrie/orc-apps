/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-5.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
* (2) to develop the ISO/IEC 23002-5: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-5 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-5.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-5 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-5
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/
/***************** 
* Algo_IQ_QSAbdQmatrixMp4vOrH263Scaler
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
* Modified by: Herve Yviquel
*
* MPEG-4 inverse quantization function
********************************/
package ch.epfl.xronos.mpeg4.part2.texture;

import org.sc29.wg11.mpeg4.part2.Constants.*;
import std.util.Math.abs;

actor Algo_IQ_QSAbdQmatrixMp4vOrH263Scaler () 
		int(size=SAMPLE_SZ) DC, 
	int(size=SAMPLE_SZ) AC,
	int(size=QUANT_SZ) QP 
		==> 
		int(size=SAMPLE_SZ) OUT :
		
function saturate(int x) --> int
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :
		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end

	int(size=7) count;

	int(size=QUANT_SZ) quant;

	int(size=2) round;

	get_qp: action QP:[ q ], DC:[ i ] ==> OUT:[ i ]
	do
		quant := q;
		round := (q & 1) ^ 1;
		count := 0;
	end

	done: action ==>
	guard
		count = 63
	end

	function abs(int x) --> int :
		if x < 0 then
			-x
		else
			x
		end
	end

	ac: action AC:[ i ] ==> OUT:[ saturate(o) ]
	var
		int(size=SAMPLE_SZ) v = quant * ((abs(i) << 1) + 1) - round,
		int(size=SAMPLE_SZ) o =
		if i = 0 then
			0
		else
			if i < 0 then
				-v
			else
				v
			end
		end
	do 
		count := count + 1;
	end

	schedule fsm start :
		start (get_qp) --> ac;
		ac (done) --> start;
		ac (ac) --> ac;
	end

	priority
		done > ac;
	end


end