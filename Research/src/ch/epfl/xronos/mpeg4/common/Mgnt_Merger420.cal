/*
 * Copyright (c) 2013, Ecole Polytechnique Fédérale de Lausanne
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Ecole Polytechnique Fédérale de Lausanne nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Endri Bezati

package ch.epfl.xronos.mpeg4.common;

import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Mgnt_Merger420 () 
	int(size=PIX_SZ) Y, 
	int(size=PIX_SZ) U, 
	int(size=PIX_SZ) V 
	==> 
	uint(size=8) YUV :

	int(size=PIX_SZ) out56[56];


	ReadAndSentY: action Y:[y] ==> YUV:[y]
	do
		Counter := Counter + 1;
	end

	StopReadAndSent: action ==>
	guard
		Counter = 8
	do
		Counter := 0;
	end
	
	ReadAndSaveY: action Y:[y] ==>
	do
		out56[Counter] := y;
		Counter := Counter + 1;
	end
	
	StopReadAndSave: action ==>
	guard
		Counter = 56
	do
		Counter := 0;
	end
	
	SentSaved: action ==> YUV:[out]
	var
		int(size=PIX_SZ) out
	do
		out := out56[8*stopLines + Counter];
		Counter := Counter + 1;
	end
	
	
	int stopLines:= 0;
	
	StopSavedAndReadAndSave: action ==>
	guard
		stopLines = 7
	do
		stopLines := 0;
	end
	
	nextLine : action ==>
	do
		stopLines := stopLines + 1;
	end
	

	int Counter :=0;

	stop : action ==>
	guard
		Counter = 64
	do
		Counter := 0;
	end

	// Select the U blocks 
	Read_U: action U:[ u ] ==> YUV:[ u ]
	do
		Counter := Counter + 1;
	end

	// Select the V blocks 
	Read_V: action V:[ v ]==> YUV:[ v ]
	do
		Counter := Counter + 1;
	end

	schedule fsm Y0 :
		//Y ( Read_Y ) --> U;
		
		Y0	(ReadAndSentY) --> Y0;
		Y0	(StopReadAndSent) --> Y1;
		
		Y1	(ReadAndSaveY)	--> Y1;
		Y1	(StopReadAndSave)	--> Y2;
		
		Y2	(ReadAndSentY) --> Y2;
		Y2	(StopReadAndSent) --> Y31;
		
		Y31	(SentSaved)	--> Y31;
		Y31	(StopReadAndSent)	--> Y32;
		
		Y32 (ReadAndSentY)	--> Y32;
		Y32	(StopReadAndSent)	--> Y33;
		
		Y33 (nextLine)	--> Y31;
		
		Y31 (StopSavedAndReadAndSave) --> Y00;
		
		Y00	(ReadAndSentY) --> Y00;
		Y00	(StopReadAndSent) --> Y11;
		
		Y11	(ReadAndSaveY)	--> Y11;
		Y11	(StopReadAndSave)	--> Y22;
		
		Y22	(ReadAndSentY) --> Y22;
		Y22	(StopReadAndSent) --> Y331;
		
		Y331	(SentSaved)	--> Y331;
		Y331	(StopReadAndSent)	--> Y332;
		
		
		Y332 (ReadAndSentY)	--> Y332;
		Y332	(StopReadAndSent)	--> Y333;
		
		Y333 (nextLine)	--> Y331;
		
		Y331 (StopSavedAndReadAndSave) --> U;
		
		
		U ( Read_U ) --> U;
		U ( stop ) --> V;
		V ( Read_V ) --> V;
		V ( stop ) --> Y0;
	end

	priority
		stop > Read_U;
		stop > Read_V;
		StopSavedAndReadAndSave > StopReadAndSent > SentSaved;
		StopReadAndSent > ReadAndSentY;
		StopReadAndSave > ReadAndSaveY;
	end

end