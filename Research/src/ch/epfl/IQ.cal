// MPEG4_algo_Inversequant.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Copyright (c) 2004-2005 Xilinx Inc.
// All Rights Reserved
//
// Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
//              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
//              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
//              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
// MPEG-4 inverse quantization function
//
// Author: Ghislain Roquier(ghislain.roquier@epfl.ch)
// Rewrote the actor at block level
// The actor has now the SDF property
package ch.epfl;

import std.util.Math.*;

actor IQ () int(size=SAMPLE_SZ) QF, int(size=QUANT_SZ) QP ==> int(size=SAMPLE_SZ) F :

// Port size declaration
	int SAMPLE_SZ = 13;

	int QUANT_SZ = 6;

	action QP:[ qp ], QF:[ qf ] repeat 64 ==> F:[ f ] repeat 64
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :
		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end


	action QP:[ q ], QF:[ qf ] repeat 64 ==> F:[ f ] repeat 64
	var
		int(size=QUANT_SZ) quant = q,
		int(size=2) round = (q & 1) ^ 1,
		List(type: int(size=SAMPLE_SZ), size=64) f
	do
		f[0] := qf[0];
		foreach int i in 1 .. 63 do
			f[i] := (qp * ((abs(qf[i]) << 1) + 1)) - round;
			if qf[i] = 0 then 
				f[i] := 0;
			else
				if qf[i] < 0 then
					f[i] := clip_i32(-f[i], -2048, 2047);
				else
					f[i] := clip_i32(f[i], -2048, 2047);
				end
			end
		end 
	end
end