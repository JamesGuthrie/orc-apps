package ch.epfl.common;

import std.video.Display.*; 

actor DisplayPrinter(bool verbose)
	uint(size=8) Byte,
	int(size=32) WIDTH,
	int(size=32) HEIGHT,
	int(size=32) SIZE
		==>
		:

	uint(size=8)  pictureSizeInMb;
	uint(size=8)  nbBlockGot;
	uint(size=32) frameNum;

	initialize ==> 
	do
		frameNum := 0;
	end
	
	getPictureSize.parallel: action
		WIDTH  :[WidthValue],
		HEIGHT :[HeightValue]
			==>
	do
		setSize(WidthValue, HeightValue);
	end
	
	getPictureSize.serial: action
		SIZE  :[WidthValue, HeightValue]
			==>
	do
		setSize(WidthValue, HeightValue);
	end

	getPixValue.launch.Luma: action Byte :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	do
		if verbose then
			println("Block " + nbBlockGot);
		end
		nbBlockGot := nbBlockGot + 1;
	end

	getPixValue.launch.Chroma: action Byte :[Bytes] repeat 64 ==>
	do
		 
	end

	checksumPicture: action ==>
	guard
		nbBlockGot >= pictureSizeInMb
	do
		println("FRAME: " + frameNum);
		frameNum := frameNum + 1;
	end
	
	procedure setSize(uint(size=32) WidthValue, uint(size=32) HeightValue) begin
		pictureSizeInMb := WidthValue * HeightValue;
		nbBlockGot      := 0;
	end
	 
	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize.serial     )--> GetLumaBlock;
		GetPictureSize  (getPictureSize.parallel   )--> GetLumaBlock;
		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
		GetLumaBlock    (checksumPicture           )--> GetPictureSize;
	end

	priority
		getPixValue > checksumPicture;
	end

end