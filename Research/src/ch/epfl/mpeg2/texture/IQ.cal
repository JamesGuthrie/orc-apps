/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Cesar Laurent <cesar.laurent@epfl.ch>
package ch.epfl.mpeg2.texture;

import std.util.Math.*;
import ch.epfl.mpeg2.parser.MPEG2_Tables.quantiser_matrix_default;


actor IQ()
	int(size=13) QF,
	uint(size=1) MB_INTRA,
	uint(size=8) INTRA_QUANTISER_MATRIX,
	uint(size=8) NON_INTRA_QUANTISER_MATRIX,
	uint(size=8) QUANTISER_SCALE
		==>
			int(size=13) F,
			bool SIGNED:
			
	uint(size=8)	intra_quantiser_matrix[64] := [quantiser_matrix_default[1][i]:for int i in 0 .. 63];
	uint(size=8)	non_intra_quantiser_matrix[64]:= [quantiser_matrix_default[0][i]:for int i in 0 .. 63];
	
	function sign(int x) --> int : 
		if x = 0 then 0 else if x < 0 then -1 else 1 end end
	end
	
	action INTRA_QUANTISER_MATRIX: [intra_quantiser_matrix] repeat 64 ==>
	end
		
	action NON_INTRA_QUANTISER_MATRIX: [non_intra_quantiser_matrix] repeat 64 ==>
	end	
			
	action QF: [qf] repeat 64, MB_INTRA: [macroblock_type],  QUANTISER_SCALE: [quantiser_scale] ==> F: [f] repeat 64,SIGNED:[if macroblock_type = 1 then false else  true end ]
	var
		List(type: int(size=13), size=64) f,
		int sum
	do
		f[0] := clip_i32(qf[0], -2048, 2047);
		sum := f[0];
		if macroblock_type = 1 then
			foreach int i in 1 .. 63 do
				f[i] := (qf[i]*intra_quantiser_matrix[i]*quantiser_scale*2)/32;
				f[i] := clip_i32(f[i], -2048, 2047);
				sum := sum + f[i];
			end
		else
			foreach int i in 1 .. 63 do
				f[i] := (((2*qf[i]) + sign(qf[i]))*non_intra_quantiser_matrix[i]*quantiser_scale)/32;
				f[i] := clip_i32(f[i], -2048, 2047);
				sum := sum + f[i];
			end
		end
		
		// MISMATCH CONTROL
		if (sum & 1) = 0 then
			if (f[63] & 1) != 0 then
				f[63] := f[63] - 1;
			else
				f[63] := f[63] + 1;
			end
		end
		
	end
	
end
	
	
	