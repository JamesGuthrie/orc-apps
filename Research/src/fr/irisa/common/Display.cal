/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Herve Yvique <herve.yviquel@irisa.fr>
package fr.irisa.common;

import fr.irisa.common.Simulation.*;
import std.video.Display.*;
import std.stdio.Source.*;

actor Display()
	uint(size=8) B,
	int(size=16) WIDTH,
	int(size=16) HEIGHT
		==>
		:

	uint(size=8) frameSum;
	uint(size=8) pictureSizeInMb;
	uint(size=8) nbBlockGot;

	getPictureSize: action
		WIDTH  :[WidthValue],
		HEIGHT :[HeightValue]
			==>
	do
		pictureSizeInMb := WidthValue * HeightValue;
		nbBlockGot      := 0;
		frameSum        := 0;
	end

	getPixValue.launch.Luma: action B :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	do
		foreach int i in 0 .. 255
		do
			frameSum := frameSum + Bytes[i];
		end
		nbBlockGot := nbBlockGot + 1;
	end

	getPixValue.launch.Chroma: action B :[Bytes] repeat 64 ==>
	do
		foreach int i in 0 .. 63
		do
			frameSum := frameSum + Bytes[i];
		end
	end

	checksumPicture: action ==>
	guard
		nbBlockGot >= pictureSizeInMb
	var
		uint checksum = frameSum & 255
	do
		display_checksum(checksum);
		print_cyclecount();
	end
	
	displayClose: action ==>
	guard
		source_isMaxLoopsReached()
	do
		source_exit(0);
	end
	

	schedule fsm GetPictureSize:
		GetPictureSize  (getPictureSize            )--> GetLumaBlock;
		GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
		GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
		
		GetLumaBlock    (checksumPicture            )--> GetPictureSize;
		GetLumaBlock    (displayClose              )--> GetPictureSize;
	end

	priority
		getPixValue > checksumPicture;
		checksumPicture > displayClose;
	end

end