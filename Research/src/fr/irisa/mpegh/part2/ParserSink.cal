package fr.irisa.mpegh.part2;

import fr.irisa.common.Simulation.*;

actor ParserSink () 
				uint(size=16) CUInfo,
				uint(size=6)  IntraPredMode,
				uint(size=4)  PartMode,
				uint(size=16) PictSize,
				uint(size=16) Poc,
				uint(size=2)  SliceType,
				bool          SplitTransform,
				uint(size=16) SliceAddr,
				 int(size=16) Coeff,
				 bool 		  StrongIntraSmoothing,
				uint(size=14) DispCoord,
				uint(size=9)  PicSizeInMb,
				uint(size=5)  NumRefIdxLXAct,
				uint(size=4)  RefPicListModif,
				 int(size=16) RefPoc,
				uint(size=3)  ColocInfo,
				 int(size=16) MvPredSyntaxElem
				==>
:

	int count := 0;

	action CUInfo:[ b ] ==>
	do
		throw_away(b);
	end
	action IntraPredMode:[ b ] repeat 64 ==>
	do
		foreach int i in 0 .. 63 do
			throw_away(b[i]);
		end
	end
 	action PartMode:[ b ] repeat 64 ==>
	do
		foreach int i in 0 .. 63 do
			throw_away(b[i]);
		end
	end
 	action PictSize:[ b ] ==>
 	do
		throw_away(b);
	end
 	action Poc:[ b ] ==>
 	do
 		throw_away(b);
 		println("POC = " + b);
 		print_cyclecount();
	end
 	action SliceType:[ b ] ==>
 	do
		throw_away(b);
	end
 	action SplitTransform:[ b ] repeat 64 ==>
 	do
 		foreach int i in 0 .. 63 do
			if b[i] then  
				throw_away(0);
			end
		end
	end
 	action SliceAddr:[ b ] ==>
 	do
		throw_away(b);
	end
	action Coeff:[ b ] repeat 64 * 64 ==>
	do
		foreach int i in 0 .. 64 * 64 - 1 do
			throw_away(b[i]);
		end
		count := count + 1;
		println("Block = " + count);
		print_cyclecount();
	end
	action StrongIntraSmoothing:[ b ] ==>
	do
		if(b) then
			throw_away(0);
		end
	end
	action DispCoord:[ b ] ==>
	do
		throw_away(b);
	end
	action PicSizeInMb:[ b ] ==>
	do
		println("PicSizeInMb = " + b);
	end
	action NumRefIdxLXAct:[ b ] repeat 2 ==>
	do
		throw_away(b[0]);
		throw_away(b[1]);
	end
	action RefPicListModif:[ b ] repeat 2 ==>
	do
		throw_away(b[0]);
		throw_away(b[1]);
	end
	action RefPoc:[ b ] ==>
	do
		throw_away(b);
	end
	action ColocInfo:[ b ] ==>
	do
		throw_away(b);
	end
	action MvPredSyntaxElem:[ b ] ==>
	do
		throw_away(b);
	end
end
