package fr.irisa.mpeg4.part2.sp.texture;

actor Algo_IDCT2D_ISOIEC_23002_1()
	int(size=13) IN, bool SIGNED ==> int(size=9) OUT :

	int A = 1024;

	int B = 1138;

	int C = 1730;

	int D = 1609;

	int E = 1264;

	int F = 1922;

	int G = 1788;

	int H = 2923;

	int I = 2718;

	int J = 2528;

	List(type: int, size=64) scale = [
		A, B, C, D, A, D, C, B,
		B, E, F, G, B, G, F, E,
		C, F, H, I, C, I, H, F,
		D, G, I, J, D, J, I, G,
		A, B, C, D, A, D, C, B,
		D, G, I, J, D, J, I, G,
		C, F, H, I, C, I, H, F,
		B, E, F, G, B, G, F, E
	];

	action IN:[ x ] repeat 64, SIGNED:[ s ] 
		==> 
		OUT:[ // downshifting & clipping
			if s then
				[ clip((block1[n] >> 13), -255) : for int n in 0 .. 63 ]
			else
				[ clip((block1[n] >>13), 0) : for int n in 0 .. 63 ]
			end 
			] repeat 64
	var
		// multiplier-based scaling
		int block1[64] := [ scale[n] * x[n] : for int n in 0 .. 63 ],
		int block2[64]
	do
		block1[0] := block1[0] + (1 << 12);

		// scaled 1D IDCT for rows and columns
		idct1d(block1, block2);
		idct1d(block2, block1);
	end

	procedure idct1d(int X[64], int Y[64])
	var
		int x0,
		int x1,
		int x2,
		int x3,
		int x4,
		int x5,
		int x6,
		int x7,
		int xa,
		int xb
	begin
		foreach int i in 0 .. 7 do
			x1 := X[8 * i + 1];
			x3 := X[8 * i + 3];
			x5 := X[8 * i + 5];
			x7 := X[8 * i + 7];
		
			xa := x1 + x7;
			xb := x1 - x7;
			
			x1 := xa + x3;
			x3 := xa - x3;
			x7 := xb + x5;
			x5 := xb - x5;
			
			xa := pmul_1_2(x3);
			x3 := pmul_1_1(x3);
			xb := pmul_1_2(x5);
			x5 := pmul_1_1(x5);
			x3 := x3 - xb;
			x5 := x5 + xa;
			
			xa := pmul_2_2(x1);
			x1 := pmul_2_1(x1);
			xb := pmul_2_2(x7);
			x7 := pmul_2_1(x7);
			x1 := x1 + xb;
			x7 := x7 - xa;
			
			x0 := X[8 * i + 0];
			x2 := X[8 * i + 2];
			x4 := X[8 * i + 4];
			x6 := X[8 * i + 6];
			
			xa := pmul_3_2(x2);
			x2 := pmul_3_1(x2);
			xb := pmul_3_2(x6);
			x6 := pmul_3_1(x6);
			x2 := x2 - xb;
			x6 := x6 + xa;
			
			xa := x0 + x4;
			xb := x0 - x4;
			
			x0 := xa + x6;
			x6 := xa - x6;
			x4 := xb + x2;
			x2 := xb - x2;
			
			Y[i + 8 * 0] := x0 + x1;
			Y[i + 8 * 1] := x4 + x5;
			Y[i + 8 * 2] := x2 + x3;
			Y[i + 8 * 3] := x6 + x7;
			Y[i + 8 * 4] := x6 - x7;
			Y[i + 8 * 5] := x2 - x3;
			Y[i + 8 * 6] := x4 - x5;
			Y[i + 8 * 7] := x0 - x1;
		end
	end

	function pmul_1_1(int X) --> int
	var
		int Temp1 = (X >> 3) - (X >> 7)
	:
		X - Temp1
	end

	function pmul_1_2(int X) --> int
	var
		int Temp1 = (X >> 3) - (X >> 7),
		int Temp2 = Temp1 - (X >> 11)
	:
		Temp1 + (Temp2 >> 1)
	end

	function pmul_2_1(int X) --> int
	var
		int Temp1 = (X >> 9) - X
	:
		(Temp1 >> 2) - Temp1
	end

	function pmul_2_2(int X) --> int :
		(X >> 1)
	end

	function pmul_3_1(int X) --> int
	var
		int Temp1 = X + (X >> 5),
		int Temp2 = (Temp1 >> 2)
	:
		Temp2 + (X >> 4)
	end

	function pmul_3_2(int X) --> int
	var
		int Temp1 = X + (X >> 5),
		int Temp2 = (Temp1 >> 2)
	:
		Temp1 - Temp2
	end

	function clip(int x, int lim) --> int :
		if x < lim then
			lim
		else
			if x > 255 then
				255
			else
				x
			end
		end
	end

end