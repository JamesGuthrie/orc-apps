package fr.irisa.compa.gecos;
import  std.stdio.Source.*;
import fr.irisa.common.Simulation.*;


actor matMultiplication_scatter_manual()  	  ==>
		int(size=32) Port_tmpBuffer_inputB_init_part_0 	,	int(size=32) Port_tmpBuffer_inputA_init_part_0 	,	
		int(size=32) Port_tmpBuffer_inputB_init_part_1 	,	int(size=32) Port_tmpBuffer_inputA_init_part_1 	 :
				
	int state := 1;
	int TS = 64;//16;
	int N = 128;//128;//1024;
	int inputA[N*N];
	int inputB[N*N];
	int c1_0;
	int c1_1;
	int c2_0;
	int c2_1;
	int c3_0;
	int c3_1;
	int done_signal_0;
	int done_signal_1;
	
	collect: action  		 ==>
	guard
		state = 1
	var
		int val
	do
		state := 2;
		
		val := 0;
		foreach int i in 0 .. N -1 do
			foreach int j in 0 .. N-1 do
				inputA[i*N+j] := val;
				inputB[i*N+j] := val;
			end
			if ( val < 9 ) then
				val := val + 1;
			else
				val := 0;
			end
		end
		
		c1_0 := 0;
		c2_0 := 0;
		c1_1 := TS;
		c2_0 := 0;
		c3_0 := 0;
		c3_1 := 0;
		done_signal_0 := 0;
		done_signal_1 := 0;
	end
	
	action   ==>
				Port_tmpBuffer_inputB_init_part_0:[tmpBuffer_inputB_init_part_0] repeat TS*TS,
				Port_tmpBuffer_inputA_init_part_0:[tmpBuffer_inputA_init_part_0] repeat TS*TS	
	guard
		(state = 2) && (done_signal_0 = 0) 
	var
		int(size=32)  tmpBuffer_inputB_init_part_0[TS*TS],
		int(size=32)  tmpBuffer_inputA_init_part_0[TS*TS],
		int index
	do 
	
	//	println("Value of c1 and c2 @ 0" +  c1_0 + "  " + c2_0);
		
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				tmpBuffer_inputA_init_part_0[index] := inputA[(c1_0+i)*N+c3_0+j];
				index := index + 1;
			end
		end
		
	//	foreach int i in 0 .. TS*TS-1 do
	//		print(tmpBuffer_inputA_init_part_0[i] + "  ");
	//	end
	//	println();
		
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				tmpBuffer_inputB_init_part_0[index] := inputB[(c3_0+i)*N+c2_0+j];
				index := index + 1;
			end
		end
				
//		foreach int i in 0 .. TS*TS-1 do
	//		print(tmpBuffer_inputB_init_part_0[i] + "  ");
	//	end
	//	println();
		
		if ( c3_0 + TS <= (N - TS) ) then
			c3_0 := c3_0 + TS;
		else if ( (c2_0 + TS) <= (N - TS) ) then 
			c2_0 := c2_0 + TS;
			c3_0 := 0;
		else if ( (c1_0 + 2*TS) <= (N - TS) ) then
			c1_0 := c1_0 + 2*TS;
			c2_0 := 0;
			c3_0 := 0;
		else
			done_signal_0 := 1;
		end
		end
		end
		
	end //compute Action
	
	action   ==>
				Port_tmpBuffer_inputB_init_part_1:[tmpBuffer_inputB_init_part_1] repeat TS*TS	,	
				Port_tmpBuffer_inputA_init_part_1:[tmpBuffer_inputA_init_part_1] repeat TS*TS	
	guard
		(state = 2) && (done_signal_1 = 0) 
	var
		 
		int(size=32)  tmpBuffer_inputB_init_part_1[TS*TS],
		int(size=32)  tmpBuffer_inputA_init_part_1[TS*TS],
		int index
	do 
	
		index := 0;
	//	println("Value of c1 and c2 @ 1" +  c1_1 + "  " + c2_1);
				
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				tmpBuffer_inputA_init_part_1[index] := inputA[(c1_1+i)*N+c3_1+j];
				index := index + 1;
			end
		end
		
		
		
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				tmpBuffer_inputB_init_part_1[index] := inputB[(c3_1+i)*N+c2_1+j];
				index := index + 1;
			end
		end
				
		if ( c3_1 + TS <= (N - TS) ) then
			c3_1 := c3_1 + TS;
		else if ( (c2_1 + TS) <= ( N - TS) ) then 
			c2_1 := c2_1 + TS;
			c3_1 := 0;
		else if ( (c1_1 + 2*TS) <= ( N - TS) ) then
			c1_1 := c1_1 + 2*TS;
			c2_1 := 0;
			c3_1 := 0;
		else
			done_signal_1 := 1;
		end
		end
		end
	end //compute Action
	
	action ==>
	guard
		done_signal_0 = 1  && done_signal_1 = 1 
	do
		state := 1;
		done_signal_0 := 0;
		done_signal_1 := 0;
	end
	
end //Actor
