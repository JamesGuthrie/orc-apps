package fr.irisa.compa.gecos;
	actor matMultiplication_part_0()  	int(size=32) Port_tmpBuffer_inputB_init_part_0 	,	int(size=32) Port_tmpBuffer_inputA_init_part_0 	  ==>
		  	int(size=32) Port_tmpBuffer_output_part_0 	 :
					
		int state := 0;
		int inputA[16384];
		int inputB[16384];
		int output[16384];
		int l0_c1;
		int l0_c2;
		int l0_c3;
		int l0_c4;
		int l0_c5;
		
		function floord (int a, int b) --> int :
			a/b
		end
				
		function ceild (int a, int b) --> int :
			a/b
		end
		
		function max (int a, int b) --> int :
			if ( a > b ) then
				a
			else
				b
			end
		end
				
		function min (int a, int b) --> int :
			if (  a <  b ) then
				a
			else
				b
			end
		end
								
		//FSM Initializaton
		initAction: action ==>  						
		guard
			state = 0
		do
			if (true) then
				l0_c1 :=  0 ;
				l0_c2 :=  0 ;
				l0_c3 :=  0 ;
				l0_c4 :=  0 ;
				l0_c5 :=  0 ;
				state := 1;
			end
		end
	compute: action  	Port_tmpBuffer_inputB_init_part_0:[tmpBuffer_inputB_init_part_0] repeat 257	,	Port_tmpBuffer_inputA_init_part_0:[tmpBuffer_inputA_init_part_0] repeat 305	 ==> 
	guard
		state = 1 
	var
		int l5_c2,
		int l5_c3,
		int l5_c4,
		int s_3,
		int l_0,
		int l_1,
		int l_2,
		int l_3,
		int l_4,
		int l_5,
		int l_6,
		int l_7,
		int l_8,
		int l_9,
		int i,
		int j,
		int k,
		int tmp_outArray,
		int tmp_inputA,
		int tmp_inputB,
		int tmp_inputA0,
		int tmp_inputB0,
		int buffer_index_inputB_init_part_0,
		int buffer_index_inputA_init_part_0,
		int N,
		int M, 
		int l0_c1_next,
		int l0_c2_next,
		int l0_c3_next,
		int l0_c4_next,
		int l0_c5_next
	do 
		//FSM Commands
		if (((l0_c5) = (0))) then
					buffer_index_inputB_init_part_0 := 0;
					buffer_index_inputA_init_part_0 := 0;
					if (((l0_c2) = (0))) then 
									l5_c2 := 0;
									while (l5_c2 <= 16*l0_c4-1) do
									 	if (((l5_c2) <= (15))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := 16*l0_c4;
					while (l5_c2 <= min(4096*l0_c2-1,16*l0_c4+15)) do
					 	inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
						buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
					l5_c2 := l5_c2 + 1;
					end
					if (((l0_c2) = (0))) then 
									l5_c2 := 16*l0_c4;
									while (l5_c2 <= 16*l0_c4+15) do
									 	if (((l0_c4) = (0))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
										inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
										buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
									l5_c2 := l5_c2 + 1;
									end
								end 
					if (((l0_c2) = (0))) then 
									l5_c2 := 16*l0_c4+16;
									while (l5_c2 <= 16*l0_c4+127) do
									 	if (((l5_c2) >= (128)) && ((l5_c2) <= (143))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := 16*l0_c4+128;
					while (l5_c2 <= min(4096*l0_c2-1,16*l0_c4+1935)) do
					 	if ((((l5_c2+112*l0_c4) mod 128) <= (15))) then 
										inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
										buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((l0_c2) = (0))) then 
									l5_c2 := 16*l0_c4+128;
									while (l5_c2 <= 1935) do
									 	if ((((l5_c2) mod 128) <= (15))) then 
														if ((((l5_c2+127) mod 128) <= (126))) then 
																		inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
																		buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
																	end 
														if ((((l5_c2) mod 128) = (0))) then 
																		inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
																		buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
																	end 
													end 
										if ((((l5_c2+112*l0_c4) mod 128) <= (15))) then 
														inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
														buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(4096*l0_c2,16*l0_c4+1936);
					while (l5_c2 <= 4096*l0_c2+1935) do
					 	if ((((l5_c2) mod 128) <= (15))) then 
										if ((((l5_c2+127) mod 128) <= (126))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
										if ((((l5_c2) mod 128) = (0))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((l0_c2) = (0))) then 
									l5_c2 := 1936;
									while (l5_c2 <= 16*l0_c4+1935) do
									 	if (((l5_c2) >= (16*l0_c4+1920))) then 
														inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
														buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := 32*l0_c2;
					while (l5_c2 <= 32*l0_c2+15) do
					 	l5_c3 := 16*l0_c4;
						while (l5_c3 <= 16*l0_c4+15) do
						 	tmp_inputB0 := inputB[l5_c3];
							tmp_inputA0 := inputA[128*l5_c2];
							output[128*l5_c2+l5_c3] := (tmp_inputA0 * tmp_inputB0);
							l5_c4 := 1;
							while (l5_c4 <= 15) do
							 	tmp_outArray := output[128*l5_c2+l5_c3];
								tmp_inputA := inputA[128*l5_c2+l5_c4];
								tmp_inputB := inputB[l5_c3+128*l5_c4];
								output[128*l5_c2+l5_c3] := (tmp_outArray + tmp_inputA * tmp_inputB);
							l5_c4 := l5_c4 + 1;
							end
						l5_c3 := l5_c3 + 1;
						end
					l5_c2 := l5_c2 + 1;
					end
		else if (((l0_c5-1) >= (0))) then
					buffer_index_inputB_init_part_0 := 0;
					buffer_index_inputA_init_part_0 := 0;
					l5_c2 := 4096*l0_c2+16*l0_c5;
					while (l5_c2 <= min(4096*l0_c2+16*l0_c5+1935,16*l0_c4+2048*l0_c5-1)) do
					 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5+15) * 1))) then 
										inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
										buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := 16*l0_c4+2048*l0_c5;
					while (l5_c2 <= min(4096*l0_c2+16*l0_c5-1,16*l0_c4+2048*l0_c5+1935)) do
					 	if ((((l5_c2+112*l0_c4) mod 128) <= (15))) then 
										inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
										buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((2*l0_c2) = (l0_c5))) then 
									l5_c2 := max(4128*l0_c2,4096*l0_c2+16*l0_c4);
									while (l5_c2 <= min(4128*l0_c2+1935,4096*l0_c2+16*l0_c4+1935)) do
									 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2+15) * 1))) then 
														inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
														buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
													end 
										if ((((l5_c2+112*l0_c4) mod 128) <= (15))) then 
														inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
														buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(4096*l0_c2+16*l0_c5,16*l0_c4+2048*l0_c5+1936);
					while (l5_c2 <= 4096*l0_c2+16*l0_c5+1935) do
					 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5+15) * 1))) then 
										inputA[l5_c2] := tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_part_0];
										buffer_index_inputA_init_part_0 := buffer_index_inputA_init_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := max(16*l0_c4+2048*l0_c5,4096*l0_c2+16*l0_c5+1936);
					while (l5_c2 <= 16*l0_c4+2048*l0_c5+1935) do
					 	if ((((l5_c2+112*l0_c4) mod 128) <= (15))) then 
										inputB[l5_c2] := tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_part_0];
										buffer_index_inputB_init_part_0 := buffer_index_inputB_init_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := 32*l0_c2;
					while (l5_c2 <= 32*l0_c2+15) do
					 	l5_c3 := 16*l0_c4;
						while (l5_c3 <= 16*l0_c4+15) do
						 	l5_c4 := 16*l0_c5;
							while (l5_c4 <= 16*l0_c5+15) do
							 	tmp_outArray := output[128*l5_c2+l5_c3];
								tmp_inputA := inputA[128*l5_c2+l5_c4];
								tmp_inputB := inputB[l5_c3+128*l5_c4];
								output[128*l5_c2+l5_c3] := (tmp_outArray + tmp_inputA * tmp_inputB);
							l5_c4 := l5_c4 + 1;
							end
						l5_c3 := l5_c3 + 1;
						end
					l5_c2 := l5_c2 + 1;
					end
		end
		end
		
		//FSM Transitions
		if (((-l0_c5+6) >= (0))) then
			l0_c1_next :=  0 ;
			l0_c2_next :=  l0_c2 ;
			l0_c3_next :=  0 ;
			l0_c4_next :=  l0_c4 ;
			l0_c5_next :=  l0_c5+1 ;
		else if (((-l0_c4+6) >= (0))) then
			l0_c1_next :=  0 ;
			l0_c2_next :=  l0_c2 ;
			l0_c3_next :=  0 ;
			l0_c4_next :=  l0_c4+1 ;
			l0_c5_next :=  0 ;
		else if (((-l0_c2+2) >= (0))) then
			l0_c1_next :=  0 ;
			l0_c2_next :=  l0_c2+1 ;
			l0_c3_next :=  0 ;
			l0_c4_next :=  0 ;
			l0_c5_next :=  0 ;
		else 
			state := 2;
		end
		end
		end
		
		l0_c1 := l0_c1_next;
		l0_c2 := l0_c2_next;
		l0_c3 := l0_c3_next;
		l0_c4 := l0_c4_next;
		l0_c5 := l0_c5_next;
	end //compute Action
	
	writeOut: action ==> 
			Port_tmpBuffer_output_part_0:[tmpBuffer_output_part_0] repeat 8192	
	guard
		state = 2
	var
		int(size=32)  tmpBuffer_output_part_0[8192],
		int l0_c1_next,
		int l0_c2_next,
		int l0_c3_next,
		int l0_c4_next,
		int l0_c5_next,
		int i_0,
		int l_0,
		int l_1,
		int l_2,
		int l_3,
		int l_4,
		int l_5,
		int l_6,
		int l_7,
		int l_8,
		int l_9,
		int output_buffer_index,
		int done
	do 
		i_0 := 0;
		l_0 := 0;
		l_1 := 0;
		l_2 := 0;
		l_3 := 0;
		l_4 := 0;
		l_5 := 0;
		l_6 := 0;
		l_7 := 0;
		l_8 := 0;
		l_9 := 0;
		output_buffer_index := 0;
		if (true) then
			l0_c1 :=  1 ;
			l0_c2 :=  0 ;
			l0_c3 :=  0 ;
			l0_c4 :=  0 ;
			l0_c5 :=  0 ;
			done := 0;
		end
		while ( done != 1 ) do
			//FSM Commands
					tmpBuffer_output_part_0[output_buffer_index] := output[l0_c2];
					output_buffer_index := output_buffer_index + 1;
			
			//FSM Transitions
			if ((((-l0_c2+2046) * 1 + (floord(l0_c2, 4096)) * 4096) >= (0)) && (((l0_c2) * 1 + (floord(l0_c2, 4096)) * -4096) >= (0))) then
				l0_c1_next :=  1 ;
				l0_c2_next :=  l0_c2+1 ;
				l0_c3_next :=  0 ;
				l0_c4_next :=  0 ;
				l0_c5_next :=  0 ;
			else if ((((-l0_c2+2047) * 1 + (floord(l0_c2-2047, 4096)) * 4096) = (0)) && ((-l0_c2+10239) >= (0))) then
				l0_c1_next :=  1 ;
				l0_c2_next :=  l0_c2+2049 ;
				l0_c3_next :=  0 ;
				l0_c4_next :=  0 ;
				l0_c5_next :=  0 ;
			else 
				done := 1;
			end
			end
			
			l0_c1 := l0_c1_next;
			l0_c2 := l0_c2_next;
			l0_c3 := l0_c3_next;
			l0_c4 := l0_c4_next;
			l0_c5 := l0_c5_next;
		end
		state := 0;
	end //writeOutAction
end //Actor
