package fr.irisa.compa.gecos;
	actor matMultiplication_gather()  	int(size=32) Port_tmpBuffer_output_part_0 	,	int(size=32) Port_tmpBuffer_output_part_1 	  ==>
			int(size=32) output 	   :
					
		int state := 0;
		int inputA[16384];
		int inputB[16384];
		int output[16384];
		int l0_c1;
		int l0_c2;
		int l0_c3;
		int l0_c4;
		int l0_c5;
		
		function floord (int a, int b) --> int :
			a/b
		end
				
		function ceild (int a, int b) --> int :
			a/b
		end
		
		function max (int a, int b) --> int :
			if ( a > b ) then
				a
			else
				b
			end
		end
				
		function min (int a, int b) --> int :
			if (  a <  b ) then
				a
			else
				b
			end
		end
								
		//FSM Initializaton
		initAction: action ==>  						
		guard
			state = 0
		do
			if (true) then
				l0_c1 :=  1 ;
				l0_c2 :=  0 ;
				l0_c3 :=  0 ;
				l0_c4 :=  0 ;
				l0_c5 :=  0 ;
				state := 1;
			end
		end
	gather: action  	Port_tmpBuffer_output_part_0:[tmpBuffer_output_part_0] repeat 8192	,	Port_tmpBuffer_output_part_1:[tmpBuffer_output_part_1] repeat 8192	 ==>
				output:[tmpBuffer_output] repeat 16384	
	guard
		state = 1 
	var
		int done,
		int i_0,
		int l_0,
		int l_1,
		int l_2,
		int l_3,
		int l_4,
		int l_5,
		int l_6,
		int l_7,
		int l_8,
		int l_9,
		int output_buffer_index,
		int output_buffer_index0,
		int N,
		int M, 
		int(size=32)  tmpBuffer_output[16384],
		int l0_c1_next,
		int l0_c2_next,
		int l0_c3_next,
		int l0_c4_next,
		int l0_c5_next
	do 
		output_buffer_index := 0;
		output_buffer_index0 := 0;
		done := 0;
		while ( done != 1) do
			//FSM Commands
			if (((l0_c2-16256) >= (0)) && ((-l0_c2+16383) >= (0))) then
					tmpBuffer_output[l0_c2] := tmpBuffer_output_part_1[output_buffer_index0];
					output_buffer_index0 := output_buffer_index0 + 1;
			else if ((((floord(l0_c2+2048, 4096)) * -4096 + (l0_c2) * 1) >= (0)) && (((floord(l0_c2+2048, 4096)) * 4096 + (2047) * 1 + (-l0_c2) * 1) >= (0))) then
					tmpBuffer_output[l0_c2] := tmpBuffer_output_part_0[output_buffer_index];
					output_buffer_index := output_buffer_index + 1;
			end
			end
			
			//FSM Transitions
			if (((l0_c2-14335) = (0))) then
				l0_c1_next :=  1 ;
				l0_c2_next :=  16256 ;
				l0_c3_next :=  0 ;
				l0_c4_next :=  0 ;
				l0_c5_next :=  0 ;
			else if ((((-l0_c2+2047) * 1 + (floord(l0_c2-2047, 4096)) * 4096) = (0)) && ((-l0_c2+10239) >= (0))) then
				l0_c1_next :=  1 ;
				l0_c2_next :=  l0_c2+2049 ;
				l0_c3_next :=  0 ;
				l0_c4_next :=  0 ;
				l0_c5_next :=  0 ;
			else if (((-l0_c2+16382) >= (0)) && ((l0_c2-16256) >= (0)) || (((-l0_c2+2046) * 1 + (floord(l0_c2, 4096)) * 4096) >= (0)) && (((l0_c2) * 1 + (floord(l0_c2, 4096)) * -4096) >= (0))) then
				l0_c1_next :=  1 ;
				l0_c2_next :=  l0_c2+1 ;
				l0_c3_next :=  0 ;
				l0_c4_next :=  0 ;
				l0_c5_next :=  0 ;
			else 
				done := 1;
			end
			end
			end
			
			l0_c1 := l0_c1_next;
			l0_c2 := l0_c2_next;
			l0_c3 := l0_c3_next;
			l0_c4 := l0_c4_next;
			l0_c5 := l0_c5_next;
		end
		state := 0;
	end //compute Action
	
end //Actor
