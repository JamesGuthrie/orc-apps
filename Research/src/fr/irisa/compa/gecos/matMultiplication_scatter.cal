package fr.irisa.compa.gecos;
actor matMultiplication_scatter()  	int(size=32) inputA 	,	int(size=32) inputB 	  ==>
		int(size=32) Port_tmpBuffer_inputB_init_part_0 	,	int(size=32) Port_tmpBuffer_inputA_init_part_0 	,	int(size=32) Port_tmpBuffer_inputB_init_part_1 	,	int(size=32) Port_tmpBuffer_inputA_init_part_1 	 :
				
	int state := 0;
	int inputA[16384];
	int inputB[16384];
	int output[16384];
	int l0_c1_0;
	int l0_c2_0;
	int l0_c3_0;
	int l0_c4_0;
	int l0_c5_0;
	int l0_c1_1;
	int l0_c2_1;
	int l0_c3_1;
	int l0_c4_1;
	int l0_c5_1;
	int done_signal_0;
	int done_signal_1;
	
	function floord (int a, int b) --> int :
		a/b
	end
			
	function ceild (int a, int b) --> int :
		a/b
	end
	
	function max (int a, int b) --> int :
		if ( a > b ) then
			a
		else
			b
		end
	end
			
	function min (int a, int b) --> int :
		if (  a <  b ) then
			a
		else
			b
		end
	end
							
	//FSM Initializaton
	initAction: action ==>  						
	guard
		state = 0
	do
		if (true) then
			l0_c1_0 :=  0 ;
			l0_c2_0 :=  0 ;
			l0_c3_0 :=  0 ;
			l0_c4_0 :=  0 ;
			l0_c5_0 :=  0 ;
			done_signal_0 := 0;
		end
		if (true) then
			l0_c1_1 :=  0 ;
			l0_c2_1 :=  0 ;
			l0_c3_1 :=  1 ;
			l0_c4_1 :=  0 ;
			l0_c5_1 :=  0 ;
			done_signal_1 := 0;
		end
		state := 1;
	end

	collect: action  	inputA:[inputA_initBuffer] repeat 16384	,	inputB:[inputB_initBuffer] repeat 16384	 ==>
	guard
		state = 1
	do
		state := 2;
		inputA := inputA_initBuffer;
		inputB := inputB_initBuffer;
	end
	
	action   ==>
				Port_tmpBuffer_inputB_init_part_0:[tmpBuffer_inputB_init_part_0] repeat 257	,	Port_tmpBuffer_inputA_init_part_0:[tmpBuffer_inputA_init_part_0] repeat 305	
	guard
		(state = 2) && (done_signal_0 = 0) 
	var
		int l5_c2,
		int i_0,
		int l_0,
		int l_1,
		int l_2,
		int l_3,
		int l_4,
		int l_5,
		int l_6,
		int l_7,
		int l_8,
		int l_9,
		int buffer_index_inputB_init_scatter_part_0,
		int buffer_index_inputA_init_scatter_part_0, 
		int(size=32)  tmpBuffer_inputB_init_part_0[257],int(size=32)  tmpBuffer_inputA_init_part_0[305],
		int l0_c1_0_next,
		int l0_c2_0_next,
		int l0_c3_0_next,
		int l0_c4_0_next,
		int l0_c5_0_next
	do 
		//FSM Commands
					buffer_index_inputB_init_scatter_part_0 := 0;
					buffer_index_inputA_init_scatter_part_0 := 0;
					if (((l0_c5_0) = (0))) then 
									l5_c2 := 16*l0_c4_0;
									while (l5_c2 <= min(4096*l0_c2_0-1,16*l0_c4_0+15)) do
									 	tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(16*l0_c4_0+128,16*l0_c4_0+2048*l0_c5_0);
					while (l5_c2 <= min(4096*l0_c2_0+16*l0_c5_0-1,16*l0_c4_0+2048*l0_c5_0+1935)) do
					 	if ((((l5_c2+112*l0_c4_0) mod 128) <= (15))) then 
										tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((l0_c2_0) = (0)) && ((l0_c5_0) = (0))) then 
									l5_c2 := 0;
									while (l5_c2 <= 16*l0_c4_0-1) do
									 	if (((l5_c2) <= (15))) then 
														tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					if (((l0_c5_0) >= (1))) then 
									l5_c2 := 4096*l0_c2_0+16*l0_c5_0;
									while (l5_c2 <= min(4096*l0_c2_0+16*l0_c5_0+1935,16*l0_c4_0+2048*l0_c5_0-1)) do
									 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_0) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_0+15) * 1))) then 
														tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					if (((l0_c2_0) = (0)) && ((l0_c5_0) = (0))) then 
									l5_c2 := 16*l0_c4_0;
									while (l5_c2 <= 16*l0_c4_0+15) do
									 	tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
										if (((l0_c4_0) = (0))) then 
														tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					if (((l0_c2_0) = (0)) && ((l0_c5_0) = (0))) then 
									l5_c2 := 16*l0_c4_0+16;
									while (l5_c2 <= 16*l0_c4_0+127) do
									 	if (((l5_c2) >= (128)) && ((l5_c2) <= (143))) then 
														tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					if (((2*l0_c2_0) = (l0_c5_0))) then 
									l5_c2 := max(max(4128*l0_c2_0,4096*l0_c2_0+16*l0_c4_0),16*l0_c4_0+128);
									while (l5_c2 <= min(4128*l0_c2_0+1935,4096*l0_c2_0+16*l0_c4_0+1935)) do
									 	if ((((l5_c2+112*l0_c4_0) mod 128) <= (15))) then 
														tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
														buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
													end 
										if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2_0) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2_0+15) * 1))) then 
														if ((((l5_c2+127) mod 128) <= (126))) then 
																		tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
																		buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
																	end 
														if ((((l5_c2) mod 128) = (0))) then 
																		if (((l0_c2_0) = (0))) then 
																						tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
																						buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
																					end 
																	end 
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(16*l0_c4_0+2048*l0_c5_0,4096*l0_c2_0+16*l0_c5_0+1936);
					while (l5_c2 <= 16*l0_c4_0+2048*l0_c5_0+1935) do
					 	if (((l5_c2) >= (16*l0_c4_0+1920)) && ((l0_c2_0) = (0)) && ((l0_c5_0) = (0))) then 
										tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
									end 
						if ((((l5_c2+112*l0_c4_0) mod 128) <= (15))) then 
										if (((l5_c2) >= (16*l0_c4_0+1936))) then 
														tmpBuffer_inputB_init_part_0[buffer_index_inputB_init_scatter_part_0] := inputB[l5_c2];
														buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
													end 
									end 
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := max(4096*l0_c2_0+16*l0_c5_0,16*l0_c4_0+2048*l0_c5_0+1936);
					while (l5_c2 <= 4096*l0_c2_0+16*l0_c5_0+1935) do
					 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_0) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_0+15) * 1))) then 
										if ((((l5_c2+127) mod 128) <= (126))) then 
														tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
													end 
										if ((((l5_c2) mod 128) = (0))) then 
														if (((l0_c5_0) = (0))) then 
																		tmpBuffer_inputA_init_part_0[buffer_index_inputA_init_scatter_part_0] := inputA[l5_c2];
																		buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
																	end 
													end 
									end 
					l5_c2 := l5_c2 + 1;
					end
		
		//FSM Transitions
		if (((-l0_c5_0+6) >= (0))) then
			l0_c1_0_next :=  0 ;
			l0_c2_0_next :=  l0_c2_0 ;
			l0_c3_0_next :=  0 ;
			l0_c4_0_next :=  l0_c4_0 ;
			l0_c5_0_next :=  l0_c5_0+1 ;
		else if (((-l0_c4_0+6) >= (0))) then
			l0_c1_0_next :=  0 ;
			l0_c2_0_next :=  l0_c2_0 ;
			l0_c3_0_next :=  0 ;
			l0_c4_0_next :=  l0_c4_0+1 ;
			l0_c5_0_next :=  0 ;
		else if (((-l0_c2_0+2) >= (0))) then
			l0_c1_0_next :=  0 ;
			l0_c2_0_next :=  l0_c2_0+1 ;
			l0_c3_0_next :=  0 ;
			l0_c4_0_next :=  0 ;
			l0_c5_0_next :=  0 ;
		else 
			done_signal_0 := 1;
		end
		end
		end
		
		l0_c1_0 := l0_c1_0_next;
		l0_c2_0 := l0_c2_0_next;
		l0_c3_0 := l0_c3_0_next;
		l0_c4_0 := l0_c4_0_next;
		l0_c5_0 := l0_c5_0_next;
	end //compute Action
	action   ==>
				Port_tmpBuffer_inputB_init_part_1:[tmpBuffer_inputB_init_part_1] repeat 257	,	Port_tmpBuffer_inputA_init_part_1:[tmpBuffer_inputA_init_part_1] repeat 305	
	guard
		(state = 2) && (done_signal_1 = 0) 
	var
		int l5_c2,
		int i_0,
		int l_0,
		int l_1,
		int l_2,
		int l_3,
		int l_4,
		int l_5,
		int l_6,
		int l_7,
		int l_8,
		int l_9,
		int buffer_index_inputB_init_scatter_part_1,
		int buffer_index_inputA_init_scatter_part_1, 
		int(size=32)  tmpBuffer_inputB_init_part_1[257],int(size=32)  tmpBuffer_inputA_init_part_1[305],
		int l0_c1_1_next,
		int l0_c2_1_next,
		int l0_c3_1_next,
		int l0_c4_1_next,
		int l0_c5_1_next
	do 
		//FSM Commands
					buffer_index_inputB_init_scatter_part_1 := 0;
					buffer_index_inputA_init_scatter_part_1 := 0;
					if (((l0_c5_1) = (0))) then 
									l5_c2 := 16*l0_c4_1;
									while (l5_c2 <= 16*l0_c4_1+15) do
									 	tmpBuffer_inputB_init_part_1[buffer_index_inputB_init_scatter_part_1] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_1 := buffer_index_inputB_init_scatter_part_1 + 1;
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(16*l0_c4_1+128,16*l0_c4_1+2048*l0_c5_1);
					while (l5_c2 <= min(4096*l0_c2_1+16*l0_c5_1+2047,16*l0_c4_1+2048*l0_c5_1+1935)) do
					 	if ((((l5_c2+112*l0_c4_1) mod 128) <= (15))) then 
										if (((l5_c2) <= (4096*l0_c2_1+16*l0_c5_1+2047))) then 
														if (((l5_c2) <= (4096*l0_c2_1+16*l0_c5_1+2047))) then 
																		tmpBuffer_inputB_init_part_1[buffer_index_inputB_init_scatter_part_1] := inputB[l5_c2];
																		buffer_index_inputB_init_scatter_part_1 := buffer_index_inputB_init_scatter_part_1 + 1;
																	end 
													end 
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((l0_c5_1) = (0))) then 
									l5_c2 := 4096*l0_c2_1+2048;
									while (l5_c2 <= 4096*l0_c2_1+3968) do
									 	if ((((l5_c2) mod 128) <= (15))) then 
														tmpBuffer_inputA_init_part_1[buffer_index_inputA_init_scatter_part_1] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_1 := buffer_index_inputA_init_scatter_part_1 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := 4096*l0_c2_1+16*l0_c5_1+2048;
					while (l5_c2 <= min(4096*l0_c2_1+16*l0_c5_1+3983,16*l0_c4_1+2048*l0_c5_1-1)) do
					 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_1) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_1+15) * 1))) then 
										tmpBuffer_inputA_init_part_1[buffer_index_inputA_init_scatter_part_1] := inputA[l5_c2];
										buffer_index_inputA_init_scatter_part_1 := buffer_index_inputA_init_scatter_part_1 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					if (((2*l0_c2_1) = (l0_c5_1-1))) then 
									l5_c2 := max(4128*l0_c2_1+2064,4096*l0_c2_1+16*l0_c4_1+2048);
									while (l5_c2 <= min(4128*l0_c2_1+3999,4096*l0_c2_1+16*l0_c4_1+3983)) do
									 	if ((((l5_c2+112*l0_c4_1) mod 128) <= (15))) then 
														tmpBuffer_inputB_init_part_1[buffer_index_inputB_init_scatter_part_1] := inputB[l5_c2];
														buffer_index_inputB_init_scatter_part_1 := buffer_index_inputB_init_scatter_part_1 + 1;
													end 
										if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2_1+16) * 1)) && ((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (32*l0_c2_1+31) * 1))) then 
														tmpBuffer_inputA_init_part_1[buffer_index_inputA_init_scatter_part_1] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_1 := buffer_index_inputA_init_scatter_part_1 + 1;
													end 
									l5_c2 := l5_c2 + 1;
									end
								end 
					l5_c2 := max(16*l0_c4_1+2048*l0_c5_1,4096*l0_c2_1+16*l0_c5_1+3984);
					while (l5_c2 <= 16*l0_c4_1+2048*l0_c5_1+1935) do
					 	if ((((l5_c2+112*l0_c4_1) mod 128) <= (15))) then 
										tmpBuffer_inputB_init_part_1[buffer_index_inputB_init_scatter_part_1] := inputB[l5_c2];
										buffer_index_inputB_init_scatter_part_1 := buffer_index_inputB_init_scatter_part_1 + 1;
									end 
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := max(max(4096*l0_c2_1-1905*l0_c5_1+3969,4096*l0_c2_1+16*l0_c5_1+2048),16*l0_c4_1+2048*l0_c5_1+1936);
					while (l5_c2 <= 4096*l0_c2_1+16*l0_c5_1+3983) do
					 	if (((l5_c2) >= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_1) * 1))) then 
										if (((l5_c2) >= (4096*l0_c2_1+3968)) && ((l5_c2) <= (4096*l0_c2_1+4095)) && ((l0_c5_1) = (0))) then 
														tmpBuffer_inputA_init_part_1[buffer_index_inputA_init_scatter_part_1] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_1 := buffer_index_inputA_init_scatter_part_1 + 1;
													end 
										if (((l5_c2) <= (((floord(l5_c2, 128)) * 128) * 1 + (16*l0_c5_1+15) * 1)) && ((l0_c5_1) >= (1))) then 
														tmpBuffer_inputA_init_part_1[buffer_index_inputA_init_scatter_part_1] := inputA[l5_c2];
														buffer_index_inputA_init_scatter_part_1 := buffer_index_inputA_init_scatter_part_1 + 1;
													end 
									end 
					l5_c2 := l5_c2 + 1;
					end
		
		//FSM Transitions
		if (((-l0_c5_1+6) >= (0))) then
			l0_c1_1_next :=  0 ;
			l0_c2_1_next :=  l0_c2_1 ;
			l0_c3_1_next :=  1 ;
			l0_c4_1_next :=  l0_c4_1 ;
			l0_c5_1_next :=  l0_c5_1+1 ;
		else if (((-l0_c4_1+6) >= (0))) then
			l0_c1_1_next :=  0 ;
			l0_c2_1_next :=  l0_c2_1 ;
			l0_c3_1_next :=  1 ;
			l0_c4_1_next :=  l0_c4_1+1 ;
			l0_c5_1_next :=  0 ;
		else if (((-l0_c2_1+2) >= (0))) then
			l0_c1_1_next :=  0 ;
			l0_c2_1_next :=  l0_c2_1+1 ;
			l0_c3_1_next :=  1 ;
			l0_c4_1_next :=  0 ;
			l0_c5_1_next :=  0 ;
		else 
			done_signal_1 := 1;
		end
		end
		end
		
		l0_c1_1 := l0_c1_1_next;
		l0_c2_1 := l0_c2_1_next;
		l0_c3_1 := l0_c3_1_next;
		l0_c4_1 := l0_c4_1_next;
		l0_c5_1 := l0_c5_1_next;
	end //compute Action
	
	action ==>
	guard
		done_signal_0 = 1  && done_signal_1 = 1 
	do
		state := 0;
		done_signal_0 := 0;
		done_signal_1 := 0;
	end
	
end //Actor
