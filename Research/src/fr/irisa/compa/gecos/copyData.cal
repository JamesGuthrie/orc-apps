package fr.irisa.compa.gecos;

actor copyData () int(size=32) inputA, int(size=32) inputB ==> int(size=32) matrixA, int(size=32) matrixB :

	int N = 128;
	int M = 128;
	int l0_c2_0 := 0;
	int l0_c4_0 := 0;
	int l0_c5_0 := 0;
	int done_signal_0 := 0;
	
	function max (int a, int b) --> int :
		if ( a > b ) then
			a
		else
			b
		end
	end
			
	function min (int a, int b) --> int :
		if (  a <  b ) then
			a
		else
			b
		end
	end

	action inputA:[inArrayA] repeat N * M, inputB:[inArrayB] repeat N * M ==> 
					matrixA:[aArray] repeat N * M, matrixB:[bArray] repeat N * M 
	var
		int aArray[N*M],
		int bArray[N*M], 
		int buffer_index_inputA_init_scatter_part_0,
		int buffer_index_inputB_init_scatter_part_0,
		int l5_c2,
		int l5_c3,
		int l0_c2_0_next,
		int l0_c4_0_next,
		int l0_c5_0_next
		
	do
		buffer_index_inputA_init_scatter_part_0 := 0;
		buffer_index_inputB_init_scatter_part_0 := 0;
					l5_c2 := 16*l0_c5_0;
					while (l5_c2 <= min(32*l0_c2_0-1,16*l0_c5_0+15)) do
					 	l5_c3 := 16*l0_c4_0;
						while (l5_c3 <= 16*l0_c4_0+15) do
						 	aArray[buffer_index_inputB_init_scatter_part_0] := inArrayA[l5_c2 * 128 + l5_c3];
							buffer_index_inputB_init_scatter_part_0 := buffer_index_inputB_init_scatter_part_0 + 1;
						l5_c3 := l5_c3 + 1;
						end
					l5_c2 := l5_c2 + 1;
					end
					l5_c2 := max(32*l0_c2_0,16*l0_c5_0+16);
					while (l5_c2 <= 32*l0_c2_0+15) do
					 	l5_c3 := 16*l0_c5_0;
						while (l5_c3 <= 16*l0_c5_0+15) do
						 	bArray[buffer_index_inputA_init_scatter_part_0] := inArrayB[l5_c2 * 128 + l5_c3];
							buffer_index_inputA_init_scatter_part_0 := buffer_index_inputA_init_scatter_part_0 + 1;
						l5_c3 := l5_c3 + 1;
						end
					l5_c2 := l5_c2 + 1;
					end
							
		//FSM Transitions
		if (((-l0_c5_0+6) >= (0))) then
			l0_c2_0_next :=  l0_c2_0 ;
			l0_c4_0_next :=  l0_c4_0 ;
			l0_c5_0_next :=  l0_c5_0+1 ;
		else if (((-l0_c4_0+6) >= (0))) then
			l0_c2_0_next :=  l0_c2_0 ;
			l0_c4_0_next :=  l0_c4_0+1 ;
			l0_c5_0_next :=  0 ;
		else if (((-l0_c2_0+2) >= (0))) then
			l0_c2_0_next :=  l0_c2_0+1 ;
			l0_c4_0_next :=  0 ;
			l0_c5_0_next :=  0 ;
		else 
			done_signal_0 := 1;
		end
		end
		end
		
		l0_c2_0 := l0_c2_0_next;
		l0_c4_0 := l0_c4_0_next;
		l0_c5_0 := l0_c5_0_next;
		aArray := inArrayA;
		bArray := inArrayB;
		
	end

end