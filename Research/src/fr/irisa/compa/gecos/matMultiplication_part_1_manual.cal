package fr.irisa.compa.gecos;
	actor matMultiplication_part_1_manual()  	int(size=32) Port_tmpBuffer_inputB_init_part_1 	,	int(size=32) Port_tmpBuffer_inputA_init_part_1 	  ==>
		  	int(size=32) Port_tmpBuffer_output_part_1 	 :
					
		int state := 0;
		int N = 128;//128;//1024;
		int TS = 64;//16;
		int inputA[N*N];
		int inputB[N*N];
		int output[N*N];
		int c1_0;
		int c2_0;
		int c3_0;
								
		//FSM Initializaton
		initAction: action ==>  						
		guard
			state = 0
		do
			c1_0 :=  TS;
			c2_0 :=  0;
			c3_0 := 0;
			state := 1;
		end
		
	compute: action Port_tmpBuffer_inputB_init_part_1:[tmpBuffer_inputB_init_part_1] repeat TS*TS	,	
	Port_tmpBuffer_inputA_init_part_1:[tmpBuffer_inputA_init_part_1] repeat TS*TS	 ==> 
	guard
		state = 1 
	var 
		int index
	do 
	
		
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				inputA[(c1_0+i)*N+c3_0+j] := tmpBuffer_inputA_init_part_1[index];
				index := index + 1;
			end
		end
		
		index := 0;
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				inputB[(c3_0+i)*N+c2_0+j] := tmpBuffer_inputB_init_part_1[index];
				index := index + 1;
			end
		end 
		
		
		foreach int i in 0 .. TS-1 do
			foreach int j in 0 .. TS-1 do
				foreach int k in 0 .. TS-1 do
					if ( (c3_0 + k) = 0 ) then
						output[(c1_0+i)*N+(c2_0+j)] := inputA[(c1_0+i)*N+(c3_0+k)] * inputB[(c3_0+k)*N+c2_0+j];
					else
						output[(c1_0+i)*N+(c2_0+j)] := output[(c1_0+i)*N+(c2_0+j)] + 
									inputA[(c1_0+i)*N+(c3_0+k)] * inputB[(c3_0+k)*N+c2_0+j];
					end
				end
			end
		end
		
		if ( (c3_0 + TS) <= (N - TS) ) then
			c3_0 := c3_0 + TS;
		else if ( (c2_0 + TS) <= (N - TS) ) then 
			c2_0 := c2_0 + TS;
			c3_0 := 0;
		else if ( (c1_0 + 2*TS) <= (N - TS) ) then
			c1_0 := c1_0 + 2*TS;
			c2_0 := 0;
			c3_0 := 0;
		else
			state := 2;
		end
		end
		end
	
	end //compute Action
	
	writeOut: action ==> 
			Port_tmpBuffer_output_part_1:[tmpBuffer_output_part_1] repeat N*N/2	
	guard
		state = 2
	var
		int(size=32)  tmpBuffer_output_part_1[N*N/2],
		int index_0
	do 
	
		/*foreach int i in 0 .. N-1 do
			foreach int j in 0 .. N-1 do
				println("@Actor1 " + i + "  " + j + "  " + output[i*N+j]);
			end
		end*/
		
		
		index_0 := 0;
		foreach int i in 0 .. (N/(2*TS))-1 do 
			foreach int k in 0 .. TS-1 do
				foreach int j in 0 .. N-1 do
					tmpBuffer_output_part_1[index_0] := output[(TS*(2*i+1)+k)*N+j];
					index_0 := index_0 + 1;
				end
			end 
		end
			
		/*index_0 := 0;
		foreach int i in 0 .. ((N/(2*TS))-1) do
			foreach int j in 0 .. ((N/TS)-1) do
				foreach int k in 0 .. TS-1 do
					foreach int l in 0 .. TS-1 do  
						 tmpBuffer_output_part_1[index_0] := output[((i+1)*TS+k)*N+j*TS+l];
						index_0 := index_0 + 1;
					end
				end
			end
		end */
		state := 0;
	end //writeOutAction
end //Actor
