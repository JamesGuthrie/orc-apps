/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: by Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.ME.dpn;
import std.util.Math.* ;

actor full_search () uint(size=8) y, uint(size=8) y_ref/*, uint(size=32) width, uint(size=32) height*/ ==> uint(size=8) mb :
	int WITDH = 352;
	int HEIGHT = 288;
	int BLOCKSIZE = 16;
	int MAX_MOTION = 16;
	int FRAME_SIZE = WITDH*HEIGHT;
	uint(size=8) y_array[FRAME_SIZE];
	uint(size=8) y_ref_array[FRAME_SIZE];
	int cnt := 0;
	int bestSad := 0;
	int mvx := 0;
	int mvy := 0;
	
  function calc(int sad, int v, int n ) --> int :
    sad + abs(v-n)
  end
  
   procedure SAD( int ox, int oy, int dx, int dy, int h, int w )
   var
     int rx = ox + dx,
     int ry = oy +dy,
     int sad := 0
    begin
    
    if (abs(dx) <= MAX_MOTION && abs(dy) <= MAX_MOTION && rx >=0 && ry >=0 && rx+w <= WITDH && ry + h <= HEIGHT) then
    	foreach int j in 0 .. BLOCKSIZE
		do
			foreach int i in 0 .. BLOCKSIZE
			do
				sad :=  calc(sad, oy * WITDH + ox, ry * WITDH + rx);
			end
		end
		
		if (sad >= bestSad) then
			bestSad := sad;
		end
    end
    
    
    
  end
  
	procedure search_FS(int x , int y, int h, int w)
	var
		int ox = x * BLOCKSIZE,
		int oy = y * BLOCKSIZE
	begin
		bestSad := 0xffffff;
		
		foreach int j in -MAX_MOTION .. MAX_MOTION
		do
			foreach int i in 0 .. WITDH / BLOCKSIZE
			do
				SAD(ox, oy, i,j, h, w);
			end
		end
	end
	
	load:action  y:[y_val], y_ref:[y_ref_val] ==>
	do
		y_array[cnt] := y_val;
		y_array[cnt] := y_ref_val;
		cnt := cnt + 1;
	end

	start: action ==>
	do
		foreach int j in 0 .. HEIGHT / BLOCKSIZE
		do
			foreach int i in 0 .. WITDH / BLOCKSIZE
			do
				search_FS(i,j, BLOCKSIZE,BLOCKSIZE);
			end
		end
	end
end