package org.ietr.c.embedded.psdf;

actor buffer () int(size=3) W, uint(size=8) PIX, int (size=32) Address, int(size=32) Ref ==> uint(size=8)  Result:

	uint PIX_SZ = 8;
	int(size=32) MB_SZ = 16;
	int WIDTH = 352;
	int HEIGHT = 288;
	uint(size=8)  pictureBuffer[2][WIDTH][HEIGHT];
	int(size=32) framecount := 0;
	int(size=32) rx := 0;
	int(size=32) ry := 0;
	int(size=32) ref := 0;
	
	read: action Ref:[ref], Address:[RaOffX , RaOffY] ==> Result:[pix] repeat MB_SZ * MB_SZ
	var
		List(type: int(size=PIX_SZ), size=MB_SZ * MB_SZ) pix
	do
		foreach int i in 0 .. MB_SZ - 1 do
			foreach int j in 0 .. MB_SZ - 1 do
				pix[(i * MB_SZ) + j] := pictureBuffer[ref][RaOffX] [RaOffY];
			end
		end
	end
	
	write: action W:[w], PIX:[yuv] ==>
	guard
		w = 1
	do
		pictureBuffer[ref][rx] [ry] := yuv;
		rx := rx + 1;
		if (rx = WIDTH) then
			rx := 0;
			ry := ry + 1;
		end
		
		if (ry = HEIGHT) then
			rx := 0;
			ry := 0;
			framecount := framecount + 1;
			ref := framecount mod 2;
		end
	end
	
	skip: action W:[w], PIX:[yuv] ==> 
	guard
		w = 0	
	end
end
