/*
 * Copyright (c) 2011, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.motionEstimation.dpn;
import std.util.Math.* ;

//@native
actor full_search () uint(size=8) y, uint(size=8) y_ref/*, uint(size=32) width, uint(size=32) height*/ ==> uint(size=8) mb, int(size=32) mv :
	int WITDH = 352;
	int HEIGHT = 288;
	int BLOCKSIZE = 16;
	int MAX_MOTION = 32;
	int FRAME_SIZE = WITDH*HEIGHT;
	
	
	uint(size=8) y_array[FRAME_SIZE];
	uint(size=8) y_ref_array[FRAME_SIZE];
	int(size=32) mvx[WITDH / BLOCKSIZE * HEIGHT /BLOCKSIZE];
	int(size=32) mvy[WITDH / BLOCKSIZE * HEIGHT /BLOCKSIZE];
	int(size=32) cnt := 0;
	int(size=32) mb_id := 0;
	int(size=32) bestSad := 0;
	int(size=32) sad_tab[BLOCKSIZE * BLOCKSIZE];
	
	
  function calc(int y, int y_ref ) --> int :
    abs(y_array[y] - y_ref_array[y_ref])
  end
  
   procedure SAD( int ox, int oy, int dx, int dy, int h, int w, int idx )
   var
     int rx = ox + dx,
     int ry = oy +dy,
     int sad := 0
    begin
    
    if (abs(dx) <= MAX_MOTION && abs(dy) <= MAX_MOTION && rx >=0 && ry >=0 && rx+w <= WITDH && ry + h <= HEIGHT) then
    	@gridify(j,i)
    	foreach int j in 0 .. BLOCKSIZE-1
		do
			foreach int i in 0 .. BLOCKSIZE-1
			do
				sad_tab[j*BLOCKSIZE+i] :=  calc((oy+j) * WITDH + ox+ i, (ry+j) * WITDH + rx +i);
			end
		end

    	foreach int j in 0 .. BLOCKSIZE-1
		do
			foreach int i in 0 .. BLOCKSIZE-1
			do
				sad :=  sad + sad_tab[j*BLOCKSIZE+i];
			end
		end
		
		if (sad < bestSad) then
			bestSad := sad;
			mvx[idx] := dx;
			mvy[idx] := dy;
		end
    end
  end
  
  	@codelet(target="OPENCL")
	procedure search_FS(int x , int y, int h, int w, int idx)
	var
		int ox = x * BLOCKSIZE,
		int oy = y * BLOCKSIZE
	begin
		bestSad := 0xffffff;
		
		foreach int j in -MAX_MOTION .. MAX_MOTION
		do
			foreach int i in -MAX_MOTION .. MAX_MOTION
			do
				SAD(ox, oy, i,j, h, w, idx);
			end
		end
	end
	
	
	load:action  y:[y_val], y_ref:[y_ref_val] ==>
	guard
		cnt < FRAME_SIZE
	do

		y_array[cnt] := y_val;
		y_ref_array[cnt] := y_ref_val;
		cnt := cnt + 1;
	end

	start: action ==>
	guard
		cnt = FRAME_SIZE
	do
		foreach int j in 0 .. (HEIGHT / BLOCKSIZE)-1
		do
			foreach int i in 0 .. (WITDH / BLOCKSIZE)-1
			do
				search_FS(i,j, BLOCKSIZE,BLOCKSIZE, i + j * WITDH / BLOCKSIZE);
			end
		end
		mb_id := 0;
	end
	
	send: action ==> mb:[id], mv:[vx, vy]
	guard
		mb_id < (HEIGHT/BLOCKSIZE) * (WITDH/BLOCKSIZE)
	var
		int id,
		int vx,
		int vy
	do
		id := mb_id;
		vx := mvx[mb_id];
		vy := mvy[mb_id];
		mb_id := mb_id + 1;
	end
	
	end_send: action ==>
	guard
		mb_id = HEIGHT/BLOCKSIZE * WITDH/BLOCKSIZE
	do
		cnt := 0;
	end
	
	schedule fsm s_load :
		s_load ( load ) --> s_load;
		s_load ( start ) --> s_send;
		s_send ( send ) --> s_send;
		s_send ( end_send ) --> s_load;
	end

end