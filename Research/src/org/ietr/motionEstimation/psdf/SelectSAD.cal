/*
 * Copyright (c) 2011, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.motionEstimation.psdf;

import std.util.Math.* ;

actor SelectSAD () int(size=32) MB_ID, int(size=8) Val,  int(size=32) MV ==> int(size=32) MB_res, int(size=32) x_vect,  int(size=32) y_vect :
	int (size=32) cursad := 0;
	int (size=32) curx := 0;
	int (size=32) cury := 0;
	int (size=32) MBId := 0;
	
	computSAD: action Val:[sad], MV:[x, y] ==>
	do
		if (sad > cursad) then
			cursad := sad;
			curx := x;
			cury := y;
		end
	end
	
	newSAD: action MB_ID:[id] ==> MB_res:[resid], x_vect:[resX],  y_vect:[resY]
	var
		int(size=32) resX,
		int(size=32) resY,
		int(size=32) resid
	do
		resX := curx;
		resY := cury;
		resid := MBId;
		
		// Reinit values
		MBId := id;
		cursad := 0;
		curx := 0;
		cury := 0;
	end
	
	priority
	newSAD > computSAD;
	end
end
