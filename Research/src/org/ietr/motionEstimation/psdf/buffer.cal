/*
 * Copyright (c) 2011, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.motionEstimation.psdf;


actor buffer () int(size=32) Id, int(size=3) RW, uint(size=PIX_SZ) VAL, int (size=32) Address, int(size=32) Ref ==> uint(size=PIX_SZ)  MB, uint(size=PIX_SZ)  REF:

	uint PIX_SZ = 8;
	int(size=32) MB_SZ = 16;
	int WIDTH = 352;
	int HEIGHT = 288;
	uint(size=PIX_SZ)  pictureBuffer[2][WIDTH][HEIGHT];
	
	@native
	procedure source_rewind(int(size=32) inVal, int(size=32) outVal)
	begin
		outVal := inVal;
	end
	
	write: action RW:[rw], VAL:[pix], Ref:[ref], Address:[RaOffX , RaOffY] ==>
	guard
		rw = 2
	do
		pictureBuffer[ref][RaOffX][RaOffY] := pix;
	end


	read_ref: action Id:[id], RW:[rw], Ref:[ref], Address:[x , y, xx, yy] ==> REF:[pix] repeat MB_SZ * MB_SZ
	guard
		rw = 1,
		ref = id / 2
	var
		uint(size=PIX_SZ)  pix[MB_SZ*MB_SZ],
		int(size=32) outv
	do
		source_rewind(id, outv);
		foreach int i in y .. yy
		do
			foreach int j in x .. xx
			do
				pix[16 * (i-y) +  (j-x)] := pictureBuffer[ref][j][i];
			end
		end
	end
	
	read_MB: action Id:[id], RW:[rw], Ref:[ref], Address:[x , y, xx, yy] ==> MB:[pix] repeat MB_SZ * MB_SZ
	guard
		rw = 1,
		ref = id mod 2
	var
		uint(size=PIX_SZ)  pix[MB_SZ*MB_SZ]
	do
		foreach int i in y .. yy
		do
			foreach int j in x .. xx
			do
				pix[16 * (i-y) +  (j-x)] := pictureBuffer[ref][j][i];
			end
		end
	end
end
