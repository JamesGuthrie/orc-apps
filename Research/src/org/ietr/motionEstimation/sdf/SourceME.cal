/*
 * Copyright (c) 2011, INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.motionEstimation.sdf;

actor SourceME () ==> uint(size=8) yuv, uint(size=8) yuv_ref, uint(size=32) width, uint(size=32) height :
	
	int WITDH = 352;
	int HEIGHT = 288;
	int N = 300;
	int FRAME_SIZE = WITDH*HEIGHT * 3/2;
	
	@native procedure source_init()
	end

	@native procedure source_readNBytes(uint(size=8) outTable[N * FRAME_SIZE], uint(size=12) nbTokenToRead)
	end
	
	@native procedure source_rewind()
	end

	uint(size=8) yuv_array[N * FRAME_SIZE];
	uint(size=8) yuv_ref_array[N * FRAME_SIZE];
	uint(size=32) cnt := 0;
	
	initialize ==>
	do
		source_init();
		
		// Avoid first frame
		source_readNBytes(yuv_array, FRAME_SIZE);
		
		//Read all frames after first frame
		source_readNBytes(yuv_array, N * FRAME_SIZE);
		
		// Rewind and read all frames
		source_rewind();
		source_readNBytes(yuv_ref_array, N * FRAME_SIZE);
	end
	
	action ==> yuv:[yuv_val], yuv_ref:[yuv_ref_val], width:[WITDH], height:[HEIGHT]
	var
		uint(size=8) yuv_val,
		uint(size=8) yuv_ref_val
	do
		yuv_val := yuv_array[cnt];
		yuv_ref_val := yuv_ref_array[cnt];
		cnt := cnt + 1;
	end
	

end