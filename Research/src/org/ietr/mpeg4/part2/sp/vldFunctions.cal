package org.ietr.mpeg4.part2.sp;

import org.ietr.mpeg2.mp.ParserUtils.*;
import org.sc29.wg11.common.BitstreamReadUtils.*;
import org.ietr.mpeg4.part2.sp.vldTables.*;

unit vldFunctions:
	int B_VOP                           = 2;
	int P_VOP                           = 1;
	int I_VOP                           = 0;

	procedure get_mcbpc(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
	 						  int(size=32) res[1],String name, uint(size=2) vop_coding_type)
	var 
		int index
	begin
	  	if (vop_coding_type = I_VOP) then
		  	showBits(9, fifo, res);  		
		
			index := res[0];
			index := index >> 3;
			flushBits(mcbpc_intra_table[index][1], fifo); 
			
		
			res[0] := mcbpc_intra_table[index][0];
		
			if DEBUG_PARSER then
				println("          "+name+" vld : "+res[0]);
			end
		else
			showBits(9, fifo, res);
			index := if res[0] < 256 then res[0] else 256 end;
			flushBits(mcbpc_inter_table[index][1], fifo); 
			res[0] := mcbpc_inter_table[index][0];
			if DEBUG_PARSER then
				println("          "+name+" vld : "+res[0]);
			end
		end
	end
	
	procedure get_cbpy(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
	 						  int(size=32) res[1],String name, bool intra)
	var 
		int index
	begin
		showBits(6, fifo, res);
		index := res[0];
		flushBits(cbpy_table[index][1], fifo); 
		res[0] := cbpy_table[index][0];

		if (not intra) then
			res[0] := 15 - res[0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	end
	
	procedure get_dc_dif(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name, int(size=16) dc_size)
	var
		int msb
	begin
		vld_u(  dc_size, fifo, res);
		msb := res[0] >> (dc_size - 1);
	
		if (msb = 0) then
			res[0] := -1 * (res[0] ^ ((1 << dc_size) - 1));
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	end
	

	procedure get_dc_size_lum(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var 
		int code,
		int val,
		bool valEnd := false
	begin
		showBits(11, fifo, res);
		code := res[0];
		val := 11;
		while (val > 3 and not valEnd) do
			if (code = 1) then
				flushBits(val, fifo); 
				valEnd := true;
			else
				code := code >> 1;
				val := val - 1;
			end
		end
	
		if valEnd then
			res[0] := val + 1; 
		else
			flushBits(dc_lum_tab[code][1], fifo); 
			res[0] := dc_lum_tab[code][0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	
	end

	procedure get_dc_size_chrom(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var 
		int code,
		int val,
		bool valEnd := false
	begin
		showBits(12, fifo, res);
		code := res[0];
		val := 12;
		while (val > 2 and not valEnd) do
			if (code = 1) then
				flushBits(val, fifo); 
				valEnd := true;
			else
				code := code >> 1;
				val := val - 1;
			end
		end
	
		if valEnd then
			res[0] := val; 
		else
			getBits(2, fifo, res); 
			res[0] := 3 - res[0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	
	end

	procedure get_mv(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var
		int index
	begin
		vld_u(  1, fifo, res);
 		
 		if res[0] = 0  then
			showBits(12, fifo, res);
 			index := res[0];
 			if index >= 512 then
				index := (index >> 8) - 2;
				flushBits(TMNMVtab0[index][1], fifo); 
				res[0] := TMNMVtab0[index][0];
 			else 
 				if index >=128 then
					index := (index >> 2) - 32;
					flushBits(TMNMVtab1[index][1], fifo); 
					res[0] := TMNMVtab1[index][0];
					
	 			else
					index := index - 4;
					flushBits(TMNMVtab2[index][1], fifo); 
					res[0] := TMNMVtab2[index][0];
	 			end
 			end
 		else
 			res[0] := 0;
 		end
 		
		if DEBUG_PARSER then
			println("          "+name+" vld :" + res[0]);
		end
	end
	
	
end