/********************************************************************************
FU realizing Syntax Parsing for MPEG-2 MP
*****************************************************************************/

// This FU has been modified by Mickael Raulet (INSA of Rennes) 
package org.ietr.mpeg4.part2.sp;

import std.util.BitOps.*;
import org.ietr.mpeg2.mp.ParserUtils.*;
import org.sc29.wg11.common.BitstreamReadUtils.*;

actor Algo_SynP()
		uint(size=8) BYTE 
		==> 
		:

procedure log2bin(uint(size=32) value, uint(size=32) res[1])
var
	int invalue
begin 
  invalue := value;
  while (invalue!=0) do
	invalue := invalue >> 1;
	res[0] := res + 1;
  end
  
end
	bool DEBUG_BITSTREAM = false;
	/**************************************************************************
	 * search_start_code or getByte
	 *************************************************************************/
	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL];
	uint(size= 2) zeroByte := 0;
	/* */
  	action BYTE:[ b ] ==>
	guard 
		fifo[FIFO_CPT_BITS] <= (FIFO_SIZE-1)<<3
	var
		uint(size=4) fifo_idx  =  fifo[FIFO_IDX]
	do
		if zeroByte != 3 or b != EPR_VALUE then
			if b = START_CODE_VALUE and zeroByte = 3 then
				fifo[fifo_idx]      := b + START_CODE_FLAG;
			else
				fifo[fifo_idx]      := b;
			end
			fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] + 8;
			if DEBUG_BITSTREAM then
				println("fifo["+fifo_idx+"] := "+b+" \t "+fifo[FIFO_CPT_BITS]);
			end
			fifo[FIFO_IDX]      := (fifo_idx+1) & (FIFO_SIZE-1);
		end
		if b = 0 then
			zeroByte := ((zeroByte << 1) + 1) & 0x3;
		else
			zeroByte := 0;
		end
	end
	
	uint(size=1) moreDataFlag;
	//*************************************************************/


 	procedure more_rbsp_data()   
  	var 
  		uint(size=4) cptBits = (fifo[FIFO_CPT_BITS] - 1) & 7,
		int(size=32) res[1],
 		uint(size=9) idx     = getFifoIdx(fifo[FIFO_CPT_BITS], fifo)
	begin
		if (fifo[(idx + 1) & 7]) != 0 or ( (fifo[(idx + 3) & 7] & 0x100) = 0 and (fifo[(idx + 4) & 7] & 0x100) = 0 ) then 
				moreDataFlag:=1; 
			else 
				showBits ((cptBits + 1), fifo, res);
				moreDataFlag:=if(res[0] = 1<< cptBits) then 0 else 1 end;
			end
	end
	  
	
	/*************************************************************
	*************************************************************
	********              NAL Unit HEADER                ********
	*************************************************************
	*************************************************************/

	int VOP_START_CODE                  = 182;
	int VOL_START_CODE                  = 32; //0x20
 


	look_for_Sequence_Header: action ==>
	end
	uint(size=8) start_code;
	read_start_code: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		//println("=========== start code ===========");
		vld_u_name(  8, fifo, res, "start_code                           ");
		start_code := res[0];
	end 
 
	look_for_other_header: action ==>
	end



	look_for.vol: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		start_code = VOL_START_CODE
	do
		println("VOL");
	end

	look_for.vop: action ==>
	guard
		start_code = VOP_START_CODE 
	do
		println("VOP");
	end
 
	/**************************************************************************
	 * sequence_header_start_code
	 *************************************************************************/
	bool vol_control_parameters;
	bool vbv_parameters;
    uint(size=8) fixed_vop_time_increment;

	read_vol.start : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		bool is_object_layer_identifier
	do
		vld_u_name(  1, fifo, res, "random_accessible_vol                           ");
		vld_u_name(  8, fifo, res, "video_object_type_indication                           ");
		vld_u_name(  1, fifo, res, "is_object_layer_identifier                           ");
		is_object_layer_identifier := res[0] = 1;
		if (is_object_layer_identifier) then	
			vld_u_name(  4, fifo, res, "video_object_layer_verid                           ");	
			vld_u_name(  3, fifo, res, "video_object_layer_priority                           ");
		end	
		vld_u_name(  4, fifo, res, "aspect_ratio_info                           ");	
		/*if (aspect_ratio_info == Òextended_PARÓ) {	
			par_width	8
			par_height	8
		}*/
		vld_u_name(  1, fifo, res, "vol_control_parameters                           ");
		vol_control_parameters := res[0] = 1;
		if (vol_control_parameters) then	
			vld_u_name(  2, fifo, res, "chroma_format                           ");
			vld_u_name(  1, fifo, res, "low_delay                           ");
			vld_u_name(  1, fifo, res, "vbv_parameters                           ");
			vbv_parameters := res[0] = 1;
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "first_half_bit_rate                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end
	end

	read_vol.vbv_parameters1: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		if (vol_control_parameters) then	
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "latter_half_bit_rate                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
				vld_u_name(  15, fifo, res, "first_half_vbv_buffer_size                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
				vld_u_name(  3, fifo, res, "latter_half_vbv_buffer_size                           ");
				vld_u_name(  11, fifo, res, "first_half_vbv_occupancy                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end
	end




	read_vol.vbv_parameters2: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		if (vol_control_parameters) then	
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "latter_half_vbv_occupancy                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end	
	end

	read_vol.video_object_layer_shape: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		bool fixed_vop_rate,
	    uint(size=16) vop_time_increment_resolution
	do
		vld_u_name(  2, fifo, res, "video_object_layer_shape                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  16, fifo, res, "vop_time_increment_resolution                           ");
		vop_time_increment_resolution := res[0]; 
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  1, fifo, res, "fixed_vop_rate                           ");
		fixed_vop_rate := res[0]=1;
		if (fixed_vop_rate) then	
		    log2bin(vop_time_increment_resolution-1, res);
		    fixed_vop_time_increment :=  if res[0] > 1 then res[0] else 1 end;
		else
		
		end
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  13, fifo, res, "video_object_layer_width                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  13, fifo, res, "video_object_layer_height                           ");
		vld_u_name(  1, fifo, res, "interlaced                           ");
		vld_u_name(  1, fifo, res, "obmc_disable                           ");
		vld_u_name(  1, fifo, res, "sprite_enable                           ");
		vld_u_name(  1, fifo, res, "not_8_bit                           ");
		vld_u_name(  1, fifo, res, "quant_type                           ");
		vld_u_name(  1, fifo, res, "complexity_estimation_disable                           ");
		vld_u_name(  1, fifo, res, "resync_marker_disable                           ");
		vld_u_name(  1, fifo, res, "data_partitioned                           ");
		vld_u_name(  1, fifo, res, "scalability                           ");
	end

	/**************************************************************************
	 * VOP
	 *************************************************************************/
	read_vop : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		bool modulo_time_base := true,
		int time_incr := 0
	do
		vld_u_name(  2, fifo, res, "vop_coding_type                           ");
		while(modulo_time_base) do
			vld_u_name(  1, fifo, res, "modulo_time_base                           ");
			modulo_time_base := res[0]=1;
			time_incr := time_incr + 1;
		end
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  fixed_vop_time_increment, fifo, res, "vop_time_increment                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  1, fifo, res, "vop_coded                           ");
	end
	

	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	start_code.search: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		not IsStartCode(fifo)
   	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then		
  			println("start_code.search");
   		end
	end
	start_code.done: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		IsStartCode(fifo)
	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then
			println("start_code.done");
		end
	end

	byte_align_a: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	do
		byte_align(fifo);
	end
	
	/**************************************************************************
	 **************************************************************************
	 ********        undefined                            *********************
	 **************************************************************************
	 *************************************************************************/
  	bool actorNotFinished := true;
	undefined: action ==>
	guard
		actorNotFinished
	do
		println("Algo_Parser doesn't manage this case yet");
		actorNotFinished := false;
	end
	
	
//********************************************************************************************************************************** 
	schedule fsm look_for_Sequence_Header :
		look_for_Sequence_Header						( look_for_Sequence_Header							) --> byte_align_a;

	    // FIXME: add minimal error resilience.
	    // byte align, then look for a starting on any byte boundary.
	    // is hex 00000100.
	    byte_align_a    ( byte_align_a    ) --> search_start_code;
	
		// search start code
		search_start_code          			( start_code.search					    ) --> search_start_code;
		search_start_code			            ( start_code.done					) --> read_start_code;
	    

		// read start code
		read_start_code							( read_start_code								) --> find_header;
		//
		find_header	  									( look_for_other_header						) --> look_for_Sequence_Header;
		find_header	  									( look_for.vol	  							) --> read_vol;
		find_header	  									( look_for.vop	  							) --> read_vop;

		// vol
		read_vol ( read_vol.start ) --> read_vol_vbv_parameters;
		read_vol_vbv_parameters ( read_vol.vbv_parameters1 ) --> read_vol_vbv_parameters2;
		read_vol_vbv_parameters2 ( read_vol.vbv_parameters2 ) --> read_vol_video_object_layer_shape;
		read_vol_video_object_layer_shape ( read_vol.video_object_layer_shape ) --> look_for_Sequence_Header;

		// vop
		read_vop ( read_vop ) --> look_for_Sequence_Header;
		
		// undefined
		undefined	  					( undefined		    				) --> undefined;

	end

	priority
		look_for > look_for_other_header;
	end

end
