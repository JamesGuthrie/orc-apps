/********************************************************************************
FU realizing Syntax Parsing for MPEG-2 MP
*****************************************************************************/

// This FU has been modified by Mickael Raulet (INSA of Rennes) 
package org.ietr.mpeg4.part2.sp;

import std.util.BitOps.*;
import org.ietr.mpeg2.mp.ParserUtils.*;
import org.sc29.wg11.common.BitstreamReadUtils.*;
import org.ietr.mpeg4.part2.sp.vldTables.*;
import org.ietr.mpeg4.part2.sp.ConstantsBtype.*;
import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Algo_SynP()
		uint(size=8) BYTE 
		==> 
		:

	procedure log2bin(uint(size=32) value, uint(size=32) res[1])
	var
		int invalue
	begin 
	  invalue := value;
	  res[0] := 0;
	  while (invalue!=0) do
		invalue := invalue >> 1;
		res[0] := res[0] + 1;
	  end
	end
	bool DEBUG_BITSTREAM = false;
	/**************************************************************************
	 * search_start_code or getByte
	 *************************************************************************/
	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL];
	uint(size= 2) zeroByte := 0;
	/* */
  	action BYTE:[ b ] ==>
	guard 
		fifo[FIFO_CPT_BITS] <= (FIFO_SIZE-1)<<3
	var
		uint(size=4) fifo_idx  =  fifo[FIFO_IDX]
	do
		if zeroByte != 3 or b != EPR_VALUE then
			if b = START_CODE_VALUE and zeroByte = 3 then
				fifo[fifo_idx]      := b + START_CODE_FLAG;
			else
				fifo[fifo_idx]      := b;
			end
			fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] + 8;
			if DEBUG_BITSTREAM then
				println("fifo["+fifo_idx+"] := "+b+" \t "+fifo[FIFO_CPT_BITS]);
			end
			fifo[FIFO_IDX]      := (fifo_idx+1) & (FIFO_SIZE-1);
		end
		if b = 0 then
			zeroByte := ((zeroByte << 1) + 1) & 0x3;
		else
			zeroByte := 0;
		end
	end
	
	/*************************************************************
	*************************************************************
	********              NAL Unit HEADER                ********
	*************************************************************
	*************************************************************/

	int VOP_START_CODE                  = 182;
	int VOL_START_CODE                  = 32; //0x20
 


	look_for_Sequence_Header: action ==>
	end
	uint(size=8) start_code;
	read_start_code: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		//println("=========== start code ===========");
		vld_u_name(  8, fifo, res, "start_code                           ");
		start_code := res[0];
	end 
 
	look_for_other_header: action ==>
	end



	look_for.vol: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		start_code = VOL_START_CODE
	do
		println("VOL");
	end

	look_for.vop: action ==>
	guard
		start_code = VOP_START_CODE 
	do
		println("VOP");
	end
 
	/**************************************************************************
	 * sequence_header_start_code
	 *************************************************************************/
	bool vol_control_parameters;
	bool vbv_parameters;
    uint(size=8) vop_time_increment_resolution_bits;
    uint(size=13) video_object_layer_width;
    uint(size=13) video_object_layer_height;
    uint(size=13) mb_pic;

	read_vol.start : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		bool is_object_layer_identifier
	do
		vld_u_name(  1, fifo, res, "random_accessible_vol                           ");
		vld_u_name(  8, fifo, res, "video_object_type_indication                           ");
		vld_u_name(  1, fifo, res, "is_object_layer_identifier                           ");
		is_object_layer_identifier := res[0] = 1;
		if (is_object_layer_identifier) then	
			vld_u_name(  4, fifo, res, "video_object_layer_verid                           ");	
			vld_u_name(  3, fifo, res, "video_object_layer_priority                           ");
		end	
		vld_u_name(  4, fifo, res, "aspect_ratio_info                           ");	
		/*if (aspect_ratio_info == Òextended_PARÓ) {	
			par_width	8
			par_height	8
		}*/
		vld_u_name(  1, fifo, res, "vol_control_parameters                           ");
		vol_control_parameters := res[0] = 1;
		if (vol_control_parameters) then	
			vld_u_name(  2, fifo, res, "chroma_format                           ");
			vld_u_name(  1, fifo, res, "low_delay                           ");
			vld_u_name(  1, fifo, res, "vbv_parameters                           ");
			vbv_parameters := res[0] = 1;
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "first_half_bit_rate                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end
	end

	read_vol.vbv_parameters1: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		if (vol_control_parameters) then	
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "latter_half_bit_rate                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
				vld_u_name(  15, fifo, res, "first_half_vbv_buffer_size                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
				vld_u_name(  3, fifo, res, "latter_half_vbv_buffer_size                           ");
				vld_u_name(  11, fifo, res, "first_half_vbv_occupancy                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end
	end

	read_vol.vbv_parameters2: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		if (vol_control_parameters) then	
			if (vbv_parameters) then	
				vld_u_name(  15, fifo, res, "latter_half_vbv_occupancy                           ");
				vld_u_name(  1, fifo, res, "marker_bit                           ");
			end
		end	
	end

	read_vol.video_object_layer_shape: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		bool fixed_vop_rate,
	    uint(size=16) vop_time_increment_resolution
	do
		vld_u_name(  2, fifo, res, "video_object_layer_shape                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  16, fifo, res, "vop_time_increment_resolution                           ");
		vop_time_increment_resolution := res[0]; 
	    log2bin(vop_time_increment_resolution-1, res);
	    vop_time_increment_resolution_bits :=  if res[0] > 1 then res[0] else 1 end;
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  1, fifo, res, "fixed_vop_rate                           ");
		fixed_vop_rate := res[0]=1;
		if (fixed_vop_rate) then	
			vld_u_name(  1, fifo, res, "vop_time_increment_resolution_bits                           ");
		end
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  13, fifo, res, "video_object_layer_width                           ");
		video_object_layer_width := res[0];
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  13, fifo, res, "video_object_layer_height                           ");
		video_object_layer_height := res[0];
		mb_pic:=video_object_layer_width * video_object_layer_height / 256;
		vld_u_name(  1, fifo, res, "interlaced                           ");
		vld_u_name(  1, fifo, res, "obmc_disable                           ");
		vld_u_name(  1, fifo, res, "sprite_enable                           ");
		vld_u_name(  1, fifo, res, "not_8_bit                           ");
		vld_u_name(  1, fifo, res, "quant_type                           ");
		vld_u_name(  1, fifo, res, "complexity_estimation_disable                           ");
		vld_u_name(  1, fifo, res, "resync_marker_disable                           ");
		vld_u_name(  1, fifo, res, "data_partitioned                           ");
		vld_u_name(  1, fifo, res, "scalability                           ");
	end

	/**************************************************************************
	 * VOP
	 *************************************************************************/
	uint(size=2) vop_coding_type;
	bool vop_coded;
	bool round;
	int BITS_QUANT                      = 5;
	int(size=BITS_QUANT+1) vop_quant;
	int(size=BITS_QUANT+1) prev_quant;
	int(size=7) intra_dc_threshold_table[8] = [ 32, 13, 15, 17, 19, 21, 23, 1];
	int(size=7) intra_dc_vlc_thr;
	int VOP_FCODE_FOR_LENGTH            = 3;
	int(size=VOP_FCODE_FOR_LENGTH+1) fcode;
	int mb_cnt;
	

	read_vop : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		mb_cnt := 0;
		vld_u_name(  2, fifo, res, "vop_coding_type                           ");
		vop_coding_type := res[0];
	end

	int B_VOP                           = 2;
	int P_VOP                           = 1;
	int I_VOP                           = 0;
	
	read_vop_coding_type.supported : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		vop_coding_type = I_VOP or vop_coding_type = P_VOP
	var
		int(size=32) res[1],
		bool modulo_time_base := true,
		int time_incr := 0
	do
		if vop_coding_type = I_VOP then println("I_VOP"); else println("P_VOP"); end 
		while(modulo_time_base) do
			vld_u_name(  1, fifo, res, "modulo_time_base                           ");
			modulo_time_base := res[0]=1;
			time_incr := time_incr + 1;
		end
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  vop_time_increment_resolution_bits, fifo, res, "vop_time_increment                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  1, fifo, res, "vop_coded                           ");
		vop_coded:=res[0]=1;
	end

	read_vop_coding_type.unsupported : action ==>
	guard
		vop_coding_type != I_VOP, vop_coding_type != P_VOP
	do
		println("unsupported");
	end
	
	read_vop_coded.coded:action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		vop_coded
	var
		int(size=32) res[1],
		int cmd
	do
		if vop_coding_type = P_VOP then
			vld_u_name(  1, fifo, res, "vop_rounding_type                           ");
			round := res[0] = 1;
		else
			round:= false;
		end
		vld_u_name(  3, fifo, res, "intra_dc_vlc_thr                           ");
		intra_dc_vlc_thr := intra_dc_threshold_table[res[0]];
		vld_u_name(  5, fifo, res, "vop_quant                           ");
		vop_quant := res[0];
		prev_quant:=vop_quant;
 		if (vop_coding_type != I_VOP) then
			vld_u_name(  3, fifo, res, "vop_fcode_forward                           ");
			fcode := res[0];
		else
			fcode := 0;
		end
 		if (vop_coding_type = B_VOP) then
			vld_u_name(  3, fifo, res, "vop_fcode_backward                           ");
		end
		cmd := NEWVOP | if vop_coding_type = I_VOP then INTRA else INTER end;
	    cmd := cmd | if round then ROUND_TYPE else 0 end;
	    cmd := cmd | ((fcode << FCODE_SHIFT) & FCODE_MASK);
	    println("cmd "+cmd);
		println("vol_width " + video_object_layer_width / 16);
		println("vol_height " + video_object_layer_height / 16);
	end
	
	read_vop_coded.uncoded:action ==>
	guard
		not vop_coded
	do
	// TODO: the model does not communicate to the display driver
    // to re-use the current VOP in place of the uncoded one.
	
	end
	/**************************************************************************
	 * MB
	 *************************************************************************/

	 
	 int(size=8) derived_mb_type;
	 int(size=3) cbpc;
	 bool is_intra;
	 bool btype_is_Q;
	 bool fourmvflag;
	 bool not_coded;


	procedure get_mcbpc(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
	 						  int(size=32) res[1],String name)
	var 
		int index
	begin
	  	if (vop_coding_type = I_VOP) then
		  	showBits(9, fifo, res);  		
		
			index := res[0];
			index := index >> 3;
			flushBits(mcbpc_intra_table[index][1], fifo); 
			
		
			res[0] := mcbpc_intra_table[index][0];
		
			if DEBUG_PARSER then
				println("          "+name+" vld : "+res[0]);
			end
		else
			showBits(9, fifo, res);
			index := if res[0] < 256 then res[0] else 256 end;
			flushBits(mcbpc_inter_table[index][1], fifo); 
			res[0] := mcbpc_inter_table[index][0];
			if DEBUG_PARSER then
				println("          "+name+" vld : "+res[0]);
			end
		end
	end
	
	procedure get_cbpy(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
	 						  int(size=32) res[1],String name, bool intra)
	var 
		int index
	begin
		showBits(6, fifo, res);
		index := res[0];
		flushBits(cbpy_table[index][1], fifo); 
		res[0] := cbpy_table[index][0];

		if (not intra) then
			res[0] := 15 - res[0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	end
	
	int(size=3) dquant_table[4] = [ -1, -2, 1, 2 ];
	int(size=7) cbp;
	bool ac_pred_flag;
	
	read_mb.start: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		cmp:=0;
		if (vop_coding_type != I_VOP) then
			vld_u_name(  1, fifo, res, "not_coded                           ");
			not_coded := res[0] = 1;
		else
			not_coded := false;
		end
		if  not not_coded or vop_coding_type = I_VOP then
			get_mcbpc( fifo, res, "mcbpc                           ");
			derived_mb_type := res[0] & 7;
			
			cbpc := (res[0] >> 4);
			fourmvflag := (res[0] = 2);
			is_intra := (derived_mb_type = 3 || derived_mb_type = 4);
			btype_is_Q := (derived_mb_type = 1 || derived_mb_type = 4);
			if (is_intra) then
				vld_u_name(  1, fifo, res, "ac_pred_flag                           ");
				ac_pred_flag := res[0] = 1;
			else
				ac_pred_flag := false;
			end
			get_cbpy( fifo, res, "cbpy                           ", is_intra);
			cbp := (res[0] << 2) | cbpc;
			println("cbp " +cbp);
			
			prev_quant:=vop_quant;	
			if  (btype_is_Q) then
				vld_u_name(  2, fifo, res, "dquant                           ");
				vop_quant:=vop_quant+dquant_table[res[0]];
		 	    if ( vop_quant > 31 ) then 
		            vop_quant := 31 ;
				end
		        if ( vop_quant < 1 ) then
		            vop_quant := 1 ;
				end
			end
		end
	end

	read_mb_done: action ==>
	guard
		mb_cnt = mb_pic
	end

	/**************************************************************************
	 * Block
	 *************************************************************************/
	int (size=4) cmp;
	bool last;
	int(size=8) run;
	int(size=8) level;
	
	int(size=3) dc_lum_tab[8][2] :=[	[0, 0], [4, 3], [3, 3], [0, 3],
		[2, 2], [2, 2], [1, 2], [1, 2]
	];
	
	procedure get_dc_dif(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name, int(size=16) dc_size)
	var
		int msb
	begin
		vld_u(  dc_size, fifo, res);
		msb := res[0] >> (dc_size - 1);
	
		if (msb = 0) then
			res[0] := -1 * (res[0] ^ ((1 << dc_size) - 1));
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	end
	

	procedure get_dc_size_lum(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var 
		int code,
		int val,
		bool valEnd := false
	begin
		showBits(11, fifo, res);
		code := res[0];
		val := 11;
		while (val > 3 and not valEnd) do
			if (code = 1) then
				flushBits(val, fifo); 
				valEnd := true;
			else
				code := code >> 1;
				val := val - 1;
			end
		end
	
		if valEnd then
			res[0] := val + 1; 
		else
			flushBits(dc_lum_tab[code][1], fifo); 
			res[0] := dc_lum_tab[code][0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	
	end

	procedure get_dc_size_chrom(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var 
		int code,
		int val,
		bool valEnd := false
	begin
		showBits(12, fifo, res);
		code := res[0];
		val := 12;
		while (val > 2 and not valEnd) do
			if (code = 1) then
				flushBits(val, fifo); 
				valEnd := true;
			else
				code := code >> 1;
				val := val - 1;
			end
		end
	
		if valEnd then
			res[0] := val; 
		else
			getBits(2, fifo, res); 
			res[0] := 3 - res[0];
		end
		if DEBUG_PARSER then
			println("          "+name+" vld : "+res[0]);
		end
	
	end

	read_block.start: action ==>
	end

	read_block_done: action ==>
	guard cmp=6
	do
		mb_cnt := mb_cnt + 1;
		println("****************************** " + mb_cnt);
	end

	read_block_dc: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1],
		int dc_size,
		int dc_dif,
	    int(size=BTYPE_SZ) cmd,
	    bool ac_coded
	do
		last:=false;
		if prev_quant < intra_dc_vlc_thr then
			if cmp < 4  then 
				get_dc_size_lum( fifo, res,"dc_size                ");
				dc_size := res[0];
			else
				get_dc_size_chrom( fifo, res,"dc_size                ");
				dc_size := res[0];
			end
      		if dc_size > 0  then 
      			get_dc_dif( fifo, res,"dc_dif                ", dc_size);
	      		dc_dif := res[0];
	      	else 
	      		dc_dif := 0; 
	      	end
  			if dc_size > 8 then
				vld_u_name(  1, fifo, res, "marker_bit                           ");
  			end
		end
	    ac_coded := (cbp & (1 << (5 - cmp))) != 0;
	    cmd := INTRA | if ac_coded then ACCODED else 0 end;
	    cmd := cmd | if ac_pred_flag then ACPRED else 0 end;
		println("INTRA " + cmd);
    	println("          get_coeff             run : "+ 0+" level : "+ dc_dif+" last : "+ not ac_coded);
	end
	
	read_block_nodc: action ==>
	guard 
		not is_intra
	var
		int(size=BTYPE_SZ) cmd,
	    bool ac_coded
	do
		    ac_coded := (cbp & (1 << (5 - cmp))) != 0;
		    cmd := INTER | if ac_coded then ACCODED else 0 end;
			cmd:=((cmd) | (MOTION | if fourmvflag then FOURMV else 0 end));		
			println("INTER " + cmd);
	end

	read_block_coeff_ac: action ==>
	end

	read_block_coeff_noac: action ==>
	guard
 	   (cbp & (1 << (5 - cmp))) = 0
	do
		cmp := cmp + 1;
	end

	function GET_BITS(int cache, int n) --> int : ((cache)>>(32-(n))) end
	read_block_coeff: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var 
		uint res[1]
	do
		get_coeff(fifo, res, "get_coeff            ", is_intra);
	end

	read_block_coeff_done: action ==>
	guard last
	do
		cmp := cmp + 1;
	end

	procedure get_coeff(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  uint(size=32) res[1],String name, bool is_intra)
	var 
		uint cache,
		uint(size=1) intra = if is_intra then 1 else 0 end,
		int skip[3] = [1, 1, 2],
		int mode,
		int len
	begin
		showBits(32, fifo, res);
		cache := res[0];
		if (GET_BITS(cache, 7) != ESCAPE) then
			last := DCT3D[intra][GET_BITS(cache, 12)][1] = 1;
			run  := DCT3D[intra][GET_BITS(cache, 12)][2];
			level := DCT3D[intra][GET_BITS(cache, 12)][3];
			flushBits(DCT3D[intra][GET_BITS(cache, 12)][0] + 1, fifo);
			level := if ((GET_BITS(cache, DCT3D[intra][GET_BITS(cache, 12)][0] + 1) & 1) = 1) then -level else level end;
		else
			cache := cache << 7;
			mode := GET_BITS(cache, 2);
			if (mode < 3) then
				cache := cache << skip[mode];
		
				last := DCT3D[intra][GET_BITS(cache, 12)][1] = 1;
				run  := DCT3D[intra][GET_BITS(cache, 12)][2];
				level := DCT3D[intra][GET_BITS(cache, 12)][3];
				if (mode < 2) then
					level := level + max_level[intra][if last then 1 else 0 end][run];
				else
					run := run +  max_run[intra][if last then 1 else 0 end][level] + 1;
				end
				len:= DCT3D[intra][GET_BITS(cache, 12)][0];
				
				flushBits(7 + skip[mode] + len + 1, fifo);
		
				level := if ((GET_BITS(cache, len + 1) & 1) = 1) then -level else level end;
			else
		
				cache := cache << 2;
				last :=  GET_BITS(cache, 1) = 1;
				run  := (GET_BITS(cache, 7)&0x3f);
				level := (GET_BITS(cache, 20)&0xfff);
			
				flushBits(30, fifo);
		
				level := level << 20 >> 20;
			end

		end
		if DEBUG_PARSER then
			println("          "+name+" run : "+ run+" level : "+ level+" last : "+ last);
		end
		println("          "+name+" run : "+ run+" level : "+ level+" last : "+ last);
	end

	/**************************************************************************
	 * motion vectors
	 *************************************************************************/
	read_uncoded: action ==>
	guard
		not_coded
	do
	    println("INTER " + INTER);
	    println("INTER " + INTER);
	    println("INTER " + INTER);
	    println("INTER " + INTER);
	    println("INTER " + INTER);
	    println("INTER " + INTER);
	    cmp:=6;
	    mb_cnt := mb_cnt + 1;
	end

	read_mv.start: action ==>
	guard
		derived_mb_type = 0 or derived_mb_type = 1
	end

	read_mv_data: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var 
		int res[1],
		int(size=14) mv[4]
	do
		get_mv(fifo, res, "horizontal_mv_data            ");
    	println("mvval " + res[0]);
    	mv[0] := res[0];
		if (fcode <= 1 or (res[0] = 0)) then
		    println("get_residual_x " + 0);
	    	mv[1] := 0;
		else
			vld_u_name(  (fcode - 1), fifo, res, "horizontal_mv_residual            ");
		    println("get_residual_x " + res[0]);
	    	mv[1] := res[0];
		end
		get_mv(fifo, res, "vertical_mv_data            ");
    	println("mvval " + res[0]);
	    mv[2] := res[0];
		if (fcode <= 1 or (res[0] = 0)) then
		    println("get_residual_y " + 0);
		    mv[3] := 0;
		else
			vld_u_name(  (fcode - 1), fifo, res, "vertical_mv_residual            ");
		    println("get_residual_y " + res[0]);
	    	mv[3] := res[0];
		end
	end
	
	procedure get_mv(int(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL],
		 						  int(size=32) res[1],String name)
	var
		int index
	begin
		vld_u(  1, fifo, res);
 		
 		if res[0] = 0  then
			showBits(12, fifo, res);
 			index := res[0];
 			println("index " + index);
 			if index >= 512 then
				index := (index >> 8) - 2;
				flushBits(TMNMVtab0[index][1], fifo); 
				res[0] := TMNMVtab0[index][0];
 			else 
 				if index >=128 then
					index := (index >> 2) - 32;
					flushBits(TMNMVtab1[index][1], fifo); 
					res[0] := TMNMVtab1[index][0];
					
	 			else
					index := index - 4;
					flushBits(TMNMVtab2[index][1], fifo); 
					res[0] := TMNMVtab2[index][0];
	 			end
 			end
 		else
 			res[0] := 0;
 		end
 		
		if DEBUG_PARSER then
			println("          "+name+" vld :" + res[0]);
		end
	end

	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	start_code.search: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		not IsStartCode(fifo)
   	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then		
  			println("start_code.search");
   		end
	end
	start_code.done: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		IsStartCode(fifo)
	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then
			println("start_code.done");
		end
	end

	byte_align_a: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	do
		byte_align(fifo);
	end
	
	/**************************************************************************
	 **************************************************************************
	 ********        undefined                            *********************
	 **************************************************************************
	 *************************************************************************/
  	bool actorNotFinished := true;
	undefined: action ==>
	guard
		actorNotFinished
	do
		println("Algo_Parser doesn't manage this case yet");
		actorNotFinished := false;
	end
	
	
//********************************************************************************************************************************** 
	schedule fsm look_for_Sequence_Header :
		look_for_Sequence_Header						( look_for_Sequence_Header							) --> byte_align_a;

	    // FIXME: add minimal error resilience.
	    // byte align, then look for a starting on any byte boundary.
	    // is hex 00000100.
	    byte_align_a    ( byte_align_a    ) --> search_start_code;
	
		// search start code
		search_start_code          			( start_code.search					    ) --> search_start_code;
		search_start_code			            ( start_code.done					) --> read_start_code;
	    

		// read start code
		read_start_code							( read_start_code								) --> find_header;
		//
		find_header	  									( look_for_other_header						) --> look_for_Sequence_Header;
		find_header	  									( look_for.vol	  							) --> read_vol;
		find_header	  									( look_for.vop	  							) --> read_vop;

		// vol
		read_vol ( read_vol.start ) --> read_vol_vbv_parameters;
		read_vol_vbv_parameters ( read_vol.vbv_parameters1 ) --> read_vol_vbv_parameters2;
		read_vol_vbv_parameters2 ( read_vol.vbv_parameters2 ) --> read_vol_video_object_layer_shape;
		read_vol_video_object_layer_shape ( read_vol.video_object_layer_shape ) --> look_for_Sequence_Header;

		// vop
		read_vop ( read_vop ) --> read_vop_coding_type;
		read_vop_coding_type ( read_vop_coding_type.supported ) --> read_vop_coded;
		read_vop_coding_type ( read_vop_coding_type.unsupported ) --> look_for_Sequence_Header;
		read_vop_coded (read_vop_coded.coded ) --> read_mb;
		read_vop_coded (read_vop_coded.uncoded ) --> look_for_Sequence_Header;
		
		// start MB
		read_mb (read_mb.start) --> read_mv;
		read_mb (read_mb_done) --> look_for_Sequence_Header;
		
		// start mv
		read_mv (read_uncoded) --> read_mb;
		read_mv (read_mv.start) --> read_mv_data;
		read_mv (read_block.start) --> read_block_dc;
		read_mv_data (read_mv_data) --> read_block;

		// start block
		read_block (read_block.start) --> read_block_dc;
		read_block (read_block_done) --> read_mb;
		read_block_dc (read_block_dc) --> read_block_coeff_ac;
		read_block_dc (read_block_nodc) --> read_block_coeff_ac;
		read_block_coeff_ac (read_block_coeff_ac) --> read_block_coeff;
		read_block_coeff_ac (read_block_coeff_noac) --> read_block;
		read_block_coeff (read_block_coeff) --> read_block_coeff;
		read_block_coeff (read_block_coeff_done) --> read_block;
		// undefined
		undefined	  					( undefined		    				) --> undefined;

	end

	priority
		look_for > look_for_other_header;
		read_block_coeff_done > read_block_coeff;
		read_uncoded > read_mv > read_block;
		read_block_done > read_block;
		read_mb_done > read_mb;
		read_block_coeff_noac > read_block_coeff_ac;
		read_block_nodc > read_block_dc;
	end

end
