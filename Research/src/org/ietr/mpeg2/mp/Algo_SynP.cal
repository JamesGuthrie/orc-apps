/********************************************************************************
FU realizing Syntax Parsing for MPEG-2 MP
*****************************************************************************/

// This FU has been modified by Mickael Raulet (INSA of Rennes) 
package org.ietr.mpeg2.mp;

import std.util.BitOps.*;
import org.ietr.mpeg2.mp.ParserUtils.*;
import org.sc29.wg11.common.BitstreamReadUtils.*;

actor Algo_SynP()
		uint(size=8) BYTE 
		==> 
		:

	bool DEBUG_BITSTREAM = false;
	/**************************************************************************
	 * search_start_code or getByte
	 *************************************************************************/
	uint(size=FIFO_DEPTH) fifo[FIFO_SIZE_ALL];
	uint(size= 2) zeroByte := 0;
	/* */
  	action BYTE:[ b ] ==>
	guard 
		fifo[FIFO_CPT_BITS] <= (FIFO_SIZE-1)<<3
	var
		uint(size=4) fifo_idx  =  fifo[FIFO_IDX]
	do
		if zeroByte != 3 or b != EPR_VALUE then
			if b = START_CODE_VALUE and zeroByte = 3 then
				fifo[fifo_idx]      := b + START_CODE_FLAG;
			else
				fifo[fifo_idx]      := b;
			end
			fifo[FIFO_CPT_BITS] := fifo[FIFO_CPT_BITS] + 8;
			if DEBUG_BITSTREAM then
				println("fifo["+fifo_idx+"] := "+b+" \t "+fifo[FIFO_CPT_BITS]);
			end
			fifo[FIFO_IDX]      := (fifo_idx+1) & (FIFO_SIZE-1);
		end
		if b = 0 then
			zeroByte := ((zeroByte << 1) + 1) & 0x3;
		else
			zeroByte := 0;
		end
	end
	
	uint(size=1) moreDataFlag;
	//*************************************************************/


 	procedure more_rbsp_data()   
  	var 
  		uint(size=4) cptBits = (fifo[FIFO_CPT_BITS] - 1) & 7,
		int(size=32) res[1],
 		uint(size=9) idx     = getFifoIdx(fifo[FIFO_CPT_BITS], fifo)
	begin
		if (fifo[(idx + 1) & 7]) != 0 or ( (fifo[(idx + 3) & 7] & 0x100) = 0 and (fifo[(idx + 4) & 7] & 0x100) = 0 ) then 
				moreDataFlag:=1; 
			else 
				showBits ((cptBits + 1), fifo, res);
				moreDataFlag:=if(res[0] = 1<< cptBits) then 0 else 1 end;
			end
	end
	  
	
	/*************************************************************
	*************************************************************
	********              NAL Unit HEADER                ********
	*************************************************************
	*************************************************************/

	look_for_Sequence_Header: action ==>
	end
	uint(size=8) start_code;
	read_start_code: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		//println("=========== start code ===========");
		vld_u_name(  8, fifo, res, "start_code                           ");
		start_code := res[0];
	end 
 
	look_for_other_header: action ==>
	end



	look_for.picture_start_code: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		start_code = picture_start_code
	end

	look_for.slice_start_code: action ==>
	guard
		start_code >= slice_start_code_begin && start_code <= slice_start_code_end 
	end
 
	look_for.sequence_header_code: action ==>
	guard
		start_code = sequence_header_code
	do
		println("look_for.sequence_header_code");
	end

	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	read_sequence_header : action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	var
		int(size=32) res[1]
	do
		vld_u_name(  12, fifo, res, "horizontal_size_value                           ");
		vld_u_name(  12, fifo, res, "vertical_size_value                           ");
		vld_u_name(  4, fifo, res, "aspect_ratio_information                           ");
		vld_u_name(  4, fifo, res, "frame_rate_code                           ");
		vld_u_name(  18, fifo, res, "bit_rate_value                           ");
		vld_u_name(  1, fifo, res, "marker_bit                           ");
		vld_u_name(  10, fifo, res, "vbv_buffer_size_value                           ");
		vld_u_name(  1, fifo, res, "constrained_parameters_flag                           ");
		vld_u_name(  1, fifo, res, "load_intra_quantiser_matrix                           ");
	end

	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	/**************************************************************************
	 * search_start_code
	 *************************************************************************/
	start_code.search: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		not IsStartCode(fifo)
   	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then		
  			println("start_code.search");
   		end
	end
	start_code.done: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3,
		IsStartCode(fifo)
	do
		flushBits( 8, fifo);
		if DEBUG_BITSTREAM then
			println("start_code.done");
		end
	end

	byte_align_a: action ==>
	guard
		fifo[FIFO_CPT_BITS] >= (FIFO_SIZE-1)<<3
	do
		byte_align(fifo);
	end
	
	/**************************************************************************
	 **************************************************************************
	 ********        undefined                            *********************
	 **************************************************************************
	 *************************************************************************/
  	bool actorNotFinished := true;
	undefined: action ==>
	guard
		actorNotFinished
	do
		println("Algo_Parser doesn't manage this case yet");
		actorNotFinished := false;
	end
	
	
//********************************************************************************************************************************** 
	schedule fsm look_for_Sequence_Header :
		look_for_Sequence_Header						( look_for_Sequence_Header							) --> byte_align_a;

	    // FIXME: add minimal error resilience.
	    // byte align, then look for a starting on any byte boundary.
	    // is hex 00000100.
	    byte_align_a    ( byte_align_a    ) --> search_start_code;
	
		// search start code
		search_start_code          			( start_code.search					    ) --> search_start_code;
		search_start_code			            ( start_code.done					) --> read_start_code;
	    

		// read start code
		read_start_code							( read_start_code								) --> find_header;

		//
		find_header	  									( look_for_other_header								) --> look_for_Sequence_Header;
		find_header	  									( look_for.picture_start_code	  							) --> look_for_Sequence_Header;
		find_header	  									( look_for.slice_start_code	  							) --> look_for_Sequence_Header;
		find_header	  									( look_for.sequence_header_code	  							) --> read_sequence_header;
		
		// sequence header
		read_sequence_header ( read_sequence_header ) --> look_for_Sequence_Header;

		// undefined
		undefined	  					( undefined		    				) --> undefined;

	end

	priority
		look_for > look_for_other_header;
	end

end
