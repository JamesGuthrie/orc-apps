package org.ietr.mpegh.part2.main.inter;
import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

unit DecodingPictureBufferFunctions :

  /* /!\ : Check the size of the border. */
  uint(size = 16) BORDER_SIZE = 128;
  uint(size = 8) DPB_SIZE = 17; 

  @optimize_c(condition="SSE_ENABLE", name="copy_cu_dpb_luma_orcc")
  procedure copy_cu_dpb_luma_cal(
          uint(size= 8) samp[256],
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      int (size=32) xPixIdx,
  	      int (size=32) yPixIdx,
  	      int (size= 4) lastIdx)
  begin
    foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*16];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="copy_cu_dpb_chroma_orcc")
  procedure copy_cu_dpb_chroma_cal(
          uint(size= 8) samp[64],
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      int (size=32) xPixIdx,
  	      int (size=32) yPixIdx,
  	      int (size= 4) lastIdx)
  begin
    foreach int y in 0 .. 7
		do
			foreach int x in 0 .. 7
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*8];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_64_luma_orcc")
  procedure getmvinfo_dpb_64_luma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(64 + 7) * (64 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_32_luma_orcc")
  procedure getmvinfo_dpb_32_luma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(32 + 7) * (32 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_16_luma_orcc")
  procedure getmvinfo_dpb_16_luma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT+2*BORDER_SIZE][PICT_WIDTH+2*BORDER_SIZE],
  	      uint(size= 8) RefCu[(16 + 7) * (16 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_64_chroma_orcc")
  procedure getmvinfo_dpb_64_chroma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(32 + 3) * (32 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_32_chroma_orcc")
  procedure getmvinfo_dpb_32_chroma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(16 + 3) * (16 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="getmvinfo_dpb_16_chroma_orcc")
  procedure getmvinfo_dpb_16_chroma_cal(
  	      uint(size= 8) pictureBuffer[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
  	      uint(size= 8) RefCu[(8 + 3) * (8 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset)
  begin
    foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
  end

  @optimize_c(condition="SSE_ENABLE", name="fillBorder_luma_orcc")
  procedure fillBorder_luma_cal(
	uint(size=8) pictureBuffer[DPB_SIZE][PICT_HEIGHT + 2 * BORDER_SIZE][PICT_WIDTH + 2 * BORDER_SIZE],
	int(size=4) lastIdx,
	int xSize,
	int ySize,
	uint(size=16) border_size)
  begin
    foreach int y in 0 .. border_size - 1
	do
		foreach int x in border_size .. xSize + border_size - 1
		do
			pictureBuffer[lastIdx][y][x] :=
				pictureBuffer[lastIdx][border_size][x];
			pictureBuffer[lastIdx][y+ySize+border_size][x] :=
				pictureBuffer[lastIdx][ySize+border_size-1][x];
		end
	end
	foreach int y in 0 .. ySize + 2*border_size - 1
	do
		foreach int x in 0 .. border_size - 1
		do
			pictureBuffer[lastIdx][y][x] :=
				pictureBuffer[lastIdx][y][border_size];
			pictureBuffer[lastIdx][y][x+xSize+border_size] :=
				pictureBuffer[lastIdx][y][xSize+border_size-1];
		end
	end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="fillBorder_chroma_orcc")
  procedure fillBorder_chroma_cal(
	uint(size=8) pictureBuffer[DPB_SIZE][PICT_HEIGHT / 2 + 2 * BORDER_SIZE][PICT_WIDTH / 2 + 2 * BORDER_SIZE],
	int(size=4) lastIdx,
	int xSize,
	int ySize,
	uint(size=16) border_size)
  begin
    foreach uint x in border_size .. xSize-1 + border_size
		do
			foreach uint y in 0 .. border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][border_size][x];
				pictureBuffer[lastIdx][y+ySize+border_size][x] :=
					pictureBuffer[lastIdx][ySize+border_size-1][x];
			end
		end
		foreach uint y in 0 .. ySize + 2 * border_size - 1
		do
			foreach uint x in 0 .. border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][y][border_size];
				pictureBuffer[lastIdx][y][x+xSize+border_size] :=
					pictureBuffer[lastIdx][y][xSize+border_size-1];
			end
		end
  end
  
end