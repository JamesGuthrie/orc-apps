package org.ietr.mpegh.part2.main.inter;
import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

unit DecodingPictureBufferFunctions : 

  @optimize_c(condition="SSE_ENABLE", name="fillBorder_luma_orcc")
  procedure fillBorder_luma_cal(
	uint(size=8) pictureBuffer[17][2304][4352],
	int(size=4) lastIdx,
	int xSize,
	int ySize,
	uint(size=16) border_size)
  begin
    foreach int y in 0 .. border_size - 1
		do
			foreach int x in border_size .. xSize + border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][border_size][x];
				pictureBuffer[lastIdx][y+ySize+border_size][x] :=
					pictureBuffer[lastIdx][ySize+border_size-1][x];
			end
		end
		foreach int y in 0 .. ySize + 2*border_size - 1
		do
			foreach int x in 0 .. border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][y][border_size];
				pictureBuffer[lastIdx][y][x+xSize+border_size] :=
					pictureBuffer[lastIdx][y][xSize+border_size-1];
			end
		end
  end
  
  @optimize_c(condition="SSE_ENABLE", name="fillBorder_chroma_orcc")
  procedure fillBorder_chroma_cal(
	uint(size=8) pictureBuffer[17][1280][2304],
	int(size=4) lastIdx,
	int xSize,
	int ySize,
	uint(size=16) border_size)
  begin
    foreach int y in 0 .. border_size - 1
		do
			foreach int x in border_size .. xSize + border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][border_size][x];
				pictureBuffer[lastIdx][y+ySize+border_size][x] :=
					pictureBuffer[lastIdx][ySize+border_size-1][x];
			end
		end
		foreach int y in 0 .. ySize + 2*border_size - 1
		do
			foreach int x in 0 .. border_size - 1
			do
				pictureBuffer[lastIdx][y][x] :=
					pictureBuffer[lastIdx][y][border_size];
				pictureBuffer[lastIdx][y][x+xSize+border_size] :=
					pictureBuffer[lastIdx][y][xSize+border_size-1];
			end
		end
  end

end