package org.ietr.mpegh.part2.main.Filters;
actor QpGen () int(size=7) TuSize ==> int(size=8) Qp :

	int(size=16) qp;

	/**************************************************************************
	 * ComputeQp
	 *************************************************************************/
	procedure ComputeQp( //		uint(size= 8) sps_bit_depth_luma_minus8
		int(size=8) slice_qp)
	var
		uint(size=8) sps_bit_depth_luma_minus8 = 0,
		uint(size=16) qp_bd_offset_luma = 6 * sps_bit_depth_luma_minus8,
		int(size=8) qp_y = ((slice_qp + /*s->tu.cu_qp_delta +*/
							52 + 2 * qp_bd_offset_luma) mod (52 + qp_bd_offset_luma)) -
							qp_bd_offset_luma
	begin
		qp := qp_y + qp_bd_offset_luma;
	end
	/**************************************************************************
	 * split.chroma
	 *************************************************************************/
	split.chroma: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
						  ==>
	guard
		rc_cIdx != 0
	end
	/**************************************************************************
	 * split_4x4
	 *************************************************************************/
	split_4x4: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
					  ==>
					  Qp:[ qp ]
	guard
		rc_cIdx = 0 and sizeOfTU = 4
	do
		ComputeQp(slice_qp);
	end
	/**************************************************************************
	 * split_8x8
	 *************************************************************************/
	split_8x8: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ] 
					  ==>
					  Qp:[ [ qp : for int k in 0 .. 3 ] ] repeat 4
	guard
		rc_cIdx = 0 and sizeOfTU = 8
	do
		ComputeQp(slice_qp);
	end
	/**************************************************************************
	 * split_16x16
	 *************************************************************************/
	split_16x16: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
						==>
						Qp:[ [ qp : for int k in 0 .. 15 ] ] repeat 16
	guard
		rc_cIdx = 0 and sizeOfTU = 16
	do
		ComputeQp(slice_qp);
	end
	/**************************************************************************
	 * split_32x32
	 *************************************************************************/
	split_32x32: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
						==>
						Qp:[ [ qp : for int k in 0 .. 63 ] ] repeat 64
	guard
		rc_cIdx = 0 and sizeOfTU = 32
	do
		ComputeQp(slice_qp);
	end
	/**************************************************************************
	 * split_64x64
	 *************************************************************************/
	split_64x64: action TuSize:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
						==>
						Qp:[ [ qp : for int k in 0 .. 255 ] ] repeat 256
	guard
		rc_cIdx = 0 and sizeOfTU = 64
	do
		ComputeQp(slice_qp);
	end
end
