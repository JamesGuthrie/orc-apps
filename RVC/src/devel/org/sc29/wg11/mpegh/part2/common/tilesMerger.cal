package devel.org.sc29.wg11.mpegh.part2.common;

actor tilesMerger () uint (size= 8) IN1, uint (size= 8) IN2, uint (size= 8) IN3, uint (size= 8) IN4  ==> uint (size= 8) OUT:

uint counter1 := 0;
uint counter2 := 0;
uint counter3 := 0;
uint counter4 := 0;
uint countOut := 0;

uint (size=8) tab1[384*256*3/2];
uint (size=8) tab2[448*256*3/2];
uint (size=8) tab3[384*224*3/2];
uint (size=8) tab4[448*224*3/2];

	action IN1:[data]  ==> 
	guard
		counter1 < 384*256*3/2
	do
		tab1[counter1] := data;
		counter1 := counter1 + 1;
	end
	
	action IN2:[data] ==> 
	guard
		counter2 < 448*256*3/2
	do
		tab2[counter2] := data;
		counter2 := counter2 + 1;
	end
	
	action IN3:[data] ==> 
	guard
		counter3 < 384*224*3/2
	do
		tab3[counter3] := data;
		counter3 := counter3 + 1;
	end
	
	action IN4:[data]  ==>  
	guard
		counter4 < 448*224*3/2
	do
		tab4[counter4] := data;
		counter4 := counter4 + 1;
	end
	
	endTiles: action ==>
	guard
		counter1 = 384*256*3/2,
		counter2 = 448*256*3/2,
		counter3 = 384*224*3/2,
		counter4 = 448*224*3/2
	end
	
	sendTile1: action ==> OUT:[out]
	var
		uint (size=8) out
	do
		out := tab1[countOut];
		countOut := countOut + 1;
	end
	
	sentTile1: action ==>
	guard
		countOut = 384*256*3/2
	do
		countOut := 0;
	end
	
	sendTile2: action ==> OUT:[out]
	var
		uint (size=8) out
	do
		out := tab2[countOut];
		countOut := countOut + 1;
	end
	
	sentTile2: action ==>
	guard
		countOut = 448*256*3/2
	do
		countOut := 0;
	end
	
	
	sendTile3: action ==> OUT:[out]
	var
		uint (size=8) out
	do
		out := tab3[countOut];
		countOut := countOut + 1;
	end
	
	sentTile3: action ==>
	guard
		countOut = 384*224*3/2
	do
		countOut := 0;
	end
	
	sendTile4: action ==> OUT:[out]
	var
		uint (size=8) out
	do
		out := tab4[countOut];
		countOut := countOut + 1;
	end
	
	sentTile4: action ==>
	guard
		countOut = 448*224*3/2
	do
		countOut := 0;
		counter1 := 0;
		counter2 := 0;
		counter3 := 0;
		counter4 := 0;
	end
	
	
	schedule fsm readDone:
		readDone	(endTiles)		--> t1;
		t1			(sendTile1)		--> t1;
		t1			(sentTile1)		--> t2;
		t2			(sendTile2)		--> t2;
		t2			(sentTile2)		--> t3;
		t3			(sendTile3)		--> t3;
		t3			(sentTile3) 	--> t4;
		t4			(sendTile4)		--> t4;
		t4			(sentTile4)		--> readDone;
	end
	
	priority
		sentTile1 > sendTile1;
		sentTile2 > sendTile2;
		sentTile3 > sendTile3;
		sentTile4 > sendTile4;
	end
end