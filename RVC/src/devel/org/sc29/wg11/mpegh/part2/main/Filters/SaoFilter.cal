/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package devel.org.sc29.wg11.mpegh.part2.main.Filters;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import devel.org.sc29.wg11.mpegh.part2.inter.NaluType.*;

import  testBench.common.SourceUnit.*;

actor SaoFilter(bool DEBUG)
	uint(size=2)  IsPicSlcLcu,
	bool          LFAcrossSlc,
	uint(size=16) PicSize,
	uint(size=8)  SampleIn,
	int (size=9)  SaoSe,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  FiltSample
		:
		
	bool DEBUG_Trace = false;
		
	uint(size=4)  BIT_DEPTH = 8;


	int(size=3) constHPos0[4][2] = [[-1,1],  [ 0,0], [-1,1],  [ 1,-1]];
	int(size=3) constVPos0[4][2] = [[ 0,0],  [-1,1], [-1,1],  [-1, 1]];
	int(size=3) edgeIdxConv[5] = [1, 2, 0, 3, 4];

	int(size=2) signResult[3][128][128];

	bool          slcSaoCompEn[3];

	uint(size=8) OrigPict[3][PICT_WIDTH][4*64];
	uint(size=8) FiltPict[3][PICT_WIDTH][PICT_HEIGHT];

	
	uint(size=2)  cIdx;
	uint(size=2)  saoTypeIdx[PICT_WIDTH/64][PICT_HEIGHT/64][3];
	int (size=9)  saoOffset[PICT_WIDTH/64][PICT_HEIGHT/64][3][5];
	uint(size=2)  saoEoClass[PICT_WIDTH/64][PICT_HEIGHT/64][3];
	uint(size=5)  saoLeftClass[PICT_WIDTH/64][PICT_HEIGHT/64][3];
	uint(size=3)  bandTable[32];
	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[3][2];
	uint(size=8)  xCu := 0;
	uint(size=8)  yCu := 0;
	uint(size=6)  xCuFilt := 0;
	uint(size=6)  yCuFilt := 0;

	int(size=16) iLoop;

	uint(size=16) numTiles;
	uint(size=16) lcuTileIdx;
	uint(size=16) tilesBeg[MAX_NUM_TILES][2];
	uint(size=16) tilesEnd[MAX_NUM_TILES][2];
	bool         filtAcrSlc[PICT_WIDTH/64][PICT_HEIGHT/64];
	bool         filtAcrCurrSlc;
	uint(size=8) numSlc[PICT_WIDTH/64][PICT_HEIGHT/64];
	uint(size=8) numCurrSlc;

	procedure nextLcuAddress()
	begin
		xCu := xCu + 1;
		if(xCu = tilesEnd[lcuTileIdx][0]) then
			xCu := tilesBeg[lcuTileIdx][0];
			yCu := yCu + 1;
			if(yCu = tilesEnd[lcuTileIdx][1]) then
				lcuTileIdx := lcuTileIdx + 1;
				xCu := tilesBeg[lcuTileIdx][0];
				yCu := tilesBeg[lcuTileIdx][1];
			end
		end
	end

	procedure nextLcuAddressNoTile()
	begin
		xCu := xCu + 1;
		if(xCu = picSizeInCu[0]) then
			xCu := 0;
			yCu := yCu + 1;
		end
	end

	function lcuFiltIsPictureBorder() --> bool
	:
		xCuFilt = 0 || yCuFilt = 0||
		xCuFilt+1 >= picSizeInCu[0] ||
		yCuFilt+1 >= picSizeInCu[1]
	end

	procedure copyCu(uint(size=16) addrBeg[2], uint(size=16) addrEnd[2], uint(size=2) cIdx)
	begin
		foreach uint x in addrBeg[0] .. addrEnd[0]
		do
			foreach uint y in addrBeg[1] .. addrEnd[1]
			do
				FiltPict[cIdx][x][y] := OrigPict[cIdx][x][y &(4*64-1)];
			end
		end
	end

	procedure saoFilterEdgeLuma_Horiz(uint(size=16) rx, uint(size=16) ry,
		uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) xPix1,
		uint(size=16) xPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) y in 0 .. 63
		do
			yIdx := ry + y;
			foreach uint(size=3) x in 0 .. 63
			do
				xIdx := rx + x;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						xPix1 := xIdx - 1;
						xPix2 := xIdx + 1;

						pixIsInPict := true;
						if(lcuIsPictBorder &&
							(xPix1 >= picSize[0] ||
							 xPix2 >= picSize[0])) then
							pixIsInPict := false;
						else if(not filtAcrSlc[xIdx>>6][yIdx>>6]) then
							//if xPix1 and xPix2 are in the same slice, then
							//the 3 pixels used for the Sao are in the same slice.
							if(numSlc[xPix1>>6][yIdx>>6] !=
							   numSlc[xPix2>>6][yIdx>>6]) then
								pixIsInPict := false;
							end
						end end

						if(pixIsInPict) then
							edgeIdx := 2;

							//Check if the value has already been computed.
							if(x=0) then
								sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
									OrigPict[0][xPix1][yIdx &(4*64-1)]);
							end
							edgeIdx := edgeIdx + sign3Result;

							sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
								OrigPict[0][xPix2][yIdx &(4*64-1)]);
							edgeIdx := edgeIdx + sign3Result;

							edgeIdx := edgeIdxConv[edgeIdx];
							//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
							sign3Result := -sign3Result;
						else
							edgeIdx := 0;
							sign3Result := Sign3(OrigPict[0][xPix2][yIdx &(4*64-1)] -
								OrigPict[0][xIdx][yIdx &(4*64-1)]);
						end
						FiltPict[0][xIdx][yIdx] := clip_i32(OrigPict[0][xIdx][yIdx &(4*64-1)] +
							saoOffset[xCuFilt][yCuFilt][0][edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure saoFilterEdgeLuma_Vert(uint(size=16) rx, uint(size=16) ry,
		uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) yPix1,
		uint(size=16) yPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) x in 0 .. 63
		do
			xIdx := rx + x;
			foreach uint(size=3) y in 0 .. 63
			do
				yIdx := ry + y;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						yPix1 := yIdx - 1;
						yPix2 := yIdx + 1;

						pixIsInPict := true;
						if(lcuIsPictBorder && (yPix1>=picSize[1] ||
							yPix2>=picSize[1])) then
							pixIsInPict := false;
						else if(not filtAcrSlc[xIdx>>6][yIdx>>6]) then
							//if yPix1 and yPix2 are in the same slice, then
							//the 3 pixels used for the Sao are in the same slice.
							if(numSlc[xIdx>>6][yPix1>>6] !=
							   numSlc[xIdx>>6][yPix2>>6]) then
								pixIsInPict := false;
							end
						end end

						if(pixIsInPict) then
							edgeIdx := 2;

							//Check if the value has already been computed.
							if(y=0) then
								sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
									OrigPict[0][xIdx][yPix1 &(4*64-1)]);
							end
							edgeIdx := edgeIdx + sign3Result;

							sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
								OrigPict[0][xIdx][yPix2 &(4*64-1)]);
							edgeIdx := edgeIdx + sign3Result;

							edgeIdx := edgeIdxConv[edgeIdx];
							//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
							sign3Result := -sign3Result;
						else
							edgeIdx := 0;
							sign3Result := Sign3(OrigPict[0][xIdx][yPix2 &(4*64-1)] -
								OrigPict[0][xIdx][yIdx &(4*64-1)]);
						end
						FiltPict[0][xIdx][yIdx] := clip_i32(OrigPict[0][xIdx][yIdx &(4*64-1)] +
							saoOffset[xCuFilt][yCuFilt][0][edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure codingTreeBlockModifLuma(uint(size=16) rx, uint(size=16) ry,
		uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool          pixIsInPict,
		uint(size=3)  edgeIdx,
		uint(size=3)  bandShift = BIT_DEPTH-5,
		uint(size=3)  bandIdx,
		int(size=2)   sign3Result,
		int(size=2)  xOff[2],
		int(size=2)  yOff[2]
	begin
		if(saoTypeIdx[xCuFilt][yCuFilt][0] = 2 and saoEoClass[xCuFilt][yCuFilt][0] = 0) then
			saoFilterEdgeLuma_Horiz(rx,ry,picSize, lcuIsPictBorder);
		else if(saoTypeIdx[xCuFilt][yCuFilt][0] = 2 and saoEoClass[xCuFilt][yCuFilt][0] = 1) then
			saoFilterEdgeLuma_Vert(rx,ry,picSize, lcuIsPictBorder);
		else
			foreach uint k in 0 .. 1
			do
				xOff[k] := constHPos0[saoEoClass[xCuFilt][yCuFilt][0]][k];
				yOff[k] := constVPos0[saoEoClass[xCuFilt][yCuFilt][0]][k];
			end
			foreach uint(size=3) y in 0 .. 63
			do
				yIdx := ry + y;
				foreach uint(size=3) x in 0 .. 63
				do
					xIdx := rx + x;
					if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						if(saoTypeIdx[xCuFilt][yCuFilt][0] = 2) then
							pixIsInPict := true;
							foreach uint k in 0 .. 1
							do
								pixIdx[k][0] := xIdx + xOff[k];
								pixIdx[k][1] := yIdx + yOff[k];
								if(lcuIsPictBorder && (pixIdx[k][0] >= picSize[0] || pixIdx[k][1]>=picSize[1])) then
									pixIsInPict := false;
								else if(not filtAcrSlc[xIdx>>6][yIdx>>6]) then
									//if yPix1 and yPix2 are in the same slice, then
									//the 3 pixels used for the Sao are in the same slice.
									if(numSlc[xIdx>>6][yIdx>>6] !=
									   numSlc[pixIdx[k][0]>>6][pixIdx[k][1]>>6]) then
										pixIsInPict := false;
									end
								end end
							end
							if(pixIsInPict) then
								edgeIdx := 2;
	
								//Check if the value has already been computed.
								if(x=0 || y=0 || x=63/* x!=32 || y!=32*/) then
									sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
										OrigPict[0][pixIdx[0][0]][pixIdx[0][1] &(4*64-1)]);
								else
									sign3Result := signResult[0][x][y];
								end
								edgeIdx := edgeIdx + sign3Result;
	
								sign3Result := Sign3(OrigPict[0][xIdx][yIdx &(4*64-1)] -
									OrigPict[0][pixIdx[1][0]][pixIdx[1][1] &(4*64-1)]);
								edgeIdx := edgeIdx + sign3Result;

								//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
								signResult[0][(x+xOff[1])&127][(y+yOff[1])&127] := -sign3Result;
								edgeIdx := edgeIdxConv[edgeIdx];
							else
								edgeIdx := 0;
								signResult[0][(x+xOff[1])&127][(y+yOff[1])&127] :=
									Sign3(OrigPict[0][pixIdx[1][0] & MASK_WIDTH][pixIdx[1][1] &(4*64-1)] -
										OrigPict[0][xIdx][yIdx &(4*64-1)]);
							end
							FiltPict[0][xIdx][yIdx] := clip_i32(OrigPict[0][xIdx][yIdx &(4*64-1)] +
								saoOffset[xCuFilt][yCuFilt][0][edgeIdx], 0, 255);
						else
							bandIdx := bandTable[OrigPict[0][xIdx][yIdx &(4*64-1)]>>bandShift];
							FiltPict[0][xIdx][yIdx] := clip_i32(OrigPict[0][xIdx][yIdx &(4*64-1)] +
								saoOffset[xCuFilt][yCuFilt][0][bandIdx], 0, 255);
						end
					end		
				end
			end
		end end
	end

	procedure saoFilterEdgeChroma_Horiz(uint(size=16) rx, uint(size=16) ry,
		uint(size=2) cIdx, uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) xPix1,
		uint(size=16) xPix2,
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) y in 0 .. 31
		do
			yIdx := ry + y;
			foreach uint(size=3) x in 0 .. 31
			do
				xIdx := rx + x;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
					xPix1 := xIdx - 1;
					xPix2 := xIdx + 1;

					pixIsInPict := true;
					if(lcuIsPictBorder && (xPix1 >= picSize[0] ||
						xPix2 >= picSize[0])) then
						pixIsInPict := false;
					else if(not filtAcrSlc[xIdx>>5][yIdx>>5]) then
						//if xPix1 and xPix2 are in the same slice, then
						//the 3 pixels used for the Sao are in the same slice.
						if(numSlc[xPix1>>5][yIdx>>5] !=
						   numSlc[xPix2>>5][yIdx>>5]) then
							pixIsInPict := false;
						end
					end end

					if(pixIsInPict) then
						edgeIdx := 2;
						if(x=0) then
							sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
								OrigPict[cIdx][xPix1][yIdx &(4*64-1)]);
						end
						edgeIdx := edgeIdx + sign3Result;

						sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
								OrigPict[cIdx][xPix2][yIdx &(4*64-1)]);
						edgeIdx := edgeIdx + sign3Result;

						edgeIdx := edgeIdxConv[edgeIdx];
						//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
						sign3Result := -sign3Result;
					else
						edgeIdx := 0;
						sign3Result := Sign3(OrigPict[cIdx][xPix2][yIdx &(4*64-1)] -
							OrigPict[cIdx][xIdx][yIdx &(4*64-1)]);
					end
					FiltPict[cIdx][xIdx][yIdx] := clip_i32(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] +
						saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
				end
			end
		end
	end

	procedure saoFilterEdgeChroma_Vert(uint(size=16) rx, uint(size=16) ry,
		uint(size=2) cIdx, uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		int(size=2) sign3Result
	begin
		foreach uint(size=3) x in 0 .. 31
		do
			xIdx := rx + x;
			foreach uint(size=3) y in 0 .. 31
			do
				yIdx := ry + y;
				if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
					pixIdx[0][1] := yIdx - 1;
					pixIdx[1][1] := yIdx + 1;

					pixIsInPict := true;
					if(lcuIsPictBorder && (pixIdx[0][1]>=picSize[1] ||
						pixIdx[1][1]>=picSize[1])) then
						pixIsInPict := false;
					else if(not filtAcrSlc[xIdx>>5][yIdx>>5]) then
						//if yPix1 and yPix2 are in the same slice, then
						//the 3 pixels used for the Sao are in the same slice.
						if(numSlc[xIdx>>5][pixIdx[0][1]>>5] !=
						   numSlc[xIdx>>5][pixIdx[1][1]>>5]) then
							pixIsInPict := false;
						end
					end end

					if(pixIsInPict) then
						edgeIdx := 2;
						if(y=0) then
							sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
								OrigPict[cIdx][xIdx][pixIdx[0][1] &(4*64-1)]);
						end
						edgeIdx := edgeIdx + sign3Result;

						sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
								OrigPict[cIdx][xIdx][pixIdx[1][1] &(4*64-1)]);
						edgeIdx := edgeIdx + sign3Result;

						edgeIdx := edgeIdxConv[edgeIdx];
						//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
						sign3Result := -sign3Result;
					else
						edgeIdx := 0;
						sign3Result := Sign3(OrigPict[cIdx][xIdx][pixIdx[1][1] &(4*64-1)] -
							OrigPict[cIdx][xIdx][yIdx &(4*64-1)]);
					end
					FiltPict[cIdx][xIdx][yIdx] := clip_i32(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] +
						saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
				end		
			end
		end
	end

	procedure codingTreeBlockModifChroma(uint(size=16) rx, uint(size=16) ry,
		uint(size=2) cIdx, uint(size=16) picSize[2], bool lcuIsPictBorder)
	var
		uint(size=16) xIdx,
		uint(size=16) yIdx,
		uint(size=16) pixIdx[2][2],
		bool pixIsInPict,
		uint(size=3) edgeIdx,
		uint(size=3) bandShift = BIT_DEPTH-5,
		uint(size=3) bandIdx,
		int(size=2) sign3Result,
		int(size=2)  xOff[2],
		int(size=2)  yOff[2]
	begin
		if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 2 and saoEoClass[xCuFilt][yCuFilt][cIdx] = 0) then
			saoFilterEdgeChroma_Horiz(rx, ry, cIdx, picSize, lcuIsPictBorder);
		else if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 2 and saoEoClass[xCuFilt][yCuFilt][cIdx] = 1) then
			saoFilterEdgeChroma_Vert(rx, ry, cIdx, picSize, lcuIsPictBorder);
		else
			foreach uint k in 0 .. 1
			do
				xOff[k] := constHPos0[saoEoClass[xCuFilt][yCuFilt][cIdx]][k];
				yOff[k] := constVPos0[saoEoClass[xCuFilt][yCuFilt][cIdx]][k];
			end
			foreach uint(size=3) y in 0 .. 31
			do
				yIdx := ry + y;
				foreach uint(size=3) x in 0 .. 31
				do
					xIdx := rx + x;
					if(not lcuIsPictBorder || xIdx<picSize[0] && yIdx<picSize[1]) then
						if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 2) then
							pixIsInPict := true;
							foreach uint k in 0 .. 1
							do
								pixIdx[k][0] := xIdx + xOff[k];
								pixIdx[k][1] := yIdx + yOff[k];
								if(lcuIsPictBorder &&
									(pixIdx[k][0] >= picSize[0] ||
									pixIdx[k][1]>=picSize[1])) then
									pixIsInPict := false;
								else if(not filtAcrSlc[xIdx>>5][yIdx>>5]) then
									if(numSlc[xIdx>>5][yIdx>>5] !=
									   numSlc[pixIdx[k][0]>>5][pixIdx[k][1]>>5]) then
										pixIsInPict := false;
									end
								end end
							end

							if(pixIsInPict) then
								edgeIdx := 2;
								//Check if the value has already been computed.
								if(x=0 || y=0 || x=31) then
									sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
										OrigPict[cIdx][pixIdx[0][0]][pixIdx[0][1] &(4*64-1)]);
								else
									sign3Result := signResult[cIdx][x][y];
								end
								edgeIdx := edgeIdx + sign3Result;
	
								sign3Result := Sign3(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] -
										OrigPict[cIdx][pixIdx[1][0]][pixIdx[1][1] &(4*64-1)]);
								edgeIdx := edgeIdx + sign3Result;
	
								//Saving the value to avoid computing it again and Sign3(B-A) = -Sign3(A-B)
								signResult[cIdx][(x+xOff[1])&127]
									[(y+yOff[1])&127] := -sign3Result;
								edgeIdx := edgeIdxConv[edgeIdx];
							else
								edgeIdx := 0;
								signResult[cIdx][(x+xOff[1])&127]
									[(y+yOff[1])&127] :=
									Sign3(OrigPict[cIdx][pixIdx[1][0] & MASK_WIDTH][pixIdx[1][1] &(4*64-1)] -
										OrigPict[cIdx][xIdx][yIdx &(4*64-1)]);
							end
							FiltPict[cIdx][xIdx][yIdx] := clip_i32(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] +
								saoOffset[xCuFilt][yCuFilt][cIdx][edgeIdx], 0, 255);
						else
							bandIdx := bandTable[OrigPict[cIdx][xIdx][yIdx &(4*64-1)]>>bandShift];
							FiltPict[cIdx][xIdx][yIdx] := clip_i32(OrigPict[cIdx][xIdx][yIdx &(4*64-1)] +
								saoOffset[xCuFilt][yCuFilt][cIdx][bandIdx], 0, 255);
						end
					end		
				end
			end
		end end
	end

	procedure sampAdapOffFilt()
	var
		uint(size=16) picSizeLoc[2],
		bool lcuIsPictBorder
	begin
		if(yCu > 0 && xCu > 0) then
			xCuFilt := xCu - 1;
			yCuFilt := yCu - 1;
			println("AddrFilt : [" + xCuFilt + " ; " + yCuFilt + "] | Addr Lcu :["+xCu + " ; " + yCu + " ]");
			lcuIsPictBorder := lcuFiltIsPictureBorder();
			foreach uint cIdx in 0 .. 2
			do
				picSizeLoc := [picSize[cIdx][0], picSize[cIdx][1]>>1];
				if(saoTypeIdx[xCuFilt][yCuFilt][cIdx] = 1) then
					foreach uint i in 0 .. 31
					do
						bandTable[i] := 0;
					end
					foreach uint k in 0 .. 3
					do
						bandTable[(k+saoLeftClass[xCuFilt][yCuFilt][cIdx]) & 31] := k+1;
					end
				end
				if(saoTypeIdx[xCuFilt][yCuFilt][cIdx]!=0) then
					if(cIdx=0) then
						codingTreeBlockModifLuma((xCuFilt<<6),
							(yCuFilt<<6), picSizeLoc, lcuIsPictBorder);
					else
						codingTreeBlockModifChroma((xCuFilt<<5),
							(yCuFilt<<5), cIdx, picSizeLoc, lcuIsPictBorder);
					end
				end
			end
		end
	end
uint numPict;
	isNewPict: action IsPicSlcLcu:[isNewPicSlcLcu], LFAcrossSlc:[lfAcrossSlc],
		PicSize:[picWidthInPix, picHeightInPix], SaoSe:[saoSe] ==>
	guard
		isNewPicSlcLcu = NEW_PIC
	do
		println("Pict num : " + numPict);
		numPict := numPict + 1;
		if (DEBUG_Trace) then
			println("=== isNewPict ===");
			println("IsPicSlcLcu = " + isNewPicSlcLcu);
			println("LFAcrossSlc = " + lfAcrossSlc);
			println("PicSize     = " + picWidthInPix + "x" + picHeightInPix);
			println("SaoSe       = " + saoSe);
		end
		
		picSizeInCu := [(picWidthInPix+63)/64, (picHeightInPix+63)/64];
		picSize[0]  := [picWidthInPix   , picHeightInPix];
		picSize[1]  := [picSize[0][0] >> 1, picSize[0][1] >> 1];
		picSize[2]  := [picSize[1][0], picSize[1][1]];
		slcSaoCompEn[0] := (saoSe & 1) !=0;
		slcSaoCompEn[1] := (saoSe & 2) !=0;
		slcSaoCompEn[2] := slcSaoCompEn[1];
		filtAcrCurrSlc := lfAcrossSlc;
		numCurrSlc := 0;
		lcuTileIdx := 0;
	end

	//There should be slice SAO enable for each independent slice.
	isNewSlice: action IsPicSlcLcu:[isNewPicSlcLcu], LFAcrossSlc:[lfAcrossSlc],
		PicSize:[picWidthInPix, picHeightInPix]/*, SaoSe:[saoSe]*/ ==>
	guard
		isNewPicSlcLcu = NEW_SLC
	do
		if (DEBUG_Trace) then
			println("=== isNewSlice ===");
			println("IsPicSlcLcu = " + isNewPicSlcLcu);
			println("LFAcrossSlc = " + lfAcrossSlc);
			println("PicSize     = " + picWidthInPix + "x" + picHeightInPix);
//			println("SaoSe       = " + saoSe);
		end

		/*slcSaoCompEn[0] := (saoSe & 1) !=0;
		slcSaoCompEn[1] := (saoSe & 2) !=0;
		slcSaoCompEn[2] := slcSaoCompEn[1];*/
		filtAcrCurrSlc := lfAcrossSlc;
		numCurrSlc := numCurrSlc + 1;
	end

	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		println("\nnumTiles : " + numTiles);
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBeg[iLoop] := [tilesCoord[0]/64, tilesCoord[1]/64];
		tilesEnd[iLoop] := [(tilesCoord[2]+63)/64, (tilesCoord[3]+63)/64];
		println("tilesBeg[" + iLoop + "] : [" + tilesBeg[iLoop][0] + " ; " + tilesBeg[iLoop][1] + "]");
		println("tilesEnd[" + iLoop + "] : [" + tilesEnd[iLoop][0] + " ; " + tilesEnd[iLoop][1] + "]\n");
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	getCuPix.launch: action IsPicSlcLcu:[isNewLcu], SampleIn:[samp] repeat 64*64 + 32*32*2 ==>
	guard
		lcuTileIdx < numTiles
	var
		uint(size=16) offset,
		uint(size=16) xPic,
		uint(size=16) yPic
	do
		println("Loc Cu: [" + xCu + " ; " + yCu + "]");
		if (DEBUG_Trace) then
			println("=== getCuPix.launch ===");
			println("IsPicSlcLcu = " + isNewLcu);
			println("SampleIn    = [ ");
			foreach int y in 0 .. 63 do
				foreach int x in 0 .. 63 do
					print(samp[x+y*64]+", ");
				end
				if y != 63 then
					println("");
				end 
			end
			println("][");
			foreach int y in 0 .. 31 do
				foreach int x in 0 .. 31 do
					print(samp[64*64+x+y*32]+", ");
				end
				if y != 31 then
					println("");
				end 
			end
			println("][");
			foreach int y in 0 .. 31 do
				foreach int x in 0 .. 31 do
					print(samp[64*64+32*32+x+y*32]+", ");
				end
				if y != 31 then
					println("");
				end 
			end
			println("]");
		end
		
		xPic := xCu<<6;
		yPic := (yCu<<6)&(4*64-1);
		numSlc[xCu][yCu]     := numCurrSlc;
		filtAcrSlc[xCu][yCu] := filtAcrCurrSlc;

		foreach uint y in 0 .. 63
		do
			foreach uint x in 0 .. 63
			do
				OrigPict[0][x+xPic][(y+yPic) &(4*64-1)] := samp[x + y*64]; 
			end
		end

		xPic := xPic>>1;
		yPic := (yCu<<5)&(4*64-1);
		offset := 64*64;
		foreach uint cIdx in 1 .. 2
		do
			foreach uint y in 0 .. 31
			do
				foreach uint x in 0 .. 31
				do
					OrigPict[cIdx][x+xPic][(y+yPic) &(4*64-1)] := samp[x + y*32 +offset]; 
				end
			end
			offset := offset + 32*32;
		end
	end

	getCuPix.done: action ==>
	guard
		lcuTileIdx = numTiles
	do
		sampAdapOffFilt();
		xCu := 0;
		yCu := 0;
	end

	getSaoMerge.noMerge: action SaoSe:[mergeInfo] ==>
	guard
		(slcSaoCompEn[0] || slcSaoCompEn[1]) and mergeInfo = SAO_NO_MERGE
	do
		if (DEBUG_Trace) then
			println("=== getSaoMerge.noMerge ===");
			println("SaoSe       = " + mergeInfo);
		end
	end

	getSaoMerge.merge: action SaoSe:[mergeInfo] ==>
	guard
		(slcSaoCompEn[0] || slcSaoCompEn[1]) and mergeInfo != SAO_NO_MERGE
	var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2],
		uint(size=16) xMerge =
			if(mergeInfo = SAO_MERGE_LEFT) then xCu-1 else xCu end,
		uint(size=16) yMerge =
			if(mergeInfo = SAO_MERGE_UP)  then yCu-1 else yCu end
	do
		if (DEBUG_Trace) then
			println("=== getSaoMerge.Merge ===");
			println("SaoSe       = " + mergeInfo);
		end
		
		foreach uint cIdx in 0 .. 2
		do
			saoTypeIdx[xCu][yCu][cIdx] := saoTypeIdx[xMerge][yMerge][cIdx];
			if(saoTypeIdx[xCu][yCu][cIdx] = 0) then
				addrBeg :=
					if(cIdx=0) then
						[xCu<<6, yCu<<6]
					else
						[xCu<<5, yCu<<5]
					end;
				addrEnd :=
					if(cIdx=0) then
						[(xCu<<6)+63, (yCu<<6)+63]
					else
						[(xCu<<5)+31, (yCu<<5)+31]
					end;
		
				copyCu(addrBeg, addrEnd, cIdx);
			else
				foreach uint i in 1 .. 4
				do
					saoOffset[xCu][yCu][cIdx][i] := saoOffset[xMerge][yMerge][cIdx][i];
				end
				saoEoClass[xCu][yCu][cIdx] := saoEoClass[xMerge][yMerge][cIdx];
				saoLeftClass[xCu][yCu][cIdx] := saoLeftClass[xMerge][yMerge][cIdx];
			end
		end
		sampAdapOffFilt();
		nextLcuAddress();
	end

	getSaoMerge.skip: action ==>
	guard
		not slcSaoCompEn[0] && not slcSaoCompEn[1]
	do
		saoTypeIdx[xCu][yCu] := [0, 0, 0];
		copyCu([xCu<<6, yCu<<6], [(xCu<<6)+63, (yCu<<6)+63], 0);
		copyCu([xCu<<5, yCu<<5], [(xCu<<5)+31, (yCu<<5)+31], 1);
		copyCu([xCu<<5, yCu<<5], [(xCu<<5)+31, (yCu<<5)+31], 2);
		sampAdapOffFilt();
		nextLcuAddress();
	end

	getSaoTypeIdx.is0: action SaoSe:[typeIdx] ==>
	guard
		/* Replace by (cIdx<3 && slcSaoCompEn[cIdx] && typeIdx = 0) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 && typeIdx = 0 then slcSaoCompEn[cIdx] else false end
	var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2]
	do
		if (DEBUG_Trace) then
			println("=== getSaoTypeIdx.is0 ===");
			println("SaoSe       = " + typeIdx);
		end
		
		addrBeg :=
			if(cIdx=0) then
				[xCu<<6, yCu<<6]
			else
				[xCu<<5, yCu<<5]
			end;
		addrEnd :=
			if(cIdx=0) then
				[(xCu<<6)+63, (yCu<<6)+63]
			else
				[(xCu<<5)+31, (yCu<<5)+31]
			end;

		copyCu(addrBeg, addrEnd, cIdx);
		saoTypeIdx[xCu][yCu][cIdx] := 0;
		cIdx := cIdx + 1;
	end

	getSaoTypeIdx.isNot0: action SaoSe:[saoSe] repeat 6 ==>
	guard
		/* Replace by (cIdx<3 && slcSaoCompEn[cIdx] && saoSe[0] != 0) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 then slcSaoCompEn[cIdx] && saoSe[0] != 0 else false end
	do
		if (DEBUG_Trace) then
			println("=== getSaoTypeIdx.isNot0 ===");
			print("SaoSe       = [");
			foreach uint i in 0 .. 5 do
				print(saoSe[i] + ", ");
			end
			println("]");
		end
		
		saoTypeIdx[xCu][yCu][cIdx] := saoSe[0];
		foreach uint i in 1 .. 4
		do
			saoOffset[xCu][yCu][cIdx][i] := saoSe[i];
		end
		if(saoTypeIdx[xCu][yCu][cIdx]=2) then
			saoEoClass[xCu][yCu][cIdx] := saoSe[5];
		else
			saoLeftClass[xCu][yCu][cIdx] := saoSe[5];
		end

		cIdx := cIdx + 1;
	end

	getSaoTypeIdx.skip: action ==>
	guard
		/* Replace by (cIdx<3 && not slcSaoCompEn[cIdx]) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		if cIdx <3 then not slcSaoCompEn[cIdx] else false end
	var
		uint(size=16) addrBeg[2],
		uint(size=16) addrEnd[2]
	do
		addrBeg :=
			if(cIdx=0) then
				[xCu<<6, yCu<<6]
			else
				[xCu<<5, yCu<<5]
			end;
		addrEnd :=
			if(cIdx=0) then
				[(xCu<<6)+63, (yCu<<6)+63]
			else
				[(xCu<<5)+31, (yCu<<5)+31]
			end;

		saoTypeIdx[xCu][yCu][cIdx] := 0;
		copyCu(addrBeg, addrEnd, cIdx);
		cIdx := cIdx + 1;
	end

	getSaoTypeIdxDone: action ==>
	guard
		cIdx = 3
	do
		cIdx := 0;
		sampAdapOffFilt();
		nextLcuAddress();
	end

	

	sendSamples.launch: action ==> FiltSample:[filtSamp] repeat 64*64 + 2* 32*32
	guard
		yCu < picSizeInCu[1]
	var
		uint tokenOffset,
		uint(size=8) filtSamp[64*64+2*32*32],
		uint(size=16) blkAddrX, uint(size=16) blkAddrY
	do
		println("cu Addr : [" + xCu + " ; " + yCu + "]");
		blkAddrX := xCu*64;
		blkAddrY := yCu*64;
		foreach uint y in 0 .. 63
		do
			foreach uint x in 0 .. 63
			do
				if(not DEBUG) then
					filtSamp[x+y*64] := FiltPict[0][blkAddrX+x][blkAddrY+y];
				else
					if(blkAddrX+x<picSize[0][0] && blkAddrY+y<picSize[0][1]) then
						filtSamp[x+y*64] := FiltPict[0][blkAddrX+x][blkAddrY+y];
					else
						filtSamp[x+y*64] := 0;
					end
				end
			end
		end

		blkAddrX := blkAddrX>>1;
		blkAddrY := blkAddrY>>1;
		tokenOffset:= 64*64;
		foreach uint comp in 1 .. 2
		do
			foreach uint y in 0 .. 31
			do
				foreach uint x in 0 .. 31
				do
					if(not DEBUG) then
						filtSamp[x+y*32 + tokenOffset] := FiltPict[comp][blkAddrX+x][blkAddrY+y];
					else
						if(blkAddrX+x<picSize[0][0]/2 && blkAddrY+y<picSize[0][1]/2) then
							filtSamp[x+y*32 + tokenOffset] := FiltPict[comp][blkAddrX+x][blkAddrY+y];
						else
							filtSamp[x+y*32 + tokenOffset] := 0;
						end
					end
				end
			end
			tokenOffset:= tokenOffset + 32*32;
		end

		nextLcuAddressNoTile();
		
		if (DEBUG_Trace) then
			println("=== sendSamples.launch ===");
			println("FiltSample  = [ ");
			foreach int y in 0 .. 63 do
				foreach int x in 0 .. 63 do
					print(filtSamp[x+y*64]+", ");
				end
				if y != 63 then
					println("");
				end 
			end
			println("][");
			foreach int y in 0 .. 31 do
				foreach int x in 0 .. 31 do
					print(filtSamp[64*64+x+y*32]+", ");
				end
				if y != 31 then
					println("");
				end 
			end
			println("][");
			foreach int y in 0 .. 31 do
				foreach int x in 0 .. 31 do
					print(filtSamp[64*64+32*32+x+y*32]+", ");
				end
				if y != 31 then
					println("");
				end 
			end
			println("]");
		end
	end

	sendSamples.done: action ==>
	guard
		yCu = picSizeInCu[1]
	do
		xCuFilt := 0;
		yCuFilt := 0;
		xCu := 0;
		yCu := 0;
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetNumTiles;

		GetCuPix (isNewSlice      )--> GetNumTiles;
		GetCuPix (getCuPix.launch )--> GetSaoMerge;
		GetCuPix (getCuPix.done   )--> SendSamples;

		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetCuPix;

		GetSaoMerge (getSaoMerge.skip    )--> GetCuPix;
		GetSaoMerge (getSaoMerge.merge   )--> GetCuPix;
		GetSaoMerge (getSaoMerge.noMerge )--> GetSaoTypeIdx;

		GetSaoTypeIdx(getSaoTypeIdx     )--> GetSaoTypeIdx;
		GetSaoTypeIdx(getSaoTypeIdxDone )--> GetCuPix;

		SendSamples (sendSamples.launch )--> SendSamples;
		SendSamples (sendSamples.done   )--> IsNewPict;
	end
end
