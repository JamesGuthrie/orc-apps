// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package devel.org.sc29.wg11.mpegh.part2.xIT;

import devel.org.sc29.wg11.mpegh.part2.xIT.CommonConstant.*;

actor IT8x8_1d (int shift) int(size=16) Src // 16 bits
                  ==> 
                  int(size=16) Dst // 27 bits
                  :
                  
  action Src:[ src ] repeat 8 // Coefficient matrices are processed column order, least significant first.
         ==> 
         Dst:[ [ (dst[i]+ rouding_factor) >> shift : for int i in 0 .. 7] ] repeat 8
  var
   List(type:int(size=25), size=2 ) evenEven, //  one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=25), size=2 ) evenOdd,  //  one addition of two (16-bit + 8-bit) summands = 25 bits
   List(type:int(size=26), size=4 ) even,     //  one addition of two 25-bit summands = 26 bits
   List(type:int(size=26), size=4 ) odd,      //  three additions of four (16-bit + 8-bit) summands = 26 bits
   List(type:int(size=27), size=8 ) dst,       //  one addition of two 26-bit summands =  27 bits
   int rouding_factor := 1 << (shift - 1)
  do
    evenEven := [( src[0] * g_aiT8[0][0] ) + ( src[4] * g_aiT8[4][0] ),
                 ( src[0] * g_aiT8[0][1] ) + ( src[4] * g_aiT8[4][1] )
                ];  
                 
    evenOdd  := [( src[2] * g_aiT8[2][0] ) + ( src[6] * g_aiT8[6][0] ),
                 ( src[2] * g_aiT8[2][1] ) + ( src[6] * g_aiT8[6][1] )
                ]; 
                
    even     := [ evenEven[0] + evenOdd[0],
                  evenEven[1] + evenOdd[1],
                  evenEven[1] - evenOdd[1],
                  evenEven[0] - evenOdd[0]
                ];                           
         
    odd  := [( src[1] * g_aiT8[1][0] ) + ( src[3] * g_aiT8[3][0] ) + ( src[5] * g_aiT8[5][0] ) + ( src[7] * g_aiT8[7][0] ),
             ( src[1] * g_aiT8[1][1] ) + ( src[3] * g_aiT8[3][1] ) + ( src[5] * g_aiT8[5][1] ) + ( src[7] * g_aiT8[7][1] ),
             ( src[1] * g_aiT8[1][2] ) + ( src[3] * g_aiT8[3][2] ) + ( src[5] * g_aiT8[5][2] ) + ( src[7] * g_aiT8[7][2] ),
             ( src[1] * g_aiT8[1][3] ) + ( src[3] * g_aiT8[3][3] ) + ( src[5] * g_aiT8[5][3] ) + ( src[7] * g_aiT8[7][3] )
            ];                      

    dst := [ even[0] + odd[0],
             even[1] + odd[1],
             even[2] + odd[2],
             even[3] + odd[3],
             even[3] - odd[3],
             even[2] - odd[2],
             even[1] - odd[1],
             even[0] - odd[0]
           ];
           
  end

end
