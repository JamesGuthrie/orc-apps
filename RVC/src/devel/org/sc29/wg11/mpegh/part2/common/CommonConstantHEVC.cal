/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package devel.org.sc29.wg11.mpegh.part2.common;

unit CommonConstantHEVC :
    /**************************************************************************
     * GLOBAL
     *************************************************************************/
    int PICT_WIDTH                              = 4096;
    int PICT_HEIGHT                             = 2048;
    int MASK_WIDTH                              = PICT_WIDTH-1;
    int MASK_HEIGHT                             = PICT_HEIGHT-1;

    int(size=16) MIN_INT16                      = -32768;

    uint(size= 4) MIN_CTB_SIZE_Y                =  8;
 	uint(size= 8) MAX_TU_SIZE					= 32;         // maximum allowable size of CU

 	uint(size= 8) BLW_WIDTH_MAX					= 64;
	uint(size= 8) BLW_HEIGHT_MAX				= 64;
	uint(size= 4) MAX_NUM_REF					=  4;
	/**************************************************************************
	 * SliceType
 	 *************************************************************************/
	 uint(size= 2) B_SLICE						=  0;
	 uint(size= 2) P_SLICE						=  1;
	 uint(size= 2) I_SLICE						=  2;
    /**************************************************************************
     * SAO
     *************************************************************************/
	uint(size= 2) SAO_NO_MERGE                  =  0;
    uint(size= 2) SAO_MERGE_LEFT                =  1;
    uint(size= 2) SAO_MERGE_UP                  =  2;
	/**************************************************************************
	 * ChromaFormat
 	 *************************************************************************/
	 uint(size= 2) CHROMA_400					=  0;
	 uint(size= 2) CHROMA_420					=  1;
	 uint(size= 2) CHROMA_422					=  2;
	 uint(size= 2) CHROMA_444					=  3;
	/**************************************************************************
	 * PartSize
 	 *************************************************************************/
	uint(size= 4) PART_2Nx2N					=  0;
	uint(size= 4) PART_2NxN						=  1;
	uint(size= 4) PART_Nx2N						=  2;
	uint(size= 4) PART_NxN						=  3;
	uint(size= 4) PART_2NxnU					=  4;
	uint(size= 4) PART_2NxnD					=  5;
	uint(size= 4) PART_nLx2N					=  6;
	uint(size= 4) PART_nRx2N					=  7;
    uint(size= 4) PART_MODE_PICT                =  8;
    uint(size= 4) PART_MODE_SLICE_DEP           =  9;
    uint(size= 4) PART_MODE_SLICE_INDEP         = 10;
	uint(size= 4) PART_NONE						= 15;
	/**************************************************************************
	 * PredMode
 	 *************************************************************************/	
    uint(size= 4) INTER                         =  0;
    uint(size= 4) INTRA                         =  1;
    uint(size= 4) SKIP                          =  2;
    uint(size= 4) NO_IN_SAMP                    =  4;
    uint(size= 4) IN_SAMP                       =  8;
    uint(size= 4) OTHER                         = 15;
    /**************************************************************************
	 * TextType
 	 *************************************************************************/
	uint(size= 4) TEXT_LUMA						=  0; ///< luma
	uint(size= 4) TEXT_CHROMA_U					=  1; ///< chroma U
	uint(size= 4) TEXT_CHROMA_V					=  2; ///< chroma V
	/**************************************************************************
	 * RefPicList
 	 *************************************************************************/
 	uint(size=3) ST_CURR_BEF                    =  0;
    uint(size=3) ST_CURR_AFT                    =  1;
    uint(size=3) ST_FOLL                        =  2;
    uint(size=3) LT_CURR                        =  3;
    uint(size=3) LT_FOLL                        =  4;
	/**************************************************************************
	 * COEFF_SCAN_TYPE
 	 *************************************************************************/
 	uint(size= 2) SCAN_ZIGZAG 					=  0; ///< typical zigzag scan
 	uint(size= 2) SCAN_HOR						=  1; ///< horizontal first scan
 	uint(size= 2) SCAN_VER						=  2; ///< vertical first scan
 	uint(size= 2) SCAN_DIAG				        =  3; ///< up-right diagonal scan
	/**************************************************************************
	 * INTER_PRED_IDC
 	 *************************************************************************/
    uint(size=2) PRED_L0                        = 0;
    uint(size=2) PRED_L1                        = 1;
    uint(size=2) BI_PRED                        = 2;
    /**************************************************************************
     * LUMA_INTRA_PRED_MODE
     *************************************************************************/
 	uint(size= 8) INTRA_PLANAR					=  0;
 	uint(size= 8) INTRA_DC						=  1;
 	uint(size= 8) INTRA_ANGULAR_26				= 26;
 

	uint(size=2) NEW_PIC = 0;
	uint(size=2) NEW_SLC = 1;
	uint(size=2) NEW_LCU = 2;

 	uint(size=3) partModeToNumPart[8] = [1, 2, 2, 4, 2, 2, 2, 2];
    /**************************************************************************
     * rasterScanToAbsCoord
     *************************************************************************/
	procedure rasterScanToAbsCoord(uint(size=16) rasterIdx, uint(size=16) coord[2])
    begin
        coord[0] :=  (rasterIdx    &1)* 4 + ((rasterIdx>>2)&1)* 8 +
                    ((rasterIdx>>4)&1)*16 + ((rasterIdx>>6)&1)*32;

        coord[1] := ((rasterIdx>>1)&1)* 4 + ((rasterIdx>>3)&1)* 8 +
                    ((rasterIdx>>5)&1)*16 + ((rasterIdx>>7)&1)*32;
    end
    /**************************************************************************
     * absCoordToRasterScan
     *************************************************************************/
    function absCoordToRasterScan(uint(size=16) addr[2]) --> uint(size=16)
    var
        uint(size=16) addrBlk[2] = [addr[0]>>2, addr[1]>>2]
    :
         (addrBlk[0]&1)   + ((addrBlk[0]>>1)&1)*4 + ((addrBlk[0]>>2)&1)*16 + ((addrBlk[0]>>3)&1)*64 +
         (addrBlk[1]&1)*2 + ((addrBlk[1]>>1)&1)*8 + ((addrBlk[1]>>2)&1)*32 + ((addrBlk[1]>>3)&1)*128
    end
end