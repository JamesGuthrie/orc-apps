/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor is a picture buffer containing all reference pictures. It sends
 *		samples needed for the inter prediction
 * 
 * 
 * @input IsBiPred : Indicates when the current CU is using Bi-prediction.
 * 
 * @input IsReadOrNewSlc : Indicates if samples are asked from the current RPS
 *		or if there is a new picture.
 * 
 * @input Mv : movement vectors of the current CU.
 * 
 * @input PicSize : size of the current picture.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @output PocRef : POC used for the prediction of the current CU.
 * 
 * @input PredCuSize : Size of the largest side of the current CU.
 * 
 * @input Sample : Samples from the Inloop filter. It represents the pixels
 * 		which will be displayed.
 * 
 * 
 * @output Sample : Samples needed for the inter prediction.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
package devel.org.sc29.wg11.mpegh.part2.inter;

import std.util.Math.*;
import devel.org.sc29.wg11.mpegh.part2.inter.NaluType.*;

actor DecodingPictureBuffer (bool READ_INPUT_PARAL)
	uint(size=2)  IsBiPredOrLx,
	uint(size=1)  IsReadOrNewSlc,
	int (size=16) Mv,
	uint(size=16) PicSize,
	uint(size=16) Poc,
	int (size=16) PocRef,
	uint(size=7)  PredCuSize,
	int (size=16) RpsPoc,
	uint(size=8)  Sample
		==>
	uint(size=8)  RefSample
		:

	// /!\ if READ_INPUT_PARAL is activated, this actor become time-dependant.

	/* /!\ : Check the size of the border. */
	uint(size=6)  BORDER_SIZE = 128;
	uint(size=8)  pictureBuffer[7][3][PICT_WIDTH+2*BORDER_SIZE][PICT_HEIGHT+2*BORDER_SIZE];
	int (size=16) pocRef[8];
	bool          isRef[7];
	bool          isStillRef[7];

	uint(size=7)  puSize[2];
	uint(size=7)  puSizeChr[2];

	int (size=4)  refPicIdx;
	int (size=4)  currIdx := -1;
	int (size=4)  inputPicIdx := -1;

	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[2];

	uint(size=6)  xIdx;
	uint(size=6)  yIdx;

	bool          isBiPred;
	int (size=16) lastMvRef[2];
	int (size=16) lastPocRef;
	int (size=16) xMvOffset;
	int (size=16) yMvOffset;
	int (size=16) xMvOffChr;
	int (size=16) yMvOffChr;
	uint(size=7)  iLoop;
	uint(size=7)  jLoop;
	uint(size=2)  compIdx;

	uint(size=13) readIdx;
	bool          readInPict := false;

	uint(size=1)  numPocRef;
	uint(size=3)  nbList;
	uint(size=3)  sizeOfList;

	/** Getting informations from new slice/picture. Updating these informations **/
	isNewSlice: action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
		picHeightInPix], Poc:[poc] ==>
	guard
		/* Fix me : We should know when there is a new picture */
		isRead = 0 and currIdx != -1 and poc = pocRef[currIdx&7]
	do
		nbList := 0;
		isStillRef := [false: for int i in 0 .. 6];
	end

	isNewPict: action IsReadOrNewSlc:[isRead], PicSize:[picWidthInPix,
		picHeightInPix], Poc:[poc] ==>
	guard
		not readInPict,
		isRead = 0 and not(currIdx != -1 and poc = pocRef[currIdx&7])
	do
		picSizeInCu[0] := (picWidthInPix+63)/64;
		picSizeInCu[1] := (picHeightInPix+63)/64;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		xIdx := 0;
		yIdx := 0;
		inputPicIdx := currIdx;
		foreach uint i in 0 .. 6
		do
			if(not isRef[i]) then
				currIdx := i;
			end
		end
		if(READ_INPUT_PARAL) then
			inputPicIdx := currIdx;
		end
		isRef[currIdx]  := true;
		pocRef[currIdx] := poc;
		nbList          := 0;
		isStillRef := [false: for int i in 0 .. 6];
		readInPict := true;
	end

	// This action (called once) avoid the actor to be time dependant.
	resetReadInPict.launch: action ==>
	do
		if(not READ_INPUT_PARAL) then
			readInPict := false;
		end
	end

	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	getRps.launch: action RpsPoc:[numPic]==>
	guard
		nbList < 5
	do
		sizeOfList := numPic;
	end

	getRps.done: action ==>
	guard
		nbList = 5
	do
		/* We remove from the Dpb all the pictures who are not in the Rps of
		 * the current picture
		 */
		foreach int i in 0 .. 6
		do
			isRef[i] := isRef[i] and isStillRef[i];
		end
		isRef[currIdx] := true;
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	getRpsPoc.launch: action RpsPoc:[pocVal] ==>
	guard
		sizeOfList > 0
	do
		sizeOfList := sizeOfList - 1;
		foreach int i in 0 .. 6
		do
			if(pocRef[i] = pocVal)then
				isStillRef[i] := true;
			end
		end
	end

	getRpsPoc.done: action ==>
	guard
		sizeOfList = 0
	do
		nbList := nbList + 1;
	end

	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	getCuPix.launch.luma: action Sample:[samp] repeat 64*64 ==>
	guard
		readInPict && yIdx < picSizeInCu[1]
	var
		uint(size=16) xPixIdx,
		uint(size=16) yPixIdx
	do
		xPixIdx := BORDER_SIZE + xIdx*64;
		yPixIdx := BORDER_SIZE + yIdx*64;
		foreach uint y in 0 .. 63
		do
			foreach uint x in 0 .. 63
			do
				pictureBuffer[inputPicIdx][0][xPixIdx+x][yPixIdx+y] := samp[x+y*64];
			end
		end
	end

	getCuPix.launch.chroma: action Sample:[samp] repeat 32*32*2==>
	var
		uint(size=16) xPixIdx,
		uint(size=16) yPixIdx,
		uint tokenOffset := 0
	do
		xPixIdx := (BORDER_SIZE + xIdx*64)>>1;
		yPixIdx := (BORDER_SIZE + yIdx*64)>>1;
		foreach uint component in 1 .. 2
		do
			foreach uint y in 0 .. 32
			do
				foreach uint x in 0 .. 32
				do
					pictureBuffer[inputPicIdx][component][xPixIdx+x][yPixIdx+y] :=
						samp[x+y*32 + tokenOffset];
				end
			end
			tokenOffset:= 32*32;
		end

		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end

	/* When we get the picture we add the border (in order to be able to give a
	 * reference pixels which can be outside of the picture).
	 */
	getCuPix.done: action ==>
	guard
		readInPict && yIdx = picSizeInCu[1]
	var
		uint xSize := picSize[0],
		uint ySize := picSize[1]
	do
		/* Fill in luma border */
		foreach uint x in BORDER_SIZE .. xSize-1 + BORDER_SIZE
		do
			foreach uint y in 0 .. BORDER_SIZE - 1
			do
				pictureBuffer[inputPicIdx][0][x][y] :=
					pictureBuffer[inputPicIdx][0][x][BORDER_SIZE];
				pictureBuffer[inputPicIdx][0][x][y+ySize+BORDER_SIZE] :=
					pictureBuffer[inputPicIdx][0][x][ySize+BORDER_SIZE-1];
			end
		end
		foreach uint y in 0 .. ySize + 2*BORDER_SIZE
		do
			foreach uint x in 0 .. BORDER_SIZE - 1
			do
				pictureBuffer[inputPicIdx][0][x][y] :=
					pictureBuffer[inputPicIdx][0][BORDER_SIZE][y];
				pictureBuffer[inputPicIdx][0][x+xSize+BORDER_SIZE][y] :=
					pictureBuffer[inputPicIdx][0][xSize+BORDER_SIZE-1][y];
			end
		end

		/* Fill in chroma border */
		foreach uint comp in 1 .. 2
		do
			foreach uint x in BORDER_SIZE/2 .. xSize/2-1 + BORDER_SIZE/2
			do
				foreach uint y in 0 .. BORDER_SIZE/2 - 1
				do
					pictureBuffer[inputPicIdx][comp][x][y] :=
						pictureBuffer[inputPicIdx][comp][x][BORDER_SIZE/2];
					pictureBuffer[inputPicIdx][comp][x][y+ySize/2+BORDER_SIZE/2] :=
						pictureBuffer[inputPicIdx][comp][x][ySize/2+BORDER_SIZE/2-1];
				end
			end
			foreach uint y in 0 .. ySize/2 + BORDER_SIZE*2/2
			do
				foreach uint x in 0 .. BORDER_SIZE/2 - 1
				do
					pictureBuffer[inputPicIdx][comp][x][y] :=
						pictureBuffer[inputPicIdx][comp][BORDER_SIZE/2][y];
					pictureBuffer[inputPicIdx][comp][x+xSize/2+BORDER_SIZE/2][y] :=
						pictureBuffer[inputPicIdx][comp][xSize/2+BORDER_SIZE/2-1][y];
				end
			end
		end
		readInPict := false;
	end

	getReadAddr: action IsReadOrNewSlc:[isRead], IsBiPredOrLx:[isBiPredOrLx] ==>
	guard
		not readInPict || READ_INPUT_PARAL,
		isRead = 1
	do
		isBiPred := isBiPredOrLx = BI_PRED;
		numPocRef :=
			if(isBiPred) then
				2
			else
				1
			end;
	end

	/* We get all the informations needed for sending the reference Cu. We save
	 * these samples in RefCu, it will be sent with the actions sendCu.isYxY
	 */
	getMvInfo.launch: action PocRef:[poc], PredCuSize:[predUnitSize] repeat 2,
		Mv:[mvX, mvY] ==>
	guard
		numPocRef != 0,
		not(isBiPred && numPocRef = 1 && lastPocRef = poc && lastMvRef[0] = mvX && lastMvRef[1] = mvY)
	var
		int(size=7)  sideMax,
		uint(size=7)  sideMaxChr
	do
		lastPocRef := poc;
		lastMvRef  := [mvX, mvY];
		sideMax := max(predUnitSize[0], predUnitSize[1]);
		puSize := predUnitSize;
		puSizeChr := [puSize[i]>>1: for int i in 0 .. 1];
		sideMaxChr := sideMax >> 1;
		refPicIdx := 0;
		foreach uint i in 0 .. 6
		do
			if(pocRef[i] = poc and isRef[i]) then
				refPicIdx := i;
			end
		end
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		xMvOffset := (mvX >> 2);
		xMvOffset := min(xMvOffset, picSize[0]+3);
		xMvOffset := max(xMvOffset, -(8 +3 -1) -(sideMax-1));
		xMvOffset := xMvOffset +BORDER_SIZE-3;
		yMvOffset := (mvY >> 2);
		yMvOffset := min(yMvOffset, picSize[1]+3);
		yMvOffset := max(yMvOffset, -(8 +3 -1) -(sideMax-1));
		yMvOffset := yMvOffset +BORDER_SIZE-3;

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		xMvOffChr := (mvX >> 3);
		xMvOffChr := min(xMvOffChr, picSize[0]/2+1);
		xMvOffChr := max(xMvOffChr, -(4 +1 -1) -(sideMaxChr-1));
		xMvOffChr := xMvOffChr +BORDER_SIZE/2-1;
		yMvOffChr := (mvY >> 3);
		yMvOffChr := min(yMvOffChr, picSize[1]/2+1);
		yMvOffChr := max(yMvOffChr, -(4 +1 -1) -(sideMaxChr-1));
		yMvOffChr := yMvOffChr +BORDER_SIZE/2-1;

		numPocRef := numPocRef - 1;
		iLoop := 0;
		jLoop := 0;
		readIdx := 0;
	end


	getMvInfo.skip: action PocRef:[poc], PredCuSize:[predUnitSize] repeat 2,
		Mv:[mvX, mvY] ==>
	guard
		isBiPred && numPocRef = 1 && lastPocRef = poc && lastMvRef[0] = mvX && lastMvRef[1] = mvY
	end

	/** We send the reference samples according to the size of the predCu. **/
	sendCu.luma.launch: action ==> RefSample:[sample]
	guard
		jLoop < puSize[1]+7
	var
		uint(size=8) sample
	do
		sample := pictureBuffer[refPicIdx][0][iLoop+xMvOffset][jLoop+yMvOffset];

		readIdx := readIdx + 1;
		iLoop := iLoop + 1;
		if(iLoop = puSize[0]+7) then
			iLoop := 0;
			jLoop := jLoop + 1;
		end
	end

	sendCu.luma.done: action ==>
	guard
		jLoop = puSize[1]+7
	do
		iLoop   := 0;
		jLoop   := 0;
		compIdx := 1;
	end

	sendCu.chroma.launch: action ==> RefSample:[sample]
	guard
		compIdx < 3
	var
		uint(size=8) sample
	do
		sample := pictureBuffer[refPicIdx][compIdx][iLoop+xMvOffChr][jLoop+yMvOffChr];

		readIdx := readIdx + 1;
		iLoop := iLoop + 1;
		if(iLoop = puSizeChr[0]+3) then
			iLoop := 0;
			jLoop := jLoop + 1;
			if(jLoop = puSizeChr[1]+3) then
				jLoop   := 0;
				compIdx := compIdx + 1;
			end
		end
	end

	sendCu.chroma.done: action ==>
	guard
		compIdx = 3
	end

	getMvInfo.done: action ==>
	guard
		numPocRef = 0
	end

	schedule fsm IsFirstNewPic:
		IsFirstNewPic (isNewPict )--> RstReadInPict;

		RstReadInPict (resetReadInPict )--> GetFirstRps;

		GetFirstRps (getRps.launch )--> GetRpsFirstPoc;
		GetFirstRps (getRps.done   )--> IsNewSlice;

		GetRpsFirstPoc (getRpsPoc.launch )--> GetRpsFirstPoc;
		GetRpsFirstPoc (getRpsPoc.done   )--> GetFirstRps;

		IsNewSlice (isNewPict            )--> GetRps;
		IsNewSlice (isNewSlice           )--> GetRps;
		IsNewSlice (getReadAddr          )--> GetMvInfo;
		IsNewSlice (getCuPix.launch.luma )--> GetCuPixChroma;
		IsNewSlice (getCuPix.done        )--> IsNewSlice;

		/* Get the rps info. */
		GetRps (getRps.launch )--> GetRpsPoc;
		GetRps (getRps.done   )--> IsNewSlice;

		GetRpsPoc (getRpsPoc.launch )--> GetRpsPoc;
		GetRpsPoc (getRpsPoc.done   )--> GetRps;

		/* Getting the decoded picture */
		GetCuPixChroma  (getCuPix.launch.chroma  )--> IsNewSlice;
		GetCuPixChroma2 (getCuPix.launch.chroma )--> SendCuLuma;
		GetCuPixChroma3 (getCuPix.launch.chroma )--> SendCuChroma;

		/* Send pixels needed for inter-prediction */
		GetMvInfo (getMvInfo.launch )--> SendCuLuma;
		GetMvInfo (getMvInfo.skip   )--> IsNewSlice;
		GetMvInfo (getMvInfo.done   )--> IsNewSlice;

		/* getCuPix might be launched when the actor is configured as a time-dependant one.
		 * It avoids deadlock when fifo's size is limited.
		 */
		SendCuLuma (getCuPix.launch.luma )--> GetCuPixChroma2;
		SendCuLuma (sendCu.luma.launch   )--> SendCuLuma;
		SendCuLuma (sendCu.luma.done     )--> SendCuChroma;

		SendCuChroma (getCuPix.launch.luma )--> GetCuPixChroma3;
		SendCuChroma (sendCu.chroma.launch )--> SendCuChroma;
		SendCuChroma (sendCu.chroma.done   )--> GetMvInfo;
	end
	priority
		getCuPix > getReadAddr;
		getCuPix > sendCu;
	end
end
