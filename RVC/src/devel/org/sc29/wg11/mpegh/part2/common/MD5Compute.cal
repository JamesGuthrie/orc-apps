/********************************************************************************

This software module was originally developed by 
khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
 

*****************************************************************************/

// Author: khaled JERBI

/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package devel.org.sc29.wg11.mpegh.part2.common;
import  org.sc29.wg11.common.BitstreamReadUtils.*;


actor MD5Compute () uint IN, uint REF, uint NEWLENGTH ==> bool OUT:

	List (type : uint, size = 16) refKey;
	List (type : uint, size = 16) genKey;
	uint newLength;
	uint counter:=0;
	
	function leftRotate(int x, int c) --> int :
		(((x) << (c)) | ((x) >> (32 - (c))))
	end
	
	storeReference: action REF:[key] repeat 16 , NEWLENGTH:[newLength]  ==>
	end
	
	compareKey: action ==> OUT:[flag]
	var
		bool flag:= false
	do
		foreach int i in 0 .. 15 do
			if refKey[i]!=genKey[i]then
				flag := true;
			end
		end
	end
	
	md5: action IN:[w] repeat 16==>
	var
		uint h0 := 0x67452301,
		uint h1 := 0xefcdab89,
		uint h2 := 0x98badcfe,
		uint h3 := 0x10325476,
		uint a ,
		uint b ,
		uint c ,
		uint d ,
		int  offset := 0,
		uint i := 0,
		uint f,
		uint g,
		uint temp,
		List ( type:uint,size = 64) k = [0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,
									   0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,
									   0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,
									   0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,
									   0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,
									   0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,
									   0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,
									   0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,
									   0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,
									   0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,
									   0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,
									   0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,
									   0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,
									   0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,
									   0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,
									   0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391 ],
									   
		List ( type:uint,size = 64) r = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
	                    				5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
	                   					 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
	                    				6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
	do
		while (offset<newLength)do
			a := h0;
			b := h1;
			c := h2;
			d := h3;
			
			while (i < 64)do
				if (i < 16) then 
                	f := (b & c) | ((~b) & d);
                	g := i;
	            else if (i < 32) then
	                	f := (d & b) | ((~d) & c);
	                	g := (5*i + 1) & 15;
	            	else if (i < 48) then
	                	f := b ^ c ^ d;
	                	g := (3*i + 5) & 15;          
	            		else
	                		f := c ^ (b | (~d));
	               			g := (7*i) & 15;
	           			end
	           		end
	           	end
	 
	            temp := d;
	            d := c;
	            c := b;
	            b := b + leftRotate((a + f + k[i] + w[g]), r[i]);
	            a := temp;
				i := i+1;
			end
			
			h0 := h0 + a;
	        h1 := h1 + b;
	        h2 := h2 + c;
	        h3 := h3 + d;
			offset := offset+(512 >> 3);
		end
		counter := counter + 64;
	end
	
	md5_done: action ==>
	guard
		counter = newLength
	do
		counter := 0;
	end
	
	schedule fsm getRefKey:
		getRefKey(storeReference)	-->md5;
		md5(md5)					-->md5;
		md5(md5_done)				-->compare;
		compare(compareKey)			-->getRefKey;
	end
	
	priority
		md5_done>md5;
	end
end
