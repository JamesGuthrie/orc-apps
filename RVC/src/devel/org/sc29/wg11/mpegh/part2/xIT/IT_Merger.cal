// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package devel.org.sc29.wg11.mpegh.part2.xIT;  

actor IT_Merger()  int(size=8)   Size,                                          
                   int(size=16)  Block_skip, 
                   int(size=16)  Block_4x4_DST, 
                   int(size=16)  Block_4x4_IT, 
                   int(size=16)  Block_8x8, 
                   int(size=16)  Block_16x16, 
                   int(size=16)  Block_32x32 
                   ==>                                    
                   int(size=16)  Block  
                   :
 			
	
	merge_4x4.trans_skip: action Size:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_skip: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0 and transformSkipFlag = 1
	end

	merge_4x4.DST: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_4x4_DST: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0  and isDST = 1 and transformSkipFlag = 0
	end

	merge_4x4.IT: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_4x4_IT: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0  and isDST = 0 and transformSkipFlag = 0
	end
	
	merge_4x4.skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ] 
	                  ==>
	                  Block: [ [0: for int i in 1 .. 4*4] ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip != 0
	end

	merge_8x8.trans_skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_skip: [ res ] repeat 8*8 
	                  ==>
	                  Block: [ res ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip = 0  and transformSkipFlag = 1
	end

	merge_8x8.default: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_8x8: [ res ] repeat 8*8 
	                  ==>
	                  Block: [ res ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 0 
	end

	merge_8x8.skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                  ==>
	                  Block: [ [0: for int i in 1 .. 8*8] ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip != 0
	end
	
	merge_16x16.trans_skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_skip: [ res ] repeat 16*16 
	                    ==>
	                    Block: [ res ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 1
	end	

	merge_16x16.default: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_16x16: [ res ] repeat 16*16 
	                    ==>
	                    Block: [ res ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 0 
	end	
	

	merge_16x16.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 16*16] ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip != 0
	end	

	merge_32x32.trans_skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_skip: [ res ] repeat 32*32 
	                    ==>
	                    Block: [ res ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 1
	end	

	merge_32x32.default: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_32x32: [ res ] repeat 32*32 
	                    ==>
	                    Block: [ res ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 0 
	end	

	merge_32x32.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 32*32] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip != 0
	end	

	merge_64x64.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 64*64] ] repeat 64*64
	guard
	  sizeOfTU = 64 and RCskip != 0
	end	
	
end
