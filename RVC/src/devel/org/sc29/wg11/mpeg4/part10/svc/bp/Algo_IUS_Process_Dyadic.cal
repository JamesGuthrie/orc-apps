/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), 
in the course of development of the ISO/IEC 23002-5 for reference purposes and its performance may 
not have been optimized. This software module is an implementation of one or more tools as specified 
by the ISO/IEC 23002-5.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, 
and make derivative works of this software module or modifications thereof for use in implementations 
of the ISO/IEC 23002-5  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing 
patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU 
Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-5 once 
the ISO/IEC 23002-5 has been adopted; and (2) to develop the ISO/IEC 23002-5:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed 
software module or modifications thereof in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a 
royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works 
for use in implementations of the ISO/IEC 23002-5 in products that satisfy conformance criteria (if any), 
and to the extent that such originally developed software module or portions of it are included in 
the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be 
required to make, use, or sell the originally developed software module or portions thereof included in 
the ISO/IEC 23002-5 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that 
it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with 
applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole 
purpose of developing the ISO/IEC 23002-5

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign 
or donate the code to a third party and to inhibit third parties from using the code for products that 
do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.

This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 

*****************************************************************************/
package devel.org.sc29.wg11.mpeg4.part10.svc.bp;
import std.util.BitOps.*;

actor Algo_IUS_Process_Dyadic(bool luma) int(size=32) In_NAL, int (size=16)In_SPS, int X_Y_Scaled_In_MB, int Mb_addr, int Tmp_Luma_Chroma  ==> int (size=16) Current_Luma_Chroma
:
  
  int n := 0; int n_sps :=0; int n_tmp_luma_chroma := 0; int n_out := 0;
  int refW;  int refH;  int scaledW;  int scaledH;
  int seq_scaled_ref_layer_left_offset := 0;  int seq_scaled_ref_layer_top_offset := 0;  int chroma_phase_x_plus1_flag:=0; int chroma_phase_y_plus1 :=0;
  int Mb_addr:=0; int x_base:=0; int y_base:=0; int x_scaled_in_pix:=0; int y_scaled_in_pix :=0;
  int sizeMB_extend; int sizeMB;
  
  //non_diadic, is_cropping, RefLayerPicWidthInSamples, RefLayerPicHeightInSamples, ScaledRefLayerPicWidthInSamples, ScaledRefLayerPicHeightInSamples
  List( type:int(size=32), size=6 ) in_nal := [ 0 : for int i in 1 .. 6 ]; 
  List( type:int(size=16), size=576 ) tmp_luma_chroma := [ 0 : for int i in 1 .. 576 ];
  List( type:int(size=16), size=16*16 ) current_luma_chroma := [ 0 : for int i in 1 .. 16*16 ];
  List( type:int(size=32), size=32 ) px := [ 0 : for int i in 1 .. 32 ];
  List( type:int(size=32), size=32 ) py := [ 0 : for int i in 1 .. 32 ];
  List( type:int(size=32), size=24*24 ) temp := [ 0 : for int i in 1 .. 24*24 ];
  List( type:int(size=32), size=16*4 ) filter16 = [0,32,0,0, -1,32,2,-1, -2,31,4,-1, -3,30,6,-1, -3,28,8,-1, -4,26,11,-1, -4,24,14,-2, -3,22,16,-3, -3,19,19,-3, -3,16,22,-3, -2,14,24,-4, -1,11,26,-4, -1,8,28,-3, -1,6,30,-3, -1,4,31,-2, -1,2,32,-1];
  List( type:int(size=32), size=16*4 ) filter16_c = [0,32,0,0, 0,30,2,0, 0,28,4,0, 0,26,6,0, 0,24,8,0, 0,22,10,0, 0,20,12,0, 0,18,14,0, 0,16,16,0, 0,14,18,0, 0,12,20,0, 0,10,22,0, 0,8,24,0, 0,6,26,0, 0,4,28,0, 0,2,30,0];
  
  function CLIP3 (int x, int y, int z) --> int:
    if x >z then
      if y < x then y else x end
    else
      if y < z then y else z end 
    end
  end
  
  function CLIP255 (int x) --> int:
    CLIP3(0,255,x)
  end
  
  function filt16 (int y, int x) --> int:
  if luma then
    filter16[y*4 +x]
  else
    filter16_c[y*4 +x]
  end
  end
  
  init_luma_chroma: action ==>
  do
  	if(luma) then
	  sizeMB_extend :=24;
	  sizeMB :=16;
	else //name = chroma
	  sizeMB_extend :=16;
	  sizeMB :=8;
	end
  end
   
  get_In_NAL: action In_NAL:[f] ==>
  guard
    n < 6
  do
    in_nal[n] := f;
    n := n+1;
    if n = 6 then
      refW := in_nal[2];
      refH := in_nal[3];
  	  scaledW := in_nal[4];
  	  scaledH := in_nal[5];
    end
  end
  
  get_In_SPS: action In_SPS:[f] ==>
  guard
    n_sps < 4
  do
    if n_sps = 0 then
      seq_scaled_ref_layer_left_offset := f;
      if in_nal[1] = 0 then seq_scaled_ref_layer_left_offset := 0; end
    else
    	if n_sps = 1 then 
      		seq_scaled_ref_layer_top_offset := f;
      		if in_nal[1] = 0 then seq_scaled_ref_layer_top_offset := 0; end
    	else
    		if n_sps = 2 then
      			chroma_phase_x_plus1_flag := f;
    		else
      			chroma_phase_y_plus1 :=f;     
    		end
    	end
    end
    n_sps := n_sps+1;
  end
  
  get_Mb_addr : action Mb_addr:[v] ==>
  guard
    n = 6
  do
    Mb_addr := v;
    if(luma) then
    	x_base := (Mb_addr mod (refW >> 4)) << 4;
    	y_base := (Mb_addr / (refW >> 4)) << 4;
    else // name ="chroma"
    	x_base := (Mb_addr mod (refW >> 4)) << 3;
    	y_base := (Mb_addr / (refW >> 4)) << 3;
    end
    n := n+1;
  end
  
  get_x_y_scaled : action X_Y_Scaled_In_MB:[v] ==>
  guard
    n = 7 or n = 8
  do
    if n = 7 then
      x_scaled_in_pix := v * sizeMB;
    else
      y_scaled_in_pix := v * sizeMB;
    end
    n := n+1;
  end
    
  get_Tmp_Luma_Chroma : action Tmp_Luma_Chroma:[v] ==>
  guard
    n_tmp_luma_chroma < sizeMB_extend*sizeMB_extend
  do 
    tmp_luma_chroma[n_tmp_luma_chroma] := v;
    n_tmp_luma_chroma := n_tmp_luma_chroma +1;
  end
  
  get_done : action ==>
  guard
    n = 9 and n_tmp_luma_chroma = sizeMB_extend*sizeMB_extend
  end
  
  init_tab : action ==>
  var int deltaa, int deltab
  do      
    deltaa := ( (refW << 16) + (scaledW >> 1) ) / scaledW;
	if(luma) then
		deltab := ( (refW << 15) + (scaledW >> 1) ) / scaledW;
		foreach int i in 0 .. sizeMB_extend-1 do
        	px[i] := ((i + x_scaled_in_pix - 2 * seq_scaled_ref_layer_left_offset) * deltaa + deltab - 30720) >> 12;
    	end
    else  //name = "chroma"
    	deltab := ( (refW << 14) + (scaledW >> 1) ) / scaledW;
    	foreach int i in 0 .. sizeMB_extend-1 do
        	px[i] := (((i + x_scaled_in_pix - seq_scaled_ref_layer_left_offset) * deltaa + (2 + chroma_phase_x_plus1_flag)*deltab + 2048) >> 12) - 4 * (2 + chroma_phase_x_plus1_flag);
    	end
	end
	
	deltaa := ( (refH << 16) + (scaledH >> 1) ) / scaledH;
	if(luma) then
		deltab := ( (refH << 15) + (scaledH >> 1) ) / scaledH;
		foreach int j in 0 .. sizeMB_extend-1 do
        	py[j] := ((j + y_scaled_in_pix - 2 * seq_scaled_ref_layer_top_offset) * deltaa + deltab - 30720) >> 12;
    	end
    else  //name = "chroma"
    	deltab := ( (refH << 14) + (scaledH >> 1) ) / scaledH;
		foreach int j in 0 .. sizeMB_extend-1 do
        	py[j] := (((j + y_scaled_in_pix - seq_scaled_ref_layer_top_offset) * deltaa + (2 + chroma_phase_y_plus1)*deltab + 2048) >> 12)- 4 * (2 + chroma_phase_y_plus1);
    	end
	end
  end
  
  hfilter : action ==>
  var int addr_luma_chroma, int addr_tmp, int pos16, int pos, int m
  do
    foreach  int j in 0 .. sizeMB_extend-1 do
		addr_luma_chroma := j * sizeMB_extend+4;
		addr_tmp := j * sizeMB_extend;
		
		foreach int i in 0 .. sizeMB_extend-1 do
		    if px[i] < 0 then
			   pos16 := 16 + px[i] & 0x0f;
			else
			   pos16 := px[i] & 0x0f;
			end
			pos := px[i] >> 4;
			temp[addr_tmp + i] := 0;
			
			if luma then
				foreach int k in 0 .. 3 do
					m := CLIP3(-4, sizeMB_extend, pos - 1 - x_base);
					if addr_luma_chroma + m +k< sizeMB_extend*sizeMB_extend then
						temp[addr_tmp + i] := temp[addr_tmp + i] + filt16(pos16,k) * tmp_luma_chroma[addr_luma_chroma +m+k];
					end
				end
			else  //name="chroma"
				m := CLIP3(-4, sizeMB_extend-1, pos - x_base);
				temp[addr_tmp + i] := filt16(pos16,1) * tmp_luma_chroma[addr_luma_chroma +m] + filt16(pos16,2) * tmp_luma_chroma[addr_luma_chroma +m+1];
			end
		end
	end
 end

 vfilter : action ==>
  var int addr_current_luma_chroma, int addr_tmp, int pos16, int pos, int m, int tmp_result
  do
    foreach int i in 0 .. sizeMB-1 do
		addr_current_luma_chroma := i;
		addr_tmp := i + 4 * sizeMB_extend;
		
		foreach int j in 0 .. sizeMB-1 do
			if py[j] < 0 then
			   pos16 := 16 + py[j] & 0x0f;
			else
			   pos16 := py[j] & 0x0f;
			end
			
			pos := py[j] >> 4;
			tmp_result :=0;
			if luma then
				foreach int k in 0 .. 3 do
					m := CLIP3(-4, 17, pos - 1 - y_base);
					if addr_tmp + (m +k)*sizeMB_extend< sizeMB_extend*sizeMB_extend then
						tmp_result := tmp_result + filt16(pos16,k) * temp[addr_tmp + (m +k)*sizeMB_extend];
					end
					
				end
			else
				m := CLIP3(-4, sizeMB_extend-1, pos - y_base);
				if addr_tmp + (m +1)*sizeMB_extend< sizeMB_extend*sizeMB_extend then
					tmp_result :=  filt16(pos16,1) * temp[addr_tmp + m * sizeMB_extend] + filt16(pos16,2) * temp[addr_tmp + ( m + 1) * sizeMB_extend];
				end
			end			
			
			current_luma_chroma[addr_current_luma_chroma + j * sizeMB] := CLIP255((tmp_result+512) >> 10);
		 end		 
	 end
 end
 
 current_luma_chroma_out: action ==> Current_Luma_Chroma:[v]
  guard
    n_out < sizeMB*sizeMB
  var int v
  do
    v := current_luma_chroma[n_out];
    n_out := n_out +1;
  end
  
  out_done: action ==>
  guard
    n_out = sizeMB*sizeMB
  do
    n_out := 0;
    n:=0;
    n_sps:=0;
    n_tmp_luma_chroma := 0;     
  end
  
  schedule fsm init_luma_chroma:
    init_luma_chroma		( init_luma_chroma			) --> get_init;
    get_init  	 			( get_In_NAL     		  	) --> get_init;
    get_init  	 			( get_In_SPS	 			) --> get_init;
    get_init  	 			( get_Mb_addr	 			) --> get_init;
    get_init  	 			( get_x_y_scaled 			) --> get_init;
    get_init  	 			( get_Tmp_Luma_Chroma	 	) --> get_init;
    get_init     		 	( get_done 				  	) --> init_px_py;  
    init_px_py	  			( init_tab  				) --> horizontal_filter;
	horizontal_filter 		( hfilter 		      		) --> vertical_filter ;
	vertical_filter 		( vfilter 		      		) --> out;
	out 		 			( current_luma_chroma_out	) --> out;
	out 		 			( out_done 				  	) --> get_init;
  end
  
end
