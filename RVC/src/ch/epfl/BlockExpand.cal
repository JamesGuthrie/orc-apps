package ch.epfl;

actor BlockExpand () int(size=8) RUN, int(size=13) VALUE,
bool LAST ==> int(size=13) OUT :

	int(size=8) count := 0;

	List(type:int(size=13), size=64) mem := [0 : for int i in 0 .. 63];
	
	read_write: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==> OUT:[ qfs ] repeat 64
	guard l
	var List(type:int(size=13), size=64) qfs
	do
		mem[count + r] := v;
		count := count + r + 1;
		// if old keyword still existed ^^
		foreach int i in 0 .. 63 do
			qfs[i] := mem[i];
			mem[i] := 0; 
		end
		count := 0;
	end

	read: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==>
	do
		mem[count + r] := v;
		count := count + r + 1;
	end
		
	priority read_write > read; end
	

end