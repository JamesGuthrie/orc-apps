package ch.epfl;

import std.util.BitOps.* ;

actor MPEG4_algo_IAP () int(size=SAMPLE_SZ) PQF_AC,
int(size=MB_COORD_SZ + 3) PTR,
int(size=3) AC_PRED_DIR
==> int(size=SAMPLE_SZ) QF_AC : // Port size declaration
int MB_COORD_SZ = 8;

int SAMPLE_SZ = 13;

int MAXW_IN_MB = 121;

int(size=8) count; // Use 3 address lines for component index to save address calculation effort
// Also, location 0 is reserved for all uncoded blocks. This protocol must
// be identical to the buffer addressing in Predict.cal and Sequence.cal, since
// pointer values are generated there.
int BUF_SIZE = (MAXW_IN_MB + 2) * 8;

int(size=MB_COORD_SZ + 3) ptr;

int(size=MB_COORD_SZ + 3) pred_ptr; // Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
// Add 4 address lines  so that we can store the left edge and top edge AC values (14 in all).
List(type: int(size=SAMPLE_SZ), size=BUF_SIZE * 16) buf;

int(size=4) comp;

bool top;

bool acpred_flag;

newvop: action AC_PRED_DIR:[ s ] ==>
guard
	s = -2
do
	comp := 0;
	ptr := 8; // Start at 8, since 0-7 are reserved

end

skip: action AC_PRED_DIR:[ s ] ==>
guard
	s < 0
do
	comp := comp + 1;
	if comp = 6 then
		comp := 0;
		ptr := if ptr = 8 then
			BUF_SIZE - 8
		else
			ptr - 8
		end;
	end
end

copy: action AC_PRED_DIR:[ s ], PTR:[ p ], PQF_AC:[ ac ] repeat 63 ==> QF_AC:[ pred ] repeat 63
var
	List(type: int(size=SAMPLE_SZ), size=63) pred,
	int(size=4) v,
	int(size=4) h,
	bool top_edge,
	bool left_edge,
	int(size=5) index
do
	count := 1;
	pred_ptr := p;
	top := s = 2;
	acpred_flag := s != 0;
	
	foreach int i in 0 .. 62 do
		pred[i] := ac[i];
		v := ((i + 1) & 7);
		h := (((i + 1) >> 3) & 7);
		top_edge := (h = 0);
		left_edge := (v = 0);
		index := if top_edge then v else (h | 8) end;
		
		if acpred_flag and ((top and top_edge) or ((not top) and left_edge)) then
			pred[i] := pred[i] + buf[((pred_ptr << 4) | index)];
		end
		if left_edge or top_edge then
			buf[(((ptr | comp) << 4) | index)] := pred[i];
		end		
	end
	
	comp := comp + 1;
	if comp = 6 then
		comp := 0;
		ptr := if ptr = 8 then
			BUF_SIZE - 8
		else
			ptr - 8
		end;
	end
end


priority
	newvop > skip > copy;
end

end
