/********************************************************************************

This software module was originally developed by Damien de Saint Jorre EFPL, in the course of development of the ISO/IEC 23002-4 for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the ISO/IEC 23002-4  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and (2) to develop the MPEG-C part 4:

EPFL grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that EPFL owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  EPFL of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/EPFL retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
 /**
 *
 *
 * @author Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
 * 
 */
package org.sc29.wg11.mpeg4.part10.cbp.deblockingFilter;

import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;
import std.util.Math.*;
import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

actor Algo_DBF_AdaptiveFilter_AVC (uint(size=5) MbWidth, bool ChromaEdgeFlag)
	uint(size=3)  BS,
	uint(size=6)  MB_TYPE,
	uint(size=7)  MB_LOCATION,
	uint(size=7)  PIC_SIZE_IN_MB,
	uint(size=8)  MB_IN,
	uint(size=16) MB_DBF_PARAM
		==>
	uint(size=8)  MB_OUT
		:

	uint(size=5) tPrimeC0[3][52] =
	[
		[ 0,  0, 0, 0, 0, 0, 0, 0, 0,  0,
		  0,  0, 0, 0, 0, 0, 0, 0, 0,  0,
		  0,  0, 0, 1, 1, 1, 1, 1, 1,  1,
		  1,  1, 1, 2, 2, 2, 2, 3, 3,  3,
		  4,  4, 4, 5, 6, 6, 7, 8, 9, 10,
		 11, 13],
		[ 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,
		  0,  0, 0, 0, 0, 0,  0,  0,  0,  0,
		  0,  1, 1, 1, 1, 1,  1,  1,  1,  1,
		  1,  2, 2, 2, 2, 3,  3,  3,  4,  4,
		  5,  5, 6, 7, 8, 8, 10, 11, 12, 13,
		 15, 17],
		[  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,
		   0,  0, 0,  0,  0,  0,  0,  1,  1,  1,
		   1,  1, 1,  1,  1,  1,  1,  2,  2,  2,
		   2,  3, 3,  3,  4,  4,  4,  5,  6,  6,
		   7,  8, 9, 10, 11, 13, 14, 16, 18, 20,
		  23, 25]
	];

	uint(size=6)  mbTypeTable[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK];
	uint(size=16) alphaTable[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK][3];
	uint(size=16) betaTable[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK][3];
	uint(size=4)  bSTable[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK][32];
	bool          filterEdges[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK][3];
	uint(size=16) indexATable[MAX_PICWIDTH_BLK][MAX_PICHEIGHT_BLK][3];
	uint(size=12) locXSent;
	uint(size=12) locYSent;
	uint(size=12) mbLocxInPix;
	uint(size=12) mbLocyInPix;
	uint(size=8)  nbLineInPic;
	uint(size=32) nbMacroBlocksWritten := 0;
	int(size=9)   picture [MAX_PICWIDTH_PX][MAX_PICHEIGHT_PX];
	uint(size=7)  picWidthInMb;

	//Computing of filterSamples, @see 8.7.2.2 in MPEG-4 AVC standard.
	function computeFilterSamples(uint(size=12) q0X, uint(size=12) q0Y,
		bool verticalEdge, uint(size=5) bSValue, uint(size=16) alpha,
		uint(size=16) beta) --> bool
	var
		uint(size=12) p0X = if(verticalEdge)then q0X-1 else q0X   end,
		uint(size=12) p0Y = if(verticalEdge)then q0Y   else q0Y-1 end,
		uint(size=12) p1X = if(verticalEdge)then q0X-2 else q0X   end,
		uint(size=12) p1Y = if(verticalEdge)then q0Y   else q0Y-2 end,
		uint(size=12) q1X = if(verticalEdge)then q0X+1 else q0X   end,
		uint(size=12) q1Y = if(verticalEdge)then q0Y   else q0Y+1 end
	:
		bSValue != 0 and
		abs(picture[p0X][p0Y] - picture[q0X][q0Y]) < alpha and
		abs(picture[p1X][p1Y] - picture[p0X][p0Y]) < beta  and
		abs(picture[q1X][q1Y] - picture[q0X][q0Y]) < beta
	end

	procedure filterEdgeBSEqualTo4(uint(size=12) q0X, uint(size=12) q0Y,
		bool verticalEdge, uint(size=16) alpha, uint(size=16) beta)
	var
		uint(size=8)  aP,
		uint(size=8)  aQ,
		bool          chromaStyleFiltering = ChromaEdgeFlag,
		uint(size=12) p0X = if verticalEdge then q0X-1 else q0X   end,
		uint(size=12) p0Y = if verticalEdge then q0Y   else q0Y-1 end,
		uint(size=12) p1X = if verticalEdge then q0X-2 else q0X   end,
		uint(size=12) p1Y = if verticalEdge then q0Y   else q0Y-2 end,
		uint(size=12) p2X = if verticalEdge then q0X-3 else q0X   end,
		uint(size=12) p2Y = if verticalEdge then q0Y   else q0Y-3 end,
		uint(size=12) p3X = if verticalEdge then q0X-4 else q0X   end,
		uint(size=12) p3Y = if verticalEdge then q0Y   else q0Y-4 end,
		uint(size=12) q1X = if verticalEdge then q0X+1 else q0X   end,
		uint(size=12) q1Y = if verticalEdge then q0Y   else q0Y+1 end,
		uint(size=12) q2X = if verticalEdge then q0X+2 else q0X   end,
		uint(size=12) q2Y = if verticalEdge then q0Y   else q0Y+2 end,
		uint(size=12) q3X = if verticalEdge then q0X+3 else q0X   end,
		uint(size=12) q3Y = if verticalEdge then q0Y   else q0Y+3 end,
		int(size=9)  p0  = picture[p0X][p0Y],
		int(size=9)  p1  = picture[p1X][p1Y],
		int(size=9)  p2  = picture[p2X][p2Y],
		int(size=9)  p3  = picture[p3X][p3Y],
		int(size=9)  q0  = picture[q0X][q0Y],
		int(size=9)  q1  = picture[q1X][q1Y],
		int(size=9)  q2  = picture[q2X][q2Y],
		int(size=9)  q3  = picture[q3X][q3Y],
		bool filteringFirstWay
	begin
		//Filtering p'X
		if(not chromaStyleFiltering)then
			aP := abs(p2 - p0);
			filteringFirstWay := (aP<beta and abs(p0-q0)<((alpha>>2)+2));
		else
			filteringFirstWay := false;
		end
		if(filteringFirstWay)then
			picture[p0X][p0Y] := (p2 + 2*p1 + 2*p0 + 2*q0 + q1 + 4)>>3;//p'0
			picture[p1X][p1Y] := (p2 + p1 + p0 + q0 + 2)>>2;//p'1
			picture[p2X][p2Y] := (2*p3 + 3*p2 + p1 + p0 + q0 + 4)>>3;//p'2
		else
			picture[p0X][p0Y] := (2*p1 + p0 + q1 + 2)>>2;
		end
		//Filtering q'X
		if(not chromaStyleFiltering)then
			aQ := abs(q2 - q0);
			filteringFirstWay := (aQ<beta and abs(p0-q0)<((alpha>>2)+2));
		else
			filteringFirstWay := false;
		end
		if(filteringFirstWay)then
			picture[q0X][q0Y] := (p1 + 2*p0 + 2*q0 + 2*q1 + q2 + 4)>>3;//p'0
			picture[q1X][q1Y] := (p0 + q0 + q1 + q2 + 2)>>2;//p'1
			picture[q2X][q2Y] := (2*q3 + 3*q2 + q1 + q0 + p0 + 4)>>3;//p'2
		else
			picture[q0X][q0Y] := (2*q1 + q0 + p1 + 2)>>2;
		end
	end

	procedure filterEdgeBSLessThan4(uint(size=12) q0X, uint(size=12) q0Y,
		bool verticalEdge, uint(size=3) bS, uint(size=6) indexA,
		uint(size=16) beta)
	var
		uint(size=8)  aP,
		uint(size=8)  aQ,
		uint(size=5)  bitDepth = 8,
		bool          chromaStyleFiltering = ChromaEdgeFlag,
		int(size=8)   delta,
		uint(size=12) p0X = if verticalEdge then q0X-1 else q0X   end,
		uint(size=12) p0Y = if verticalEdge then q0Y   else q0Y-1 end,
		uint(size=12) p1X = if verticalEdge then q0X-2 else q0X   end,
		uint(size=12) p1Y = if verticalEdge then q0Y   else q0Y-2 end,
		uint(size=12) p2X = if verticalEdge then q0X-3 else q0X   end,
		uint(size=12) p2Y = if verticalEdge then q0Y   else q0Y-3 end,
		uint(size=12) q1X = if verticalEdge then q0X+1 else q0X   end,
		uint(size=12) q1Y = if verticalEdge then q0Y   else q0Y+1 end,
		uint(size=12) q2X = if verticalEdge then q0X+2 else q0X   end,
		uint(size=12) q2Y = if verticalEdge then q0Y   else q0Y+2 end,
		int(size=9)  p0  = picture[p0X][p0Y],
		int(size=9)  p1  = picture[p1X][p1Y],
		int(size=9)  p2  = picture[p2X][p2Y],
		int(size=9)  q0  = picture[q0X][q0Y],
		int(size=9)  q1  = picture[q1X][q1Y],
		int(size=9)  q2  = picture[q2X][q2Y],
		uint(size=5)  tC,
		uint(size=5)  tC0
	begin
		tC0 := tPrimeC0[bS-1][indexA] *(1 <<(bitDepth-8));
		if(not chromaStyleFiltering)then
			aP := abs(p2 - p0);
			aQ := abs(q2 - q0);
			tC :=
				if(aP<beta and aQ<beta)then
					tC0 + 2
				else
					if(aP<beta or aQ< beta)then
						tC0 + 1
					else
						tC0
					end
				end;
			if(aP<beta)then
				picture[p1X][p1Y] := //p'1
					p1 + clip_i32((p2 +((p0+q0+1)>>1)-(p1<<1))>>1, -tC0, tC0);
			end
			if(aQ<beta)then
				picture[q1X][q1Y] := //q'1
					q1 + clip_i32((q2 +((p0+q0+1)>>1)-(q1<<1))>>1, -tC0, tC0);
			end
		else
			tC := tC0 + 1;
		end

		delta := clip_i32(((((q0-p0)<<2)+(p1-q1)+4)>>3), -tC, tC);

		picture[p0X][p0Y] := clip_i32(p0+delta, 0, 255);//p'0
		picture[q0X][q0Y] := clip_i32(q0-delta, 0, 255);//q'O
	end

	procedure filterMB(uint(size=8) xBlk, uint(size=8) yBlk)
	var
		uint(size=3) bS:=0,
		uint(size=3) chromaArrayType = 1,
		bool filterLeft     = filterEdges[xBlk][yBlk][0],
		bool filterInternal = filterEdges[xBlk][yBlk][1],
		bool filterTop      = filterEdges[xBlk][yBlk][2],
		uint(size=12) mbLocxInPix = xBlk * MbWidth,
		uint(size=12) mbLocyInPix = yBlk * MbWidth,
		uint(size=3) PARTITION_WIDTH = MbWidth/4,
		uint(size=8) partitionMin,
		uint(size=8) partitionMax
	begin
		if(not ChromaEdgeFlag)then
			partitionMin := 1;
			partitionMax := 3;
		else
			if(chromaArrayType=1)then
				partitionMin := 2;
				partitionMax := 2;
			else
				partitionMin := 42;
				partitionMax := 42;
			end
		end
		//Filtering vertical edges
		if(filterLeft)then
			foreach uint y in 0 .. MbWidth - 1
			do
				bS := bSTable[xBlk][yBlk][(y/PARTITION_WIDTH) * 4];
				if(computeFilterSamples(mbLocxInPix, mbLocyInPix +y,
					true, bS, alphaTable[xBlk][yBlk][0],
					betaTable[xBlk][yBlk][0]))then

					if(bS < 4)then
						filterEdgeBSLessThan4(mbLocxInPix, mbLocyInPix + y,
							true, bS, indexATable[xBlk][yBlk][0],
							betaTable[xBlk][yBlk][0]);
					else
						filterEdgeBSEqualTo4(mbLocxInPix, mbLocyInPix + y, true,
							alphaTable[xBlk][yBlk][0], betaTable[xBlk][yBlk][0]);
					end
				end
			end
		end
		if(filterInternal)then
			foreach uint y in 0 .. MbWidth - 1
			do
				foreach uint xPartition in partitionMin .. partitionMax
				do
					if not ((mbTypeTable[xBlk][yBlk] = BLOCK_TYPE_I_8x8) and ((xPartition & 1) = 1)) then
						bS := bSTable[xBlk][yBlk][(y/PARTITION_WIDTH) * 4 +xPartition];
						if(computeFilterSamples(mbLocxInPix +xPartition*PARTITION_WIDTH, mbLocyInPix +y,
							true, bS, alphaTable[xBlk][yBlk][1],
							betaTable[xBlk][yBlk][1]))then
	
							if(bS < 4)then
								filterEdgeBSLessThan4(mbLocxInPix +xPartition*PARTITION_WIDTH, mbLocyInPix + y,
									true, bS, indexATable[xBlk][yBlk][1],
									betaTable[xBlk][yBlk][1]);
							else
								filterEdgeBSEqualTo4(mbLocxInPix +xPartition*PARTITION_WIDTH, mbLocyInPix + y,
									true, alphaTable[xBlk][yBlk][1],
									betaTable[xBlk][yBlk][1]);
							end
						end
					end
				end
			end
		end
		//Filtering Horizontal Edges
		if(filterTop)then
			foreach uint x in 0 .. MbWidth - 1
			do
				bS := bSTable[xBlk][yBlk][x/PARTITION_WIDTH +16];
				if(computeFilterSamples(mbLocxInPix +x, mbLocyInPix,
					false, bS, alphaTable[xBlk][yBlk][2],
					betaTable[xBlk][yBlk][2]))then

					if(bS < 4)then
						filterEdgeBSLessThan4(mbLocxInPix +x, mbLocyInPix,
							false, bS, indexATable[xBlk][yBlk][2],
							betaTable[xBlk][yBlk][2]);
					else
						filterEdgeBSEqualTo4(mbLocxInPix +x, mbLocyInPix,
							false, alphaTable[xBlk][yBlk][2],
							betaTable[xBlk][yBlk][2]);
					end
				end
			end
		end
		if(filterInternal)then
			foreach uint x in 0 .. MbWidth - 1
			do
				foreach uint yPartition in partitionMin .. partitionMax
				do
					if not ((mbTypeTable[xBlk][yBlk] = BLOCK_TYPE_I_8x8) and ((yPartition & 1) = 1)) then
						bS := bSTable[xBlk][yBlk][yPartition * 4 +x/PARTITION_WIDTH +16];
						if(computeFilterSamples(mbLocxInPix +x, mbLocyInPix + yPartition*PARTITION_WIDTH,
							false, bS, alphaTable[xBlk][yBlk][1],
							betaTable[xBlk][yBlk][1]))then
	
							if(bS < 4)then
								filterEdgeBSLessThan4(mbLocxInPix +x, mbLocyInPix + yPartition*PARTITION_WIDTH,
									false, bS, indexATable[xBlk][yBlk][1],
									betaTable[xBlk][yBlk][1]);
							else
								filterEdgeBSEqualTo4(mbLocxInPix +x, mbLocyInPix + yPartition*PARTITION_WIDTH,
									false, alphaTable[xBlk][yBlk][1],
									betaTable[xBlk][yBlk][1]);
							end
						end
					end
				end
			end
		end
	end

	getIsNewPic: action 
		PIC_SIZE_IN_MB :[valPicWidthInMb, valPicHeightInMb],
		MB_TYPE:[mbType] ==>
	guard
		mbType >= NEW_FRAME_NON_IDR
	do
		picWidthInMb         := valPicWidthInMb;
	end

	writePictureDone: action
		PIC_SIZE_IN_MB :[valPicWidthInMb, valPicHeightInMb],
		MB_TYPE:[mbType]
			==>
	guard
		mbType >= NEW_FRAME_NON_IDR
	do
		picWidthInMb         := valPicWidthInMb;
		nbLineInPic := valPicHeightInMb;
		locXSent    := 0;
		locYSent    := 0;
	end

	isNewSlice: action MB_TYPE:[mbType] ==>
	guard
		mbType = NEW_SLICE
	end
	
	uint(size=6) valMbType;
	
	getWriteAddr: action
		MB_TYPE:[mbType]
			==>
	guard
		mbType < NEW_SLICE
	do
		nbMacroBlocksWritten := nbMacroBlocksWritten + 1;
		valMbType := mbType;
	end

	writeData.Chroma : action 
		MB_LOCATION :[MbLocxInPic , MbLocyInPic],
		MB_IN   :[pixValue] repeat MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
			==>
	guard
		MbWidth = MB_WIDTH_CHROMA
	do
		foreach uint y in 0 .. MbWidth - 1
		do
			foreach int x in 0 .. MbWidth - 1
			do
				picture[MbLocxInPic * MbWidth + x][MbLocyInPic * MbWidth + y] := pixValue[y * MbWidth + x];
			end
		end
		mbLocxInPix := MbLocxInPic * MbWidth;
		mbLocyInPix := MbLocyInPic * MbWidth;

	end

	writeData.Luma : action
		MB_LOCATION :[MbLocxInPic , MbLocyInPic],
		MB_IN   :[pixValue] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
			==>
	guard
		MbWidth = MB_WIDTH_LUMA
	do
		foreach uint y in 0 .. MbWidth - 1
		do
			foreach int x in 0 .. MbWidth - 1
			do
				picture[MbLocxInPic * MbWidth + x][MbLocyInPic * MbWidth + y] := pixValue[y * MbWidth + x];
			end
		end
		mbLocxInPix := MbLocxInPic * MbWidth;
		mbLocyInPix := MbLocyInPic * MbWidth;
	end

	getFilterInfo: action 
		MB_DBF_PARAM:[alpha0, alpha1, alpha2, beta0, beta1, beta2, indexA0, indexA1, indexA2], 
		BS :[bsTableVal]repeat 35
		==>
	var
		uint(size=8) mbLocxInBlk = mbLocxInPix / MbWidth,
		uint(size=8) mbLocyInBlk = mbLocyInPix / MbWidth,
		bool filterLeft = if bsTableVal[0] = 1 then true else false end,
		bool filterInternal = if bsTableVal[1] = 1 then true else false end,
		bool filterTop = if bsTableVal[2] = 1 then true else false end
	do
		foreach int i in 0 .. 31
		do
			bSTable[mbLocxInBlk][mbLocyInBlk][i] := bsTableVal[i + 3];
		end
		filterEdges[mbLocxInBlk][mbLocyInBlk] := [filterLeft, filterInternal,
			filterTop];
		alphaTable  [mbLocxInBlk][mbLocyInBlk] := [alpha0, alpha1, alpha2];
		betaTable   [mbLocxInBlk][mbLocyInBlk] := [beta0, beta1, beta2];
		indexATable [mbLocxInBlk][mbLocyInBlk] := [indexA0, indexA1, indexA2];
		mbTypeTable [mbLocxInBlk][mbLocyInBlk] := valMbType;
	end

	filterPicture: action ==>
	do
		foreach uint yBlk in 0 .. nbLineInPic-1
		do
			foreach uint xBlk in 0 .. picWidthInMb-1
			do
				filterMB(xBlk,yBlk);
			end
		end
	end

	sendPicture.launch.Chroma : action
			==>
		MB_OUT :[currMbVal] repeat MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
	guard
		locYSent < nbLineInPic,
		MbWidth = MB_WIDTH_CHROMA
	var
		uint(size=8) currMbVal[MB_WIDTH_CHROMA*MB_WIDTH_CHROMA]
	do
		foreach uint y in 0 .. MbWidth - 1
		do
			foreach int x in 0 .. MbWidth - 1
			do
				currMbVal[y * MbWidth + x] := picture[locXSent * MbWidth + x][locYSent * MbWidth + y];
			end
		end
		locXSent := locXSent + 1;
		if(locXSent = picWidthInMb)then
			locXSent := 0;
			locYSent := locYSent + 1;
		end
	end

	sendPicture.launch.Luma : action
			==>
		MB_OUT :[currMbVal] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
	guard
		locYSent < nbLineInPic,
		MbWidth = MB_WIDTH_LUMA
	var
		uint(size=8) currMbVal[MB_WIDTH_LUMA*MB_WIDTH_LUMA]
	do
		foreach uint y in 0 .. MbWidth - 1
		do
			foreach uint x in 0 .. MbWidth - 1
			do
				currMbVal[y * MbWidth + x] := picture[locXSent * MbWidth + x][locYSent * MbWidth + y];
			end
		end
		locXSent := locXSent + 1;
		if(locXSent = picWidthInMb)then
			locXSent := 0;
			locYSent := locYSent + 1;
		end
	end

	sendPicture.done : action ==>
	guard
		locYSent = nbLineInPic
	do
		nbMacroBlocksWritten := 0;
	end

	schedule fsm  GetIsNewPic:
		GetIsNewPic (getIsNewPic      )--> GetNextMb;
		GetNextMb   (isNewSlice       )--> GetNextMb;
		GetNextMb   (getWriteAddr     )--> WriteMb;
		GetNextMb   (writePictureDone )--> FilterPicture;

		WriteMb       (writeData     )--> GetFilterInfo;
		GetFilterInfo (getFilterInfo )--> GetNextMb;

		FilterPicture (filterPicture      )--> SendPicture;
		SendPicture   (sendPicture.launch )--> SendPicture;
		SendPicture   (sendPicture.done   )--> GetNextMb;
	end
	priority
		getWriteAddr       > writePictureDone;
		sendPicture.launch > sendPicture.done;
	end
end