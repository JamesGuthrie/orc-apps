/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 
Manager of the intra 4x4 Prediction
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/
//Modified by Damien de Saint Jorre, IETR/INSA of Rennes (France)
package org.sc29.wg11.mpeg4.part10.cbp.intraPred;

import std.util.BitOps.*;

actor Mgnt_Intra_4x4 ()
	uint(size=4)  PRED_MODE,
	uint(size=16) EDGE,
	uint(size=8)  MB_4X4,
	bool          NEIGHBOUR
		==> 
		bool AVAIL,
		uint(size=4) PRED_MODE4,
		int(size=16) Y_LEFT4,
		int(size=16) Y_UP4,
		int(size=16) Y_UP_LEFT4
		:  
  	
	//Token counter
	int (size = 6) mb_counter := 0;
	
	// Raster scan order : Indicate the position number of the current 4x4 block in the 16x16 macroblock
	// The position number is raised from left to right and from top to bottom
    uint(size=4) t_scan2_Index[16] = [ 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15];

	//List that contains the neighbouring pixel of the current 16x16 Mb, from bottom to top then left to right 
	uint(size=16) left_16x16_edge[16] := [ 0 : for int i in 0 .. 16-1];
  	uint(size=16) top_16x16_edge[16 + 4] := [ 0 : for int i in 0 .. 16+3];
  	uint(size=16) topLeft_16x16_edge := 0;
  
    //List that contains the edge of the previous 4x4 Mb predicted 
	uint(size=16) bottom_4x4_edge[16] := [0 : for int i in 0 .. 16-1];
	uint(size=16) right_4x4_edge[4] := [ 0 : for int i in 0 .. 3];
	uint(size=16) bottomRight_4x4_edge := 0;
	
	// Available 4x4 edge for prediction [left, top, top left, top right]
	bool avail[4] := [ false : for int i in 0 .. 3 ];
	
	// Available 16x16 edge for prediction
	bool left_16x16_avail := false;
	bool top_16x16_avail := false;
	bool topLeft_16x16_avail := false;
	bool topRight_16x16_avail := false;
	bool topLeft_4x4_avail[16] := [false : for int i in 1 .. 16];
	bool topRight_4x4_avail[16] := [false : for int i in 1 .. 16];

	
  //******************************* Enable or not Prediction management ********************************************

  
	//Mb_Type_OK : Enable the prediction 
	MbTypeOK:action
		NEIGHBOUR :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail],
	  	PRED_MODE:[v] repeat 16
	  		==>
		  	PRED_MODE4:[[v[t_scan2_Index[s]]:for int s in 0 .. 15] ] repeat 16
	do
		//Initialize counter
		mb_counter := 0;

		//Set 16x16 the available edge
		left_16x16_avail := NeighbourA_Avail;
		top_16x16_avail := NeighbourB_Avail;
		topRight_16x16_avail := NeighbourC_Avail;
		topLeft_16x16_avail :=  NeighbourD_Avail;
		 
		 
		//Set available edge for each 4x4 mb
		topLeft_4x4_avail := [ topLeft_16x16_avail, top_16x16_avail, top_16x16_avail, top_16x16_avail, 
		 						left_16x16_avail   , true		    , true			 , true		  ,
		 						left_16x16_avail   , true			, true			 , true		  , 
		 						left_16x16_avail   , true		    , true			 , true		  ];
	     
		topRight_4x4_avail := [ top_16x16_avail   , top_16x16_avail, top_16x16_avail , topRight_16x16_avail,
	     						 true             , false          , true            , false		  ,
	     						 true			  , true           , true			 , false          ,
	     						 true             , false          , true            , false		  ];

	end

	//******************************* Receiving required token ********************************************
  
	//Receive the value of the 16x16 Mb neighbouring pixel from bottom to top, then corner, then left to right 
	EdgeNeighbour:action EDGE:[v] repeat 2*16+5 ==> 
	do
		//Store left, top and top left border
		left_16x16_edge := [v[s]:for int s in 0 .. 16-1];
		topLeft_16x16_edge := v[16];
		top_16x16_edge := [v[s]:for int s in 16+1 .. 2*16+4];
	end
  
	//Receive pixel value from the previous 4x4 Mb Predicted and store its edge
	StoreEdge:action MB_4X4:[v] repeat 4*4==> 
	guard
		not avail[0],
		not avail[1],
		not avail[2],
		not avail[3]
	do
		//Store bottom , right and bottom right edge
		bottomRight_4x4_edge := bottom_4x4_edge[3+ (mb_counter mod 4)*4];
		foreach int s in 0 .. 3
		do
			bottom_4x4_edge[s+ (mb_counter mod 4)*4]:= v[s+3*4];
		end
		right_4x4_edge :=  [v[s*4-1]:for int s in 1 .. 4];
		mb_counter := mb_counter +1;  
	end
  
	//******************************* Processing ********************************************
 
	//**** Select and send available edge ****
	AvailEdge:action ==> AVAIL:[ [avail[s]: for int s in 0 .. 2] ] repeat 3
	guard
		mb_counter< 16
	do
		 	
		//4x4 edge available for left
		avail[0] := if (mb_counter mod 4) = 0 then left_16x16_avail else true end;
		//4x4 edge available for top
		avail[1] := if mb_counter < 4 then top_16x16_avail else true end;
		//4x4 edge available for top left
		avail[2] := topLeft_4x4_avail[mb_counter];
		//4x4 edge available for top right
		avail[3] := topRight_4x4_avail[mb_counter];    
	end
  
	//**** Send neighbouring pixel value ****
  
	//Left neighbour from 16x16 edge
	SendEdge.LeftEdge16:action ==> Y_LEFT4:[ [left_16x16_edge[s+mb_counter]: for int s in 0 .. 3]]repeat 4
	guard 
	  	avail[0],
	  	mb_counter mod (16 >> 2) = 0
	do
		avail[0] := false;
	end 
  
	//Left neighbour from 4x4 edge
	SendEdge.LeftEdge4:action ==> Y_LEFT4:[ [right_4x4_edge[s]: for int s in 0 .. 3] ]repeat 4
	guard 
		avail[0],
		mb_counter mod (16 >> 2) != 0
	do
		avail[0] := false;
	end 
  
	//Top and right neighbour from 16x16 edge
	SendEdge.TopRightEdge16:action ==> Y_UP4:[ [top_16x16_edge[mb_counter*4 + s]: for int s in 0 .. 7]]repeat 8
	guard 
	  	avail[1],
	  	avail[3],
	  	mb_counter < 16 / 4
	do
		avail[1] := false;
		avail[3] := false;
	end
  
	//Top and right neighbour from 4x4 edge
	SendEdge.TopRightEdge4:action ==> Y_UP4:[ [bottom_4x4_edge[(mb_counter mod 4)*4+s]: for int s in 0 .. 7] ]repeat 8
	guard 
		avail[1],
		avail[3],
		mb_counter >= 16 / 4
	do
		avail[1] := false;
		avail[3] := false;
	end
  
	//Only top neighbour from 16x16 edge
	SendEdge.TopEdge16:action ==> Y_UP4:[[buff[s]: for int s in 0 .. 7]] repeat 8
	guard 
	  	avail[1],
	  	not avail[3],
	  	mb_counter < 16 / 4
	var
		List (type: int(size=16), size=64) buff := [ 0 : for int t in 0 .. 63 ]
	do
		avail[1] := false;
		foreach int s in 0 .. 3 do
			buff[s] := top_16x16_edge[mb_counter*4 + s];
		end
		foreach int i in 0 .. 3 do
			buff[4 + i] := top_16x16_edge[mb_counter*4 + 3];
		end
	end
     
	//Only top neighbour from 4x4 edge
	SendEdge.TopEdge4:action ==> Y_UP4:[[buff[s]: for int s in 0 .. 7]]repeat 8
	guard 
		avail[1],
		not avail[3],
		mb_counter >= 16 / 4
	var
		List (type: int(size=16), size=16) buff := [ 0 : for int t in 0 .. 15 ]
	  
	do
		avail[1] := false;
		foreach int s in 0 .. 3 do
			buff[s] := bottom_4x4_edge[(mb_counter mod 4)*4 + s];
		end
		foreach int i in 0 .. 3 do
			buff[4 + i] := bottom_4x4_edge[(mb_counter mod 4)*4 + 3];
		end
	end
  
  
	//Up Left neighbour
	SendEdge.TopLeftEdge4:action ==> Y_UP_LEFT4:[v]
	guard 
		avail[2]
	var
		uint (size=16) v
	do
 		v :=if mb_counter = 0 then
  				topLeft_16x16_edge
  			else 
  				if  mb_counter < 4 then
					top_16x16_edge[mb_counter*4 - 1]
				else 
					if mb_counter  mod 4 = 0 then
						left_16x16_edge[mb_counter-1]
  					else
  		 				bottomRight_4x4_edge
  		 			end
  		 		end
  		 	end;
		avail[2] := false;
	end
 
	//******************************* End of processing ********************************************
 
	//End of every process, wait for the next mb_type
	EndEdge:action ==>
	guard
		mb_counter = 16,
		not avail[0],
		not avail[1],
		not avail[2],
		not avail[3]
	end

	schedule fsm Mb_Type:
		Mb_Type     	(MbTypeOK		)--> EdgeNeighbour;

		EdgeNeighbour	(EdgeNeighbour	)--> AvailEdge;

		AvailEdge		(AvailEdge		)--> Process;

		Process    		(SendEdge		)--> Process;
		Process      	(StoreEdge		)--> AvailEdge;
		
		AvailEdge		(EndEdge		)--> Mb_Type;
	end
	
	priority
		EndEdge > StoreEdge > SendEdge;
		SendEdge.LeftEdge16>SendEdge.TopRightEdge16>SendEdge.LeftEdge4>SendEdge.TopRightEdge4>SendEdge.TopEdge16>SendEdge.TopEdge4>SendEdge.TopLeftEdge4;
	end  
end