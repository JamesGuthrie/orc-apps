/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.cbp.interPred;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;
import std.util.Math.*;
import org.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_MvLXReconstr(bool IsPredL0)
	uint(size=6)  MbType,
	uint(size=4)  sub_mb_type,

	uint(size=7)  MbLocation,

	uint(size=4)  MbPredRefIdx,
	uint(size=4)  SubMbPredRefIdx,

	int (size=16) MbPredMvRes,
	int (size=16) SubMbPredMvRes
		==>
	bool          NewMbPic,
	bool          NewMbPicSlice,
	int (size=16) MvOut,
	uint(size=11) Location,
	uint(size=4)  RefIdxOut
		:

	uint(size=4) locXYToBlkIdx[16] =
	[
		0,1,4,5,
		2,3,6,7,
		8,9,12,13,
		10,11,14,15
	];
	
	int STRIDE = ((MAX_PICWIDTH_BLK + 1) * 4) + 1;
	int OFFSET = STRIDE + 1;
	int locXYToTabIdx[16] =
	[
		0 * STRIDE + 0 + OFFSET, 0 * STRIDE + 1 + OFFSET, 1 * STRIDE + 0 + OFFSET, 1 * STRIDE + 1 + OFFSET,
		0 * STRIDE + 2 + OFFSET, 0 * STRIDE + 3 + OFFSET, 1 * STRIDE + 2 + OFFSET, 1 * STRIDE + 3 + OFFSET,
		2 * STRIDE + 0 + OFFSET, 2 * STRIDE + 1 + OFFSET, 3 * STRIDE + 0 + OFFSET, 3 * STRIDE + 1 + OFFSET,
		2 * STRIDE + 2 + OFFSET, 2 * STRIDE + 3 + OFFSET, 3 * STRIDE + 2 + OFFSET, 3 * STRIDE + 3 + OFFSET
	];

	int(size=5) refIdxTab[STRIDE * 5];
	int(size=16) mvTab[STRIDE * 5][2];



	uint(size=3) mbPartIdxMax;
	uint(size=3) mbPartIdx;
	uint(size=3) sizeMbMv;
	uint(size=3) subMbPartIdxMax;
	uint(size=3) subMbPartIdx;
	uint(size=3) sizeSubMbMv;
	uint(size=6) mbType;
	uint(size=4) subMbType;
	uint(size=1) idxSubTab;
	bool         isPred4SubMb;

	uint(size=11) mbXInPix;
	uint(size=11) mbYInPix;

	List(type: int (size=16),size=2) mvA;
	List(type: int (size=16),size=2) mvB;
	List(type: int (size=16),size=2) mvC;	
	List(type: int (size=16),size=2) oMv;
	
	procedure computeMvPredL0(int(size=5) RefIdxCurr, int(size=5) Ref_Idx_A, int(size=5) Ref_Idx_B, int(size=5) Ref_Idx_C)
		begin
			oMv :=
				if(Ref_Idx_B = -2 and Ref_Idx_C = -2)then
					[mvA[0],mvA[1]]
				else
					if(   RefIdxCurr  = Ref_Idx_A and RefIdxCurr != Ref_Idx_B and RefIdxCurr != Ref_Idx_C
					   or RefIdxCurr != Ref_Idx_A and RefIdxCurr  = Ref_Idx_B and RefIdxCurr != Ref_Idx_C
					   or RefIdxCurr != Ref_Idx_A and RefIdxCurr != Ref_Idx_B and RefIdxCurr  = Ref_Idx_C	)then
						if(RefIdxCurr = Ref_Idx_A)then
							[mvA[0],mvA[1]]
						else
							if(RefIdxCurr = Ref_Idx_B)then
								[mvB[0],mvB[1]]
							else
								[mvC[0],mvC[1]]
							end
						end
					else
						[ median(mvA[0],mvB[0],mvC[0]),
						  median(mvA[1],mvB[1],mvC[1]) ]
					end
				end;
		end

	int (size=5) refIdxA;
	int (size=5) refIdxB;
	int (size=5) refIdxC;
	int Idx;

	procedure getNeighbourBlockParameters (int(size=5) IdxBlk, uint(size=5) SzBlkMv)
	var
			int Idx_A,
			int Idx_B,
			int Idx_C,			
			int (size=5) Idx_C_1D,
			int x, int y
			
	begin
		SzBlkMv := SzBlkMv / 4;
		x := (locXYToBlkIdx[IdxBlk]) & 3;
		y := (locXYToBlkIdx[IdxBlk]) /4;
		
		Idx := OFFSET  + mbLocxIdx + y * STRIDE + x; 
		Idx_A   := Idx - 1;
		Idx_B   := Idx - STRIDE;
		Idx_C   := Idx - STRIDE - 1;
		
		refIdxA := refIdxTab[Idx_A];
		mvA     := [mvTab[Idx_A][0],mvTab[Idx_A][1]];
		refIdxB := refIdxTab[Idx_B];
		mvB     := [mvTab[Idx_B][0],mvTab[Idx_B][1]];
		refIdxC := refIdxTab[Idx_C];
		mvC     := [mvTab[Idx_C][0],mvTab[Idx_C][1]];	

		x := x + SzBlkMv;		
		Idx_C_1D:= ((((x) & 3) + ((y - 1) & 3) * 4)) & 15;
		Idx := OFFSET  + mbLocxIdx + y * STRIDE + x; 
		if(y = 0)then
			if(x <= 3)then
				refIdxC := refIdxTab[Idx - STRIDE];
				mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];	
			else
				if(refIdxTab[Idx - STRIDE] != -2) then
					refIdxC := refIdxTab[Idx - STRIDE];
					mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];
				end
			end
		else
			if(x <= 3)then
				//if the macroblock have already been decoded
				if(locXYToBlkIdx[Idx_C_1D] < IdxBlk)then
					//We update the values
					refIdxC := refIdxTab[Idx - STRIDE];
					mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];
				end
			end
		end
	end

	getNewPic: action MbType:[macroBlkType] ==> NewMbPic:[false],
		NewMbPicSlice:[false]
	guard
		macroBlkType = NEW_FRAME
	do

		refIdxTab := [-2 : for int i in 1 .. STRIDE * 5];
		mvTab := [[0, 0] : for int i in 1 .. (STRIDE * 5)];
	end

	getNewSlice: action MbType:[macroBlkType] ==> NewMbPicSlice:[false]
	guard
		macroBlkType = NEW_SLICE
	do

		refIdxTab := [-2 : for int i in 1 .. (STRIDE * 5)];
		mvTab := [[0, 0] : for int i in 1 .. (STRIDE * 5)];
	end
	
	int mbLocxIdx;

	GetMbType: action MbLocation:[MbLocxInPic,
		MbLocyInPic], MbType:[macroBlkType]
		==>
	do
		mbType := macroBlkType;
		mbLocxIdx := MbLocxInPic * 4;
		
		foreach int i in 0 ..7 do 
			refIdxTab[OFFSET - STRIDE + mbLocxIdx + i] := refIdxTab[OFFSET + 3 * STRIDE + mbLocxIdx + i];
			mvTab[OFFSET - STRIDE + mbLocxIdx + i][0] := mvTab[OFFSET + 3 * STRIDE + mbLocxIdx + i][0];
			mvTab[OFFSET - STRIDE + mbLocxIdx + i][1] := mvTab[OFFSET + 3 * STRIDE + mbLocxIdx + i][1];
		end
		if(not Mb_IsIntra(mbType)) then
			mbXInPix  := MbLocxInPic*16;
			mbYInPix  := MbLocyInPic*16;
			mbPartIdx     := 0;
			mbPartIdxMax  := numMbPart(mbType);
			sizeMbMv      := sizeMbPart(mbType);
		end
	end

	checkMbType.isIorSI: action	==>
	guard
		Mb_IsIntra(mbType)
	do
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0, 0];
		end
	end

	checkMbType.isPSkipL0: action ==> RefIdxOut :[0], NewMbPic:[true],
		NewMbPicSlice:[true], MvOut :[mvpL0] repeat 2, Location:[mbXInPix,mbYInPix]
	guard
		mbType = BLOCK_TYPE_P_SKIP,
		IsPredL0
	do
		int(size=5)  refIdxA;
		int(size=5)  refIdxB;
		int(size=5)  refIdxC;
		int(size=16) mvpL0[2];
		int index := mbLocxIdx + OFFSET;

		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= 0;
		end
		//if mbAddrA or mbAddrB is not available
		if( (refIdxTab[index - 1] = -2) or (refIdxTab[index - STRIDE] = -2)
		      //if refIdxL0A is equal to 0 and both components of mvL0A are
		      //equal to 0
		   or refIdxTab[index - 1] = 0 and mvTab[index - 1][0] = 0
		      and mvTab[index - 1][1] = 0
			  //if refIdxL0B is equal to 0 and both components of mvL0B are
			  //equal to 0	
		   or refIdxTab[index - STRIDE] = 0 and mvTab[index - STRIDE][0] = 0
		      and mvTab[index - STRIDE][1] = 0
		) then
			mvpL0 := [0,0];
		else
			if(refIdxTab[index - STRIDE + 4] != -2)then
				mvC         := [mvTab[index - STRIDE + 4][0], mvTab[index - STRIDE + 4][1]];
				refIdxC     := refIdxTab[index - STRIDE + 4];
			else
				if(refIdxTab[index - STRIDE - 1] != -2)then
					mvC         := [mvTab[index - STRIDE - 1][0],mvTab[index - STRIDE - 1][1]];
					refIdxC     := refIdxTab[index - STRIDE - 1];
				else
					mvC     := [0,0];
					refIdxC := -2;
				end
			end
			refIdxA := refIdxTab[index - 1];
			mvA     := [mvTab[index - 1][0] , mvTab[index - 1][1]];
			refIdxB := refIdxTab[index - STRIDE];
			mvB     := [mvTab[index - STRIDE][0],mvTab[index - STRIDE][1]];
			computeMvPredL0(0,refIdxA,refIdxB,refIdxC);
			mvpL0   := [oMv[0],oMv[1]];
		end
		foreach int i in 0 .. 15 do
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [mvpL0[0], mvpL0[1]];
		end
	end

	checkMbType.isPSkipL1: action ==>
	guard
		mbType = BLOCK_TYPE_P_SKIP,
		not IsPredL0
	do
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0, 0];
		end
	end

	checkMbType.isOthers: action ==>
	guard
		mbType != BLOCK_TYPE_B_SKIP,
		mbType != BLOCK_TYPE_B_DIRECT_16x16
	do
		idxSubTab   :=
			if(mbIsBiPred(mbType)) then
				0
			else
				1
			end;
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0,0];
		end
	end

	ComputeMvLX.Launch16x16: action
			MbPredRefIdx :[RefIdxCurr],
			MbPredMvRes      :[mv_res] repeat 2
				==>
			Location  :[mbXInPix,mbYInPix],
			MvOut     :[mvpL0] repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic:[true],
			NewMbPicSlice:[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_16x16
		var
			List(type: int(size=16), size=2) mvpL0
		do
			foreach int i in 0 .. 15
			do
				refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (0,16);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0]:= oMv[0]+mv_res[0];
			mvpL0[1]:= oMv[1]+mv_res[1];

			foreach int i in 0 .. 15
			do
				mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
		end

	ComputeMvLX.Launch16x8: action
			MbPredRefIdx :[RefIdxCurr],
			MbPredMvRes  :[mv_res] repeat 2
				==>
			Location      :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut         :[mvpL0] repeat 2,
			RefIdxOut     :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_16x8
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix = mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index
		do
			foreach int i in 0 .. 7
			do
				index := i + 8 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (8*(mbPartIdx&1),16);
			if(mbPartIdx = 0)then
				if(RefIdxCurr = refIdxB)then
					mvpL0 := [mvB[0],mvB[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];	
				end
			else
				Blk_y_in_pix := Blk_y_in_pix + 8;
				if(RefIdxCurr = refIdxA)then
					mvpL0 := [mvA[0],mvA[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			end

			mvpL0[0] := mvpL0[0] + mv_res[0];
			mvpL0[1] := mvpL0[1] + mv_res[1];

			foreach int i in 0 .. 7
			do
				index := i + 8 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
		end

	ComputeMvLX.Launch8x16: action
			MbPredRefIdx :[RefIdxCurr],
			MbPredMvRes      :[mv_res] repeat 2
				==>
			Location :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut :[mvpL0] repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_8x16
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix = mbYInPix,
			int index
		do
			foreach int i in 0 .. 3
			do
				index := i + 4 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end
			foreach int i in 8 .. 11
			do
				index := i + 4 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (4*(mbPartIdx&1),8);
			if(mbPartIdx = 0)then
				if(RefIdxCurr = refIdxA)then
					mvpL0 := [mvA[0],mvA[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			else
				Blk_x_in_pix := Blk_x_in_pix + 8;
				if(RefIdxCurr = refIdxC)then
					mvpL0 := [mvC[0],mvC[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			end

			mvpL0[0] := mvpL0[0] + mv_res[0];
			mvpL0[1] := mvpL0[1] + mv_res[1];

			foreach int i in 0 .. 3
			do
				index := i + 4 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end
			foreach int i in 8 .. 11
			do
				index := i + 4 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
		end

	ComputeMvLX.Launch8x8: action
			sub_mb_type :[ValSubMbType]
				==>
		guard
			mbPartIdx < mbPartIdxMax,
			sizeMbMv = SZ_8x8
		do
			subMbPartIdx    := 0;
			subMbPartIdxMax := numSubMbPart(mbType,ValSubMbType);
			isPred4SubMb    :=    ((SubMbPartPredMode[idxSubTab][ValSubMbType & 15] & PRED_L0) != 0) and IsPredL0
			                   or ((SubMbPartPredMode[idxSubTab][ValSubMbType & 15] & PRED_L1) != 0) and not IsPredL0;
			sizeSubMbMv     := SizeSubMbPart(mbType,ValSubMbType);
			subMbType       := ValSubMbType;
		end

	ComputeMvLX.Skip: action
				==>
		guard
			mbPartIdx < mbPartIdxMax,
			not (    Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			      or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0),
			sizeMbMv != SZ_8x8
		do
			mbPartIdx := mbPartIdx + 1;
		end

	ComputeMvLX.Done: action ==>
		guard
			mbPartIdx = mbPartIdxMax
		end

	ComputeSubMvLX.Launch8x8: action
			SubMbPredRefIdx :[RefIdxCurr],
			SubMbPredMvRes  :[mv_res] repeat 2
				==>
			Location  :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut     :[mvpL0]repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_8x8,
			SubMbPartPredMode[idxSubTab][subMbType & 15] != DIRECT
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1);

			foreach int i in 0 .. 3
			do
				index := 4 * (mbPartIdx&3) + i;
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (4*(mbPartIdx&3),8);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			foreach int i in 0 .. 3
			do
				index := 4 * (mbPartIdx&3) + i;
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			subMbPartIdx := subMbPartIdx + 1;
		end

	ComputeSubMvLX.Launch8x4: action
			SubMbPredRefIdx :[RefIdxCurr],
			SubMbPredMvRes  :[mv_res] repeat 2
				==>
			Location  :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut     :[mvpL0] repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_8x4
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + 2 * (subMbPartIdx&1)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1) + 4 * (subMbPartIdx&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			refIdxTab[mbLocxIdx + locXYToTabIdx[index + 1]]:= RefIdxCurr;

			getNeighbourBlockParameters (4*(mbPartIdx&3) + 2*(subMbPartIdx&1),8);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			mvTab[mbLocxIdx + locXYToTabIdx[index + 1]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
		end

	ComputeSubMvLX.Launch4x8: action
			SubMbPredRefIdx :[RefIdxCurr],
			SubMbPredMvRes  :[mv_res] repeat 2
				==>
			Location  :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut     :[mvpL0]repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_4x8
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + (subMbPartIdx&1)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1) + 4 * (subMbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			refIdxTab[mbLocxIdx + locXYToTabIdx[index + 2]]:= RefIdxCurr;
	
			getNeighbourBlockParameters (4*(mbPartIdx&3) + 1*(subMbPartIdx&1),4);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:=  [mvpL0[0],mvpL0[1]];
			mvTab[mbLocxIdx + locXYToTabIdx[index + 2]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
		end

	ComputeSubMvLX.Launch4x4: action
			SubMbPredRefIdx :[RefIdxCurr],
			SubMbPredMvRes  :[mv_res] repeat 2
				==>
			Location  :[Blk_x_in_pix,Blk_y_in_pix],
			MvOut     :[mvpL0]repeat 2,
			RefIdxOut :[RefIdxCurr],
			NewMbPic      :[true],
			NewMbPicSlice :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_4x4
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + (subMbPartIdx&3)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1) + 4 * (subMbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1) + 4 * ((subMbPartIdx>>1)&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			

			getNeighbourBlockParameters (4*(mbPartIdx&3) + 1*(subMbPartIdx&3),4);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0]:= oMv[0]+mv_res[0];
			mvpL0[1]:= oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
		end

	ComputeSubMvLX.Skip: action ==>
	guard
		subMbPartIdx < subMbPartIdxMax,
		not isPred4SubMb,
		SubMbPartPredMode[idxSubTab][subMbType & 15] != DIRECT
	do
		subMbPartIdx := subMbPartIdx + 1;
	end

	ComputeSubMvLX.Done: action ==>
	guard
		subMbPartIdx = subMbPartIdxMax
	do
		mbPartIdx := mbPartIdx + 1;
	end
	
	updateTab: action ==>
	do
	end

	schedule fsm GetMbType:
		UpdateTab (updateTab   )--> GetMbType;
		GetMbType (getNewPic   )--> GetMbType;
		GetMbType (getNewSlice )--> GetMbType;
		GetMbType (GetMbType   )--> CheckMbType;

		CheckMbType (checkMbType.isIorSI   )--> UpdateTab;
		CheckMbType (checkMbType.isPSkipL0 )--> UpdateTab;
		CheckMbType (checkMbType.isPSkipL1 )--> UpdateTab;
		CheckMbType (checkMbType.isOthers  )--> ComputeMvpL0;

		ComputeMvpL0 (ComputeMvLX.Skip        )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch16x16 )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch16x8  )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch8x16  )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch8x8   )--> ComputeSubMvpL0;
		ComputeMvpL0 (ComputeMvLX.Done        )--> UpdateTab;

		ComputeSubMvpL0 (ComputeSubMvLX.Launch8x8 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch8x4 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch4x8 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch4x4 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Skip      )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Done      )--> ComputeMvpL0;
	end

	priority
		checkMbType.isIorSI   > checkMbType.isOthers;
		checkMbType.isPSkipL0 > checkMbType.isOthers;
		checkMbType.isPSkipL1 > checkMbType.isOthers;
		getNewPic             > getNewSlice > GetMbType;
	end
end