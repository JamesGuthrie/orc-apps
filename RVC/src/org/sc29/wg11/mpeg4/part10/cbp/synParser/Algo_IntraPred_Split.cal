/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
//Modified by Endri Bezati IETR/INSA Rennes

//Added FSM to the actor
package org.sc29.wg11.mpeg4.part10.cbp.synParser;

import org.mpeg4.part10.Imp_PictureInfo.*;
import org.mpeg4.part10.cbp.MacroBlockInfo.*;

actor Algo_IntraPred_Split()
	uint(size=6)  MB_TYPE,
	uint(size=4)  INTRA_PRED_MODE,
	uint(size=7)  MB_LOCATION,
	bool          CONSTRAINED_IFLAG
		==>
	uint(size=4)  PRED_MODE
		:


	bool  mb_intra_flag;
	uint(size=5)  count            := 0;
	uint          MbLocationxInPic := 0;
	
	uint(size=6) mbType;


	int(size=5) intra4x4predmode[MAX_PICWIDTH_BLK + 1][16]:=
		[ [ -1 : for int j in 0 .. 15 ] : for int i in 0 .. MAX_PICWIDTH_BLK ];
	uint(size=4) InverseScan4x4Tab[16]  = [ 0,  1,  4,  5,  2,  3,  6,  7,  8,  9, 12, 13, 10, 11, 14, 15];
	uint(size=4) NEIGHBOUR_4X4_TOP[16]  = [12, 13,  0,  1, 14, 15,  2,  3,  4,  5,  8,  9,  6,  7, 10, 11];
	uint(size=4) NEIGHBOUR_4X4_LEFT[16] = [ 3,  0,  7,  4,  1,  2,  5,  6, 11,  8, 15, 12,  9, 10, 13, 14];

	bool is_constrained_i_flag[MAX_PICWIDTH_BLK + 1] := [ false : for int i in 0 .. MAX_PICWIDTH_BLK ];

	Get_MbType: action MB_TYPE:[MbType] ==>
	guard 
		MbType < NEW_SLICE
	do
		mbType := MbType;
		mb_intra_flag := Mb_IsIntra(mbType);
	end
	
	bool constrainedIFlag;
	
	Get_IFlag: action CONSTRAINED_IFLAG :[ Constrained_I_Flag ] ==>
	do
		constrainedIFlag:= Constrained_I_Flag;
	end

	Get_NewFrame: action MB_TYPE:[MbType] ==>
	guard 
		MbType >= NEW_SLICE
	do
		is_constrained_i_flag := [ false : for int i in 0 .. MAX_PICWIDTH_BLK ];
		intra4x4predmode := [ [ -1 : for int j in 0 .. 15 ] : for int i in 0 .. MAX_PICWIDTH_BLK ];
	end

	get_inter: action
			MB_LOCATION       :[MbLocxInPic , MbLocyInPic]
				==>
		guard
			not mb_intra_flag
		do
			MbLocationxInPic   := MbLocxInPic;
			intra4x4predmode[MbLocationxInPic + 1]      := [ 2 : for int j in 0 .. 15 ];
			is_constrained_i_flag[MbLocationxInPic + 1] := not (constrainedIFlag);
		end


	get_intratype: action
			MB_LOCATION     :[MbLocxInPic , MbLocyInPic]
				==>
		guard
			mb_intra_flag
		do
			MbLocationxInPic  := MbLocxInPic;
		end


	get_intraNxN: action
			INTRA_PRED_MODE :[ Intra_Pred_Mode ]
				==>
			PRED_MODE :[ pred_mode ]
		guard
			(Is_Intra_NxN(mbType)) and count < 16
		var
			int(size=5) top , int(size=5) left , int(size=5) predicted ,
			int(size=5) pred_mode
		do
			/*****************************************************************
			 * select Top neighbour
			 ****************************************************************/
			if NEIGHBOUR_4X4_TOP[count] > 11 and
			 ( not is_constrained_i_flag[MbLocationxInPic + 1]) then  
				top := -1;
			else
				top := intra4x4predmode[MbLocationxInPic + 1][NEIGHBOUR_4X4_TOP[count]];
			end			
			/*****************************************************************
			 * select Left neighbour
			 ****************************************************************/
			left := -1;
			if (NEIGHBOUR_4X4_LEFT[count] & 3) = 3 then   
		 		if is_constrained_i_flag[MbLocationxInPic] then
					left := intra4x4predmode[MbLocationxInPic][NEIGHBOUR_4X4_LEFT[count]];
				end
			else
				left := intra4x4predmode[MbLocationxInPic + 1][NEIGHBOUR_4X4_LEFT[count]];
			end
			/*****************************************************************
			 *
			 ****************************************************************/
			if left < top then
				predicted := left;
			else
				predicted := top;
			end
			if predicted < 0 then
				predicted := 2;
			end
			//INTRA_4x4_DC
			if Intra_Pred_Mode < predicted then
				pred_mode := Intra_Pred_Mode;
			else
				pred_mode := Intra_Pred_Mode + 1;
			end
			if Intra_Pred_Mode = 15 then
				pred_mode := predicted;
			end
			if mbType = BLOCK_TYPE_I_8x8 then
				foreach int i in 0 .. 3
				do
					intra4x4predmode[MbLocationxInPic + 1][InverseScan4x4Tab[count + i]] := pred_mode;
				end
				count := count + 4;
			else
				intra4x4predmode[MbLocationxInPic + 1][InverseScan4x4Tab[count]] := pred_mode;
				count := count + 1;
			end
		end

	get_intraNxN_done: action 
				==>
		guard
			(Is_Intra_NxN(mbType)) and count = 16
		do
			count := 0;
			is_constrained_i_flag[MbLocationxInPic + 1] := true;
		end
		
	get_intra16x16: action
			INTRA_PRED_MODE    :[ Mode_16x16 ]
				==>
			PRED_MODE    :[ Mode_16x16 ]
		guard
			Is_Intra_16x16(mbType)
		do
			intra4x4predmode[MbLocationxInPic + 1]      := [ 2 : for int j in 0 .. 15 ];
			is_constrained_i_flag[MbLocationxInPic + 1] := true;
		end


	get_i_pcm: action
				==>
		guard
			mbType = BLOCK_TYPE_I_PCM
		do
			intra4x4predmode[MbLocationxInPic + 1]      := [ 2 : for int j in 0 .. 15 ];
			is_constrained_i_flag[MbLocationxInPic + 1] := true;
		end


	schedule fsm GetType :
		GetType ( Get_NewFrame        ) --> GetIFlag;
		GetIFlag( Get_IFlag           ) --> GetType;
		GetType ( Get_MbType          ) --> MbType;
		//Decode Mb Inter
		MbType ( get_inter            ) --> GetType;
		MbType ( get_intratype        ) --> IntraType;
		//Decode Mb Intra 4x4 or Intra8x8
		IntraType ( get_intraNxN      ) --> IntraType;
		IntraType ( get_intraNxN_done ) --> GetType;
		//Decode Mb Intra 16x16
		IntraType ( get_intra16x16    ) --> GetType;
		//Decode Mb I PCM
		IntraType ( get_i_pcm         ) --> GetType;
	end

end