/********************************************************************************

This software module was originally developed by Damien de Saint Jorre EFPL, in the course of development of the ISO/IEC 23002-5 for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the ISO/IEC 23002-5  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and (2) to develop the MPEG-C part 4:

EPFL grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that EPFL owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  EPFL of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/EPFL retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/


 /**
 * This actor save and reorder (before sending) the Movement Vector and the
 * frame used for inter prediction for each partitions of a macroblock.
 *
 * @input MbType, SubMbType : Informs about inter-prediction configuration for
 *		non intra prediction macroblocks
 *
 * @input Mv : Movement vector used for inter-prediction
 *
 * @input FrameToRead : Frame used for inter-prediction
 *
 * @author Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
 * 
 */

package org.sc29.wg11.mpeg4.part10.cbp.deblockingFilter;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

actor Algo_MvComponentReorder()
	uint(size=32) READ_FRAME,
	uint(size=6)  MB_TYPE,
	int (size=16) MV,
	uint(size=4)  SUB_MB_TYPE
		==>
	int (size=16) MV_OUT_DBF,
	uint(size=6)  PARTSZ,
	int (size=32) READ_FRAME_DBF
		:

	int (size=32) frameTab[16];
	uint(size=6)  mbType;
	uint(size=3)  mbPartIdx;
	uint(size=3)  mbPartIdxMax;
	int (size=16) mvTab[16][2];
	uint(size=3)  sizeMbMv;
	uint(size=3)  sizeSubMbMv;
	uint(size=3)  subMbPartIdx;
	uint(size=3)  subMbPartIdxMax;

	skipMbType: action MB_TYPE:[macroBlkType] ==>
	
	guard
		Mb_IsIntra(macroBlkType) or macroBlkType >= NEW_SLICE
	end

	getMbType: action MB_TYPE:[macroBlkType] ==>
	
	guard
		not Mb_IsIntra(macroBlkType)
	do
		mbType    := macroBlkType;
		mbPartIdx := 0;
		mbPartIdxMax := numMbPart(macroBlkType);
		sizeMbMv     := sizeMbPart(macroBlkType);
		foreach int j in 0 .. 15
		do
			frameTab[j] := -1;
		end
	end

	//informations about this macoblock haven't been got.
	checkMbPartIdx: action ==>
	guard
		mbPartIdx < mbPartIdxMax and sizeMbMv != SZ_8x8
	end

	//Save mv and frame information for P_L0_16x16 or P_SKIP macroblock.
	getMv.launch16x16: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[16, 16]
	guard
		sizeMbMv = SZ_16x16
	do
		foreach int i in 0 .. 15
		do
			mvTab[i]    := [mvX, mvY];
			frameTab[i] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_16x8 macroblock.
	getMv.launch16x8: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[16, 8]
	guard
		sizeMbMv = SZ_16x8
	do
		foreach int blkIdx in 8*mbPartIdx .. 8*mbPartIdx + 7
		do
			mvTab[blkIdx]    := [mvX, mvY];
			frameTab[blkIdx] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_8x16 macroblock.
	getMv.launch8x16: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[8, 16]
	guard
		sizeMbMv = SZ_8x16
	var
		uint(size=4) blkIdx
	do

		foreach int numLine in 0 .. 3
		do
			blkIdx := 2*mbPartIdx + 4*numLine;
			mvTab[blkIdx]    := [mvX, mvY];
			mvTab[blkIdx +1] := [mvX, mvY];
			frameTab[blkIdx]    := frame;
			frameTab[blkIdx +1] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	//Save mv and frame information for P_8x8 or P_8x8ref0 macroblock.
	getSubMbType: action SUB_MB_TYPE:[subMbType] ==>
	guard
		mbPartIdx < mbPartIdxMax and sizeMbMv = SZ_8x8
	do
		subMbPartIdx    := 0;
		subMbPartIdxMax := numSubMbPart(mbType, subMbType);
		sizeSubMbMv     := SizeSubMbPart(mbType, subMbType);
	end

	//informations about this sub-macoblock haven't been got.
	checkSubMbPartIdx: action ==>
	guard
		subMbPartIdx < subMbPartIdxMax
	end

	//informations from this sub-macroblock have been got. Asking next one's
	//information.
	getSubMvInfo.done: action ==>
	guard
		subMbPartIdx = subMbPartIdxMax
	do
		mbPartIdx := mbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_8x8 sub-macroblock.
	getSubMv.launch8x8: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[8, 8]
	guard
		sizeSubMbMv = SZ_8x8
	var
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1)
	do
		foreach int i in 0 .. 1
		do
			mvTab[idx + i]   := [mvX, mvY];
			mvTab[idx + i+4] := [mvX, mvY];
			frameTab[idx + i]   := frame;
			frameTab[idx + i+4] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_8x4 sub-macroblock.
	getSubMv.launch8x4: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ :[8, 4]
	guard
		sizeSubMbMv = SZ_8x4
	var
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1) + 4*subMbPartIdx
	do
		foreach uint i in 0 .. 1
		do
			mvTab[idx + i]    := [mvX, mvY];
			frameTab[idx + i] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_4x8 sub-macroblock.
	getSubMv.launch4x8: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[4, 8]
	guard
		sizeSubMbMv = SZ_4x8
	var
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1) + subMbPartIdx
	do
		foreach uint i in 0 .. 1
		do
			mvTab[idx + 4*i]    := [mvX, mvY];
			frameTab[idx + 4*i] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	//Save mv and frame information for P_L0_4x4 sub-macroblock.
	getSubMv.launch4x4: action MV:[mvX, mvY], READ_FRAME:[frame] ==>
		PARTSZ:[4, 4]
	guard
		sizeSubMbMv = SZ_4x4
	var
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1) + 
		            4*(subMbPartIdx >> 1) + (subMbPartIdx & 1)
	do
		mvTab[idx]    := [mvX, mvY];
		frameTab[idx] := frame;
		subMbPartIdx  := subMbPartIdx + 1;
	end

	//Send frameNum and mvComponents from each macroblock's partition.
	sendParameters: action ==> READ_FRAME_DBF:[frameNumOut] repeat 32,
			MV_OUT_DBF:[mvOut] repeat 64
	guard
		mbPartIdx = mbPartIdxMax
	var
		//We don't use  the last 16 values of frameNumOut (and the last 32 for
		//mvOut) because with Constrained Baseline Profile, we don't manage
		//Bi-Prediction. Nevertheless we have to send 32 (and 64) tokens
		//because the Dbf is compatible to Cbp Description and Progressive High
		//Profile description
		int(size=32) frameNumOut[32] :=[-1: for int s in 0 .. 31],
		int(size=16) mvOut[64] :=[0: for int s in 0 .. 63]
	do
		foreach int i in 0 .. 15
		do
			frameNumOut[i] := frameTab[i];
			mvOut[i]       := mvTab[i][0];
			mvOut[i+16]    := mvTab[i][1];
		end
	end

	schedule fsm GetMbType:
		GetMbType      (getMbType       )--> CheckMbPartIdx;
		GetMbType      (skipMbType      )--> GetMbType;
		CheckMbPartIdx (checkMbPartIdx  )--> GetMv;
		CheckMbPartIdx (getSubMbType    )--> CheckSubMbPartIdx;
		CheckMbPartIdx (sendParameters  )--> GetMbType;

		GetMv (getMv )--> CheckMbPartIdx;

		CheckSubMbPartIdx (checkSubMbPartIdx )--> GetSubMv;
		CheckSubMbPartIdx (getSubMvInfo      )--> CheckMbPartIdx;

		GetSubMv (getSubMv )--> CheckSubMbPartIdx;
	end
end