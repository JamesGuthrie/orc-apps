/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.cbp.deblockingFilter;

import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;
import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import std.util.BitOps.*;
import std.util.Math.*;

/**
 * This actor give informations to the Deblocking Filter.
 * 
 * @input MbType
 * 		give the type of macroblock (Intra4x4, P_Skip, ...)
 * 
 * @input DisDbfIdc
 * 		Flag decoded in the parser which can disable the deblocking filter
 * 		process
 * 
 * @input NeighbourAvail
 * 		Show if the macroblock's neighbours exists
 * 		(see the SVC's documentation; chapter 6.4.8)
 * 
 * @author : Damien de Saint Jorre
 */
actor Mgnt_DBF_AdaptiveFilter()
	uint(size=16) CBP_BLK,
	uint (size=6) SLICE_DBF_PARAM,
	uint(size=7)  MB_LOCATION,
	uint(size=6)  MB_TYPE,
	int (size=16) MV,
	int (size=8)  QP_Y,
	int (size=8)  QP_Cb,
	int (size=8)  QP_Cr,
	int (size=32) READ_FRAME
		==>
	uint(size=3)  BS,
	uint(size=16) MB_DBF_PARAM_Y,
	uint(size=16) MB_DBF_PARAM_U,
	uint(size=16) MB_DBF_PARAM_V
		 :

	uint(size=8) ALPHA_PRIME_TAB[64] =
		[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
		    0,   0,   0,   0,   0,   0,   4,   4,   5,   6,
		    7,   8,   9,  10,  12,  13,  15,  17,  20,  22,
		   25,  28,  32,  36,  40,  45,  50,  56,  63,  71,
		   80,  90, 101, 113, 127, 144, 162, 182, 203, 226,
		  255, 255,   0,   0,   0,   0,   0,   0,   0,   0,
		    0,   0,   0,   0];

	uint(size=8) BETA_PRIME_TAB[64] =
		[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,   2,   2,   2,   3,
			3,   3,   3,   4,   4,   4,   6,   6,   7,   7,
			8,   8,   9,   9,  10,  10,  11,  11,  12,  12,
		   13,  13,  14,  14,  15,  15,  16,  16,  17,  17,
		   18,  18,   0,   0,   0,   0,   0,   0,   0,   0,
		    0,   0,   0,   0 ];


	int (size=6)  filterOffsetA;
	int (size=6)  filterOffsetB;
	uint(size=7)  mbLocX;
	uint(size=7)  mbLocY;
	bool filterLeft;
	bool filterInternal;
	bool filterTop;
	uint(size=6)  mbType[MAX_PICWIDTH_BLK][2];
	uint(size=16) codBlkPat[MAX_PICWIDTH_BLK][2];
	int (size=32) readFrameLists[2][MAX_PICWIDTH_BLK*4][2*4];
	int (size=16) mv[2][MAX_PICWIDTH_BLK*4][2*4][2];
	int (size=8)  qpYTable[MAX_PICWIDTH_BLK][2];
	int (size=8)  qpCrTable[MAX_PICWIDTH_BLK][2];
	int (size=8)  qpCbTable[MAX_PICWIDTH_BLK][2];

	function computeBoundaryFiltStrength (uint(size=16) idxP0X,
		uint(size=16) idxP0Y, uint(size=16) idxQ0X,
		uint(size=16) idxQ0Y, bool isMacroBlockEdge)
			-->
		uint(size=3)
//	var
//		bool mixedModeEdge = false
	:
		if(   Mb_IsIntra(mbType[idxP0X/4][(idxP0Y/4) & 1])
		   or Mb_IsIntra(mbType[idxQ0X/4][(idxQ0Y/4) & 1])) then
			if(isMacroBlockEdge)then
				4
			else
				3
			end
		else
			if(nonZeroCoeff(idxP0X,idxP0Y) or
			   nonZeroCoeff(idxQ0X,idxQ0Y)) then
				2
			else
				if(    hasDifferentRefPicOrNumMv(idxP0X, idxP0Y, idxQ0X, idxQ0Y)
				    or mvGapGreaterThan4(idxP0X, idxP0Y, idxQ0X, idxQ0Y)) then
				    1
				else
					0
				end
			end
		end
	end

	function nonZeroCoeff (uint(size=32) x, uint(size=32) y)
			-->
		bool
	:
		getFlag(codBlkPat[x/4][(y/4) & 1],(y&3)*4 + (x&3))
	end

	function numberOfRefPic(uint(size=16) x, uint(size=16) y) --> uint(size=2) :
		uint(size=2) refPicL0  = if(readFrameLists[0][x][y & 7] != -1)then 1 else 0 end;
		uint(size=2) refPicL1  = if(readFrameLists[1][x][y & 7] != -1)then 1 else 0 end;

		refPicL0 + refPicL1
	end

	function hasSameRefPic(uint(size=16) idxP0X, uint(size=16) idxP0Y,
		uint(size=16) idxQ0X, uint(size=16) idxQ0Y) --> bool:

		if(readFrameLists[0][idxP0X][idxP0Y & 7] = readFrameLists[0][idxQ0X][idxQ0Y & 7]
				and
			readFrameLists[1][idxP0X][idxP0Y & 7] = readFrameLists[1][idxQ0X][idxQ0Y & 7]
				or
			readFrameLists[0][idxP0X][idxP0Y & 7] = readFrameLists[1][idxQ0X][idxQ0Y & 7]
				and
			readFrameLists[1][idxP0X][idxP0Y & 7] = readFrameLists[0][idxQ0X][idxQ0Y & 7]
		) then
			true
		else
			false
		end
	end

	function hasDifferentRefPicOrNumMv(uint(size=16) idxP0X, uint(size=16) idxP0Y,
		uint(size=16) idxQ0X, uint(size=16) idxQ0Y)--> bool:
		uint(size=2) numRefPicP0 = numberOfRefPic(idxP0X, idxP0Y);
		uint(size=2) numRefPicQ0 = numberOfRefPic(idxQ0X, idxQ0Y);

		if(numRefPicP0 != numRefPicQ0)then
			true
		else
			if(hasSameRefPic(idxP0X, idxP0Y, idxQ0X, idxQ0Y)) then
				false
			else
				true
			end
		end
	end

	function mvGapGreaterThan4(uint(size=16) idxP0X, uint(size=16) idxP0Y,
		uint(size=16) idxQ0X, uint(size=16) idxQ0Y)
			-->
		bool
	:
		uint(size=2) numRefPicP0 = numberOfRefPic(idxP0X, idxP0Y);
		uint(size=2) numRefPicQ0 = numberOfRefPic(idxQ0X, idxQ0Y);
		uint(size=2) listIdxP0 =
			if(readFrameLists[0][idxP0X][idxP0Y & 7] != -1) then 0 else 1 end;
		uint(size=2) listIdxQ0 =
			if(readFrameLists[0][idxQ0X][idxQ0Y & 7] != -1) then 0 else 1 end;

		if(numRefPicP0 = 1 and numRefPicQ0 = 1)then
			if(    abs(mv[listIdxP0][idxP0X][idxP0Y & 7][0] - mv[listIdxQ0][idxQ0X][idxQ0Y & 7][0]) >= 4
			    or abs(mv[listIdxP0][idxP0X][idxP0Y & 7][1] - mv[listIdxQ0][idxQ0X][idxQ0Y & 7][1]) >= 4)then
				true
			else
				false
			end
		else
			if(numRefPicP0 = 2 and numRefPicQ0 = 2)then
				if(hasSameRefPic(idxP0X, idxP0Y, idxQ0X, idxQ0Y) and 
					readFrameLists[0][idxP0X][idxP0Y & 7] !=
					readFrameLists[1][idxP0X][idxP0Y & 7]
				)then
					if(readFrameLists[0][idxP0X][idxP0Y & 7] =
					   readFrameLists[0][idxQ0X][idxQ0Y & 7]
					)then
						if(    abs(mv[0][idxP0X][idxP0Y & 7][0] - mv[0][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			or abs(mv[0][idxP0X][idxP0Y & 7][1] - mv[0][idxQ0X][idxQ0Y & 7][1]) >= 4
			    			or abs(mv[1][idxP0X][idxP0Y & 7][0] - mv[1][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			or abs(mv[1][idxP0X][idxP0Y & 7][1] - mv[1][idxQ0X][idxQ0Y & 7][1]) >= 4)then
							true
						else
							false
						end
					else
						if(    abs(mv[0][idxP0X][idxP0Y & 7][0] - mv[1][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			or abs(mv[0][idxP0X][idxP0Y & 7][1] - mv[1][idxQ0X][idxQ0Y & 7][1]) >= 4
			    			or abs(mv[1][idxP0X][idxP0Y & 7][0] - mv[0][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			or abs(mv[1][idxP0X][idxP0Y & 7][1] - mv[0][idxQ0X][idxQ0Y & 7][1]) >= 4)then
							true
						else
							false
						end
					end
				else
					if(    readFrameLists[0][idxP0X][idxP0Y & 7] =
					         readFrameLists[1][idxP0X][idxP0Y & 7]
					   and readFrameLists[0][idxQ0X][idxQ0Y & 7] =
					         readFrameLists[1][idxQ0X][idxQ0Y & 7]
					) then
						if( (    abs(mv[0][idxP0X][idxP0Y & 7][0] - mv[0][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			  or abs(mv[0][idxP0X][idxP0Y & 7][1] - mv[0][idxQ0X][idxQ0Y & 7][1]) >= 4
			    			  or abs(mv[1][idxP0X][idxP0Y & 7][0] - mv[1][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			  or abs(mv[1][idxP0X][idxP0Y & 7][1] - mv[1][idxQ0X][idxQ0Y & 7][1]) >= 4)
			    		   and(  abs(mv[0][idxP0X][idxP0Y & 7][0] - mv[1][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			  or abs(mv[0][idxP0X][idxP0Y & 7][1] - mv[1][idxQ0X][idxQ0Y & 7][1]) >= 4
			    			  or abs(mv[1][idxP0X][idxP0Y & 7][0] - mv[0][idxQ0X][idxQ0Y & 7][0]) >= 4
			    			  or abs(mv[1][idxP0X][idxP0Y & 7][1] - mv[0][idxQ0X][idxQ0Y & 7][1]) >= 4))then
							true
						else
							false
						end
					else
						false
					end
				end
			else
				false
			end
		end
	end


	bool isMbaAvail;
	bool isMbbAvail[MAX_PICWIDTH_BLK];
	bool newSlice;

	CheckSlices: action MB_TYPE :[valMbType] ==>
	guard
		valMbType >= NEW_SLICE
	do
		newSlice := true;
		isMbbAvail := [false : for int i in 1 .. MAX_PICWIDTH_BLK];
	end

	int disDbfIdc;
	int filtOffAVal;
	int filtOffBVal;
	uint(size = 6) valQpY;
	uint(size = 6) valQpCb;
	uint(size = 6) valQpCr;
	
	GetSliceDbfParam: action  SLICE_DBF_PARAM :[qpY, qpCb, qpCr, DisDbfIdc, FiltOffAVal, FiltOffBVal] ==>
	do
		disDbfIdc:=DisDbfIdc;
		filtOffAVal:=FiltOffAVal;
		filtOffBVal:=FiltOffBVal;
		valQpY:=qpY;
		valQpCb:=qpCb;
		valQpCr:=qpCr;
	end
	                 

	/**
	 * Get informations needed about the current macroblock.
	 * 
	 */
	getMbType: action MB_TYPE:[mbTypeVal], 
	                  MB_LOCATION :[mbX, mbY]
	                  ==>
	                  BS :[
	                  	if filterLeft then 1 else 0 end, 
	                  	if filterInternal then 1 else 0 end, 
	                  	if filterTop then 1 else 0 end
	                  ]
	do
		isMbaAvail := if (mbX = 0) or newSlice then false else true end; 
		filterInternal := (disDbfIdc != 1);
		filterLeft     :=
			if((mbX = 0) or (disDbfIdc = 1) or 
			  ((disDbfIdc = 2) and not isMbaAvail))then
				false
			else
				true
			end;
		filterTop :=
			if((mbY = 0) or (disDbfIdc = 1) or
			  ((disDbfIdc = 2) and not isMbbAvail[mbX]))then
				false
			else
				true
			end;
		mbLocX := mbX;
		mbLocY := mbY;
		mbType[mbX][mbY&1]    := mbTypeVal;
		filterOffsetA := filtOffAVal;
		filterOffsetB := filtOffBVal;
		isMbbAvail[mbX] := true;
		newSlice:=false;
	end

	/**
	 * Store the current value of Qp
	 */
	getQpCbp: action QP_Y :[qpY], QP_Cb :[qpCb], QP_Cr :[qpCr],
	                  CBP_BLK :[codedBlkPattern]
		==> 
	do
		qpYTable [mbLocX][mbLocY&1] := qpY;
		qpCrTable[mbLocX][mbLocY&1] := qpCr;
		qpCbTable[mbLocX][mbLocY&1] := qpCb;
		valQpY:=qpY;
		valQpCb:=qpCb;
		valQpCr:=qpCr;
		codBlkPat[mbLocX][mbLocY&1] := codedBlkPattern;
	end

	skipQpCbp.isSkip: action ==>
	guard
		   mbType[mbLocX][mbLocY&1] = BLOCK_TYPE_P_SKIP
		or mbType[mbLocX][mbLocY&1] = BLOCK_TYPE_B_SKIP
	do
		qpYTable [mbLocX][mbLocY&1] := valQpY;
		qpCrTable[mbLocX][mbLocY&1] := valQpCr;
		qpCbTable[mbLocX][mbLocY&1] := valQpCb;
		codBlkPat[mbLocX][mbLocY&1] := 0;
	end

	skipQpCbp.I_PCM: action ==>
	guard
		mbType[mbLocX][mbLocY&1] = BLOCK_TYPE_I_PCM
	do
		qpYTable [mbLocX][mbLocY&1] := 0;
		qpCrTable[mbLocX][mbLocY&1] := 0;
		qpCbTable[mbLocX][mbLocY&1] := 0;
		codBlkPat[mbLocX][mbLocY&1] := 0;
	end

	/**
	 * Get the prediction's values
	 */
	getRefIdx.launch: action READ_FRAME :[refIdxVal] repeat 32,
		MV :[mvVal] repeat 64 ==>
	guard
		   mbIsPred(mbType[mbLocX][mbLocY&1])
		or mbIsBiPred(mbType[mbLocX][mbLocY&1])
	do
		foreach int numList in 0 .. 1
		do
			foreach int y in 0 .. 3
			do
				foreach int x in 0 .. 3
				do
					readFrameLists[numList][mbLocX*4+x][(mbLocY&1)*4+y] :=
						refIdxVal[numList*16 + y*4+x];
					mv[numList][mbLocX*4+x][(mbLocY&1)*4+y][0] :=
						mvVal[numList*32 + y*4+x];
					mv[numList][mbLocX*4+x][(mbLocY&1)*4+y][1] :=
						mvVal[numList*32 + y*4+x + 16];
				end
			end
		end
	end

	getRefIdx.skip: action ==>
	guard
		not mbIsPred(mbType[mbLocX][mbLocY&1]),
		not mbIsBiPred(mbType[mbLocX][mbLocY&1])
	end

	sendDeblockFiltInfo: action ==>
		MB_DBF_PARAM_Y :[ 
			alpha[Y_COMPONENT][0],alpha[Y_COMPONENT][1], alpha[Y_COMPONENT][2], 
			beta[Y_COMPONENT][0], beta[Y_COMPONENT][1], beta[Y_COMPONENT][2], 
			indexA[Y_COMPONENT][0], indexA[Y_COMPONENT][1], indexA[Y_COMPONENT][2]],
		BS:[bsTable] repeat 32,
		MB_DBF_PARAM_V  :[
			alpha[CR_COMPONENT][0],alpha[CR_COMPONENT][1], alpha[CR_COMPONENT][2],
		    beta[CR_COMPONENT][0], beta[CR_COMPONENT][1], beta[CR_COMPONENT][2],
		    indexA[CR_COMPONENT][0], indexA[CR_COMPONENT][1], indexA[CR_COMPONENT][2]],
		MB_DBF_PARAM_U  :[
			alpha[CB_COMPONENT][0],alpha[CB_COMPONENT][1], alpha[CB_COMPONENT][2], 
			beta[CB_COMPONENT][0], beta[CB_COMPONENT][1], beta[CB_COMPONENT][2], 
			indexA[CB_COMPONENT][0], indexA[CB_COMPONENT][1], indexA[CB_COMPONENT][2]]
	var
		uint(size=4)  BitDepth = 8,

		uint(size=16) alpha[3][3] := [[0: for int i in 0 .. 2]:for int j in 0 .. 2],
		uint(size=8)  alphaPrime,
		uint(size=16) beta[3][3]  := [[0: for int i in 0 .. 2]:for int j in 0 .. 2],
		uint(size=8)  betaPrime,
		uint(size=3)  bsTable[32],
		bool          filterFlag[3] = [filterLeft, filterInternal, filterTop],
		int (size=7)  indexA[3][3] := [[0: for int i in 0 .. 2]:for int j in 0 .. 2],
		int (size=7)  indexB,
		uint(size=16) qpAv[3][3],
		uint(size=2) Y_COMPONENT = 0,
		uint(size=2) CR_COMPONENT = 1,
		uint(size=2) CB_COMPONENT = 2
	do
		//We can't create a procedure for this algo because parameters are not
		//reference.
		if(filterLeft)then
			qpAv[Y_COMPONENT][0] := (qpYTable[mbLocX-1][mbLocY&1] + qpYTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			qpAv[CR_COMPONENT][0] := (qpCrTable[mbLocX-1][mbLocY&1] + qpCrTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			qpAv[CB_COMPONENT][0] := (qpCbTable[mbLocX-1][mbLocY&1] + qpCbTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			foreach int i in 0 .. 3
			do
				bsTable[4*i] := computeBoundaryFiltStrength (
					4*mbLocX - 1, 4*mbLocY + i, 4*mbLocX, 4*mbLocY + i, true);
			end
		end

		if(filterInternal)then
			qpAv[Y_COMPONENT] [1] := (2* qpYTable [mbLocX][mbLocY&1] + 1) >> 1;
			qpAv[CR_COMPONENT][1] := (2* qpCrTable[mbLocX][mbLocY&1] + 1) >> 1;
			qpAv[CB_COMPONENT][1] := (2* qpCbTable[mbLocX][mbLocY&1] + 1) >> 1;
			foreach int y in 0 .. 3
			do
				foreach int x in 1 .. 3
				do
					bsTable[4*y+x] := computeBoundaryFiltStrength (
						4*mbLocX +x-1, 4*mbLocY +y, 4*mbLocX +x, 4*mbLocY +y, false);
				end
			end
			foreach int y in 1 .. 3
			do
				foreach int x in 0 .. 3
				do
					bsTable[4*y+x + 16] := computeBoundaryFiltStrength (
						4*mbLocX +x, 4*mbLocY +y-1, 4*mbLocX +x, 4*mbLocY +y, false);
				end
			end
		end

		if(filterTop)then
			qpAv[Y_COMPONENT][2] := (qpYTable[mbLocX][(mbLocY-1)&1] + qpYTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			qpAv[CR_COMPONENT][2] := (qpCrTable[mbLocX][(mbLocY-1)&1] + qpCrTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			qpAv[CB_COMPONENT][2] := (qpCbTable[mbLocX][(mbLocY-1)&1] + qpCbTable[mbLocX][mbLocY&1]
			        + 1) >> 1;
			foreach int i in 0 .. 3
			do
				bsTable[i+16] := computeBoundaryFiltStrength (
					4*mbLocX + i, 4*mbLocY - 1, 4*mbLocX + i, 4*mbLocY, true);
			end
		end

		foreach int i in 0 .. 2
		do
			if(filterFlag[i])then
				foreach uint component in 0 .. 2
				do
					indexA[component][i]  := clip_i32(qpAv[component][i]+filterOffsetA,0,51);
					alphaPrime := ALPHA_PRIME_TAB[indexA[component][i]];
					alpha[component][i]   := alphaPrime *(1 <<(BitDepth - 8));
		
					indexB     := clip_i32(qpAv[component][i]+filterOffsetB,0,51);
					betaPrime  := BETA_PRIME_TAB[indexB];
					beta[component][i]    := betaPrime *(1<<(BitDepth - 8));
				end
			end
		end
	end

	schedule fsm GetMbType:
		GetMbType 			(CheckSlices   		 )--> GetSliceDbfParam;
		GetSliceDbfParam	(GetSliceDbfParam    )--> GetMbType;

		GetMbType           (getMbType           )--> GetQp;
		GetQp               (getQpCbp               )--> GetRefIdx;
		GetQp               (skipQpCbp               )--> GetRefIdx;
		GetRefIdx           (getRefIdx           )--> sendDeblockFiltInfo;
		sendDeblockFiltInfo (sendDeblockFiltInfo )--> GetMbType;
	end
	priority
		CheckSlices > getMbType;
		skipQpCbp > getQpCbp;
	end
end