/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10;

unit MacroBlockInfo :

	uint(size=6) BLOCK_TYPE_INTRA_MIN       = 0;
	uint(size=6) BLOCK_TYPE_I_4x4           = 0 + BLOCK_TYPE_INTRA_MIN;
	uint(size=6) BLOCK_TYPE_I_8x8           = 1 + BLOCK_TYPE_INTRA_MIN;
	uint(size=6) BLOCK_TYPE_INTRA_16x16_MIN = 2 + BLOCK_TYPE_INTRA_MIN;
	uint(size=6) BLOCK_TYPE_INTRA_16x16_MAX = 25 + BLOCK_TYPE_INTRA_MIN;
	uint(size=6) BLOCK_TYPE_I_PCM           = 26 + BLOCK_TYPE_INTRA_MIN;
	uint(size=6) BLOCK_TYPE_INTRA_MAX       = 26 + BLOCK_TYPE_INTRA_MIN;

	uint(size=6) BLOCK_TYPE_P_MIN           = BLOCK_TYPE_INTRA_MAX + 1;
	uint(size=6) BLOCK_TYPE_P_L0_16x16      = 0 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_L0_L0_16x8    = 1 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_L0_L0_8x16    = 2 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_8x8           = 3 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_8x8ref0       = 4 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_SKIP          = 5 + BLOCK_TYPE_P_MIN;
	uint(size=6) BLOCK_TYPE_P_MAX           = 5 + BLOCK_TYPE_P_MIN;

	uint(size=6) BLOCK_TYPE_B_MIN           = BLOCK_TYPE_P_MAX + 1;
	uint(size=6) BLOCK_TYPE_B_DIRECT_16x16  = 0 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_16x16      = 1 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_16x16      = 2 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_16x16      = 3 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_L0_16x8    = 4 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_L0_8x16    = 5 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_L1_16x8    = 6 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_L1_8x16    = 7 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_L1_16x8    = 8 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_L1_8x16    = 9 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_L0_16x8    = 10 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_L0_8x16    = 11 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_Bi_16x8    = 12 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L0_Bi_8x16    = 13 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_Bi_16x8    = 14 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_L1_Bi_8x16    = 15 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_L0_16x8    = 16 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_L0_8x16    = 17 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_L1_16x8    = 18 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_L1_8x16    = 19 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_Bi_16x8    = 20 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_Bi_Bi_8x16    = 21 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_8x8           = 22 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_SKIP          = 23 + BLOCK_TYPE_B_MIN;
	uint(size=6) BLOCK_TYPE_B_MAX           = 23 + BLOCK_TYPE_B_MIN;

	uint(size=6) NEW_SLICE                  = BLOCK_TYPE_B_MAX + 1;
	uint(size=6) NEW_FRAME_NON_IDR          = BLOCK_TYPE_B_MAX + 2;
	uint(size=6) NEW_FRAME_IDR              = BLOCK_TYPE_B_MAX + 3;


	uint(size=2) B_DIRECT_8x8  = 0;

	uint(size=3) NA = 0;
	uint(size=3) PRED_L0 = 1;
	uint(size=3) PRED_L1 = 2;
	uint(size=3) BIPRED  = 3;
	uint(size=3) DIRECT  = 4;


	uint(size=3) SZ_16x16 = 0;
	uint(size=3) SZ_16x8  = 1;
	uint(size=3) SZ_8x16  = 2;
	uint(size=3) SZ_8x8   = 3;
	uint(size=3) SZ_8x4   = 4;
	uint(size=3) SZ_4x8   = 5;
	uint(size=3) SZ_4x4   = 6;

	uint(size=3) MbPartPredMode_P[8][2] =
		[
			[PRED_L0,NA],[PRED_L0,PRED_L0],[PRED_L0,PRED_L0],[NA,NA],[NA,NA],[PRED_L0,NA],[NA,NA],[NA,NA]
		];
	uint(size=3) MbPartPredMode_B[32][2] =
		[
			[DIRECT,NA], [PRED_L0,NA], [PRED_L1,NA], [BIPRED,NA], [PRED_L0,PRED_L0], [PRED_L0,PRED_L0], [PRED_L1,PRED_L1], [PRED_L1,PRED_L1], [PRED_L0,PRED_L1], [PRED_L0,PRED_L1],
			[PRED_L1,PRED_L0], [PRED_L1,PRED_L0], [PRED_L0,BIPRED], [PRED_L0,BIPRED], [PRED_L1,BIPRED], [PRED_L1,BIPRED], [BIPRED,PRED_L0], [BIPRED,PRED_L0], [BIPRED,PRED_L1], [BIPRED,PRED_L1],
			[BIPRED,BIPRED], [BIPRED,BIPRED], [NA,NA], [DIRECT,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA], [NA,NA],
			[NA,NA], [NA,NA]
		];
	uint(size=3) SubMbPartPredMode[2][16] =
		[
			[DIRECT, PRED_L0, PRED_L1, BIPRED, PRED_L0, PRED_L0, PRED_L1, PRED_L1, BIPRED, BIPRED,
			 PRED_L0, PRED_L1, BIPRED, NA, NA, NA],
			[PRED_L0, PRED_L0, PRED_L0, PRED_L0, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0]
		];
	uint(size=3) NumMbPart_P[8] =
		[
			1,2,2,4,4,1,1,1
		];

	uint(size=3) NumMbPart_B[32] =
		[
			16,1,1,1,2,2,2,2,2,2,
			 2,2,2,2,2,2,2,2,2,2,
			 2,2,4,16,1,1,1,1,1,1,
			 1,1
		];

	uint(size=3) NumSubMbPartTab[2][16] =
		[
			[4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 0, 0],
			[1, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

	uint(size=3) SizeMb_P[8] =
		[
			SZ_16x16, SZ_16x8, SZ_8x16, SZ_8x8, SZ_8x8, SZ_16x16, SZ_16x16, SZ_16x16
		];

	uint(size=3) SizeMb_B[32] =
		[
			 SZ_4x4, SZ_16x16, SZ_16x16, SZ_16x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16,
			SZ_16x8,  SZ_8x16,  SZ_16x8,  SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16, SZ_16x8, SZ_8x16,
			SZ_16x8,  SZ_8x16,   SZ_8x8,   SZ_4x4,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,  SZ_8x8,
			 SZ_8x8,  SZ_8x8
		];

	uint(size=3) SizeSubMb[2][16] =
		[
			[SZ_4x4, SZ_8x8, SZ_8x8, SZ_8x8, SZ_8x4, SZ_4x8, SZ_8x4, SZ_4x8, SZ_8x4, SZ_4x8,
			 SZ_4x4, SZ_4x4, SZ_4x4, 0, 0, 0],
			[SZ_8x8, SZ_8x4, SZ_4x8, SZ_4x4, 0, 0, 0, 0, 0, 0,
			 0, 0, 0, 0, 0, 0]
		];

	uint(size=4) mbPartIdxToluma4x4Idx[2][32] =
		[[0, 8, 4, 0],
		 [0, 0, 0, 0, 8, 4, 8, 4, 8, 4,
		  8, 4, 8, 4, 8, 4, 8, 4, 8, 4,
		  8, 4]];

	uint(size=4) subMbPartIdxToluma4x4Idx[2][16] =
		[[0, 2, 1, 1],
		 [0, 0, 0, 0, 2, 1, 2, 1, 2, 1,
		  1, 1, 1]];

	uint(size=3) lumaIdxToMbPartIdxTab[7][16] =
		[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		 [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
		 [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
		 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		 [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1],
		 [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
		 [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]];

	function Mb_IsIntra(uint(size=6) MbType) --> bool :
		MbType >= BLOCK_TYPE_INTRA_MIN and MbType <= BLOCK_TYPE_INTRA_MAX
	end

	function Is_Intra_NxN(uint(size=6) MbType) --> bool :
		(MbType = BLOCK_TYPE_I_4x4) or (MbType = BLOCK_TYPE_I_8x8)
	end
	
	function Is_Intra_16x16(uint MbType) --> bool :
		(MbType >= BLOCK_TYPE_INTRA_16x16_MIN) and (MbType <= BLOCK_TYPE_INTRA_16x16_MAX)
	end

	function mbIsPred(uint(size=6) MbType) --> bool :
		MbType >= BLOCK_TYPE_P_MIN and MbType <= BLOCK_TYPE_P_MAX
	end

	function mbIsBiPred(uint(size=6) MbType) --> bool :
		MbType >= BLOCK_TYPE_B_MIN and MbType <= BLOCK_TYPE_B_MAX
	end

	function Mb_Is_PredL0(uint(size=6) Mb_Type, uint(size=3) mb_part_idx)
				-->
			bool
		:
			if(Mb_Type >= BLOCK_TYPE_B_MIN and Mb_Type <= BLOCK_TYPE_B_MAX) then
				(MbPartPredMode_B[(Mb_Type - BLOCK_TYPE_B_MIN) & 31][mb_part_idx & 1] & PRED_L0) != 0
			else//if(Mb_Type >= BLOCK_TYPE_P_MIN and Mb_Type <= BLOCK_TYPE_P_MAX)
				if(Mb_Type >= BLOCK_TYPE_P_MIN and Mb_Type <= BLOCK_TYPE_P_MAX)then
					(MbPartPredMode_P[(Mb_Type - BLOCK_TYPE_P_MIN) & 7][mb_part_idx & 1] & PRED_L0) != 0
				else
					false
				end
			end
		end

	function Mb_Is_PredL1(uint(size=6) MbType, uint(size=3) mb_part_idx)
				-->
			bool
		:
			if(MbType >= BLOCK_TYPE_B_MIN and MbType <= BLOCK_TYPE_B_MAX) then
				(MbPartPredMode_B[(MbType - BLOCK_TYPE_B_MIN) &  31][mb_part_idx & 1] & PRED_L1) != 0
			else//if(Mb_Type >= BLOCK_TYPE_P_MIN and Mb_Type <= BLOCK_TYPE_P_MAX)
				false
			end
		end

	function numMbPart(uint(size=6) MbType)
				-->
			uint(size=3)
		:
			if(MbType >= BLOCK_TYPE_B_MIN and MbType <= BLOCK_TYPE_B_MAX) then
				NumMbPart_B[(MbType - BLOCK_TYPE_B_MIN) & 31]
			else
				if(MbType >= BLOCK_TYPE_P_MIN and MbType <= BLOCK_TYPE_P_MAX)then
					NumMbPart_P[(MbType - BLOCK_TYPE_P_MIN) &  7]
				else
					1
				end
			end
		end

	function numSubMbPart(uint(size=6) MbType, uint(size=4) SubMbType)
				-->
			uint(size=3)
		:
			if(MbType >= BLOCK_TYPE_B_MIN and MbType <= BLOCK_TYPE_B_MAX)then
				NumSubMbPartTab[0][SubMbType & 15]
			else //MbType --> Mono Prediction
				NumSubMbPartTab[1][SubMbType & 15]
			end
		end

	function sizeMbPart(uint(size=6) MbType)
				-->
			uint(size=3)
		:
			if(MbType >= BLOCK_TYPE_B_MIN and MbType <= BLOCK_TYPE_B_MAX) then
				SizeMb_B[(MbType - BLOCK_TYPE_B_MIN) & 31]
			else
				if(MbType <= BLOCK_TYPE_P_MAX)then
					SizeMb_P[(MbType - BLOCK_TYPE_P_MIN) &  7]
				else
					if(MbType = BLOCK_TYPE_P_SKIP) then
						SZ_16x16
					else
						SZ_4x4
					end
				end
			end
		end

	function SizeSubMbPart(uint(size=6) MbType, uint(size=4) sub_mb_type)
				-->
			uint(size=3)
		:
		uint(size=2) idx =
			if(mbIsBiPred(MbType)) then
				0
			else
				1
			end;
			SizeSubMb[idx][sub_mb_type & 0x0F]
		end

	function subMbPredMode(uint(size=6)  mbType, uint(size=4) subMbType) -->
		uint(size=3) :
		uint(size=1) idx =
			if(mbIsBiPred(mbType)) then
				0
			else
				1
			end;
			SubMbPartPredMode[idx][subMbType]
	end

	function partIdxToLuma4x4(uint(size=6)  mbType, uint(size=3) mbPartIdx,
		uint(size=4) subMbType, uint(size=3) subMbPartIdx) --> uint(size=4) :
		uint(size=1) tabIdx =
			if(mbIsPred(mbType)) then
				0
			else
				1
			end;
		uint(size=6) relMbType =
			if(mbIsPred(mbType)) then
				(mbType - BLOCK_TYPE_P_MIN) & 31
			else
				(mbType - BLOCK_TYPE_B_MIN) & 31
			end;

		if(mbType != BLOCK_TYPE_P_8x8 and mbType != BLOCK_TYPE_B_8x8) then
			mbPartIdxToluma4x4Idx[tabIdx][relMbType]*mbPartIdx
		else
			4*mbPartIdx +
			subMbPartIdxToluma4x4Idx[tabIdx][subMbType & 15]*subMbPartIdx
		end
	end

	function lumaIdxToMbPartIdx(uint(size=4) lumaIdx, uint(size=6) mbType,
		uint(size=6) subMbType) --> uint(size=3) :
		uint(size=4) sizeBlk =
			if(mbType = BLOCK_TYPE_P_8x8 or mbType = BLOCK_TYPE_P_8x8ref0
				or mbType = BLOCK_TYPE_B_8x8) then
				SizeSubMbPart(mbType, subMbType)
			else
				sizeMbPart(mbType)
			end;
		lumaIdxToMbPartIdxTab[sizeBlk][lumaIdx & 0x0F]
	end
end