/********************************************************************************

This software module was originally developed by Damien de Saint Jorre IETR/INSA of Rennes (France), in the course of development of the ISO/IEC 23002-4 for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the ISO/IEC 23002-4  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.php.selecMacroblock;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_DemuxParserInfoForBlocks_Luma()
	uint(size=6)  MB_TYPE,
	int (size=9)  COEF_ACR,
	bool          CONSTRAINED_IFLAG,
	uint(size=4)  PRED_MODE,
	uint(size=7)  MB_LOCATION
		==>
	int (size=9)  COEF_ACR_INTRA4,
	uint(size=4)  PRED_MODE4,
	bool          NEIGHBOUR4,

	int (size=9)  COEF_ACR_INTRA8,
	uint(size=4)  PRED_MODE8,
	bool          NEIGHBOUR8,

	int (size=9)  COEF_ACR_INTRA16,
	uint(size=4)  PRED_MODE16,
	bool          NEIGHBOUR16,

	int (size=9)  COEF_ACR_INTER,
	uint (size=3)  SELECT
		:
	bool isIntra[(MAX_PICWIDTH_BLK + 2) * 2];
	int STRIDE = MAX_PICWIDTH_BLK + 2;
	uint(size=13) curr_pos       := 0;
	bool constrainedIFlag;
	/*************************************************************************
	* Actions
	*************************************************************************/
	CheckSlices: action MB_TYPE:[ValMBType] ==>
	guard
		ValMBType >= NEW_SLICE
	do
		isIntra := [false : for int i in 1 .. (STRIDE * 2)];
	end	
	Get_IFlag: action CONSTRAINED_IFLAG :[ Constrained_I_Flag ] ==>
	do
		constrainedIFlag:= Constrained_I_Flag;
	end
	/*************************************************************************
	* MBTypeIsPCM
	*************************************************************************/
	MBTypeIsPCM: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
						MB_TYPE    :[ValMBType]
						==>
						SELECT:[0]
	guard
		ValMBType = BLOCK_TYPE_I_PCM
	do
		curr_pos                   := MbLocxInPic + 1;
		isIntra[curr_pos]          := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1]      := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := true;
	end
	/*************************************************************************
	* MBTypeIsIntra4x4
	*************************************************************************/
	MBTypeIsIntra4x4: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
							 MB_TYPE    :[ValMBType]
							 ==>
							 SELECT:[1]
	guard
		ValMBType = BLOCK_TYPE_I_4x4
	do
		curr_pos                   := MbLocxInPic + 1;
		isIntra[curr_pos]          := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1]      := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := true;
	end
	SendAcr4x4: action COEF_ACR       :[ValCoef] repeat 256
					   ==>
					   COEF_ACR_INTRA4:[ValCoef] repeat 256
	end
	SendPredMode4x4: action PRED_MODE :[pred_mode] repeat 16
							==>
							PRED_MODE4:[pred_mode] repeat 16
	end
	SendNeighbourg4x4: action ==>
							  NEIGHBOUR4 :[NeighA, NeighB, NeighC, NeighD]
	var
		bool NeighA, 
		bool NeighB, 
		bool NeighC, 
		bool NeighD
	do
		NeighA := (isIntra[curr_pos + STRIDE - 1] );
		NeighB := (isIntra[curr_pos] );
		NeighC := (isIntra[curr_pos + 1]) && NeighB;
		NeighD := (isIntra[curr_pos - 1]);
	end
	/*************************************************************************
	* MBTypeIsIntra8x8
	*************************************************************************/
	MBTypeIsIntra8x8: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
							 MB_TYPE    :[ValMBType]
							 ==>
							 SELECT:[4]
	guard
		ValMBType = BLOCK_TYPE_I_8x8
	do
		curr_pos                   := MbLocxInPic + 1;
		isIntra[curr_pos]          := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1]      := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := true;
	end
	SendAcr8x8: action COEF_ACR       :[ValCoef] repeat 256
					   ==>
					   COEF_ACR_INTRA8:[ValCoef] repeat 256
	end
	SendPredMode8x8: action PRED_MODE :[pred_mode] repeat 4
							==>
							PRED_MODE8:[pred_mode] repeat 4
	end
	SendNeighbourg8x8: action ==>
							  NEIGHBOUR8 :[NeighA, NeighB, NeighC, NeighD]
	var
		bool NeighA, 
		bool NeighB, 
		bool NeighC, 
		bool NeighD
	do
		NeighA := (isIntra[curr_pos + STRIDE - 1] );
		NeighB := (isIntra[curr_pos] );
		NeighC := (isIntra[curr_pos + 1]) && NeighB;
		NeighD := (isIntra[curr_pos - 1]);
	end
	/*************************************************************************
	* MBTypeIsIntra16x16
	*************************************************************************/
	MBTypeIsIntra16x16: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
							   MB_TYPE    :[ValMBType]
							   ==>
							   SELECT:[2]
	guard
		Is_Intra_16x16(ValMBType)
	do
		curr_pos                   := MbLocxInPic + 1;
		isIntra[curr_pos]          := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1]      := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := true;
	end
	SendAcr16x16: action COEF_ACR        :[ValCoef] repeat 256
						 ==>
						 COEF_ACR_INTRA16:[ValCoef] repeat 256
	end
	SendPredMode16x16: action PRED_MODE  :[pred_mode]
							  ==>
							  PRED_MODE16:[pred_mode]
	end
	SendNeighbourg16x16: action ==>
								NEIGHBOUR16 :[NeighA, NeighB, NeighC, NeighD]
	var
		bool NeighA, 
		bool NeighB, 
		bool NeighC, 
		bool NeighD
	do
		NeighA := (isIntra[curr_pos + STRIDE - 1] );
		NeighB := (isIntra[curr_pos] );
		NeighC := (isIntra[curr_pos + 1]) && NeighB;
		NeighD := (isIntra[curr_pos - 1]);
	end
	/*************************************************************************
	* MBTypeIsInter
	*************************************************************************/
	MBTypeIsInter: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
						  MB_TYPE    :[ValMBType]
						  ==>
						  SELECT:[3]
	guard
		ValMBType > BLOCK_TYPE_INTRA_MAX
	do
		curr_pos    := MbLocxInPic + 1;
		isIntra[curr_pos] := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1] := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := not constrainedIFlag;
	end
	MBTypeIsInterPSkip: action MB_LOCATION:[MbLocxInPic , MbLocyInPic],
							   MB_TYPE    :[ValMBType]
							   ==>
							   SELECT:[3],
							   COEF_ACR_INTER :[[0:  for int i in 0 .. 255]] repeat 256
	guard
		ValMBType = BLOCK_TYPE_P_SKIP or ValMBType = BLOCK_TYPE_B_SKIP
	do
		curr_pos                   := MbLocxInPic + 1;
		isIntra[curr_pos]          := isIntra[STRIDE + curr_pos];
		isIntra[curr_pos + 1]      := isIntra[STRIDE + 1 + curr_pos];
		isIntra[STRIDE + curr_pos] := not constrainedIFlag;
	end
	SendAcrInter: action COEF_ACR      :[ValCoef] repeat 256
						 ==>
						 COEF_ACR_INTER:[ValCoef] repeat 256
	end
	/*************************************************************************
	* schedule
	*************************************************************************/
	schedule fsm CheckMbType:
		CheckMbType         (MBTypeIsPCM             )--> CheckMbType;
		CheckMbType         (MBTypeIsIntra4x4        )--> SendIntra4x4Infos1;
		CheckMbType         (MBTypeIsIntra8x8        )--> SendIntra8x8Infos1;
		CheckMbType         (MBTypeIsIntra16x16      )--> SendIntra16x16Infos1;
		CheckMbType         (MBTypeIsInter           )--> SendInterInfos1;
		CheckMbType         (MBTypeIsInterPSkip      )--> CheckMbType;
		CheckMbType         (CheckSlices             )--> GetIFlag;
		GetIFlag            (Get_IFlag               )--> CheckMbType;

		SendIntra4x4Infos1   (SendAcr4x4              )--> SendIntra4x4Infos2;
		SendIntra4x4Infos2   (SendPredMode4x4         )--> SendIntra4x4Infos3;
		SendIntra4x4Infos3   (SendNeighbourg4x4       )--> CheckMbType;

		SendIntra8x8Infos1   (SendAcr8x8              )--> SendIntra8x8Infos2;
		SendIntra8x8Infos2   (SendPredMode8x8         )--> SendIntra8x8Infos3;
		SendIntra8x8Infos3   (SendNeighbourg8x8       )--> CheckMbType;

		SendIntra16x16Infos1 (SendAcr16x16            )--> SendIntra16x16Infos2;
		SendIntra16x16Infos2 (SendPredMode16x16       )--> SendIntra16x16Infos3;	
		SendIntra16x16Infos3 (SendNeighbourg16x16     )--> CheckMbType;

		SendInterInfos1      (SendAcrInter            )--> CheckMbType;
	end
	/*************************************************************************
	* priority
	*************************************************************************/
	priority
		CheckSlices > MBTypeIsInterPSkip > MBTypeIsInter;
	end

end