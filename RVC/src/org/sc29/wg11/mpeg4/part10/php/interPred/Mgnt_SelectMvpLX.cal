/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.php.interPred;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;

actor Mgnt_SelectMvpLX()
	uint(size=6)  MB_TYPE,
	uint(size=4)  SUB_MB_TYPE,
	int (size=16) MV_L0,
	uint(size=11) LOCATION_L0,
	uint(size=32) FRAME_L0,
	int (size=16) MV_L1,
	uint(size=32) FRAME_L1,
	uint(size=11) LOCATION_L1,
	bool          DIRECT_PRED_L0,
	bool          DIRECT_PRED_L1,
	uint(size=5)  REF_IDX_L0,
	uint(size=5)  REF_IDX_L1
		==>
	int (size=16) MV,
	uint(size=32) READ_FRAME,
	uint(size=11) LOCATION,
	uint(size=2)  SELECT_LIST,
	uint(size=5)  REF_IDX
		:

	uint(size=3) MbPartIdxMax;
	uint(size=3) MbPartIdx;
	uint(size=1) Idx_Sub_Tab;
	bool         Is8x8Mb;
	uint(size=3) SubMbPartIdxMax;
	uint(size=3) SubMbPartIdx;
	bool         IsSubPredL0;
	bool         IsSubPredL1;
	uint(size=6) mb_type;

	List(type: bool, size=2) IsPredL0;
	List(type: bool, size=2) IsPredL1;
	

	ReadNewSlice: action
			MB_TYPE :[MacroBlkType]
				==>
		guard
			MacroBlkType >= NEW_SLICE
		end
			
	SkipMbType: action
			MB_TYPE :[MacroBlkType]
				==>
		guard
			Mb_IsIntra(MacroBlkType)
		end


	ReadMbType: action MB_TYPE:[MacroBlkType]
		==>
	do
		mb_type := MacroBlkType;
		Idx_Sub_Tab   :=
			if mbIsBiPred(MacroBlkType) then
				0
			else
				1
			end;
		MbPartIdx     := 0;
		MbPartIdxMax  := numMbPart(MacroBlkType);
		Is8x8Mb :=    (MacroBlkType = BLOCK_TYPE_P_8x8ref0)
		           or (MacroBlkType = BLOCK_TYPE_P_8x8)
		           or (MacroBlkType = BLOCK_TYPE_B_8x8);
		IsPredL0[0] := Mb_Is_PredL0(MacroBlkType,0);
		IsPredL0[1] := Mb_Is_PredL0(MacroBlkType,1);
		IsPredL1[0] := Mb_Is_PredL1(MacroBlkType,0);
		IsPredL1[1] := Mb_Is_PredL1(MacroBlkType,1);
	end

	MacroBlkType.IsPredL0: action
			MV_L0       :[Mvx, Mvy],
			FRAME_L0    :[frameL0],
			REF_IDX_L0   :[ref0],
			LOCATION_L0 :[Mbx_in_pix,Mby_in_pix]
				==>
			MV       :[Mvx, Mvy],
			READ_FRAME :[frameL0],
			REF_IDX      :[ref0],
			LOCATION    :[Mbx_in_pix,Mby_in_pix],
			SELECT_LIST  :[PRED_L0]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			IsPredL0[MbPartIdx&1],
			not IsPredL1[MbPartIdx&1]
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsPredL1: action
			MV_L1       :[Mvx,Mvy],
			FRAME_L1    :[frameL1],
			LOCATION_L1 :[Mbx_in_pix,Mby_in_pix],
			REF_IDX_L1   :[ref1]
				==>
			MV       :[Mvx,Mvy],
			READ_FRAME :[frameL1],
			REF_IDX      :[ref1],
			LOCATION    :[Mbx_in_pix,Mby_in_pix],
			SELECT_LIST  :[PRED_L1]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			not IsPredL0[MbPartIdx&1],
			IsPredL1[MbPartIdx&1]
		do
			MbPartIdx := MbPartIdx + 1;

		end

	MacroBlkType.IsBiPred: action
			MV_L0       :[MvxL0, MvyL0],
			FRAME_L0    :[frameL0],
			LOCATION_L0 :[Mbx_in_pixL0,Mby_in_pixL0],
			REF_IDX_L0   :[ref0],

			MV_L1       :[MvxL1,MvyL1],
			FRAME_L1    :[frameL1],
			LOCATION_L1 :[Mbx_in_pixL1,Mby_in_pixL1],
			REF_IDX_L1   :[ref1]
				==>
			MV       :[MvxL0,MvyL0 , MvxL1,MvyL1],
			READ_FRAME :[frameL0 , frameL1],
			REF_IDX      :[ref0, ref1],
			LOCATION    :[Mbx_in_pixL0,Mby_in_pixL0 , Mbx_in_pixL1,Mby_in_pixL1],
			SELECT_LIST  :[BIPRED]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			IsPredL0[MbPartIdx&1] and IsPredL1[MbPartIdx&1]
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsDirect_PredL0: action
			MV_L0         :[Mvxl0, Mvyl0],
			FRAME_L0      :[frameL0],
			REF_IDX_L0     :[ref0],
			LOCATION_L0   :[Mbx_in_pixl0,Mby_in_pixl0],
			DIRECT_PRED_L0 :[Is_direct_l0],
			DIRECT_PRED_L1 :[Is_direct_l1]
				==>
			MV       :[Mvxl0,Mvyl0],
			READ_FRAME :[frameL0],
			REF_IDX      :[ref0],
			LOCATION    :[Mbx_in_pixl0,Mby_in_pixl0],
			SELECT_LIST  :[PRED_L0]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			(not IsPredL0[MbPartIdx&1]) and (not IsPredL1[MbPartIdx&1]),
	        Is_direct_l0  and (not Is_direct_l1)
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsDirect_PredL1: action
			MV_L1         :[Mvxl1, Mvyl1],
			FRAME_L1      :[frameL1],
			REF_IDX_L1     :[ref1],
			LOCATION_L1   :[Mbx_in_pixl1,Mby_in_pixl1],
			DIRECT_PRED_L1 :[Is_direct_l1],

			DIRECT_PRED_L0 :[Is_direct_l0]
				==>
			MV       :[Mvxl1,Mvyl1],
			READ_FRAME :[frameL1],
			REF_IDX      :[ref1],
			LOCATION    :[Mbx_in_pixl1,Mby_in_pixl1],
			SELECT_LIST  :[PRED_L1]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			(not IsPredL0[MbPartIdx&1]) and (not IsPredL1[MbPartIdx&1]),
			(not Is_direct_l0) and Is_direct_l1
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType.IsDirect_BiPred: action
			MV_L0         :[Mvxl0, Mvyl0],
			FRAME_L0      :[frameL0],
			REF_IDX_L0     :[ref0],
			LOCATION_L0   :[Mbx_in_pixl0,Mby_in_pixl0],
			DIRECT_PRED_L0 :[Is_direct_l0],

			MV_L1         :[Mvxl1, Mvyl1],
			FRAME_L1      :[frameL1],
			REF_IDX_L1     :[ref1],
			LOCATION_L1   :[Mbx_in_pixl1,Mby_in_pixl1],
			DIRECT_PRED_L1 :[Is_direct_l1]
				==>
			MV       :[Mvxl0,Mvyl0 , Mvxl1,Mvyl1],
			READ_FRAME :[frameL0 , frameL1],
			REF_IDX      :[ref0, ref1],
			LOCATION    :[Mbx_in_pixl0,Mby_in_pixl0 , Mbx_in_pixl1,Mby_in_pixl1],
			SELECT_LIST  :[BIPRED]
		guard
			MbPartIdx < MbPartIdxMax,
			not Is8x8Mb,
			(not IsPredL0[MbPartIdx&1]) and (not IsPredL1[MbPartIdx&1]),
			        Is_direct_l0  and      Is_direct_l1
			or (not Is_direct_l0) and (not Is_direct_l1)
		do
			MbPartIdx := MbPartIdx + 1;
		end

	MacroBlkType_Is8x8: action
			SUB_MB_TYPE :[ValSubMbType]
				==>
		guard
			MbPartIdx < MbPartIdxMax,
			Is8x8Mb
		do
			SubMbPartIdx    := 0;
			SubMbPartIdxMax := numSubMbPart(mb_type,ValSubMbType);
			IsSubPredL0     := (SubMbPartPredMode[Idx_Sub_Tab][ValSubMbType & 15] & PRED_L0) != 0;
			IsSubPredL1     := (SubMbPartPredMode[Idx_Sub_Tab][ValSubMbType & 15] & PRED_L1) != 0;
		end

	GetParameters_Done: action
				==>
		guard
			MbPartIdx = MbPartIdxMax
		end

	SubMacroBlkType.IsPredL0: action
			MV_L0       :[Mvx, Mvy],
			FRAME_L0    :[frameL0],
			REF_IDX_L0   :[ref0],
			LOCATION_L0 :[Mbx_in_pix,Mby_in_pix]
				==>
			MV       :[Mvx, Mvy],
			READ_FRAME :[frameL0],
			REF_IDX      :[ref0],
			LOCATION    :[Mbx_in_pix,Mby_in_pix],
			SELECT_LIST  :[PRED_L0]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			IsSubPredL0,
			not IsSubPredL1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsPredL1: action
			MV_L1       :[Mvx, Mvy],
			FRAME_L1    :[frameL1],
			REF_IDX_L1   :[ref1],
			LOCATION_L1 :[Mbx_in_pix,Mby_in_pix]
				==>
			MV       :[Mvx, Mvy],
			READ_FRAME :[frameL1],
			REF_IDX      :[ref1],
			LOCATION    :[Mbx_in_pix,Mby_in_pix],
			SELECT_LIST  :[PRED_L1]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			not IsSubPredL0,
			IsSubPredL1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsBiPred: action
			MV_L0       :[Mvxl0, Mvyl0],
			FRAME_L0    :[frameL0],
			REF_IDX_L0   :[ref0],
			LOCATION_L0 :[Mbx_in_pixl0,Mby_in_pixl0],

			MV_L1       :[Mvxl1,Mvyl1],
			FRAME_L1    :[frameL1],
			REF_IDX_L1   :[ref1],
			LOCATION_L1 :[Mbx_in_pixl1,Mby_in_pixl1]
				==>
			MV       :[Mvxl0, Mvyl0 , Mvxl1, Mvyl1],
			READ_FRAME :[frameL0 , frameL1],
			REF_IDX      :[ref0, ref1],
			LOCATION    :[Mbx_in_pixl0,Mby_in_pixl0 , Mbx_in_pixl1,Mby_in_pixl1],
			SELECT_LIST  :[BIPRED]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			IsSubPredL0 and IsSubPredL1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsDirect_PredL0: action
			MV_L0        :[Mvxl0, Mvyl0],
			FRAME_L0     :[frameL0],
			REF_IDX_L0   :[ref0],
			LOCATION_L0  :[Mbx_in_pixl0,Mby_in_pixl0],
			DIRECT_PRED_L0 :[Is_direct_l0],
			DIRECT_PRED_L1 :[Is_direct_l1]
				==>
			MV           :[Mvxl0,Mvyl0],
			READ_FRAME   :[frameL0],
			REF_IDX      :[ref0],
			LOCATION     :[Mbx_in_pixl0,Mby_in_pixl0],
			SELECT_LIST  :[PRED_L0]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			(not IsSubPredL0) and (not IsSubPredL1),
	        Is_direct_l0  and (not Is_direct_l1)
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsDirect_PredL1: action
			MV_L1         :[Mvxl1, Mvyl1],
			FRAME_L1      :[frameL1],
			REF_IDX_L1     :[ref1],
			LOCATION_L1   :[Mbx_in_pixl1,Mby_in_pixl1],
			DIRECT_PRED_L1 :[Is_direct_l1],

			DIRECT_PRED_L0 :[Is_direct_l0]
				==>
			MV       :[Mvxl1,Mvyl1],
			READ_FRAME :[frameL1],
			REF_IDX      :[ref1],
			LOCATION    :[Mbx_in_pixl1,Mby_in_pixl1],
			SELECT_LIST  :[PRED_L1]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			(not IsSubPredL0) and (not IsSubPredL1),
			(not Is_direct_l0) and Is_direct_l1
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	SubMacroBlkType.IsDirect_BiPred: action
			MV_L0         :[Mvxl0, Mvyl0],
			FRAME_L0      :[frameL0],
			REF_IDX_L0     :[ref0],
			LOCATION_L0   :[Mbx_in_pixl0,Mby_in_pixl0],
			DIRECT_PRED_L0 :[Is_direct_l0],

			MV_L1         :[Mvxl1, Mvyl1],
			FRAME_L1      :[frameL1],
			REF_IDX_L1     :[ref1],
			LOCATION_L1   :[Mbx_in_pixl1,Mby_in_pixl1],
			DIRECT_PRED_L1 :[Is_direct_l1]
				==>
			MV       :[Mvxl0,Mvyl0 , Mvxl1,Mvyl1],
			READ_FRAME :[frameL0 , frameL1],
			REF_IDX      :[ref0, ref1],
			LOCATION    :[Mbx_in_pixl0,Mby_in_pixl0 , Mbx_in_pixl1,Mby_in_pixl1],
			SELECT_LIST  :[BIPRED]
		guard
			SubMbPartIdx < SubMbPartIdxMax,
			(not IsSubPredL0) and (not IsSubPredL1),
			        Is_direct_l0  and      Is_direct_l1
			or (not Is_direct_l0) and (not Is_direct_l1)
		do
			SubMbPartIdx := SubMbPartIdx + 1;
		end

	GetParamSubMb_Done: action ==>
		guard
			SubMbPartIdx = SubMbPartIdxMax
		do
			MbPartIdx := MbPartIdx + 1;
		end

	schedule fsm ReadMbType:
		ReadMbType         (ReadNewSlice        )--> ReadMbType;
		ReadMbType         (SkipMbType          )--> ReadMbType;
		ReadMbType         (ReadMbType          )--> GetParameters;

		GetParameters      (MacroBlkType_Is8x8  )--> GetParametersSubMb;
		GetParameters      (GetParameters_Done  )--> ReadMbType;
		GetParameters      (MacroBlkType        )--> GetParameters;

		GetParametersSubMb (SubMacroBlkType     )--> GetParametersSubMb;
		GetParametersSubMb (GetParamSubMb_Done  )--> GetParameters;
	end
	
	priority
		ReadNewSlice > SkipMbType > ReadMbType;
	end
	
end