/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.sc29.wg11.mpeg4.part10.php.interPred;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import std.util.Math.*;

actor Algo_GeneratePredWeight()
	bool          IS_NEW_MB_L0,
	bool          IS_NEW_MB_L1,
	int (size=32) POC_LISTX,
	bool          POC_IS_LT,
	uint(size=4)  REF_IDX_L0,
	uint(size=4)  REF_IDX_L1,
	uint(size=2)  SELECT_LIST,
	uint(size=2)  WP_PRED_IDC,
	int (size=9)  WP_PARAM
		==>
	int (size=9)  WP_PARAM_Y,
	int (size=9)  WP_PARAM_U,
	int (size=9)  WP_PARAM_V
		:

	// [Component][LX][ref_idx]
	int(size=8) offset[3][2][32];
	int(size=9) weight[3][2][32];

	int(size=32)  currPoc;
	uint(size=3)  chrLog2WeightDenom;
	bool          isLTList0[16];
	bool          isLTList1[16];
	uint(size=3)  lumaLog2WeightDenom;
	int (size=32) pocList0[16];
	int (size=32) pocList1[16];
	uint(size=2)  wpIdc;

	procedure computeImplicitWeights(int(size=32) pic0, int(size=32) pic1, bool pict0IsLT, bool pict1IsLT, int(size=8) weights[2])
	var
		int (size=11) distScaleFactor,
		int (size=8)  tb,
		int (size=8)  td,
		uint(size=14) tx
	begin
		if((pic1 - pic0 = 0) or pict0IsLT or pict1IsLT) then 
			weights[0] := 32; 
			weights[1] := 32; 
		else 
			tb := clip_i32(currPoc - pic0,-128,127); 
			td := clip_i32(pic1 - pic0,-128,127); 
			tx := (16384 + abs(td/2))/td; 
			distScaleFactor := clip_i32((tb*tx+32)>>6, -1024, 1023); 
			distScaleFactor := distScaleFactor>>2; 
			if(distScaleFactor < -64 or distScaleFactor > 128) then 
				weights[0] := 32; 
				weights[1] := 32; 
			else 
				weights[0] := 64 - distScaleFactor; 
				weights[1] := distScaleFactor; 
			end 
		end
	end

	SendWeightParam.launch.l0: action IS_NEW_MB_L0:[isNewMb], REF_IDX_L0:[refIdx],
		SELECT_LIST:[listSelected] ==> 
			WP_PARAM_Y:[predInfoY] repeat 3,
			WP_PARAM_U:[predInfoU] repeat 3, 
			WP_PARAM_V:[predInfoV] repeat 3
	guard
		isNewMb and wpIdc != 0 and listSelected = PRED_L0
	var
		int(size=9) predInfoY[3],
		int(size=9) predInfoU[3],
		int(size=9) predInfoV[3],
		uint(size=1) idxL0 = 0
	do
		predInfoY[0] := lumaLog2WeightDenom;
		predInfoY[1] := weight[0][idxL0][refIdx];
		predInfoY[2] := offset[0][idxL0][refIdx];

		predInfoU[0] := chrLog2WeightDenom;
		predInfoU[1] := weight[1][idxL0][refIdx];
		predInfoU[2] := offset[1][idxL0][refIdx];

		predInfoV[0] := chrLog2WeightDenom;
		predInfoV[1] := weight[2][idxL0][refIdx];
		predInfoV[2] := offset[2][idxL0][refIdx];
	end

	SendWeightParam.launch.l1: action IS_NEW_MB_L1:[isNewMb], REF_IDX_L1:[refIdx],
		SELECT_LIST:[listSelected] ==> 
			WP_PARAM_Y:[predInfoY] repeat 3,
			WP_PARAM_U:[predInfoU] repeat 3, 
			WP_PARAM_V:[predInfoV] repeat 3
	guard
		isNewMb and wpIdc != 0 and listSelected = PRED_L1
	var
		int(size=9) predInfoY[3],
		int(size=9) predInfoU[3],
		int(size=9) predInfoV[3],
		uint(size=1) idxL1 = 1
	do

		predInfoY[0] := lumaLog2WeightDenom;
		predInfoY[1] := weight[0][idxL1][refIdx];
		predInfoY[2] := offset[0][idxL1][refIdx];

		predInfoU[0] := chrLog2WeightDenom;
		predInfoU[1] := weight[1][idxL1][refIdx];
		predInfoU[2] := offset[1][idxL1][refIdx];

		predInfoV[0] := chrLog2WeightDenom;
		predInfoV[1] := weight[2][idxL1][refIdx];
		predInfoV[2] := offset[2][idxL1][refIdx];
	end

	SendWeightParam.launch.biPred: action IS_NEW_MB_L0:[isNewMbL0],
		IS_NEW_MB_L1:[isNewMbL1], REF_IDX_L0:[refIdxl0], REF_IDX_L1:[refIdxl1],
		SELECT_LIST:[listSelected] ==> 
			WP_PARAM_Y:[predInfoY] repeat 6,
			WP_PARAM_U:[predInfoU] repeat 6, 
			WP_PARAM_V:[predInfoV] repeat 6
	guard
		isNewMbL0 and isNewMbL1 and wpIdc != 0 and listSelected = BIPRED
	var
		uint(size=1) idxL0 = 0,
		uint(size=1) idxL1 = 1,

		int(size=9) predInfoY[6],
		int(size=9) predInfoU[6],
		int(size=9) predInfoV[6],
		int(size=8) implicitWeights[2]
	do
		predInfoY[0] := lumaLog2WeightDenom;
		predInfoY[2] := offset[0][idxL0][refIdxl0];
		predInfoY[3] := lumaLog2WeightDenom;
		predInfoY[5] := offset[0][idxL1][refIdxl1];
		predInfoU[0] := chrLog2WeightDenom;
		predInfoU[2] := offset[1][idxL0][refIdxl0];
		predInfoU[3] := chrLog2WeightDenom;
		predInfoU[5] := offset[1][idxL1][refIdxl1];
		predInfoV[2] := offset[2][idxL0][refIdxl0];
		predInfoV[3] := chrLog2WeightDenom;
		predInfoV[0] := chrLog2WeightDenom;
		predInfoV[5] := offset[2][idxL1][refIdxl1];
		if(wpIdc = 1) then
			predInfoY[1] := weight[0][idxL0][refIdxl0];
			predInfoY[4] := weight[0][idxL1][refIdxl1];
	
			predInfoU[1] := weight[1][idxL0][refIdxl0];
			predInfoU[4] := weight[1][idxL1][refIdxl1];
	
			predInfoV[1] := weight[2][idxL0][refIdxl0];
			predInfoV[4] := weight[2][idxL1][refIdxl1];
		else
			computeImplicitWeights(pocList0[refIdxl0], pocList1[refIdxl1], isLTList0[refIdxl0], isLTList1[refIdxl1], implicitWeights);

			predInfoY[1] := implicitWeights[0];
			predInfoU[1] := implicitWeights[0];
			predInfoV[1] := implicitWeights[0];
			predInfoY[4] := implicitWeights[1];
			predInfoU[4] := implicitWeights[1];
			predInfoV[4] := implicitWeights[1];
		end
	end

	SendWeightParam.skip.l0: action IS_NEW_MB_L0:[isNewMb], REF_IDX_L0:[refIdx],
		SELECT_LIST:[listSelected] ==>
	guard
		isNewMb and wpIdc = 0 and listSelected = PRED_L0
	end

	SendWeightParam.skip.l1: action IS_NEW_MB_L1:[isNewMb], REF_IDX_L1:[refIdx],
		SELECT_LIST:[listSelected] ==>
	guard
		isNewMb and wpIdc = 0 and listSelected = PRED_L1
	end

	SendWeightParam.skip.biPred: action IS_NEW_MB_L0:[isNewMbL0],
		IS_NEW_MB_L1:[isNewMbL1], REF_IDX_L0:[refIdxl0], REF_IDX_L1:[refIdxl1],
		SELECT_LIST:[listSelected] ==>
	guard
		isNewMbL0 and isNewMbL1 and wpIdc = 0 and listSelected = BIPRED
	end

	getWeightedPredIdc: action IS_NEW_MB_L0:[isNewMbL0], IS_NEW_MB_L1:[isNewMbL1], POC_LISTX:[pocListX] repeat 33, POC_IS_LT:[pocIsLTList] repeat 32,
		WP_PRED_IDC:[weightPredIdc] ==>
	guard
		not isNewMbL0 and not isNewMbL1
	var
		uint(size=1) idxL0 = 0,
		uint(size=1) idxL1 = 1
	do
		wpIdc := weightPredIdc;
		if(wpIdc = 2) then
			lumaLog2WeightDenom := 5;
			chrLog2WeightDenom  := 5;
			foreach int Component in 0 .. 2
			do
				foreach int refIdx in 0 .. 16 - 1
				do
					offset[Component][idxL0][refIdx] := 0;
				end
				foreach int refIdx in 0 .. 16 - 1
				do
					offset[Component][idxL1][refIdx] := 0;
				end
			end
			currPoc := pocListX[0];
			foreach int i in 0 .. 15
			do
				pocList0[i] := pocListX[i+1];
				pocList1[i] := pocListX[i+17];
				isLTList0[i] := pocIsLTList[i];
				isLTList1[i] := pocIsLTList[i+16];
			end
		end
	end

	getWeightDenom.skip: action ==>
	guard
		wpIdc != 1
	end

	getWeightDenom.launch: action WP_PARAM:[lumaDenom, chromaDenom] ==>
	guard
		wpIdc = 1
	do
		lumaLog2WeightDenom := lumaDenom;
		chrLog2WeightDenom  := chromaDenom;
	end

	getWeightAndOffset: action WP_PARAM:[param] repeat 16 * 6 * 2 ==>
	do
		foreach int idxLX in 0 .. 1
		do
			foreach int iLoop in 0 .. 15
			do
				foreach int Component in 0 .. 2
				do
					weight[Component][idxLX][iLoop] := param[idxLX * 16 * 6 + iLoop * 6 + 2 * Component];
					offset[Component][idxLX][iLoop] := param[idxLX * 16 * 6 + iLoop * 6 + 2 * Component + 1];
				end
			end
		end
	end


	schedule fsm GetCommand:
		GetCommand (getWeightedPredIdc )--> GetWeightDenom;
		GetCommand (SendWeightParam    )--> GetCommand;

		GetWeightDenom     (getWeightDenom.launch )--> GetWeightAndOffL0;
		GetWeightDenom     (getWeightDenom.skip   )--> GetCommand;

		GetWeightAndOffL0 (getWeightAndOffset  )--> GetCommand;
	end
end