/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.php.interPred;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import std.util.Math.*;
import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_MvLXReconstr(bool IsPredL0, bool DEBUG)
	uint(size=6)  MB_TYPE,
	uint(size=4)  SUB_MB_TYPE,

	uint(size=7)  MB_LOCATION,

	int(size=5)  MB_PRED_REF_IDX,
	int(size=5)  SUB_MB_PRED_REF_IDX,

	int (size=16) MB_PRED_MVD,
	int (size=16) SUB_MB_PRED_MVD,

	bool          COL_ZERO_FLAG,
	int (size=32) TEMPORAL_PRED_INFO,

	bool          DirectSpatialMvPredFlag,
	bool          DirectPredLX_In
	
		==>
	bool          IS_NEW_MB_PIC,
	bool          IS_NEW_MB_SLICE,
	int (size=16) MV_OUT,
	uint(size=11) LOCATION,
	uint(size=5)   REF_IDX_OUT,
	bool          DirectPredLX_Out
	
		:

	uint(size=4) locXYToBlkIdx[16] =
	[
		0,1,4,5,
		2,3,6,7,
		8,9,12,13,
		10,11,14,15
	];
	
	int STRIDE = ((MAX_PICWIDTH_BLK + 1) * 4) + 1;
	int OFFSET = STRIDE + 1;
	int locXYToTabIdx[16] =
	[
		0 * STRIDE + 0 + OFFSET, 0 * STRIDE + 1 + OFFSET, 1 * STRIDE + 0 + OFFSET, 1 * STRIDE + 1 + OFFSET,
		0 * STRIDE + 2 + OFFSET, 0 * STRIDE + 3 + OFFSET, 1 * STRIDE + 2 + OFFSET, 1 * STRIDE + 3 + OFFSET,
		2 * STRIDE + 0 + OFFSET, 2 * STRIDE + 1 + OFFSET, 3 * STRIDE + 0 + OFFSET, 3 * STRIDE + 1 + OFFSET,
		2 * STRIDE + 2 + OFFSET, 2 * STRIDE + 3 + OFFSET, 3 * STRIDE + 2 + OFFSET, 3 * STRIDE + 3 + OFFSET
	];

	int(size=5) refIdxTab[STRIDE * 5];
	int(size=16) mvTab[STRIDE * 5][2];



	uint(size=3) mbPartIdxMax;
	uint(size=3) mbPartIdx;
	uint(size=3) sizeMbMv;
	uint(size=3) subMbPartIdxMax;
	uint(size=3) subMbPartIdx;
	uint(size=3) sizeSubMbMv;
	uint(size=6) mbType;
	uint(size=4) subMbType;
	uint(size=1) idxSubTab;
	bool         isPred4SubMb;

	bool          directSpatialMvPred;
	bool          directPredLx;

	uint(size=11) mbXInPix;
	uint(size=11) mbYInPix;

	List(type: int (size=16),size=2) mvA;
	List(type: int (size=16),size=2) mvB;
	List(type: int (size=16),size=2) mvC;	
	List(type: int (size=16),size=2) oMv;
	
	procedure computeMvPredL0(int(size=5) RefIdxCurr, int(size=5) Ref_Idx_A, int(size=5) Ref_Idx_B, int(size=5) Ref_Idx_C)
		begin
			oMv :=
				if(Ref_Idx_B = -2 and Ref_Idx_C = -2)then
					[mvA[0],mvA[1]]
				else
					if(   RefIdxCurr  = Ref_Idx_A and RefIdxCurr != Ref_Idx_B and RefIdxCurr != Ref_Idx_C
					   or RefIdxCurr != Ref_Idx_A and RefIdxCurr  = Ref_Idx_B and RefIdxCurr != Ref_Idx_C
					   or RefIdxCurr != Ref_Idx_A and RefIdxCurr != Ref_Idx_B and RefIdxCurr  = Ref_Idx_C	)then
						if(RefIdxCurr = Ref_Idx_A)then
							[mvA[0],mvA[1]]
						else
							if(RefIdxCurr = Ref_Idx_B)then
								[mvB[0],mvB[1]]
							else
								[mvC[0],mvC[1]]
							end
						end
					else
						[ median(mvA[0],mvB[0],mvC[0]),
						  median(mvA[1],mvB[1],mvC[1]) ]
					end
				end;
		end

	int (size=5) refIdxA;
	int (size=5) refIdxB;
	int (size=5) refIdxC;
	int Idx;

	procedure getNeighbourBlockParameters (int(size=5) IdxBlk, uint(size=5) SzBlkMv)
	var
			int Idx_A,
			int Idx_B,
			int Idx_C,			
			int (size=5) Idx_C_1D,
			int x, int y
			
	begin
		SzBlkMv := SzBlkMv / 4;
		x := (locXYToBlkIdx[IdxBlk]) & 3;
		y := (locXYToBlkIdx[IdxBlk]) /4;
		
		Idx := OFFSET  + mbLocxIdx + y * STRIDE + x; 
		Idx_A   := Idx - 1;
		Idx_B   := Idx - STRIDE;
		Idx_C   := Idx - STRIDE - 1;
		
		refIdxA := refIdxTab[Idx_A];
		mvA     := [mvTab[Idx_A][0],mvTab[Idx_A][1]];
		refIdxB := refIdxTab[Idx_B];
		mvB     := [mvTab[Idx_B][0],mvTab[Idx_B][1]];
		refIdxC := refIdxTab[Idx_C];
		mvC     := [mvTab[Idx_C][0],mvTab[Idx_C][1]];	

		x := x + SzBlkMv;		
		Idx_C_1D:= ((((x) & 3) + ((y - 1) & 3) * 4)) & 15;
		Idx := OFFSET  + mbLocxIdx + y * STRIDE + x; 
		if(y = 0)then
			if(x <= 3)then
				refIdxC := refIdxTab[Idx - STRIDE];
				mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];	
			else
				if(refIdxTab[Idx - STRIDE] != -2) then
					refIdxC := refIdxTab[Idx - STRIDE];
					mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];
				end
			end
		else
			if(x <= 3)then
				//if the macroblock have already been decoded
				if(locXYToBlkIdx[Idx_C_1D] < IdxBlk)then
					//We update the values
					refIdxC := refIdxTab[Idx - STRIDE];
					mvC     := [mvTab[Idx - STRIDE][0],mvTab[Idx - STRIDE][1]];
				end
			end
		end
	end

	getNewPic: action MB_TYPE:[macroBlkType], 
		DirectSpatialMvPredFlag:[DirectSpatMvPred] 
		 ==> IS_NEW_MB_PIC:[false],
		IS_NEW_MB_SLICE:[false]
	guard
		macroBlkType >= NEW_FRAME_NON_IDR
	do
		directSpatialMvPred := DirectSpatMvPred;
		refIdxTab := [-2 : for int i in 1 .. STRIDE * 5];
		mvTab := [[0, 0] : for int i in 1 .. (STRIDE * 5)];
	end

	getNewSlice: action MB_TYPE:[macroBlkType], 
		DirectSpatialMvPredFlag:[DirectSpatMvPred] 
		==> IS_NEW_MB_SLICE:[false]
	guard
		macroBlkType = NEW_SLICE
	do
		directSpatialMvPred := DirectSpatMvPred;
		refIdxTab := [-2 : for int i in 1 .. (STRIDE * 5)];
		mvTab := [[0, 0] : for int i in 1 .. (STRIDE * 5)];
	end
	
	int mbLocxIdx;

	GetMbType: action MB_LOCATION:[MbLocxInPic,
		MbLocyInPic], MB_TYPE:[macroBlkType]
		==>
	do
		mbType := macroBlkType;
		mbLocxIdx := MbLocxInPic * 4;
if DEBUG then
			println("mbLoc = " + MbLocxInPic + "; " + MbLocyInPic);
			println("mbType = " + mbType);
end		
		
		foreach int i in 0 ..7 do 
			refIdxTab[OFFSET - STRIDE + mbLocxIdx + i] := refIdxTab[OFFSET + 3 * STRIDE + mbLocxIdx + i];
			mvTab[OFFSET - STRIDE + mbLocxIdx + i][0] := mvTab[OFFSET + 3 * STRIDE + mbLocxIdx + i][0];
			mvTab[OFFSET - STRIDE + mbLocxIdx + i][1] := mvTab[OFFSET + 3 * STRIDE + mbLocxIdx + i][1];
		end
		if(not Mb_IsIntra(mbType)) then
			mbXInPix  := MbLocxInPic*16;
			mbYInPix  := MbLocyInPic*16;
			mbPartIdx     := 0;
			mbPartIdxMax  := numMbPart(mbType);
			sizeMbMv      := sizeMbPart(mbType);
		end
	end

	checkMbType.isIorSI: action	==>
	guard
		Mb_IsIntra(mbType)
	do
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0, 0];
		end
	end

	checkMbType.isPSkipL0: action ==> REF_IDX_OUT :[0], IS_NEW_MB_PIC:[true],
		IS_NEW_MB_SLICE:[true], MV_OUT :[mvpL0] repeat 2, LOCATION:[mbXInPix,mbYInPix]
	guard
		mbType = BLOCK_TYPE_P_SKIP,
		IsPredL0
	do
		int(size=5)  refIdxA;
		int(size=5)  refIdxB;
		int(size=5)  refIdxC;
		int(size=16) mvpL0[2];
		int index := mbLocxIdx + OFFSET;

		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= 0;
		end
		//if mbAddrA or mbAddrB is not available
		if( (refIdxTab[index - 1] = -2) or (refIdxTab[index - STRIDE] = -2)
		      //if refIdxL0A is equal to 0 and both components of mvL0A are
		      //equal to 0
		   or refIdxTab[index - 1] = 0 and mvTab[index - 1][0] = 0
		      and mvTab[index - 1][1] = 0
			  //if refIdxL0B is equal to 0 and both components of mvL0B are
			  //equal to 0	
		   or refIdxTab[index - STRIDE] = 0 and mvTab[index - STRIDE][0] = 0
		      and mvTab[index - STRIDE][1] = 0
		) then
			mvpL0 := [0,0];
		else
			if(refIdxTab[index - STRIDE + 4] != -2)then
				mvC         := [mvTab[index - STRIDE + 4][0], mvTab[index - STRIDE + 4][1]];
				refIdxC     := refIdxTab[index - STRIDE + 4];
			else
				if(refIdxTab[index - STRIDE - 1] != -2)then
					mvC         := [mvTab[index - STRIDE - 1][0],mvTab[index - STRIDE - 1][1]];
					refIdxC     := refIdxTab[index - STRIDE - 1];
				else
					mvC     := [0,0];
					refIdxC := -2;
				end
			end
			refIdxA := refIdxTab[index - 1];
			mvA     := [mvTab[index - 1][0] , mvTab[index - 1][1]];
			refIdxB := refIdxTab[index - STRIDE];
			mvB     := [mvTab[index - STRIDE][0],mvTab[index - STRIDE][1]];
			computeMvPredL0(0,refIdxA,refIdxB,refIdxC);
			mvpL0   := [oMv[0],oMv[1]];
		end
		foreach int i in 0 .. 15 do
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [mvpL0[0], mvpL0[1]];
		end
	end

	checkMbType.isPSkipL1: action ==>
	guard
		mbType = BLOCK_TYPE_P_SKIP,
		not IsPredL0
	do
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0, 0];
		end
	end

	List(type: uint(size=11), size=2) Loc_Direct;

	checkMbType.isBSkipBDirect16x16: action
		COL_ZERO_FLAG      :[TabColZero] repeat 16,
		TEMPORAL_PRED_INFO :[temporalInfo] repeat 80
			==>
		DirectPredLX_Out :[ListDirectPred] repeat 16
	guard
		mbType = BLOCK_TYPE_B_SKIP or mbType = BLOCK_TYPE_B_DIRECT_16x16
	do
		uint(size=4) inverseScan4x4Tab[16] =
			[ 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15 ];

		List(type: bool, size=16) ListDirectPred;
		int(size=5) RefIdxLX_Direct;
		uint(size=4) idxOffset;
		uint(size=4) partitionIdx;

if DEBUG then
		foreach int i in 0 .. 15 do
			println("TabColZero["+ i + "] = " + TabColZero[i]);
		end
		foreach int i in 0 .. 79 do
			println("temporalInfo["+ i + "] = " + temporalInfo[i]);
		end
end		
		if(directSpatialMvPred)then // spatial prediction
			getNeighbourBlockParameters (0,16);
			RefIdxLX_Direct := minPositive(refIdxA,minPositive(refIdxB,refIdxC));
			directPredLx := (RefIdxLX_Direct >= 0);
			foreach int i in 0 .. 15
			do
				refIdxTab[mbLocxIdx + locXYToTabIdx[i]] := RefIdxLX_Direct;
				ListDirectPred[i]         := directPredLx;
			end
			foreach int i in 0 .. 3
			do
				foreach int j in 0 .. 3
				do
					partitionIdx := inverseScan4x4Tab[4*i+j];
					if(RefIdxLX_Direct < 0 or RefIdxLX_Direct = 0 and TabColZero[4*i+j])then
						mvTab[mbLocxIdx + locXYToTabIdx[partitionIdx]] := [0,0];
					else
						computeMvPredL0(RefIdxLX_Direct,refIdxA,refIdxB,refIdxC);
						mvTab[mbLocxIdx + locXYToTabIdx[partitionIdx]][0] := oMv[0];
						mvTab[mbLocxIdx + locXYToTabIdx[partitionIdx]][1] := oMv[1];
					end
				end
			end
		else //temporal prediction
			foreach int i in 0 .. 15
			do
				ListDirectPred[i] := true;
			end
			directPredLx := true;
			foreach int i in 0 .. 3
			do
				idxOffset :=
					if(IsPredL0) then
						16
					else
						48
					end;
				foreach int j in 0 .. 3
				do
					partitionIdx := inverseScan4x4Tab[4*i+j];
					refIdxTab[mbLocxIdx + locXYToTabIdx[partitionIdx]] :=
						if(IsPredL0)then
							temporalInfo[4*i+j]
						else
							0
						end;
					mvTab[mbLocxIdx + locXYToTabIdx[partitionIdx]][0] := temporalInfo[idxOffset + 2*(4*i+j)];
					mvTab[mbLocxIdx + locXYToTabIdx[partitionIdx]][1] := temporalInfo[idxOffset + 2*(4*i+j) +1];
				end
			end
		end
if DEBUG then
		foreach int i in 0 .. 15 do
			println("ListDirectPred["+ i + "] = " + ListDirectPred[i]);
		end
end
	end

	checkMbType.isOthers: action ==>
	guard
		mbType != BLOCK_TYPE_B_SKIP,
		mbType != BLOCK_TYPE_B_DIRECT_16x16
	do
		idxSubTab   :=
			if(mbIsBiPred(mbType)) then
				0
			else
				1
			end;
		foreach int i in 0 .. 15 do
			refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= -1;
			mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [0,0];
		end
	end

	GetOtherDirectPredLx: action
			DirectPredLX_In :[other_direct_pred_lx]repeat 16
				==>
		do
			if( (not directPredLx) and (not other_direct_pred_lx[0]))then
				foreach int i in 0 .. 15
				do
					refIdxTab[mbLocxIdx + locXYToTabIdx[i]] := 0;
				end
			end
			directPredLx := directPredLx or (not other_direct_pred_lx[0]);
		end

	SendMv4Direct.Launch: action
				==>
			LOCATION  :[ListLocation] repeat 32,
			MV_OUT     :[ListMv]       repeat 32,
			REF_IDX_OUT :[ListRefIdx]   repeat 16,
			IS_NEW_MB_PIC      :[[true : for int i in 1 .. 16]]    repeat 16,
			IS_NEW_MB_SLICE :[[true : for int i in 1 .. 16]]    repeat 16
		guard
			directPredLx
		var
			List(type: uint(size=11), size=32) ListLocation,
			List(type:  int(size=16), size=32) ListMv,
			List(type: uint(size=4) , size=16) ListRefIdx
		do
			foreach int mb_part_idx in 0 .. 3
			do
				foreach int sub_mb_part_idx in 0 .. 3
				do
					ListLocation[2* (4*mb_part_idx+sub_mb_part_idx)]     := mbXInPix + 8 *  (mb_part_idx&1) + 4 * (sub_mb_part_idx&1);
					ListLocation[2* (4*mb_part_idx+sub_mb_part_idx) + 1] := mbYInPix + 8 * ((mb_part_idx>>1)&1) + 4 * ((sub_mb_part_idx>>1)&1);
					ListMv[2* (4*mb_part_idx+sub_mb_part_idx)]           := mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][0];
					ListMv[2* (4*mb_part_idx+sub_mb_part_idx) + 1]       := mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][1];
					ListRefIdx[4*mb_part_idx+sub_mb_part_idx]            := refIdxTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]];
if DEBUG then
	println("mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][0] "+mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][0]);
	println("mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][1] "+mvTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]][1]);
	println("refIdxTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]] "+refIdxTab[mbLocxIdx + locXYToTabIdx[4 * mb_part_idx + sub_mb_part_idx]]);
end
				end
			end
		end

	SendMv4Direct.Skip: action ==>
		guard
			not directPredLx
		end

	SendSubMv4Direct.Launch: action
			DirectPredLX_In :[other_direct_pred_lx]
				==>
			LOCATION  :[Loc_Direct] repeat 2,
			MV_OUT     :[mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][0],mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][1]],
			REF_IDX_OUT :[refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]]],
			IS_NEW_MB_PIC  :[true], 
			IS_NEW_MB_SLICE:[true]
		guard
			directPredLx or (not other_direct_pred_lx)
		var
			uint Idx_Partition = 4*(mbPartIdx&3) + ((subMbPartIdx-1)&3)
		do
			if( (not directPredLx) and (not other_direct_pred_lx))then
				refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] := 0;
			end
if DEBUG then
	println("mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][0] "+mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][0]);
	println("mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][1] "+mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][1]);
	println("refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] "+refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]]);
end
		end

	SendSubMv4Direct.Skip: action
			DirectPredLX_In :[other_direct_pred_lx]
				==>
		guard
			not directPredLx and other_direct_pred_lx
		end

	ComputeMvLX.Launch16x16: action
			MB_PRED_REF_IDX :[RefIdxCurr],
			MB_PRED_MVD      :[mv_res] repeat 2
				==>
			LOCATION       :[mbXInPix,mbYInPix],
			MV_OUT         :[mvpL0] repeat 2,
			REF_IDX_OUT    :[RefIdxCurr],
			IS_NEW_MB_PIC  :[true],
			IS_NEW_MB_SLICE:[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_16x16
		var
			List(type: int(size=16), size=2) mvpL0
		do
			foreach int i in 0 .. 15
			do
				refIdxTab[mbLocxIdx + locXYToTabIdx[i]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (0,16);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0]:= oMv[0]+mv_res[0];
			mvpL0[1]:= oMv[1]+mv_res[1];

			foreach int i in 0 .. 15
			do
				mvTab[mbLocxIdx + locXYToTabIdx[i]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
if DEBUG then
			println("Launch16x16");
	println("LOCATION "+mbXInPix+ "; "+mbYInPix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeMvLX.Launch16x8: action
			MB_PRED_REF_IDX :[RefIdxCurr],
			MB_PRED_MVD  :[mv_res] repeat 2
				==>
			LOCATION        :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT          :[mvpL0] repeat 2,
			REF_IDX_OUT     :[RefIdxCurr],
			IS_NEW_MB_PIC   :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_16x8
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix = mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index
		do
			foreach int i in 0 .. 7
			do
				index := i + 8 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (8*(mbPartIdx&1),16);
			if(mbPartIdx = 0)then
				if(RefIdxCurr = refIdxB)then
					mvpL0 := [mvB[0],mvB[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];	
				end
			else
				Blk_y_in_pix := Blk_y_in_pix + 8;
				if(RefIdxCurr = refIdxA)then
					mvpL0 := [mvA[0],mvA[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			end

			mvpL0[0] := mvpL0[0] + mv_res[0];
			mvpL0[1] := mvpL0[1] + mv_res[1];

			foreach int i in 0 .. 7
			do
				index := i + 8 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
if DEBUG then
			println("Launch16x8");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeMvLX.Launch8x16: action
			MB_PRED_REF_IDX :[RefIdxCurr],
			MB_PRED_MVD      :[mv_res] repeat 2
				==>
			LOCATION        :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT          :[mvpL0] repeat 2,
			REF_IDX_OUT     :[RefIdxCurr],
			IS_NEW_MB_PIC   :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			mbPartIdx < mbPartIdxMax,
			   Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0,
			sizeMbMv = SZ_8x16
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix = mbYInPix,
			int index
		do
			foreach int i in 0 .. 3
			do
				index := i + 4 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end
			foreach int i in 8 .. 11
			do
				index := i + 4 * (mbPartIdx&1);
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (4*(mbPartIdx&1),8);
			if(mbPartIdx = 0)then
				if(RefIdxCurr = refIdxA)then
					mvpL0 := [mvA[0],mvA[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			else
				Blk_x_in_pix := Blk_x_in_pix + 8;
				if(RefIdxCurr = refIdxC)then
					mvpL0 := [mvC[0],mvC[1]];
				else
					computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);
					mvpL0 := [oMv[0],oMv[1]];
				end
			end

			mvpL0[0] := mvpL0[0] + mv_res[0];
			mvpL0[1] := mvpL0[1] + mv_res[1];

			foreach int i in 0 .. 3
			do
				index := i + 4 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end
			foreach int i in 8 .. 11
			do
				index := i + 4 * (mbPartIdx&1);
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			mbPartIdx := mbPartIdx + 1;
if DEBUG then
			println("Launch8x16");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeMvLX.Launch8x8: action
			SUB_MB_TYPE :[ValSubMbType]
				==>
		guard
			mbPartIdx < mbPartIdxMax,
			sizeMbMv = SZ_8x8
		do
			subMbPartIdx    := 0;
			subMbPartIdxMax := numSubMbPart(mbType,ValSubMbType);
			isPred4SubMb    :=    ((SubMbPartPredMode[idxSubTab][ValSubMbType & 15] & PRED_L0) != 0) and IsPredL0
			                   or ((SubMbPartPredMode[idxSubTab][ValSubMbType & 15] & PRED_L1) != 0) and not IsPredL0;
			sizeSubMbMv     := SizeSubMbPart(mbType,ValSubMbType);
			subMbType       := ValSubMbType;
		end

	ComputeMvLX.Skip: action
				==>
		guard
			mbPartIdx < mbPartIdxMax,
			not (    Mb_Is_PredL0(mbType, mbPartIdx) and IsPredL0
			      or Mb_Is_PredL1(mbType, mbPartIdx) and not IsPredL0),
			sizeMbMv != SZ_8x8
		do
			mbPartIdx := mbPartIdx + 1;
		end

	ComputeMvLX.Done: action ==>
		guard
			mbPartIdx = mbPartIdxMax
		end

	ComputeSubMvLX.Launch8x8: action
			SUB_MB_PRED_REF_IDX :[RefIdxCurr],
			SUB_MB_PRED_MVD  :[mv_res] repeat 2
				==>
			LOCATION        :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT          :[mvpL0]repeat 2,
			REF_IDX_OUT     :[RefIdxCurr],
			IS_NEW_MB_PIC   :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_8x8,
			SubMbPartPredMode[idxSubTab][subMbType & 15] != DIRECT
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1);

			foreach int i in 0 .. 3
			do
				index := 4 * (mbPartIdx&3) + i;
				refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			end

			getNeighbourBlockParameters (4*(mbPartIdx&3),8);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			foreach int i in 0 .. 3
			do
				index := 4 * (mbPartIdx&3) + i;
				mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			end

			subMbPartIdx := subMbPartIdx + 1;
if DEBUG then
			println("Launch8x8");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeSubMvLX.LaunchB_Direct_8x8: action
			COL_ZERO_FLAG      :[TabColZero],
			TEMPORAL_PRED_INFO :[temporalInfo] repeat 5
				==>
			DirectPredLX_Out :[directPredLx]
		guard
			subMbPartIdx < subMbPartIdxMax,
			sizeSubMbMv = SZ_4x4,
			SubMbPartPredMode[idxSubTab][subMbType & 15] = DIRECT
		var
			int(size=5) RefIdxLX_Direct,
			uint Idx_Partition = 4*(mbPartIdx&3) + (subMbPartIdx&3),
			uint(size=3) idxOff
		do
if DEBUG then
		println("TabColZero " + TabColZero);
		foreach int i in 0 .. 4 do
			println("temporalInfo["+ i + "] = " + temporalInfo[i]);
		end
end		
			Loc_Direct[0] := mbXInPix + 8 * (mbPartIdx&1) + 4*(subMbPartIdx&1);
			Loc_Direct[1] := mbYInPix + 8 * ((mbPartIdx>>1)&1) + 4* ((subMbPartIdx>>1)&1);

			if(directSpatialMvPred)then // spatial prediction
				getNeighbourBlockParameters (0,16);
				RefIdxLX_Direct := minPositive(refIdxA,minPositive(refIdxB,refIdxC));
				refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] := RefIdxLX_Direct;
				if(RefIdxLX_Direct < 0 or RefIdxLX_Direct = 0 and TabColZero)then
					mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] := [0,0];
				else
					computeMvPredL0(RefIdxLX_Direct,refIdxA,refIdxB,refIdxC);
					mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][0] := oMv[0];
					mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][1] := oMv[1];
				end
				directPredLx := (RefIdxLX_Direct >= 0);
			else //temporal prediction
				directPredLx := true;
				if(IsPredL0)then
					refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] := temporalInfo[0];
					idxOff := 1;
				else
					refIdxTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]] := 0;
					idxOff := 3;
				end
				mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][0] := temporalInfo[idxOff];
				mvTab[mbLocxIdx + locXYToTabIdx[Idx_Partition]][1] := temporalInfo[idxOff+1];
			end

			subMbPartIdx := subMbPartIdx + 1;
if DEBUG then
		println("directPredLx " +  directPredLx);
end		
		end

	ComputeSubMvLX.Launch8x4: action
			SUB_MB_PRED_REF_IDX :[RefIdxCurr],
			SUB_MB_PRED_MVD  :[mv_res] repeat 2
				==>
			LOCATION    :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT      :[mvpL0] repeat 2,
			REF_IDX_OUT :[RefIdxCurr],
			IS_NEW_MB_PIC      :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_8x4
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + 2 * (subMbPartIdx&1)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1) + 4 * (subMbPartIdx&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			refIdxTab[mbLocxIdx + locXYToTabIdx[index + 1]]:= RefIdxCurr;

			getNeighbourBlockParameters (4*(mbPartIdx&3) + 2*(subMbPartIdx&1),8);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];
			mvTab[mbLocxIdx + locXYToTabIdx[index + 1]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
if DEBUG then
			println("Launch8x4");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeSubMvLX.Launch4x8: action
			SUB_MB_PRED_REF_IDX :[RefIdxCurr],
			SUB_MB_PRED_MVD  :[mv_res] repeat 2
				==>
			LOCATION    :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT      :[mvpL0]repeat 2,
			REF_IDX_OUT :[RefIdxCurr],
			IS_NEW_MB_PIC   :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_4x8
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + (subMbPartIdx&1)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1) + 4 * (subMbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			refIdxTab[mbLocxIdx + locXYToTabIdx[index + 2]]:= RefIdxCurr;
	
			getNeighbourBlockParameters (4*(mbPartIdx&3) + 1*(subMbPartIdx&1),4);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0] := oMv[0]+mv_res[0];
			mvpL0[1] := oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:=  [mvpL0[0],mvpL0[1]];
			mvTab[mbLocxIdx + locXYToTabIdx[index + 2]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
if DEBUG then
			println("Launch4x8");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeSubMvLX.Launch4x4: action
			SUB_MB_PRED_REF_IDX :[RefIdxCurr],
			SUB_MB_PRED_MVD  :[mv_res] repeat 2
				==>
			LOCATION   :[Blk_x_in_pix,Blk_y_in_pix],
			MV_OUT     :[mvpL0]repeat 2,
			REF_IDX_OUT  :[RefIdxCurr],
			IS_NEW_MB_PIC   :[true],
			IS_NEW_MB_SLICE :[true]
		guard
			subMbPartIdx < subMbPartIdxMax,
			isPred4SubMb,
			sizeSubMbMv = SZ_4x4
		var
			List(type: int(size=16), size=2) mvpL0,
			uint(size=11) Blk_x_in_pix := mbXInPix,
			uint(size=11) Blk_y_in_pix := mbYInPix,
			int index = 4 * (mbPartIdx&3) + (subMbPartIdx&3)
		do
			Blk_x_in_pix := Blk_x_in_pix + 8 * (mbPartIdx&1) + 4 * (subMbPartIdx&1);
			Blk_y_in_pix := Blk_y_in_pix + 8 * ((mbPartIdx>>1)&1) + 4 * ((subMbPartIdx>>1)&1);

			refIdxTab[mbLocxIdx + locXYToTabIdx[index]]:= RefIdxCurr;
			

			getNeighbourBlockParameters (4*(mbPartIdx&3) + 1*(subMbPartIdx&3),4);
			computeMvPredL0(RefIdxCurr,refIdxA,refIdxB,refIdxC);

			mvpL0[0]:= oMv[0]+mv_res[0];
			mvpL0[1]:= oMv[1]+mv_res[1];

			mvTab[mbLocxIdx + locXYToTabIdx[index]]:= [mvpL0[0],mvpL0[1]];

			subMbPartIdx := subMbPartIdx + 1;
if DEBUG then
			println("Launch4x4");
	println("LOCATION "+Blk_x_in_pix+ "; "+Blk_y_in_pix);
	println("MV_OUT "+mvpL0[0]+ "; "+mvpL0[1]);
	println("REF_IDX_OUT "+RefIdxCurr);
end		
		end

	ComputeSubMvLX.Skip: action ==>
	guard
		subMbPartIdx < subMbPartIdxMax,
		not isPred4SubMb,
		SubMbPartPredMode[idxSubTab][subMbType & 15] != DIRECT
	do
		subMbPartIdx := subMbPartIdx + 1;
	end

	ComputeSubMvLX.Done: action ==>
	guard
		subMbPartIdx = subMbPartIdxMax
	do
		mbPartIdx := mbPartIdx + 1;
	end
	
	updateTab: action ==>
	do
	end

	schedule fsm GetMbType:
		UpdateTab (updateTab   )--> GetMbType;
		GetMbType (getNewPic   )--> GetMbType;
		GetMbType (getNewSlice )--> GetMbType;
		GetMbType (GetMbType   )--> CheckMbType;

		CheckMbType (checkMbType.isIorSI   )--> UpdateTab;
		CheckMbType (checkMbType.isPSkipL0 )--> UpdateTab;
		CheckMbType (checkMbType.isPSkipL1 )--> UpdateTab;
		CheckMbType (checkMbType.isBSkipBDirect16x16 )--> GetOtherDirectPredLx;
		CheckMbType (checkMbType.isOthers  )--> ComputeMvpL0;

		GetOtherDirectPredLx (GetOtherDirectPredLx )--> SendMv4Direct;
		SendMv4Direct        (SendMv4Direct        )--> UpdateTab;

		ComputeMvpL0 (ComputeMvLX.Skip        )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch16x16 )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch16x8  )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch8x16  )--> ComputeMvpL0;
		ComputeMvpL0 (ComputeMvLX.Launch8x8   )--> ComputeSubMvpL0;
		ComputeMvpL0 (ComputeMvLX.Done        )--> UpdateTab;

		ComputeSubMvpL0 (ComputeSubMvLX.Launch8x8 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.LaunchB_Direct_8x8 )--> SendSubMv4Direct;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch8x4 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch4x8 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Launch4x4 )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Skip      )--> ComputeSubMvpL0;
		ComputeSubMvpL0 (ComputeSubMvLX.Done      )--> ComputeMvpL0;

		SendSubMv4Direct (SendSubMv4Direct )--> ComputeSubMvpL0;
	end

	priority
		checkMbType.isIorSI   > checkMbType.isOthers;
		checkMbType.isPSkipL0 > checkMbType.isOthers;
		checkMbType.isPSkipL1 > checkMbType.isOthers;
		checkMbType.isBSkipBDirect16x16 > checkMbType.isOthers;
		getNewPic             > getNewSlice > GetMbType;
	end
end