/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the ISO/IEC 23002-5 for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the ISO/IEC 23002-5  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/

//Modified by Jerome Gorin, IETR/ARTEMIS <gorinje@gmail.com>
//Modified by Damien de Saint Jorre, EPFL <damien.desaintjorre@epfl.ch>
//Modified by Gildas Cocherel, IETR/INSA of Rennes (France)
package org.sc29.wg11.mpeg4.part10.php.intraPred;

import std.util.BitOps.*;

actor Mgnt_Intra_8x8 ()
	uint(size=4) PRED_MODE,
	uint(size=8) EDGE,
	uint(size=8) MB_8X8,
	bool         NEIGHBOUR
		==> 
	bool         AVAIL,
	uint(size=4) PRED_MODE8,
	uint(size=8) Y_LEFT,
	uint(size=8) Y_UP,
	uint(size=8) Y_UP_LEFT,
	uint(size=8) Y_UP_RIGHT
	:  
	//Token counter
	int (size=6) mb_counter            := 0;
	//List that contains the neighbouring pixel of the current 16x16 Mb, from bottom to top then left to right 
	uint(size=8) left_16x16_edge[16]   := [ 0 : for int i in 0 .. 15];
  	uint(size=8) topLeft_16x16_edge    :=   0;
  	uint(size=8) top_16x16_edge[24]    := [ 0 : for int i in 0 .. 23];
    //List that contains the edge of the previous 8x8 Mb predicted 
	uint(size=8) bottom_8x8_edge[16]   := [ 0 : for int i in 0 .. 15];
	uint(size=8) right_8x8_edge[8]     := [ 0 : for int i in 0 ..  7];
	uint(size=8) bottomRight_8x8_edge  :=   0;
	// Available 8x8 edge for prediction [left, top, top left, top right]
	bool         avail[4]              := [ false : for int i in 0 ..  3];
	// Available 16x16 edge for prediction
	bool         left_16x16_avail      :=   false;
	bool         top_16x16_avail       :=   false;
	bool         topLeft_16x16_avail   :=   false;
	bool         topRight_16x16_avail  :=   false;
	bool         topLeft_8x8_avail[4]  := [ false : for int i in 0 ..  3];
	bool         topRight_8x8_avail[4] := [ false : for int i in 0 ..  3];
	/**************************************************************************
	 * Mb_Type_OK : Enable the prediction
	 *************************************************************************/
	MbTypeOK:action
		NEIGHBOUR:[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail],
	  	PRED_MODE      :[v] repeat 4
	  		==>
		PRED_MODE8   :[v] repeat 4
	do
		//Initialize counter
		mb_counter           := 0;
		//Set 16x16 the available edge
		left_16x16_avail     := NeighbourA_Avail;
		top_16x16_avail      := NeighbourB_Avail;
		topRight_16x16_avail := NeighbourC_Avail;
		topLeft_16x16_avail  := NeighbourD_Avail;
		//Set available edge for each 4x4 mb
		topLeft_8x8_avail    := [ topLeft_16x16_avail, top_16x16_avail, 
		 						  left_16x16_avail   , true			  ];
		topRight_8x8_avail   := [ top_16x16_avail    , topRight_16x16_avail,
	     						  true               , false               ];
	end
	/**************************************************************************
	 * Receive the value of the 16x16 Mb neighbouring pixel 
	 * from bottom to top, then corner, then left to right
	 *************************************************************************/
	EdgeNeighbour:action EDGE:[v] repeat 41 ==> 
	do
		//Store left, top, top left and top right border  
		left_16x16_edge    := [v[s]:for int s in  0 .. 15];
		topLeft_16x16_edge :=  v[16];
		top_16x16_edge     := [v[s]:for int s in 17 .. 40];
	end
	/**************************************************************************
	 * Select and send available edge
	 *************************************************************************/
	AvailEdge:action ==> AVAIL:[avail] repeat 4
	guard
		mb_counter < 4
	do 	
		//8x8 edge available for left
		avail[0] := if (mb_counter & 1) = 0 then left_16x16_avail else true end;
		//8x8 edge available for top
		avail[1] := if mb_counter < 2 then top_16x16_avail else true end;
		//8x8 edge available for top left
		avail[2] := topLeft_8x8_avail[mb_counter];
		//8x8 edge available for top right
		avail[3] := topRight_8x8_avail[mb_counter]; 
	end
	/**************************************************************************
	 * End of every process, wait for the next mb_type 
	 *************************************************************************/
	EndEdge:action ==>
	guard
		mb_counter = 4,
		avail[0]   = false,
		avail[1]   = false,
		avail[2]   = false,
		avail[3]   = false
	end
	/**************************************************************************
	 * Left neighbour from 16x16 edge
	 *************************************************************************/
	SendEdge.LeftEdge16:action ==> Y_LEFT:[[left_16x16_edge[((mb_counter>>1)&1)*8 + i]: for int i in 0 .. 7] ] repeat 8
	guard 
	  	avail[0] and (mb_counter & 1) = 0
	do
		avail[0] := false;
	end 
	/**************************************************************************
	 * Left neighbour from 8x8 edge
	 *************************************************************************/
	SendEdge.LeftEdge8:action ==> Y_LEFT:[ [right_8x8_edge[s]: for int s in 0 .. 7] ] repeat 8
	guard 
		avail[0] and (mb_counter & 1) != 0
	do
		avail[0] := false;
	end 
	/**************************************************************************
	 * Top neighbour from 16x16 edge
	 *************************************************************************/
  	SendEdge.TopEdge16:action ==> Y_UP:[ [top_16x16_edge[mb_counter*8 + i]: for int i in 0 .. 7] ] repeat 8
	guard 
	  	avail[1] and mb_counter < 2
	do
		avail[1] := false;
	end
	/**************************************************************************
	 * Top neighbour from 8x8 edge
	 *************************************************************************/
	SendEdge.TopEdge8:action ==> Y_UP:[ [bottom_8x8_edge[(mb_counter&1)*8 + i]: for int i in 0 .. 7] ] repeat 8
	guard 
		avail[1] and mb_counter > 1
	do
		avail[1] := false;
	end
	/**************************************************************************
	 * Top right neighbour from 16x16 edge
	 *************************************************************************/
  	SendEdge.TopRightEdge16:action ==> Y_UP_RIGHT:[ [top_16x16_edge[(mb_counter+1)*8 + i]: for int i in 0 .. 7] ] repeat 8
	guard 
	  	avail[3] and mb_counter < 2
	do
		avail[3] := false;
	end
	/**************************************************************************
	 * Top right neighbour from 8x8 edge
	 *************************************************************************/
	SendEdge.TopRightEdge8:action ==> Y_UP_RIGHT:[ [bottom_8x8_edge[i]: for int i in 8 .. 15] ] repeat 8
	guard 
		avail[3] and mb_counter = 2
	do
		avail[3] := false;
	end
	/**************************************************************************
	 * Up Left neighbour 
	 *************************************************************************/
	SendEdge.TopLeftEdge8:action ==> Y_UP_LEFT:[v]
	guard 
		avail[2]
	var
		uint(size=8) v
	do
 		v :=if mb_counter = 0 then
  				topLeft_16x16_edge
  			else 
  				if  mb_counter = 1 then
					top_16x16_edge[7]
				else 
					if mb_counter = 2 then
						left_16x16_edge[7]
  					else
  		 				bottomRight_8x8_edge
  		 			end
  		 		end
  		 	end;
		avail[2] := false;
	end
	/**************************************************************************
	 * Receive pixel value from the previous 8x8 Mb Predicted and store its edge
	 *************************************************************************/
	StoreEdge:action MB_8X8:[v] repeat 64 ==> 
	guard
		avail[0] = false,
		avail[1] = false,
		avail[2] = false,
		avail[3] = false
	do
		//Store bottom , right and bottom right edge
		bottomRight_8x8_edge := bottom_8x8_edge[7];
		foreach int i in 0 .. 7
		do
			bottom_8x8_edge[i + (mb_counter&1)*8]:= v[i+7*8];
		end
		right_8x8_edge := [v[i*8-1]:for int i in 1 .. 8];
		mb_counter     := mb_counter +1;  
	end 
	/**************************************************************************
	 * schedule
	 *************************************************************************/
	schedule fsm Mb_Type:
		// Mb_Type state
		Mb_Type     	(MbTypeOK		)--> EdgeNeighbour;
		// EdgeNeighbour state
		EdgeNeighbour	(EdgeNeighbour	)--> AvailEdge;
		// AvailEdge state
		AvailEdge		(AvailEdge		)--> Process;
		AvailEdge		(EndEdge		)--> Mb_Type;
		// Process state
		Process    		(SendEdge		)--> Process;
		Process      	(StoreEdge		)--> AvailEdge;		
	end
	
	priority
		EndEdge > StoreEdge > SendEdge;
		SendEdge.LeftEdge16>SendEdge.TopEdge16>SendEdge.LeftEdge8>SendEdge.TopEdge8>SendEdge.TopRightEdge16>SendEdge.TopRightEdge8>SendEdge.TopLeftEdge8;
	end  
end