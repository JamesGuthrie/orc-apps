/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.sc29.wg11.mpeg4.part10.php.interPred;

import org.sc29.wg11.mpeg4.part10.MacroBlockInfo.*;
import org.sc29.wg11.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_FrameNumToPocList()
	int (size=32) DEL_LIST,
	bool          EMPTY_DPB,
	uint(size=31) FRAME_NUM,
	uint(size=6)  MB_TYPE,
	int (size=32) LT,
	int (size=32) POC,
	int (size=32) REF_LIST0,
	int (size=32) REF_LIST1
		==>
	int (size=32)  POC_LISTX,
	bool           POC_IS_LT
		:

	int (size=32) SENT_DONE = -2;

	bool          isReference[17];
	int (size=32) listFrameNum[17];
	bool          isLTList[17];
	int (size=32) listPicOrdCnt[17];

	uint(size=5) idxL0[16];
	uint(size=5) idxL1[16];

	uint(size=5)  refListIdx;
	uint(size=5)  refListSize;
	uint(size=5)  writeListIdx;

	action MB_TYPE:[isMb] ==>
	guard
		isMb < NEW_SLICE
	end

	ChckPicOrSlc.isPic: action MB_TYPE:[isPic] ==>
	guard
		isPic  >= NEW_FRAME_NON_IDR
	end

	ChckPicOrSlc.isSlc: action MB_TYPE:[isSlice], EMPTY_DPB:[dummy] ==>
	guard
		isSlice = NEW_SLICE
	end

	getPicData: action FRAME_NUM:[frameNum], POC:[poc] ==>
	do
		foreach int i in 0 .. 16
		do
			if(listFrameNum[i] = frameNum)then
				isReference[i] := false;
			end
		end

		writeListIdx := 0;
		while(isReference[writeListIdx] and writeListIdx < 16)
		do
			writeListIdx := writeListIdx + 1;
		end

		isReference [writeListIdx]  := true;
		listFrameNum[writeListIdx]  := frameNum;
		listPicOrdCnt[writeListIdx] := poc;
	end

	readSizeRefList0: action REF_LIST0 :[sizeRefList] ==>
	do
		refListSize := sizeRefList;
		refListIdx  := 0;
		foreach int i in 0 .. 15
		do
			idxL0[i] := 0;
			idxL1[i] := 0;
		end
	end

	readRefList0.launch: action REF_LIST0 :[refFrame0] ==>
	guard
		refListIdx < refListSize
	do
		foreach int readListIdx in 0 .. 16
		do
			if(refFrame0 = listFrameNum[readListIdx] and isReference[readListIdx])then
				idxL0[refListIdx] := readListIdx;
			end
		end
		refListIdx := refListIdx + 1;
	end

	readRefList0.done: action ==>
	guard
		refListIdx = refListSize
	end

	readSizeRefList1: action REF_LIST1 :[SizeRefList] ==>
	do
		refListSize := SizeRefList;
		refListIdx  := 0;
	end

	readRefList1.launch: action REF_LIST1:[refFrame1] ==>
	guard
		refListIdx < refListSize
	do
		foreach int readListIdx in 0 .. 16
		do
			if(refFrame1 = listFrameNum[readListIdx] and isReference[readListIdx])then
				idxL1[refListIdx] := readListIdx;
			end
		end
		refListIdx := refListIdx + 1;
	end

	readRefList1.done: action ==>
	guard
		refListIdx = refListSize
	end

	readLTList: action LT :[lTList] repeat 16 ==>
	do
		foreach int i in 0 .. 16
		do
			isLTList[i] := false;
		end
		foreach int i in 0 .. 15
		do
			foreach int readListIdx in 0 .. 16
			do
				if(lTList[i] = listFrameNum[readListIdx])then
					isLTList[readListIdx] := true;
				end
			end
		end
	end

	readDelList.launch: action DEL_LIST:[delFrame] ==>
	guard
		delFrame != SENT_DONE
	do
		foreach int i in 0 .. 16
		do
			if(delFrame = listFrameNum[i] and i != writeListIdx)then
				isReference[i] := false;
			end
		end
	end

	readDelList.done: action DEL_LIST :[delVal], EMPTY_DPB:[emptyList] ==>
	guard
		delVal = SENT_DONE
	do
		if(emptyList)then
			foreach int i in 0 .. 16
			do
				if(i != writeListIdx) then
					isReference[i] := false;
				end
			end
		end
	end

	sendWeightsWpIdc2.info: action ==> POC_LISTX:[pocListX] repeat 33, POC_IS_LT:[pocIsLT] repeat 32
	var
		int(size=32) pocListX[33],
		bool         pocIsLT[32]
	do
		pocListX[0] := listPicOrdCnt[writeListIdx];
		foreach int i in 0 .. 15
		do
			pocListX[i+1]  := listPicOrdCnt[idxL0[i]];
			pocListX[i+17] := listPicOrdCnt[idxL1[i]];
			pocIsLT[i]    := isLTList[idxL0[i]];
			pocIsLT[i+16] := isLTList[idxL1[i]];
		end
	end

	schedule fsm GetFirstPic:
		GetFirstPic (ChckPicOrSlc.isPic )--> GetPicData;
		ChckPicOrSlc (ChckPicOrSlc.isSlc )--> GetPicData;
		ChckPicOrSlc (ChckPicOrSlc.isPic )--> ReadDelList;

		ReadDelList       (readDelList.launch )--> ReadDelList;
		ReadDelList       (readDelList.done   )--> GetPicData;

		GetPicData (getPicData )--> ReadSizeRefList0;
		
		ReadSizeRefList0 (readSizeRefList0    )--> ReadRefList0;
		ReadRefList0     (readRefList0.launch )--> ReadRefList0;
		ReadRefList0     (readRefList0.done   )--> ReadSizeRefList1;

		ReadSizeRefList1 (readSizeRefList1    )--> ReadRefList1;
		ReadRefList1     (readRefList1.launch )--> ReadRefList1;
		ReadRefList1     (readRefList1.done   )--> ReadLTList;

		ReadLTList        (readLTList         )--> SendWeightsWpIdc2;
		SendWeightsWpIdc2 (sendWeightsWpIdc2  )--> ChckPicOrSlc;
	end
end