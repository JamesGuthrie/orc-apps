/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-4.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
* (2) to develop the ISO/IEC 23002-4: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-4 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-4.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-4 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-4
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/
/********************
* Mgnt_MVR_MedianOfThreeLeftAndTopAndTopRight.cal
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
*******************************/


package org.sc29.wg11.mpeg4.part2.parser;
import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Mgnt_MVR_MedianOfThreeLeftAndTopAndTopRight () 
	int(size=MB_COORD_SZ+ 3) A,
	bool FOUR_MV, 
	int(size=VOP_FCODE_FOR_LENGTH +1) FCODE, 
	bool MOTION, 
	int(size=MV_SZ) MVIN, 
	int (size=4) BTYPE, // defined as VOPMODE 
	int(size=16) WIDTH
	 ==> int(size=MV_SZ) MV :

	// Motion vector line buffers - pointer behavior must be implemented exactly as in MVSequence.cal
	int(size=MB_COORD_SZ) mbx := 0;
	// Current macroblock x position
	bool top_edge := true;
	// Top edge macroblock flag
	int(size=4) comp := 0;

	int(size=MB_COORD_SZ) mbwidth := 0;
	// Macroblock width of current vop

	// A0, A1 used for component index.

	// A2 used to select y vs x.

	// Also, locations 0-7 are reserved for all blocks without motion vectors. This protocol

	// must be identical to the buffer addressing in MVSequence.cal which generates pointers.

	// MAXW_IN_MB MUST BE A POWER OF 2, and no more than 2**(MB_COORD_SZ-4).
	int BUF_SIZE = MAXW_IN_MB * 8;

	int(size=4) Y_SELECT = 4;

	int(size=MB_COORD_SZ + 3) ptr;

	List(type: int(size=MV_SZ), size=BUF_SIZE) buf := [ 0 : for int i in 1 ..
	BUF_SIZE ];

	int(size=MV_SZ) mv_rsize;

	int(size=MV_SZ) mv_range;

	int(size=MV_SZ) mv_low;

	int(size=MV_SZ) mv_high;
	// New VOP
	start: action BTYPE:[ newvop ] ==>
	guard
		newvop = NEWVOP
	end
	
	fcode : action FCODE:[ fcode ] ==>
	do
		mbx := 0;
		top_edge := true;
		comp := 0;
		// compute if this is a P_VOP
		if fcode > 0 then
			mv_rsize := fcode - 1;
			mv_range := (1 << (mv_rsize + 5));
			mv_low := -mv_range;
			mv_high := mv_range - 1;
			mv_range := (mv_range << 1);
		end
	end

	getw: action WIDTH:[ w ] ==>
	do
		mbwidth := w;
		ptr := 8;
		// Start at 8, since 0-7 are reserved

	end
	// No motion vector
	read.noMotion: action MOTION:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==>
	guard
		btype!=1 or not mot
	var
		int(size=MB_COORD_SZ + 3) p = (ptr | comp)
	do
		if comp < 4 then
			buf[p] := 0;
			buf[(p | Y_SELECT)] := 0;
		end
	end

	bool fourmv;
	// Motion vectors - detect fourmv
	read.motion: action MOTION:[mot], BTYPE:[btype], FOUR_MV:[four_mv] ==>
	guard
		btype=1,
		mot
	do
		if comp = 0 then
			fourmv := four_mv;
			sum_x := 0;
			sum_y := 0;
		end
	end
	// Return the middle of three values
	function middle(int a, int b, int c) --> int :
		if a < b then
			if a > c then
				a
			else
				if b < c then
					b
				else
					c
				end
			end
		else
			if b > c then
				b
			else
				if a < c then
					a
				else
					c
				end
			end
		end
	end

	int(size=MB_COORD_SZ + 3) aptr;

	int(size=MB_COORD_SZ + 3) bptr;

	int(size=MB_COORD_SZ + 3) cptr;

	int(size=MV_SZ) apred;

	int(size=MV_SZ) bpred;

	int(size=MV_SZ) cpred;
	// No need to compute any more MVs for chroma or for luma blocks > 1 if not fourmv
	compute.done: action ==>
	guard
		comp > 3 or (comp != 0 and not fourmv)
	end
	// Compute MVs for all Y components in FOURMV mode, otherwise just one

	// Invoke 3 times to get all the prediction pointers
	compute.start: action A:[ a ] ==>
	do
		aptr := bptr;
		bptr := cptr;
		cptr := a;
	end
	// Invoke 3 times to get the X predictions, 3 more times to get the Y predictions
	get_pred: action ==>
	var
		int(size=MB_COORD_SZ + 3) t = aptr
	do
		apred := bpred;
		bpred := cpred;
		cpred := buf[t];
		aptr := bptr;
		bptr := cptr;
		cptr := (t | Y_SELECT);
	end

	do_pred: action ==>
	do
		if comp >= 2 or not top_edge then
		// When two or more of the predictors exist, take the middle of all three

		// The non-existent one will default to 0. When there are less than two

		// predictors, a will contain the value or a 0 default.
			apred := middle(apred, bpred, cpred);
		end
	end
	// Compute the MVs - written so that same actions used for both x,y
	int(size=MV_SZ) mag;

	int(size=MV_SZ) mv_x;

	int(size=MV_SZ) mv_y;

	int(size=MV_SZ + 2) sum_x;

	int(size=MV_SZ + 2) sum_y;

	get_mag: action MVIN:[ m ] ==>
	do
		mag := m;
	end

	function mvcalc(int pred, int mv_mag, int mag_shift) --> int :
		if mv_rsize = 0 or mv_mag = 0 then
			pred + mv_mag
		else
			if mv_mag < 0 then
				pred - mag_shift
			else
				pred + mag_shift
			end
		end
	end

	function mvclip(int v) --> int :
		if v < mv_low then
			v + mv_range
		else
			if v > mv_high then
				v - mv_range
			else
				v
			end
		end
	end

	bool x_flag; /*
  get_residual: action MVIN:[s] ==>
  var
    int(size=MV_SZ) shift = lshift( if mag < 0 then ~(mag) else mag - 1 end, mv_rsize) + s + 1,
    int(size=MV_SZ) mv1 = mvcalc( apred, mag, shift ),
    int(size=MV_SZ) mv =  mvclip( mv1 ),
    int(size=MV_SZ+2) sum = sum_x + mv
  do
    // Run a delay line so that x, y can be computed from the same action chain
    mv_x := mv_y;
    mv_y := mv;
    // Similarly, keep a running total for use in fourmv mode
    sum_x := sum_y;
    sum_y := sum;
    x_flag := true;
  end
*/
	int(size=MV_SZ) res_shift;

	get_residual.init: action ==>
	do
		res_shift := if mag < 0 then
			~(mag)
		else
			mag - 1
		end;
	end

	get_residual.shift: action ==>
	var
		int(size=MV_SZ) count := mv_rsize
	do
		while count > 0 do
			res_shift := (res_shift << 1);
			count := count - 1;
		end
	end

	get_residual.adjust: action MVIN:[ s ] ==>
	do
		res_shift := res_shift + s + 1;
	end

	get_residual.calc: action ==>
	do
		res_shift := mvcalc(apred, mag, res_shift);
	end

	get_residual.clip: action ==>
	do
		res_shift := mvclip(res_shift);
	end

	get_residual.final: action ==>
	var
		int(size=MV_SZ + 2) sum = sum_x + res_shift
	do
	// Run a delay line so that x, y can be computed from the same action chain
		mv_x := mv_y;
		mv_y := res_shift;
		// Similarly, keep a running total for use in fourmv mode
		sum_x := sum_y;
		sum_y := sum;
		x_flag := true;
	end

	write.luma: action ==> MV:[ t ]
	guard
		comp < 4
	var
		int(size=MB_COORD_SZ + 3) p = (ptr | comp) , int(size=MV_SZ) t = mv_x
	do
		buf[p | (if x_flag then
			0
		else
			Y_SELECT
		end)] := mv_x;
		mv_x := mv_y;
		mv_y := t;
		x_flag := not x_flag;
	end

	function uvclip_1(int v) --> int
	var
		int vv = (v >> 1) :
		vv | (if (v & 3) = 0 then
			0
		else
			1
		end)
	end

	function uvclip_4(int v) --> int
	var
		bool sign = v < 0,
		int absv = if sign then
			-v
		else
			v
		end,
		int resv = (absv - ((absv >> 4) << 4)),
		// resv := |v|%16
		int delta = if resv < 3 then
			0
		else
			if resv > 13 then
				2
			else
				1
			end
		end,
		int vv = ((absv >> 4) << 1) + delta :
		if sign then
			-vv
		else
			vv
		end
	end
	// Written to be called four times in succession ( u.x, u.y, v.x, v.y )
	write.chroma: action ==> MV:[ mv ]
	var
		int(size=MV_SZ) mv = if fourmv then
			uvclip_4(sum_x)
		else
			uvclip_1(sum_x)
		end , int(size=MV_SZ) t = sum_x
	do
		sum_x := sum_y;
		sum_y := t;
	end

	advance: action ==>
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
			mbx := mbx + 1;
			if mbx = mbwidth then
				top_edge := false;
			end
			ptr := if ptr = 8 then
				BUF_SIZE - 8
			else
				ptr - 8
			end;
		end
	end

	schedule fsm read :
		read ( start ) --> fcode;		
		read ( read.motion ) --> compute;
		read ( read.noMotion ) --> advance;
		fcode ( fcode ) --> getw;
		getw ( getw ) --> read;
		compute ( compute.start ) --> get_pred_p;
		compute ( compute.done ) --> write;
		get_pred_p ( compute.start ) --> get_pred_p1;
		get_pred_p1 ( compute.start ) --> get_pred_x;
		get_pred_x ( get_pred ) --> get_pred_x1;
		get_pred_x1 ( get_pred ) --> get_pred_x2;
		get_pred_x2 ( get_pred ) --> do_pred_x;
		do_pred_x ( do_pred ) --> get_mag_x;
		get_mag_x ( get_mag ) --> get_res_x;
		// get_res_x   ( get_residual  ) --> get_pred_y;
		get_res_x ( get_residual.init ) --> get_res_x_a;
		get_res_x_a ( get_residual.shift ) --> get_res_x_b;
		get_res_x_b ( get_residual.adjust ) --> get_res_x_c;
		get_res_x_c ( get_residual.calc ) --> get_res_x_d;
		get_res_x_d ( get_residual.clip ) --> get_res_x_e;
		get_res_x_e ( get_residual.final ) --> get_pred_y;
		get_pred_y ( get_pred ) --> get_pred_y1;
		get_pred_y1 ( get_pred ) --> get_pred_y2;
		get_pred_y2 ( get_pred ) --> do_pred_y;
		do_pred_y ( do_pred ) --> get_mag_y;
		get_mag_y ( get_mag ) --> get_res_y;
		// get_res_y   ( get_residual  ) --> write;
		get_res_y ( get_residual.init ) --> get_res_y_a;
		get_res_y_a ( get_residual.shift ) --> get_res_y_b;
		get_res_y_b ( get_residual.adjust ) --> get_res_y_c;
		get_res_y_c ( get_residual.calc ) --> get_res_y_d;
		get_res_y_d ( get_residual.clip ) --> get_res_y_e;
		get_res_y_e ( get_residual.final ) --> write;
		write ( write ) --> write_y;
		write_y ( write ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.noMotion > read.motion;
		compute.done > compute.start;
		write.luma > write.chroma;
	end

end