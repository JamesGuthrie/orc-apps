  
/*************************************************************************
This software module was originally developed by 
dandanding(dandan2036@163.com) (Zhejiang University and EPFL)
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.
*************************************************************************/

//Name:VLD_mv.cal
//Data:04.04.2008
//function: Decode the mv syntax for MPEG-4 SP(table B12).
//modify:2008-6-1 8:47
//*change input bits datatype to bool.
//*change output finish to bool.


package org.sc29.wg11.mpeg4.part2.sp.parser.vlc;
import std.util.BitOps.* ;

actor Algo_VLDtableB12_MPEG4part2() 
  bool BITS ==> bool FINISH, int(size=VLD_DATA_SZ) DATA:

  int VLD_DATA_SZ=32;
  int VLD_ADDR_SZ=32;
  int START_INDEX = 0;
  int( size=VLD_ADDR_SZ ) vld_index;
  int( size=VLD_DATA_SZ ) vld_codeword := 1;

  List( type:int( size=VLD_DATA_SZ ), size=144 ) vld_table = [
10, 0, 18, 570, 26, 562, 34, 554, 42, 514, 50, 426, 58, 306, 66, 250, 74, 194, 82, 170, 90, 146, 98, 122, 106, 114, 2, 1, 1, 1, 130, 138, 1, 1, 1, 1, 154, 162, 128, -128, 124, -124, 178, 186, 120, -120, 116, -116, 202, 226, 210, 218, 112, -112, 108, -108, 234, 242, 104, -104, 100, -100, 258, 282, 266, 274, 96, -96, 92, -92, 290, 298, 88, -88, 84, -84, 314, 370, 322, 346, 330, 338, 80, -80, 76, -76, 354, 362, 72, -72, 68, -68, 378, 402, 386, 394, 64, -64, 60, -60, 410, 418, 56, -56, 52, -52, 434, 506, 442, 482, 450, 474, 458, 466, 48, -48, 44, -44, 40, -40, 490, 498, 36, -36, 32, -32, 28, -28, 522, 546, 530, 538, 24, -24, 20, -20, 16, -16, 12, -12, 8, -8, 4, -4
];

  procedure start_vld_engine( int index )
  begin
    vld_index := index;
    vld_codeword := 2;
  end

  function vld_success() --> bool: bitand(vld_codeword,3) = 0 end
  function vld_continue() --> bool: bitand(vld_codeword,3) = 2 end
  function vld_failure() --> bool: bitand(vld_codeword,1) = 1 end
  function vld_result() --> int( size=VLD_DATA_SZ ): rshift(vld_codeword,2) end

  start_VLD: action ==>
  do
    start_vld_engine( START_INDEX );
  end

  read_in_bits: action BITS:[b] ==>
  do
    vld_codeword := vld_table[ vld_index + if b then 1 else 0 end ];
    vld_index := rshift(vld_codeword,2);
  end

  continue_VLD: action ==> FINISH:[f]
  guard
    vld_continue() 
  var
    bool f := false
  end

  fail_VLD: action ==>
  guard
    vld_failure()
  do
    println("VLD FAILURE");
  end

  finish_VLD: action ==> FINISH:[f], DATA:[d]
  guard
    vld_success()
  var
    bool f := true,
    int(size=VLD_DATA_SZ) d := vld_result()
  end

  schedule fsm start_VLD:
    start_VLD       ( start_VLD    ) --> read_in_bits;
    read_in_bits    ( read_in_bits ) --> process;
    process         ( continue_VLD ) --> read_in_bits;
    process         ( fail_VLD     ) --> start_VLD;
    process         ( finish_VLD   ) --> start_VLD;
  end

end

