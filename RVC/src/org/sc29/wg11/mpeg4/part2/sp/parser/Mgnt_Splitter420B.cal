/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-5.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
* (2) to develop the ISO/IEC 23002-5: 
* 
* Xilinx Inc. Corporation grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-5 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-5.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-5 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-5
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/
/***********************
*  splitter_420_B
*
* Created By:  David B. Parlour (dave.parlour@xilinx.com)
* Modified by: Andrew Kinane (kinanea@eeng.dcu.ie)
* 
* Description: This module splits a 4:2:0 chroma subsampled serial macroblock (YYYYUV)
*              into its respective Y, U and V components.
**********************/

package org.sc29.wg11.mpeg4.part2.sp.parser;

import org.sc29.wg11.mpeg4.part2.Constants.*;
import org.sc29.wg11.mpeg4.part2.ConstantsBtype.*;

actor Mgnt_Splitter420B () 
	int(size=SAMPLE_SZ) B, 
	bool ACCODED, 
	uint (size=4) BTYPE 
	==> 
		int(size=SAMPLE_SZ) B_Y,
		int(size=SAMPLE_SZ) B_U, 
		int(size=SAMPLE_SZ) B_V
 :


	int(size=4) comp := 0;

	//         comp layout
	//      Y         U       V
	//  +---+---+   +---+   +---+
	//  | 0 | 1 |   | 4 |   | 5 |
	//  +---+---+   +---+   +---+
	//  | 2 | 3 | 
	//  +---+---+  

	
	skip_newvop: action BTYPE:[btype] ==>
	guard
		btype = NEWVOP
	end

	skip_uncoded: action ACCODED:[ac_coded], BTYPE:[btype] ==>
	guard
		btype=1,
		// An INTER block
		not ac_coded 
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
		end
	end

	skip_other: action ACCODED:[ac_coded], BTYPE:[btype] 
	==>
	guard
		// Not an INTER or INTRA block
		btype=0
		
	do
		comp := comp + 1;
		if comp = 6 then
			comp := 0;
		end
	end

	splitY: action ACCODED:[ac_coded], BTYPE:[btype], B:[ x ] repeat BLOCK_SIZE ==>B_Y:[ x ] repeat BLOCK_SIZE 
	guard
		comp < 4
	do
		comp := comp + 1;
	end

	splitU: action  ACCODED:[ac_coded], BTYPE:[btype], B:[ x ] repeat BLOCK_SIZE ==>B_U:[ x ] repeat BLOCK_SIZE
	guard
		comp = 4
	do
		comp := comp + 1;
	end

	splitV: action  ACCODED:[ac_coded], BTYPE:[btype],  B:[ x ] repeat BLOCK_SIZE ==> B_V:[ x ] repeat BLOCK_SIZE
	guard
		comp = 5
	do
		comp := 0;
	end

	// 4:2:0 schedule.
	schedule fsm READ :
		READ ( skip_newvop ) --> READ;
		READ ( skip_uncoded ) --> READ;
		READ ( skip_other ) --> READ;
		READ ( splitY ) --> READ;
		READ ( splitU ) --> READ;
		READ ( splitV ) --> READ;
	end

	priority
		skip_newvop > skip_uncoded > skip_other > splitY > splitU > splitV;
	end

end
