  
/*************************************************************************
This software module was originally developed by 
dandanding(dandan2036@163.com) (Zhejiang University and EPFL)
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.
*************************************************************************/

//Name:VLD_cbpy.cal
//Data:04.04.2008
//function: Decode the cbpy syntax for MPEG-4 SP(table B8).
//modify:2008-6-1 8:47
//*change input bits datatype to bool.
//*change output finish to bool.

package org.sc29.wg11.mpeg4.part2.sp.parser.vlc;
import std.util.BitOps.* ;

actor Algo_VLDtableB8_MPEG4part2() 
  bool BITS ==> bool FINISH, int(size=VLD_DATA_SZ) DATA:

  int VLD_DATA_SZ=32;
  int VLD_ADDR_SZ=32;

  int START_INDEX = 0;
  int( size=VLD_ADDR_SZ ) vld_index;
  int( size=VLD_DATA_SZ ) vld_codeword := 1;

  List( type:int( size=VLD_DATA_SZ ), size=34 ) vld_table = [
10, 106, 18, 82, 26, 66, 34, 58, 42, 50, 1, 1, 24, 36, 32, 16, 74, 0, 8, 4, 90, 98, 48, 40, 56, 20, 114, 60, 122, 130, 52, 12, 44, 28
];

  procedure start_vld_engine( int index )
  begin
    vld_index := index;
    vld_codeword := 2;
  end

  function vld_success() --> bool: bitand(vld_codeword,3) = 0 end
  function vld_continue() --> bool: bitand(vld_codeword,3) = 2 end
  function vld_failure() --> bool: bitand(vld_codeword,1) = 1 end
  function vld_result() --> int( size=VLD_DATA_SZ ): rshift(vld_codeword,2) end

  start_VLD: action ==>
  do
    start_vld_engine( START_INDEX );
  end

  read_in_bits: action BITS:[b] ==>
  do
    vld_codeword := vld_table[ vld_index + if b then 1 else 0 end ];
    vld_index := rshift(vld_codeword,2);
  end

  continue_VLD: action ==> FINISH:[f]
  guard
    vld_continue() 
  var
    bool f := false
  end

  fail_VLD: action ==>
  guard
    vld_failure()
  do
    println("VLD FAILURE");
  end

  finish_VLD: action ==> FINISH:[f], DATA:[d]
  guard
    vld_success()
  var
    bool f := true,
    int(size=VLD_DATA_SZ) d := vld_result()
  end

  schedule fsm start_VLD:
    start_VLD       ( start_VLD    ) --> read_in_bits;
    read_in_bits    ( read_in_bits ) --> process;
    process         ( continue_VLD ) --> read_in_bits;
    process         ( fail_VLD     ) --> start_VLD;
    process         ( finish_VLD   ) --> start_VLD;
  end
end


