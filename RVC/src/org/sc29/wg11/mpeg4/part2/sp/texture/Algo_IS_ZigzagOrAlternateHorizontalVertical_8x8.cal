/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-4.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
* (2) to develop the ISO/IEC 23002-4: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-4 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-4.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-4 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-4
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/

/**************************************
*  Algo_IS_ZigzagOrAlternateHorizontalVertical_8x8
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
*
* Input :: Start --> values 0(zz scan),1(alt vert),2(alt horiz)
* Input :: QFS_AC  --> Ac coefficients in encoding order
* Output:: PQF_AC --> Ac coeffs in raster order
* Example 0,  1,  5,  6..... ==> 0, 1, 2, 3....
* Actors: 
* Skip --> No Start token
* Start -->     token on AC_PRED_DIR --> add_buf; InvScan mode received bofore AC coeffs
* read_only --> tokens on Ac --> buf ;fired only when the sample buffer is empty
* write_only -->Ac in buf --> PQF_AC in raster order; fired only when there are on fresh tokens on AC_PRED_DIR
* read_write -->tokens on QFS_AC --> buf ; AC coeffs in buf --> PQF_AC; fired only when buf is full and tokens are available on AC_PRED_DIR
* done --> done reading or writing or both (64 AC coeffs) --> fired when count is 64
*/
package org.sc29.wg11.mpeg4.part2.sp.texture;

import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Algo_IS_ZigzagOrAlternateHorizontalVertical_8x8 () 
	int(size=3) AC_PRED_DIR, 
	int(size=SAMPLE_SZ) QFS_AC 
		==>
		int(size=SAMPLE_SZ) PQF_AC :


	List(type: int(size=7), size=192) Scanmode = [ 0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29,
	42, //0:63 zigzag
	3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38
	, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63, 0, 4, 6, 20, 22, 36, 38,
	52, 1, 5, 7, 21, 23, 37, 39, 53, //64:127 Alt vert
	2, 8, 19, 24, 34, 40, 50, 54, 3, 9, 18, 25, 35, 41, 51, 55, 10, 17, 26, 30, 42, 46, 56, 60, 11, 16, 27, 31,
	43, 47, 57, 61, 12, 15, 28, 32, 44, 48, 58, 62, 13, 14, 29, 33, 45, 49, 59, 63, 0, 1, 2, 3, 10, 11, 12, 13,
	4, 5, 8, 9, 17, 16, 15, 14, //128:191 Alt Horiz
	6, 7, 19, 18, 26, 27, 28, 29, 20, 21, 24, 25, 30, 31, 32, 33, 22, 23, 34, 35, 42, 43, 44, 45, 36, 37, 40,
	41, 46, 47, 48, 49, 38, 39, 50, 51, 56, 57, 58, 59, 52, 53, 54, 55, 60, 61, 62, 63 ];

	int BUF_SIZE = 128;

	int(size=8) count := 1;

	//Holds number of Ac coeffs read in or written out
	int(size=9) addr;

	//Inverse Scan base address from list Scanmode for current block of 64 Ac coeffs --> 0;64;128 // JWJ: increased size of addr
	int(size=3) add_buf;

	//Inverse Scan for next block of 64 Ac coeffs 0;1;2
	List(type: int(size=SAMPLE_SZ), size=BUF_SIZE) buf;

	//Stores incoming Ac coeffs 128 divided to 64::64
	bool half := false;

	//flag to change buffer
	function wa() --> int :
		(count & 63) | if half then	64 else 0 end //if half =0 writes to 0-63 else to 64-128
	end

	function ra(int address) --> int :
		(address & 63) | if half then 0 else 64 end //if half =1 reads from 0-63 else from 64-128
	end

	skip: action AC_PRED_DIR:[ i ] ==> //Wait for a valid Inverse Scan
	guard
		i < 0 //0 --> ZZ; 1-->Alternate Vertical; 2 --> Alternate Horiz
	end

	start: action AC_PRED_DIR:[ i ] ==>
	guard
		i >= 0
	do
		add_buf := i;
		//Inverse Scan for next block
	end

	done: action ==> //Done reading or writing 64 ac coeffs
	guard
		count = 64
	do
		count := 1;
		//reset count
		half := not half;
		//point to other hapl of the buffer
		addr := if add_buf = 0 then
			0
		else
			if add_buf = 1 then
				64
			else
				128
			end
		end;
		//List Scanmode pointer for current inv scan for current block
	end

	// If there is not a block in the buffer already, just read in the block
	read_only: action QFS_AC:[ ac ] ==>
	guard
		count < 64
	do
		buf[wa()] := ac;
		//ac coeff in buffer --buf
		count := count + 1;
		//inc count
	end

	// If there is a block in the buffer already but no new arrival, just write it out
	write_only: action ==> PQF_AC:[ buf[ra(Scanmode[addr])] ]
	guard
		count < 64
	do
		addr := addr + 1;
		//points to next ceffs address
		count := count + 1;
	end

	// If there is a block in the buffer already and new arrival, read and write it out
	read_write: action QFS_AC:[ ac ] ==> PQF_AC:[ buf[ra(Scanmode[addr])] ]
	guard
		count < 64
	do
		buf[wa()] := ac;
		count := count + 1;
		addr := addr + 1;
		//println("read in" + buf + "written out" + buf[ ra(Scanmode[ addr] ) ]);
	end

	schedule fsm rest :
		rest ( skip ) --> rest;
		//no fired actors
		rest ( start ) --> read;
		read ( read_only ) --> read;
		read ( done ) --> full;
		write ( write_only ) --> write;
		write ( done ) --> rest;
		full ( skip ) --> write;
		full ( start ) --> both;
		both ( read_write ) --> both;
		both ( done ) --> full;
	end

	priority
		skip > start;
		done > read_only;
		done > write_only;
		done > read_write;
	end

end