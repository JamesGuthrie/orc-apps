/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-4.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
* (2) to develop the ISO/IEC 23002-4: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-4 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-4.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-4 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-4
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/
/*************************************
*  Mgnt_FB_w_Address_16X16.cal
*
* Author: David B. Parlour (dave.parlour@xilinx.com)
*
* Modified by: Christophe Lucarz (christophe.lucarz@epfl.ch)
*
* Modified by: Carl von Platen (carl.von.platen@ericsson.com) 
*              Ericsson AB, 2009
*              Integrated frame buffer with address generation
*
*********************************/ 

package org.sc29.wg11.mpeg4.part2.sp.motion;

import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Mgnt_FB_w_Address_16X16 ()
	int(size=16) HEIGHT, 
	bool MOT,
	int(size=MV_SZ) MV,
	bool ROUND, 
	int(size=16) WIDTH, 
	int (size=4)BTYPE,
    int(size=PIX_SZ) WD 
   	==>
   int(size=FLAG_SZ) halfpel, int(size=PIX_SZ) RD :

  // Frame buffer
  //  * sized for max width, max height + half the search window.
  //  * pixels are written/read ring-buffer fashion
  //  * write pointer leads by half the search window to prevent
  //    over-writing motion comp pixels from the last frame
  //  * luma, chroma_u, chroma_v components are separated
  //  * addressing is pixel-based [x + w * y]

  int SAMPLES_PER_MB   = 16;
  int COMP_PER_MB      = 4; // 8x8 blocks/MB

  int MAXW_IN_SAMPLES  = MAXW_IN_MB * SAMPLES_PER_MB;
  int MAXH_IN_SAMPLES  = MAXH_IN_MB * SAMPLES_PER_MB;
  int MAX_FRAME_SIZE   = MAXW_IN_SAMPLES * MAXH_IN_SAMPLES;

  
  int HALF_SEARCH      = (SEARCHWIN_IN_MB+1)/2;
  int EXTRA_SPACE      = HALF_SEARCH * SAMPLES_PER_MB * MAXW_IN_SAMPLES;

  int BUFFER_SIZE      = MAX_FRAME_SIZE+EXTRA_SPACE;

  // Note: size is a multiple of SAMPLES_PER_MB*MAXW_IN_SAMPLES
  // (a complete row of macro blocks). Testing for buffer wrap-around
  // is only necessary when a complete row has been processed.

  List(type:int(size=PIX_SZ), size=BUFFER_SIZE) frameBuffer;

  // Removed initializer (otherwise: huge XLIM document results)
  // List(type:int(size=PIX_SZ), size=BUFFER_SIZE) frameBuffer = 
  // [ 0 : for i in 1 .. BUFFER_SIZE]
  
  // properties of the VOP
  int vop_width := 0;             // width in macro blocks
  int vop_height := 0;            // height in macro blocks
  int vop_width_in_samples := 0;  // width in samples
  int vop_height_in_samples := 0; // height in samples
  int vop_rounding_mode := 0;     // rounding mode: 0,1 
  int max_outstanding_writes :=0; // Maximum number of outstanding
                                  // writes (unit: 8x8 blocks) before
                                  // we risk "read-before-write" 
  int start_of_frame := -1;       // Origin in current frame 
  
  // reading from the frame buffer
  int mbx_read := 0;              // Macro-block column:  0,...,MAXW_IN_MB-1
  int mby_read := 0;              // Macro-block row: 0,...,MAXH_IN_MB-1
  int comp_read := 0;             // 8x8-block within MB: 0,...,COMP_PER_MB-1
  int(size=MV_SZ) mvx;            // Motion vector x
  int(size=MV_SZ) mvy;            // Motion vector y
 
  // writing to the frame buffer
  int mb_write_ptr := 0;          // position in frame buffer
  int outstanding_writes := 0;    // number of outstanding block writes
                                  // (used to keep in synch with reads)
  int mbx_write := 0;             // Macro-block column: 0,...,MAXW_IN_MB-1
  int comp_write := 0;            // 8x8-block within MB: 0,...,COMP_PER_MB-1

  // offset of luma blocks
  int UNUSED32 = 0x7FFFFFFF;      // To make SsaGenerator see this as int32_t
  List(type:int, size=5) comp_offset = [
    0, 8, 8*MAXW_IN_SAMPLES, 8+8*MAXW_IN_SAMPLES,UNUSED32];


  // Move pointers to next block
  procedure advance_block()
  begin
    // We are ready to commit one more block
    outstanding_writes := outstanding_writes + 1;

    // Advance to next block
    comp_read := comp_read + 1;
    
    if (comp_read = COMP_PER_MB) then
      comp_read := 0;
      mbx_read := mbx_read + 1;

      if (mbx_read=vop_width) then
        mbx_read := 0;
        mby_read := mby_read + 1;
      end
    end
  end


  // Start a new VOP by setting VOP parameters and initializing the block scan
  cmd.newVop: action BTYPE:[ cmd ] ==>
  guard
    cmd = NEWVOP
  end

  read_w_h: action WIDTH:[ w ], HEIGHT:[ h ], ROUND:[round] ==>
  var
    int last_frame_size = vop_height*SAMPLES_PER_MB*MAXW_IN_SAMPLES    
  do
    vop_width := w;
    vop_height := h;
    vop_width_in_samples := w*SAMPLES_PER_MB;
    vop_height_in_samples := h*SAMPLES_PER_MB;
    vop_rounding_mode := if round then 1 else 0 end;

    // Compute the maximum number of writes that can be "outstanding"
    // before we risk reading a block before it is written:
    // the total number of 8x8 blocks in a frame less half the searchwin.
    max_outstanding_writes := (vop_height - HALF_SEARCH)*vop_width*COMP_PER_MB;

    // Advance to next frame
    mbx_read := 0;
    mby_read := 0;
    comp_read := 0;

    if (last_frame_size!=0) then
      start_of_frame := start_of_frame + last_frame_size;
    else
      // First VOP
      start_of_frame := BUFFER_SIZE - vop_height*16*MAXW_IN_SAMPLES;
    end

    // Handle wrap-around
    if (start_of_frame>=BUFFER_SIZE) then
      start_of_frame := start_of_frame - BUFFER_SIZE;
    end

    // println("New VOP at "+start_of_frame);
    // println("Max outstanding="+max_outstanding_writes);
  end

  // Pure texture
  cmd.noMotion: action BTYPE:[ cmd ], MOT:[mot] ==>
  guard
    (cmd = INTRA)
  do
    advance_block();
  end


  // Pure motion
  cmd.motion: action BTYPE:[ cmd ], MOT:[mot] ==>
  guard
    mot, cmd = INTER
  end


  // Encode flags on halfpel: bit2 = interp. x
  //                          bit1 = interp. y
  //                          bit0 = round
  read_mv: action MV:[x,y] ==> halfpel:[ flags ]
  var
    int(size=FLAG_SZ) flags = ((x & 1) << 2) +
                              ((y & 1) << 1) +
                              vop_rounding_mode
  do
    mvx := (x >> 1);
    mvy := (y >> 1);
  end


  // No change in the block
  cmd.neither: action BTYPE:[ cmd ], MOT:[mot] ==> halfpel:[ 0 ]
  do
    mvx := 0;
    mvy := 0;
  end


  // Read one 9x9 block from the frame buffer
  read_fb: action ==> RD:[rd] repeat 81
  guard outstanding_writes < max_outstanding_writes
  var
    List(type:int(size=9), size=81) rd := [0: for int k in 1 .. 81],
    int x = mbx_read*SAMPLES_PER_MB + 8*(comp_read & 1) + mvx,
    int y := mby_read*SAMPLES_PER_MB + 8*(comp_read >> 1) + mvy,
    int clip_left := 0,
    int clip_right := 0,
    int clip_x := x,
    int clip_y = if (y<0) then 0 
                 else if (y<vop_height_in_samples) then y 
                      else vop_height_in_samples-1 end
                 end,
    int start_of_row,
    int addr,
    int i,
    int end_i,
    int temp
  do
    // clip x-coordinate: 0 <= clip_x < width_in_samples
    //                    0 <= clip_left  <= 9
    //                    0 <= clip_right <= 8
    if (x<0) then
      clip_x:=0;
      clip_left:=if x< -9 then 9 else -x end;
    else 
      if (x+9 > vop_width_in_samples) then
        if (x>=vop_width_in_samples) then
           clip_x:=vop_width_in_samples-1;
           clip_right:=8; // 8 (not 9) to get at least one "normal" copy 
        else
	   clip_right:=x + 9 - vop_width_in_samples;
        end
      end
    end

    // Compute start address
    start_of_row := start_of_frame + clip_y*MAXW_IN_SAMPLES + clip_x;

    // Handle wrap-around
    if (start_of_row>=BUFFER_SIZE) then
      start_of_row := start_of_row - BUFFER_SIZE;
    end

    i:=0;
    while (i<81) do
      // First clip negative x:es
      if (clip_left!=0) then
        end_i := i + clip_left;
        temp := frameBuffer[start_of_row];
        while (i<end_i) do
          rd[i] := temp;
          i:=i+1;
        end
      end

      // copy from frame buffer to RD
      addr := start_of_row;
      end_i:= i + 9 - clip_left - clip_right;
      while (i<end_i) do
        rd[i] := frameBuffer[addr];
        i := i + 1;
        addr := addr + 1;
      end

      // then, possibly, clip to right border
      if (clip_right!=0) then
      	 end_i:= i + clip_right;
         temp := frameBuffer[addr-1];
         while (i<end_i) do
           rd[i] := temp;
           i:=i+1;
         end
      end

      // Advance row (unless we're clipping)
      y := y + 1;
      if (y>0 and y<vop_height_in_samples) then
      	 start_of_row := start_of_row + MAXW_IN_SAMPLES;

         // Handle wrap-around
         if (start_of_row>=BUFFER_SIZE) then
           start_of_row := start_of_row - BUFFER_SIZE;
         end
      end
    end

    // Advance to next block
    advance_block();
  end


  // free-running write to frame buffer is driven by token availability
  action WD:[wd] repeat 64 ==>
  guard outstanding_writes>=1 // not to let *writes* get ahead of reads
                              // which can be caused by "texture only"
  var
    // Offset (0, 8, 8*Width or 8+8*Width) of selected by comp
    int addr := mb_write_ptr + comp_offset[comp_write],
    int i,
    int nextRow
  do
    
    i:=0;
    while (i<64) do
      nextRow:=i+8;
      while (i<nextRow) do
        frameBuffer[addr] := wd[i];
        addr := addr + 1;
        i := i + 1;
      end
      addr := addr + (MAXW_IN_SAMPLES-8);
    end

    // Advance component to write
    outstanding_writes := outstanding_writes - 1;
    comp_write := comp_write + 1;

    if (comp_write = COMP_PER_MB) then
      // Advance macro block
      mbx_write := mbx_write + 1;
      mb_write_ptr := mb_write_ptr + SAMPLES_PER_MB;
      comp_write := 0;

      if (mbx_write=vop_width) then
        // Advance to next row of macro blocks
        mbx_write:=0;
        mb_write_ptr := mb_write_ptr 
                      - SAMPLES_PER_MB*vop_width
                      + SAMPLES_PER_MB*MAXW_IN_SAMPLES;
    
        // Check for wrap-around (buffer multiple of MB rows)
        if (mb_write_ptr=BUFFER_SIZE) then
          mb_write_ptr:=0;
        end                
      end
    end
  end


  schedule fsm cmd:
    cmd          ( cmd.newVop    ) --> read_w_h;
    cmd          ( cmd.noMotion  ) --> cmd;
    cmd          ( cmd.motion    ) --> read_mv;
    cmd          ( cmd.neither   ) --> read_fb;

    read_w_h     ( read_w_h )      --> cmd;

    read_mv      ( read_mv )       --> read_fb;

    read_fb      ( read_fb       ) --> cmd;
  end

  priority
    cmd.newVop   > cmd.noMotion > cmd.motion   > cmd.neither;
  end

end
