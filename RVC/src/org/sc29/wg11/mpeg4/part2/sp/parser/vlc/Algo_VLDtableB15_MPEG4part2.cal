  
/*************************************************************************
This software module was originally developed by 
dandanding(dandan2036@163.com) (Zhejiang University and EPFL)
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.
*************************************************************************/

//Name:VLD_dct_dc_diff.cal
//Data:04.04.2008
//function: Decode the VLD_dct_dc_difficial syntax for MPEG-4 SP(table B15).
//modify:2008-6-1 8:47
//*change input bits datatype to bool.
//*change output finish to bool.

package org.sc29.wg11.mpeg4.part2.sp.parser.vlc;

import org.sc29.wg11.mpeg4.part2.Constants.*;
import std.util.BitOps.* ;

actor Algo_VLDtableB15_MPEG4part2(
) 
  bool BITS,
  int(size=VLD_DATA_SZ) DCT_DC_SIZE
  ==> bool FINISH, int(size=SAMPLE_COUNT_SZ) RUN, int(size=SAMPLE_SZ) VALUE, bool LAST:

  int VLD_DATA_SZ=32;

  int(size=5) dc_bits;
  int(size=14) msb_result;
  int(size=7) bits_to_read_count := -1;
  int(size=33) read_result_in_progress;
  
  procedure set_bits_to_read( int count )
  begin
    bits_to_read_count := count - 1;
    read_result_in_progress := 0;
  end
  
  function done_reading_bits() --> bool: bits_to_read_count < 0 end
  function read_result() --> int: read_result_in_progress end

  get_dc_bits.none: action DCT_DC_SIZE:[dc_size] ==> FINISH:[f], RUN:[0], VALUE:[0], LAST:[false]
  guard
    dc_size = 0
  var
    bool f := true
  end

  get_dc_bits.some: action DCT_DC_SIZE:[dc_size] ==>
  guard
    dc_size != 0
  do
    dc_bits := dc_size;
    set_bits_to_read(dc_bits);
  end
 
  dc_bits_shift: action ==>
  var
    int(size=5) count := dc_bits,
    int(size=14) shift := 1
  do
    while count > 1 do
      shift := lshift( shift, 1 );
      count := count - 1;
    end
    msb_result := shift;
  end
  
  read_bits: action BITS:[b] ==>
  do
    read_result_in_progress := bitor( lshift( read_result_in_progress, 1), if b then 1 else 0 end);
    bits_to_read_count := bits_to_read_count - 1;
  end
  
  finish_bits: action ==> FINISH:[f]
  guard 
    not done_reading_bits()
  var
    bool f := false
  end

  get_dc: action ==> FINISH:[f], RUN:[0], VALUE:[v], LAST:[false]
  guard
    done_reading_bits()
  var
    int(size=14) v := read_result(),
    bool f := true
  do
    if bitand( v, msb_result ) = 0 then
      v := v + 1 - lshift( msb_result, 1 );
    end   
  end

  schedule fsm get_dc_bits:
    get_dc_bits       ( get_dc_bits.none    ) --> get_dc_bits;
    get_dc_bits       ( get_dc_bits.some    ) --> dc_bits_shift;
    dc_bits_shift     ( dc_bits_shift       ) --> read_bits;
    read_bits         ( read_bits           ) --> cal_dc;
    cal_dc            ( finish_bits         ) --> read_bits;
    cal_dc            ( get_dc              ) --> get_dc_bits;
  end

end
