/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-4.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
* (2) to develop the ISO/IEC 23002-4: 
* 
* Xilinx Inc.  grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-4 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-4.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-4 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-4
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/

/***************************************
* Algo_DCRInvPred_CHROMA_8x8
* Created By:  David B. Parlour (dave.parlour@xilinx.com)
* Modified By: Andrew Kinane (kinanea@eeng.dcu.ie)
*         
*
* Functionality:
* This module reconstructs the DC coefficient of the current 8x8 block based on the
* gradients between neighbouring block DC coefficients (see ISO/IEC 14496-2). This 
* module also forwards the decoded prediction direction to the inverse AC prediction
* (IAP) module and a pointer to the neighbouring block used for the prediction. Since
* inverse quantisation is necessary to reconstruct the DC coefficient, the decoded 
* quantisation parameter is forwarded to the inverse quantisation module.
*
* Input Ports:
* ============
* int(size=BTYPE_SZ) BTYPE
* This input token specifies the coding mode of the current 8x8 block. When executing, 
* the first 3 BTYPE tokens of a VOP relate to global parameters of the VOP. The first BTYPE 
* token indicates a new VOP, and the subsequent two BTYPE tokens indicate the width and the 
* height of the VOP in macroblocks respectively. All subsequent BTYPE tokens for the VOP 
* specify the coding mode of the current 8x8 block. For details on the structure of the
* BTYPE token, refer to ParseHeaders.cal
*
* int(size=MB_COORD_SZ) A
* The address of the 8x8 block neighbour to the left of the current 8x8 block.
*
* int(size=MB_COORD_SZ) B
* The address of the 8x8 block neighbour to the above left of the current 8x8 block.
*
* int(size=MB_COORD_SZ) C
* The address of the 8x8 block neighbour to the above of the current 8x8 block.
*
* int(size=SAMPLE_SZ) QFS_DC
* The decoded prediction of the current block DC coefficient
*
* Output Ports:
* =============
* int(size=SAMPLE_SZ) QF_DC
* The reconstructed DC coefficient of the current block.
*
* int(size=MB_COORD_SZ+2) PTR
* The address of the 8x8 block used for the prediction in the encoder.
*
* int(size=3) AC_PRED_DIR
* A flag to communicate the direction of prediction to the IAP block but also info
* about the scan mode of the block to the inverse scan block
* AC_PRED_DIR = -2 => NEWVOP flag
* AC_PRED_DIR = -1 => An uncoded block so skip inverse AC prediction
* AC_PRED_DIR =  0 => No inverse AC prediction but use zig zag inverse scan
* AC_PRED_DIR =  1 => Prediction form the left and use alternate vertical scan
* AC_PRED_DIR =  2 => Prediction form the top and use alternate horizontal scan
*
* bool SIGNED
* A flag to indicate to the IDCT module that the block is either INTER or INTRA.
* This is used when saturating the reconstructed pixels if necessary.
* 
* int(size=QUANT_SZ) QUANT
* This is the decoded value of the flag 'quantiser_scale' . See see ISO/IEC 14496-2.
*
* Modifications:
* * Re-named output port START to AC_PRED_DIR
* * Function dc_scaler() is now luminance specific. 
* * In advance action, indices adjust after every component instead of 6 since now
*   dealing with a single 8x8 block rather than 6 8x8 blocks.
***********************************/
package org.sc29.wg11.mpeg4.part2.sp.texture.dc_reconstruction;

import org.sc29.wg11.mpeg4.part2.Constants.*;
import org.sc29.wg11.mpeg4.part2.ConstantsBtype.*;

actor Algo_DCRInvPred_CHROMA_8x8 () 
	int(size=MB_COORD_SZ) A, 
	int(size=MB_COORD_SZ) B,
	int(size=MB_COORD_SZ) C, 
	bool AC_CODED, 
	bool AC_PRED, 
	int(size=SAMPLE_SZ) QFS_DC, 
	int(size=QUANT_SZ) QP, 
	int (size=4)BTYPE, 
	int(size=16) WIDTH
	==>
		int(size=SAMPLE_SZ) QF_DC, 
		int(size=MB_COORD_SZ) PTR, 
		int(size=3) AC_PRED_DIR, 
		bool SIGNED, 
		int(size=QUANT_SZ) QUANT, 
		int(size=QUANT_SZ) PREV_QUANT :

	// Use 3 address lines for component index to save address calculation effort
	// Also, location 0 is reserved for all uncoded blocks. This protocol must
	// be identical to the buffer addressing in Reconstruct.cal, since pointer
	// values are passed on ports A, B, C.   
	int SCALER_SZ = 7;

	// Bitwidth needed for 'dc_scalar' - see ISO/IEC 14496-2
	int(size=QUANT_SZ) s_qp;

	// Decoded 'quantiser_scale' - see ISO/IEC 14496-2 
	int(size=QUANT_SZ) s_prev_qp;

	// Decoded previous 'quantiser_scale' 
	int(size=2) round;

	// Flag to indicate whether 'quantiser_scale' is even or odd            
	int BUF_SIZE = (MAXW_IN_MB + 2);

	// Have 4 8x8 blocks per MB                                             
	int ptr := 1;

	// Pointer to current 8x8 block on current row                          
	// using circular buffer addressing. Start at 4, since 0-3 are reserved.
	// Initialize to the dummy values needed for uncoded blocks (always mapped to index 0)
	List(type: int(size=SAMPLE_SZ), size=BUF_SIZE) dc_buf := [ DCVAL : for int k in 1 .. BUF_SIZE ];

	int(size=SAMPLE_SZ) dc_pred;

	// Decoded DC prediction value          
	int(size=SCALER_SZ) scaler;

	// Decoded 'dc_scalar'                  
	bool is_signed;

	// Flag to indicate INTER or INTRA block
	int(size=SAMPLE_SZ) dc_val;

	// Reconstructed DC coefficient  
	List(type: int(size=QUANT_SZ), size=BUF_SIZE) buf_qp := [ 0 : for int k in 1 .. BUF_SIZE ];

	int(size=MB_COORD_SZ) mbwidth := 0;

	// Macroblock width of current vop
	int cnt := 0;

	// Pointer to current 8x8 block
	// Check for NEWVOP flag
	// A -ve means there is no data, so the inverse zigzag may flush its buffer
	start: action BTYPE:[ newvop ] ==> AC_PRED_DIR:[ -2 ]
	guard
		newvop = NEWVOP
	do
		ptr := 1;
	end

	// Used to get Width BTYPE token
	getw: action WIDTH:[ w ] ==>
	do
		mbwidth := w;
	end

	// Check for an INTER block with coded AC coefficients
	read.inter_ac: action AC_CODED:[ac_coded],AC_PRED:[acp], QP:[ qp ], BTYPE:[btype] ==> AC_PRED_DIR:[ 0 ], PTR:[ 0 ], SIGNED:[ true ], QUANT:[ s_qp ], PREV_QUANT:[ s_prev_qp ]
	guard
		btype=1, ac_coded
	do
		s_qp := qp;
		round := ((s_qp & 1) ^ 1);
		is_signed := true;
		s_prev_qp := s_qp;
		buf_qp[cnt] := s_qp;
	end

	// Any other block except INTRA
	read.other: action BTYPE:[btype], AC_CODED:[ac_coded], AC_PRED: [acp], QP:[ qp ] ==> AC_PRED_DIR:[ -1 ]
	guard
		btype!=2
	end

	// Function to return absolute value
	function abs(int x) --> int :
		if x < 0 then
			(-x)
		else
			x
		end
	end

	// Calculate DC scaler for INTRA blocks
	// Note that this function is specific to chrominance 8x8 blocks!!!
	function dc_scaler() --> int(size=SCALER_SZ) :
	// UV component
		if s_qp > 0 and s_qp < 5 then
			8
		else
			if s_qp > 4 and s_qp < 25 then
				(s_qp + 13) >> 1
			else
				s_qp - 6
			end
		end
	end

	// Read an INTRA block
	read.intra: action BTYPE:[btype], AC_CODED:[ac_coded], AC_PRED:[acp], QP:[ qp ], A:[ a ], B:[ b ], C:[ c ] ==> PTR:[ if top then
			c
		else
			a
		end ], AC_PRED_DIR:[ s ], SIGNED:[ is_signed ], QUANT:[ s_qp ], PREV_QUANT:[ s_prev_qp ]
	var
		int(size=SAMPLE_SZ) dca = dc_buf[a] , int(size=SAMPLE_SZ) dcb = dc_buf[b] ,
		int(size=SAMPLE_SZ) dcc = dc_buf[c] , int(size=SAMPLE_SZ) horiz = abs(dcb - dcc) ,
		int(size=SAMPLE_SZ) vert = abs(dca - dcb) , bool top = vert < horiz , int(size=3) s
	do
		s_qp := qp;
		s_prev_qp := s_qp;
		round := ((s_qp & 1) ^ 1);
		scaler := dc_scaler();
		dc_pred := ((if top then
			dcc
		else
			dca
		end) + (scaler >> 1)) / scaler;
		s := if not acp then
			0
		else
			if top then
				2
			else
				1
			end
		end;
		is_signed := scaler = 0;
		if (s = 2) then
			s_prev_qp := buf_qp[cnt];
		end
		if (s = 1) and (cnt >= 1) then
			s_prev_qp := buf_qp[cnt - 1];
		end
		buf_qp[cnt] := s_qp;
	end

	// Do dequant on INTER block DC
	getdc.inter: action QFS_DC:[ dc ] ==>
	var
		int(size=SAMPLE_SZ) v = (s_qp * ((abs(dc) << 1) + 1)) - round
	do
		dc_val := if dc = 0 then
			0
		else
			if not is_signed then
				dc
			else
				if dc < 0 then
					-v
				else
					v
				end
			end
		end;
	end

	// Do prediction on INTRA block DC
	getdc.intra: action QFS_DC:[ dc ] ==>
	do
		dc_val := (dc + dc_pred) * scaler;
	end

	function saturate(int x) --> int
	var
		bool minus = x < -2048,
		bool plus = x > 2047 :
		if minus then
			-2048
		else
			if plus then
				2047
			else
				x
			end
		end
	end

	sat: action ==> QF_DC:[ dc ]
	var
		int(size=SAMPLE_SZ) dc = saturate(dc_val)
	do
		dc_buf[ptr] := dc;
	end

	advance: action ==>
	do
		ptr := if ptr = 1 then
			BUF_SIZE - 1
		else
			ptr - 1
		end;
		cnt := cnt + 1;
		if (cnt = mbwidth) then
			cnt := 0;
		end
	end

	schedule fsm read :
		read ( start ) --> getw;
		read ( read.inter_ac ) --> inter;
		read ( read.intra ) --> intra;
		read ( read.other ) --> advance;
		getw ( getw ) --> read;
		intra ( getdc.intra ) --> sat;
		inter ( getdc.inter ) --> sat;
		sat ( sat ) --> advance;
		advance ( advance ) --> read;
	end

	priority
		start > read;
		read.inter_ac > read.other > read.intra;
	end

end