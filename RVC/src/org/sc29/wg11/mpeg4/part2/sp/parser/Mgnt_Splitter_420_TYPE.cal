/*************************************************************************
* This software module was originally developed by David B. Parlour (Xilinx Inc.), 
* in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
* for reference purposes and its performance may not have been optimized. 
* This software module is an implementation of one or more tools as 
* specified by the ISO/IEC 23002-5.
* 
* ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
* license to copy, distribute, and make derivative works of this software 
* module or modifications thereof for use in implementations of the 
* ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 
* 
* Those intending to use this software module in products are advised that 
* its use may infringe existing patents. ISO/IEC have no liability for use 
* of this software module or modifications thereof.
* 
* Copyright is not released for products that do not conform to audiovisual 
* and image-coding related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* Assurance that the originally developed software module can be used 
* (1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
* (2) to develop the ISO/IEC 23002-5: 
* 
* Xilinx Inc. Corporation grants ISO/IEC all rights necessary to 
* include the originally developed software module or modifications thereof 
* in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
* worldwide, non-exclusive, copyright license to copy, distribute, and make 
* derivative works for use in implementations of the ISO/IEC 23002-5 in 
* products that satisfy conformance criteria (if any), and to the extent 
* that such originally developed software module or portions of it are 
* included in the ISO/IEC 23002-5.  To the extent that Xilinx Inc. 
* owns patent rights that would be required to make, use, or 
* sell the originally developed software module or portions thereof 
* included in the ISO/IEC 23002-5 in a conforming product, Xilinx Inc.
* will assure the ISO/IEC that it is willing to 
* negotiate licenses under reasonable and non-discriminatory terms and 
* conditions with applicants throughout the world.
* 
* ISO/IEC gives You a free license to this software module or modifications 
* thereof for the sole  purpose of developing theISO/IEC 23002-5
* 
* Xilinx Inc. retains full right to modify and use the 
* code for its own purpose, assign or donate the code to a third party and 
* to inhibit third parties from using the code for products that do not 
* conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
* Standards. 
* 
* This copyright notice must be included in all copies or derivative works. 
* Copyright (c) ISO/IEC 2007-2011.
*************************************************************************/
/*************** 
 *  splitter_BTYPE
* Author: Christophe Lucarz (christophe.lucarz@epfl.ch) 
* Description: the sequence of BTYPE token is not homogeneous, there is fist a NEW VOP command, then, the width and height of this VOP, then the  corresponding 8x8 blocks of texture, motion or mixed tex/mot. This actor will delete the tokens concerning the information of the VOP and redistribute the tokens to the Y, U and V components. So that the adder have directly the token intra, accoded or mixed.
*****************/

package org.sc29.wg11.mpeg4.part2.sp.parser;

import org.sc29.wg11.mpeg4.part2.Constants.*;
import org.sc29.wg11.mpeg4.part2.ConstantsBtype.*;

actor Mgnt_Splitter_420_TYPE () 
	bool ACCODED, 
	bool ACPRED,
	bool MOTION, 
	uint (size=4) BTYPE,
	int(size=QUANT_SZ) QP
		==> 
		bool ACCODED_Y, 
		bool ACCODED_U, 
		bool ACCODED_V, 
		bool MOTION_Y, 
		bool MOTION_U, 
		bool MOTION_V, 
		uint (size=4)BTYPE_Y, 
		uint (size=4)BTYPE_U, 
		uint (size=4)BTYPE_V, 
		bool ACPRED_Y, 
		bool ACPRED_U, 
		bool ACPRED_V,
		int(size=QUANT_SZ) QP_Y, 
		int(size=QUANT_SZ) QP_U, 
		int(size=QUANT_SZ) QP_V:

	// to send the newvop token to the address and add block (arrggg) 
	cmd.newVop: action BTYPE:[ newvop ] ==> BTYPE_Y:[NEWVOP], BTYPE_U:[NEWVOP], BTYPE_V:[NEWVOP]
	guard
		newvop = NEWVOP
	end
	// to split the tokens 
	cmd.splitY1: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_Y:[ ac ], 
		MOTION_Y:[ mot ], 
		BTYPE_Y:[ btype ],
		ACPRED_Y:[ acp ],
		QP_Y:[qp]
	end

	cmd.splitY2: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_Y:[ ac ], 
		MOTION_Y:[ mot ], 
		BTYPE_Y:[ btype ],
		ACPRED_Y:[ acp ],
		QP_Y:[qp]
	end

	cmd.splitY3: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_Y:[ ac ], 
		MOTION_Y:[ mot ], 
		BTYPE_Y:[ btype ],
		ACPRED_Y:[ acp ],
		QP_Y:[qp]
	end

	cmd.splitY4: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_Y:[ ac ], 
		MOTION_Y:[ mot ], 
		BTYPE_Y:[ btype ],
		ACPRED_Y:[ acp ],
		QP_Y:[qp]
	end

	cmd.splitU: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_U:[ ac ], 
		MOTION_U:[ mot ], 
		BTYPE_U:[ btype ],
		ACPRED_U:[ acp ],
		QP_U:[qp]
	end
	
	cmd.splitV: action 
		ACCODED:[ac], ACPRED:[acp], MOTION:[mot], BTYPE:[btype], QP:[qp] ==>
	    ACCODED_V:[ ac ], 
		MOTION_V:[ mot ], 
		BTYPE_V:[ btype ],
		ACPRED_V:[ acp ],
		QP_V:[qp]
	end
	
	schedule fsm cmd :
		cmd ( cmd.newVop ) --> cmd;
		cmd ( cmd.splitY1 ) --> Y2;
		Y2 ( cmd.splitY2 ) --> Y3;
		Y3 ( cmd.splitY3 ) --> Y4;
		Y4 ( cmd.splitY4 ) --> U;
		U ( cmd.splitU ) --> V;
		V ( cmd.splitV ) --> cmd;
	end
	
	priority
		cmd.newVop > cmd.splitY1;
	end

end


