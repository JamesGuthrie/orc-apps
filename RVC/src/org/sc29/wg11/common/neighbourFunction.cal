/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
 
FU realizing Syntax Parsing for AVC
*****************************************************************************/

// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

// This FU has been modified by Gildas Cocherel (INSA of Rennes) Jan 2012


/******************************************************************************
 * Definition of CabacContextFunction
 *****************************************************************************/
package org.sc29.wg11.common;

import	org.mpeg4.part10.Imp_PictureInfo.*;
import  org.mpeg4.part10.cbp.MacroBlockInfo.*;

unit neighbourFunction :


	/*************************************************************************
	 * Constant
	 *************************************************************************/
	uint(size=4) neighbourAIdx[16] = [5, 0, 7, 2, 1, 4, 3, 6, 13, 8, 15,
		10, 9, 12, 11, 14];
	uint(size=4) neighbourBIdx[16] = [10, 11, 0, 1, 14, 15, 4, 5, 2, 3,
		8, 9, 6, 7, 12, 13];

	uint(size=4) locXYToBlkIdx[16] = [
		0,1,4,5,
		2,3,6,7,
		8,9,12,13,
		10,11,14,15
	];
	int STRIDE = (MAX_PICWIDTH_BLK * 4) + 2;
	int OFFSET = STRIDE + 1;
	int locXYToTabIdx[16] =
	[
		0 * STRIDE + 0 + OFFSET, 0 * STRIDE + 1 + OFFSET, 1 * STRIDE + 0 + OFFSET, 1 * STRIDE + 1 + OFFSET,
		0 * STRIDE + 2 + OFFSET, 0 * STRIDE + 3 + OFFSET, 1 * STRIDE + 2 + OFFSET, 1 * STRIDE + 3 + OFFSET,
		2 * STRIDE + 0 + OFFSET, 2 * STRIDE + 1 + OFFSET, 3 * STRIDE + 0 + OFFSET, 3 * STRIDE + 1 + OFFSET,
		2 * STRIDE + 2 + OFFSET, 2 * STRIDE + 3 + OFFSET, 3 * STRIDE + 2 + OFFSET, 3 * STRIDE + 3 + OFFSET
	];
	uint(size=4) locXYToBlkIdx_4[4] = [
		0,1,
		2,3
	];
	int STRIDE_4 = (MAX_PICWIDTH_BLK * 2) + 2;
	int OFFSET_4 = STRIDE_4 + 1;
	int locXYToTabIdx_4[4] =
	[
		0 * STRIDE_4 + 0 + OFFSET_4, 0 * STRIDE_4 + 1 + OFFSET_4,
		1 * STRIDE_4 + 0 + OFFSET_4, 1 * STRIDE_4 + 1 + OFFSET_4
	];

	/*************************************************************************
	 * setNeigbourSubMbType
	 *************************************************************************/
	procedure setNeigbourSubMbType(
		uint(size= 4) subMbTypeTab[MAX_PICWIDTH_BLK+2][4],
		uint 		  Idx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	)
	var
		uint(size= 3) partSize = sizeMbPart(mbType)
	begin
		if partSize = SZ_8x8 then
			subMbTypeTab[Idx][0] := sub_mb_type[0];
			subMbTypeTab[Idx][1] := sub_mb_type[1];
			subMbTypeTab[Idx][2] := sub_mb_type[2];
			subMbTypeTab[Idx][3] := sub_mb_type[3];
		else
			subMbTypeTab[Idx][0] := 0;
			subMbTypeTab[Idx][1] := 0;
			subMbTypeTab[Idx][2] := 0;
			subMbTypeTab[Idx][3] := 0;
		end
	end
	/*************************************************************************
	 * getNeigbourMbType
	 *************************************************************************/
	function getNeigbourMbTypeB(
		uint(size= 6) mbTypeB,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> uint(size=6)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx])
	:
		if partSize = SZ_16x16 or partSize = SZ_8x16 then
			mbTypeB
		elsif partSize = SZ_16x8 then
			if mbPartIdx = 0 then
				mbTypeB
			else
				mbType
			end
		else
			if (mbPartIdx & 2) = 0 then
				if subPartSize = SZ_8x8 or subPartSize = SZ_4x8 then
					mbTypeB
				elsif subPartSize = SZ_8x4 then
					if subMbPartIdx = 0 then
						mbTypeB
					else
						mbType
					end
				else
					if (subMbPartIdx & 2) = 0 then
						mbTypeB
					else
						mbType
					end
				end
			else
				mbType
			end
		end 	
	end
	function getNeigbourMbTypeA(
		uint(size= 6) mbTypeA,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> uint(size=6)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx])
	:
		if partSize = SZ_16x16 or partSize = SZ_16x8 then
			mbTypeA
		elsif partSize = SZ_8x16 then
			if mbPartIdx = 0 then
				mbTypeA
			else
				mbType
			end
		else
			if (mbPartIdx & 1) = 0 then
				if subPartSize = SZ_8x8 or subPartSize = SZ_8x4 then
					mbTypeA
				else
					if (subMbPartIdx & 1) = 0 then
						mbTypeA
					else
						mbType
					end
				end
			else
				mbType
			end
		end 	
	end
	/*************************************************************************
	 * getNeigbourSubMbType
	 *************************************************************************/
	function getNeigbourSubMbTypeB(
		uint(size= 4) subMbTypeTab[MAX_PICWIDTH_BLK+2][4],
		uint 		  Idx,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> uint(size=4)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx]),
		uint(size= 3) subMbTypeB	= if (mbPartIdx & 2) = 0 then subMbTypeTab[Idx][mbPartIdx+2] else sub_mb_type[mbPartIdx-2] end
	:
		if partSize = SZ_16x16 or partSize = SZ_8x16 then
			subMbTypeB
		elsif partSize = SZ_16x8 then
			if mbPartIdx = 0 then
				subMbTypeB
			else
				sub_mb_type[0]
			end
		else
			if subPartSize = SZ_8x8 or subPartSize = SZ_4x8 then
				subMbTypeB
			elsif subPartSize = SZ_8x4 then
				if subMbPartIdx = 0 then
					subMbTypeB
				else
					sub_mb_type[mbPartIdx]
				end
			else
				if (subMbPartIdx & 2) = 0 then
					subMbTypeB
				else
					sub_mb_type[mbPartIdx]
				end
			end
		end 	
	end
	function getNeigbourSubMbTypeA(
		uint(size= 4) subMbTypeTab[MAX_PICWIDTH_BLK+2][4],
		uint 		  Idx,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> uint(size=4)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx]),
		uint(size= 3) subMbTypeA	= if (mbPartIdx & 1) = 0 then subMbTypeTab[Idx][mbPartIdx+1] else sub_mb_type[mbPartIdx-1] end
	:
		if partSize = SZ_16x16 then
			subMbTypeA
		elsif partSize = SZ_16x8 then
			if mbPartIdx = 0 then
				subMbTypeA
			else
				subMbTypeTab[Idx][3]
			end
		elsif partSize = SZ_8x16 then
			if mbPartIdx = 0 then
				subMbTypeA
			else
				sub_mb_type[1]
			end
		else
			if subPartSize = SZ_8x8 or subPartSize = SZ_8x4 then
				subMbTypeA
			else
				if (subMbPartIdx & 1) = 0 then
					subMbTypeA
				else
					sub_mb_type[mbPartIdx]
				end
			end
		end 	
	end
	/*************************************************************************
	 * setNeigbourRefIdx
	 *************************************************************************/
	procedure setNeigbourRefIdx(
		uint(size= 5) refIdxTab[STRIDE*5],
		uint 		  Mb_x,
		uint(size= 6) mbType,
		uint(size= 3) mbPartIdx,
		uint(size= 5) refIdx		
	)
	var
		uint(size= 3) partSize = sizeMbPart(mbType),
		uint 		  Idx	
	begin
		if partSize = SZ_16x16 then
			foreach int j in 0 .. 15 do
				Idx := (Mb_x<<1) + locXYToTabIdx_4[j];
				refIdxTab[Idx] := refIdx;
			end
		elsif partSize = SZ_16x8 then
			Idx := (Mb_x<<1) + locXYToTabIdx_4[mbPartIdx<<1];
			refIdxTab[Idx  ] := refIdx;
			refIdxTab[Idx+1] := refIdx;
		elsif partSize = SZ_8x16 then
			Idx := (Mb_x<<1) + locXYToTabIdx_4[mbPartIdx];
			refIdxTab[Idx] := refIdx;
			Idx := (Mb_x<<1) + locXYToTabIdx_4[mbPartIdx+2];
			refIdxTab[Idx] := refIdx;
		else
			Idx := (Mb_x<<1) + locXYToTabIdx_4[mbPartIdx];
			refIdxTab[Idx] := refIdx;	
		end
	end
	/*************************************************************************
	 * getNeigbourMvd
	 *************************************************************************/
	function getNeigbourRefIdxB(
		 int(size=5) refIdxTab[STRIDE_4*3],
		uint 		  Mb_x,
		uint(size= 3) mbPartIdx,
		uint(size= 6) mbType
	) --> int(size=5)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint 		  Idx			=  (Mb_x << 1) + 
								if partSize = SZ_16x8 then
									locXYToTabIdx_4[(mbPartIdx<<1)]
								else
									locXYToTabIdx_4[mbPartIdx]
								end - STRIDE_4
	:
		refIdxTab[Idx]
	end
	function getNeigbourRefIdxA(
		 int(size=5) refIdxTab[STRIDE_4*3],
		uint 		  Mb_x,
		uint(size= 3) mbPartIdx,
		uint(size= 6) mbType
	) --> int(size=5)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint 		  Idx			=  (Mb_x << 1) + 
								if partSize = SZ_16x8 then
									locXYToTabIdx_4[(mbPartIdx<<1)]
								else
									locXYToTabIdx_4[mbPartIdx]
								end - 1
	:
		refIdxTab[Idx]
	end
	/*************************************************************************
	 * setNeigbourMvd
	 *************************************************************************/
	procedure setNeigbourMvd(
		 int(size=16) mvdTab[STRIDE*5][2],
		uint 		  Mb_x,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5],
		int			  mvd[2]		
	)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx]),
		uint 		  Idx
	begin
		if partSize = SZ_16x16 then
			foreach int j in 0 .. 15 do
				Idx := (Mb_x<<2) + locXYToTabIdx[j];
				mvdTab[Idx][0] := mvd[0];
				mvdTab[Idx][1] := mvd[1];
			end
		elsif partSize = SZ_16x8 then
			if mbPartIdx = 0 then
				foreach int j in 0 .. 7 do
					Idx := (Mb_x<<2) + locXYToTabIdx[j];
					mvdTab[Idx][0] := mvd[0];
					mvdTab[Idx][1] := mvd[1];
				end
			else
				foreach int j in 8 .. 15 do
					Idx := (Mb_x<<2) + locXYToTabIdx[j];
					mvdTab[Idx][0] := mvd[0];
					mvdTab[Idx][1] := mvd[1];
				end
			end
		elsif partSize = SZ_8x16 then
			foreach int j in 0 .. 15 do
				Idx := (Mb_x<<2) + locXYToTabIdx[j];
				if mbPartIdx = 0  and (j & 4) = 0 then
					mvdTab[Idx][0] := mvd[0];
					mvdTab[Idx][1] := mvd[1];
				elsif mbPartIdx = 1  and (j & 4) != 0 then
					mvdTab[Idx][0] := mvd[0];
					mvdTab[Idx][1] := mvd[1];
				end
			end
		else
			if subPartSize = SZ_8x8 then
				foreach int j in 0 .. 3 do
					Idx := (Mb_x<<2) + locXYToTabIdx[(mbPartIdx<<2) + j];
					mvdTab[Idx][0] := mvd[0];
					mvdTab[Idx][1] := mvd[1];
				end
			elsif subPartSize = SZ_8x4 then
				Idx := (Mb_x<<2) + locXYToTabIdx[(mbPartIdx<<2) + (subMbPartIdx<<1)];
				mvdTab[Idx  ][0] := mvd[0];
				mvdTab[Idx+1][0] := mvd[0];
				mvdTab[Idx  ][1] := mvd[1];
				mvdTab[Idx+1][1] := mvd[1];
			elsif subPartSize = SZ_4x8 then
				Idx := (Mb_x<<2) + locXYToTabIdx[(mbPartIdx<<2) + subMbPartIdx];
				mvdTab[Idx][0] := mvd[0];
				mvdTab[Idx][1] := mvd[1];
				Idx := (Mb_x<<2) + locXYToTabIdx[(mbPartIdx<<2) + subMbPartIdx+2];
				mvdTab[Idx][0] := mvd[0];
				mvdTab[Idx][1] := mvd[1];
			else
				Idx := (Mb_x<<2) + locXYToTabIdx[(mbPartIdx<<2) + subMbPartIdx];
				mvdTab[Idx][0] := mvd[0];
				mvdTab[Idx][1] := mvd[1];
			end
		end
	end
	/*************************************************************************
	 * getNeigbourMvd
	 *************************************************************************/
	function getNeigbourMvdB(
		 int(size=16) mvdTab[STRIDE*5][2],
		uint 		  Mb_x,
		uint(size= 1) Lx,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> int(size=16)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx]),
		uint 		  Idx			=  (Mb_x << 2) + 
								if partSize = SZ_16x8 then
									locXYToTabIdx[(mbPartIdx<<3)]
								elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
									locXYToTabIdx[(mbPartIdx<<2)+(subMbPartIdx<<1)]
								else
									locXYToTabIdx[(mbPartIdx<<2)+subMbPartIdx]
								end - STRIDE
	:
		mvdTab[Idx][Lx]
	end
	function getNeigbourMvdA(
		 int(size=16) mvdTab[STRIDE*5][2],
		uint 		  Mb_x,
		uint(size= 1) Lx,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> int(size=16)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx]),
		uint 		  Idx			=  (Mb_x << 2) + 
								if partSize = SZ_16x8 then
									locXYToTabIdx[(mbPartIdx<<3)]
								elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
									locXYToTabIdx[(mbPartIdx<<2)+(subMbPartIdx<<1)]
								else
									locXYToTabIdx[(mbPartIdx<<2)+subMbPartIdx]
								end - 1
	:
		mvdTab[Idx][Lx]
	end
	/*************************************************************************
	 * getNeigbourAvail
	 *************************************************************************/
	function getNeigbourAvailB(
		bool		  available,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> bool
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx])
	:
		if partSize = SZ_16x8 then
			available or (mbPartIdx&1)!=0
		elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
			available or (mbPartIdx&2)!=0 or (subMbPartIdx&1)!=0
		else
			available or (mbPartIdx&2)!=0 or (subMbPartIdx&2)!=0
		end
	end
	function getNeigbourAvailA(
		bool		  available,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) sub_mb_type[5]
	) --> bool
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, sub_mb_type[mbPartIdx])
	:
		if partSize = SZ_16x8 then
			available
		elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
			available or (mbPartIdx&1)!=0
		else
			available or (mbPartIdx&1)!=0 or (subMbPartIdx&1)!=0
		end
	end
	/*************************************************************************
	 * getNeigbourMbPartIdx
	 *************************************************************************/
	function getNeigbourMbPartIdxB(
		bool		  available,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) subMbType,
		uint(size= 6) mbTypeB,
		uint(size= 4) subMbTypeB
	) --> uint(size=3)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, subMbType)
	:
		if available then
			if partSize = SZ_16x8 then
				lumaIdxToMbPartIdx(neighbourBIdx[mbPartIdx<<3], mbTypeB, subMbTypeB)
			elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
				lumaIdxToMbPartIdx(neighbourBIdx[(mbPartIdx<<2)+(subMbPartIdx<<1)], mbTypeB, subMbTypeB)
			else
				lumaIdxToMbPartIdx(neighbourBIdx[(mbPartIdx<<2)+subMbPartIdx], mbTypeB, subMbTypeB)
			end
		else
			0
		end
	end
	function getNeigbourMbPartIdxA(
		bool		  available,
		uint(size= 3) mbPartIdx,
		uint(size= 3) subMbPartIdx,
		uint(size= 6) mbType,
		uint(size= 4) subMbType,
		uint(size= 6) mbTypeA,
		uint(size= 4) subMbTypeA
	) --> uint(size=3)
	var
		uint(size= 3) partSize		= sizeMbPart(mbType),
		uint(size= 3) subPartSize	= SizeSubMbPart(mbType, subMbType)
	:
		if available then
			if partSize = SZ_16x8 then
				lumaIdxToMbPartIdx(neighbourAIdx[mbPartIdx<<3], mbTypeA, subMbTypeA)
			elsif partSize = SZ_8x8 and subPartSize = SZ_8x4 then
				lumaIdxToMbPartIdx(neighbourAIdx[(mbPartIdx<<2)+(subMbPartIdx<<1)], mbTypeA, subMbTypeA)
			else
				lumaIdxToMbPartIdx(neighbourAIdx[(mbPartIdx<<2)+subMbPartIdx], mbTypeA, subMbTypeA)
			end
		else
			0
		end
	end
end