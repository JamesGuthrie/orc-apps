/********************************************************************************

This software module was originally developed by 
Florian Decologne (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
 
FU realizing Syntax Parsing for AVC
*****************************************************************************/

// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

// This FU has been modified by Gildas Cocherel (INSA of Rennes) Jan 2012
/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.common;

unit CabacDebinarizationFunction :
	uint(size=4) SLICE_TYPE_P  = 0;
	uint(size=4) SLICE_TYPE_B  = 1;
	uint(size=4) SLICE_TYPE_I  = 2;
	/*************************************************************************
	 * Constant Debinarization type
	 *************************************************************************/
	uint(size=4) DEBIN_TU2  =  2;
	uint(size=4) DEBIN_TU3  =  3;
	uint(size=4) DEBIN_TU5  =  5;
	uint(size=4) DEBIN_TU9  =  9;
	uint(size=4) DEBIN_TU14 = 14;
	uint(size=4) DEBIN_FL1  =  0;
	uint(size=4) DEBIN_FL3  =  2;
	uint(size=4) DEBIN_FL4  =  3;
	
	/*************************************************************************
	 * debinU : @see 9.3.2.1 in h.264 standard
	 *************************************************************************/
	procedure debinU(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 1) debinCompleted[1],
		uint(size=32) debinValue[1]
	)
	begin
		debinCompleted[0]	:= 1 - (binString & 1);
		debinValue[0] 		:= binIdx;
	end
	/*************************************************************************
	 * debinTU : @see 9.3.2.2 in h.264 standard
	 *************************************************************************/
	procedure debinTU(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 8) binarization,
		uint(size= 1) debinCompleted[1],
		uint(size=32) debinValue[1],
		uint(size= 1) discard_suffix[1]
	)
	begin
		debinCompleted[0]		:= if binIdx = binarization-1 then 1 else 1 - (binString & 1) end;
		debinValue[0] 			:= if (binString & 1) = 0 then binIdx else binarization end;
		discard_suffix[0]		:= if binarization != DEBIN_TU9 then 1 else 0 end;
	end
	/*************************************************************************
	 * debinEG0 : @see 9.3.2.3 in h.264 standard
	 *************************************************************************/
	procedure debinEG0(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size=16) prefix,
		uint(size= 1) debinCompleted[1],
		uint(size=32) debinValue[1]
	)
	var
		uint(size= 8) positionZero := binIdx,
		uint(size=15) mask,
		uint(size=15) first_part,
		uint(size=15) second_part
		
	begin
		while positionZero != 0 and (binString & (1<<positionZero)) != 0 do
			positionZero := positionZero - 1;
		end
		mask				:= (1 << positionZero) - 1;
		first_part			:= prefix + mask;
		second_part			:= binString & mask;
		debinCompleted[0]	:= if binIdx = 2*positionZero then 1 else 0 end;
		debinValue[0] 		:= first_part + second_part;
	end
	/*************************************************************************
	 * debinEG3 : @see 9.3.2.3 in h.264 standard
	 *************************************************************************/
	procedure debinEG3(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size=16) prefix,
		uint(size= 1) debinCompleted[1],
		 int(size=32) debinValue[1]
	)
	var
		uint(size= 8) positionZero := binIdx,
		uint(size=15) first_part,
		uint(size=15) second_part
	begin
		if prefix != 9 then
			while positionZero != 0 and (binString & (1<<positionZero)) != 0 do
				positionZero := positionZero - 1;
			end
			first_part			:= (1 << (positionZero+3)) + 1;
			second_part			:= binString & ( (1 << (positionZero+4)) - 1 );
			debinCompleted[0]	:= if binIdx = 4 + 2 * positionZero then 1 else 0 end;
		else
			debinCompleted[0]	:= if binIdx = 0 then 1 else 0 end;
			first_part			:= prefix;
			second_part			:= binString & 1;
		end
		debinValue[0] 			:=  first_part + (second_part>>1);
		if (second_part & 1) = 1 then
			debinValue[0]		:=  -debinValue[0];
		end
	end
	/*************************************************************************
	 * debinFL : @see 9.3.2.4 in h.264 standard
	 *************************************************************************/
	procedure debinFL(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 8) binarization,
		uint(size= 1) debinCompleted[1],
		uint(size=32) debinValue[1]
	)
	//var
	//	uint(size=4) mask = ( 1 << (binarization+1) ) - 1
	begin
		debinCompleted[0]	:= if binIdx = binarization then 1 else 0 end;
		debinValue[0] 		:= binString;// & mask;
	end
	/*************************************************************************
	 * debinMbType : @see 9.3.2.5 in h.264 standard
	 *************************************************************************/
	procedure debinMbType(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 8) sliceType,
		uint(size= 1) debinCompleted[1],
		 int(size=32) debinValue[1]
	)
	begin
		if sliceType = SLICE_TYPE_I then
			debinMbTypeSliceI(binString, binIdx, debinCompleted, debinValue);
		elsif sliceType = SLICE_TYPE_P then
			if (binString & (1<<binIdx) ) != 0 then
				 debinMbTypeSliceI(binString, binIdx-1, debinCompleted, debinValue);
				 debinValue[0]		:= debinValue[0] + 5;
			else
				debinCompleted[0]	:= if binIdx = 2 then 1 else 0 end;
				debinValue[0]		:= (4 - binString) & 3;
			end
		else  // SLICE_TYPE_B
			if binIdx > 5 and (( binString >> (binIdx-5) ) & 0x3F) = 0x3D then
				debinMbTypeSliceI(binString, binIdx-5, debinCompleted, debinValue);
		 		debinValue[0]		:= debinValue[0] + 23;
			elsif binIdx = 0 then
				debinCompleted[0]	:= 1 - (binString & 1); 
				debinValue[0]		:= 0;
			elsif binIdx = 2 then
				debinCompleted[0]	:= if (binString & 0x2) != 0 then 1 else 0 end;
				debinValue[0]		:= (binString & 0x1) + 1;
			elsif binIdx = 5 then
				if (binString & 0x8) = 0 then
					debinCompleted[0]	:= 1;
					debinValue[0]		:= (binString & 0x7) + 3;
				else
					debinCompleted[0]	:= if (binString & 0x7) = 6 or (binString & 0x7) = 7 then 1 else 0 end;
					debinValue[0]		:= if (binString & 0x1) = 1 then 22 else 11 end;
				end
			elsif binIdx = 6 then
				debinCompleted[0]	:= 1;
				debinValue[0]		:= (binString & 0xF) + 12;
			end
		end
	end
	procedure debinMbTypeSliceI(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 1) debinCompleted[1],
		 int(size=32) debinValue[1]
	)
	begin
		if binIdx = 0 then
			debinCompleted[0]	:= 1 - (binString & 1); 
			debinValue[0]		:= 0;
		elsif binIdx = 1 then
			debinCompleted[0]	:= binString & 1;
			debinValue[0]		:= 25;
		elsif binIdx = 5 then
			debinCompleted[0]	:= if (binString & 0x7) < 4 then 1 else 0 end;
			debinValue[0]		:= (binString & 0x3) + if (binString & 0x8) = 0 then 1 else 13 end;
		elsif binIdx = 6 then
			debinCompleted[0]	:= 1;
			debinValue[0]		:= (binString & 0x7) + if (binString & 0x8) = 0 then 5 else 17 end;
		end
	end
	/*************************************************************************
	 * debinSubMbType : @see 9.3.2.5 in h.264 standard
	 *************************************************************************/
	procedure debinSubMbType(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 8) sliceType,
		uint(size= 1) debinCompleted[1],
		 int(size=32) debinValue[1]
	)
	begin
		if sliceType = SLICE_TYPE_P then
			if binIdx = 0 then
				debinCompleted[0]	:= (binString & 1); 
				debinValue[0]		:= 0;
			elsif binIdx = 1 then
				debinCompleted[0]	:= 1 - (binString & 1);
				debinValue[0]		:= 1;
			elsif binIdx = 2 then
				debinCompleted[0]	:= 1;
				debinValue[0]		:= 5 - binString;
			end
		else  // SLICE_TYPE_B
			if binIdx = 0 then
				debinCompleted[0]	:= 1 - (binString & 1); 
				debinValue[0]		:= 0;
			elsif binIdx = 2 then
				debinCompleted[0]	:= if (binString & 0x2) != 0 then 1 else 0 end;
				debinValue[0]		:= (binString & 0x1) + 1;
			elsif binIdx = 4 then
				if (binString & 0x4) = 0 then
					debinCompleted[0]	:= 1;
					debinValue[0]		:= (binString & 0x7) + 3;
				else
					debinCompleted[0]	:= if (binString & 0x2) != 0 then 1 else 0 end;
					debinValue[0]		:= (binString & 0x1) + 11;
				end
			elsif binIdx = 5 then
				debinCompleted[0]	:= 1;
				debinValue[0]		:= (binString & 0x7) + 7;
			end
		end
	end
	/*************************************************************************
	 * debinMbDeltaQP : @see 9.3.2.7 in h.264 standard
	 *************************************************************************/
	procedure debinMbDeltaQP(
		uint(size=32) binString,
		uint(size= 8) binIdx,
		uint(size= 1) debinCompleted[1],
		 int(size=32) debinValue[1]
	)
	begin
		debinCompleted[0]	:= if (binString & 1) = 0 then 1 else 0 end;
		debinValue[0]		:= if (binIdx    & 1) = 1 then (binIdx>>1) + 1 else -(binIdx>>1) end;
	end
end