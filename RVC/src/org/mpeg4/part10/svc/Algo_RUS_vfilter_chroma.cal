/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), 
in the course of development of the ISO/IEC 23002-4 for reference purposes and its performance may 
not have been optimized. This software module is an implementation of one or more tools as specified 
by the ISO/IEC 23002-4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, 
and make derivative works of this software module or modifications thereof for use in implementations 
of the ISO/IEC 23002-4  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing 
patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU 
Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-4 once 
the ISO/IEC 23002-4 has been adopted; and (2) to develop the ISO/IEC 23002-4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed 
software module or modifications thereof in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a 
royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works 
for use in implementations of the ISO/IEC 23002-4 in products that satisfy conformance criteria (if any), 
and to the extent that such originally developed software module or portions of it are included in 
the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be 
required to make, use, or sell the originally developed software module or portions thereof included in 
the ISO/IEC 23002-4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that 
it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with 
applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole 
purpose of developing the ISO/IEC 23002-4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign 
or donate the code to a third party and to inhibit third parties from using the code for products that 
do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.

This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 

*****************************************************************************/
package org.mpeg4.part10.svc;
import std.util.BitOps.*;

actor Algo_RUS_vfilter_chroma() int(size=32) In_NAL, int (size=32) Residual_prediction_flag, int (size=16)Y16 , int (size=16) YK16, int (size=16) YP16, int (size=16) Tmp_res_Chroma ==> int (size=16) Current_res_Chroma   
:
  
  int n:=0;
  int n1:=0;
  int ny :=0;
  int nb_res_pred :=0;
  int n_tmp :=0;
  int nb_MB :=0;
  int PicSizeInMbs :=0 ;
  int PicWidthInMbs :=0;
  int pred_flag :=0;
  int pos_x_InPix:=0;
  int pos_y_InPix:=0;
    
  //non_diadic, is_cropping, RefLayerPicWidthInSamples, RefLayerPicHeightInSamples, ScaledRefLayerPicWidthInSamples, ScaledRefLayerPicHeightInSamples
  List( type:int(size=32), size=6 ) in_nal; 
  List( type:int(size=16), size=8*8 ) chroma_out_MB;
  List( type:int(size=16), size=8*8 ) chroma_tmp_MB;
  List( type:int(size=16), size=(1920*1080) ) chroma_tmp_I;
  List( type:int(size=16), size=1080 ) y16;
  List( type:int(size=16), size=1080 ) yk16;
  List( type:int(size=16), size=1080 ) yp16;
  
   
   
  procedure vertical_filter ( )
  var 
    int p2, int p3, int i1, int k, int p, int addr_chroma_tmp, int addr_chroma_out
  begin
	
	foreach int x in 0 .. 7 do
	
		addr_chroma_tmp := pos_x_InPix + x;
		addr_chroma_out := x;
		
		foreach int y in 0 .. 7 do
			i1 := y16[pos_y_InPix + y];
			k := yk16[pos_y_InPix + y]; 
			p := yp16[pos_y_InPix + y] >> 2;
			
			if (i1 >> 2) = p then 
			  p2 :=  i1;
			else 
			  p2 := (p << 2);
			end
			if (i1 + 1) >> 2 = p then 
			  p3 :=  i1 + 1; 
			else 
			  p3 := (p << 2) + 3;
			end

			chroma_out_MB[addr_chroma_out + y*8] := ((16 - k) * chroma_tmp_I[ addr_chroma_tmp + in_nal[4] * p2 ] + k * chroma_tmp_I[ addr_chroma_tmp + in_nal[4] * p3 ] + 128) >> 8;
		end
		
	end
  end
  
  get_In_NAL: action In_NAL:[f] ==>
  guard
    n < 6 
  do
    in_nal[n] := f;
    n := n+1;
    if n = 6 then
      PicSizeInMbs := (in_nal[5] * in_nal[4]) >> 8;
      PicWidthInMbs := in_nal[4] >> 4;
    end
  end
    
  get_Residual_prediction_flag: action Residual_prediction_flag:[f] ==>
  guard
    nb_res_pred = 0   
  do
   pred_flag := f;
   nb_res_pred := 1;
  end
  
  get_Y16_YK16_YP16: action  Y16:[ a ],YK16:[ b ], YP16:[ c ] ==>
  guard
    ny < in_nal[5] 
  do
     y16[ny]:= a;
     yk16[ny]:= b;
     yp16[ny]:= c;
     ny := ny +1;
  end
  
  get_chroma_tmp: action Tmp_res_Chroma:[f] ==>
  guard
    n_tmp < 8*8  
  do
   chroma_tmp_MB[n_tmp] := f;
   n_tmp := n_tmp+1;
  end
  
  get_done: action ==>
  guard
   n =6 and nb_res_pred = 1 and ny = in_nal[5] and n_tmp = 8*8
  end
  
  
  vertical_loop: action ==>   
  do
    pos_x_InPix := (nb_MB mod PicWidthInMbs) << 3;
    pos_y_InPix := (nb_MB / PicWidthInMbs) << 3;
     
     foreach int y in 0 .. 7 do
       foreach int x in 0 .. 7 do
         if pos_x_InPix + x < in_nal[4] and yp16[pos_y_InPix] + y < in_nal[3] then
           chroma_tmp_I[pos_x_InPix + x + (yp16[pos_y_InPix]+y) * in_nal[4]] := chroma_tmp_MB[x+y*8];
         end
       end
	 end
	 
	if pred_flag = 1 then
		vertical_filter();
	else
	  foreach  int j in 0 .. 7 do
        foreach int k in 0 .. 7 do
	       chroma_out_MB[ k + j* 8] :=0;
	    end
	  end
	end
  end
  
  chroma_out: action ==> Current_res_Chroma:[ p ]
  var int p   
  do
     p := chroma_out_MB[n1];
     n1 := n1 +1;
  end
  
  chroma_out_done: action ==>
  guard
    n1 = 8*8
  do
    nb_res_pred :=0;
    n_tmp :=0;
    n1:=0;
    nb_MB :=nb_MB+1;
    if nb_MB = PicSizeInMbs then
      n:=0;
      ny :=0;
      nb_MB :=0;
    end
  end
  
  schedule fsm get_init:

    get_init  	( get_In_NAL        				   ) --> get_init;
    get_init  	( get_Residual_prediction_flag ) --> get_init;
    get_init  	( get_Y16_YK16_YP16    				 ) --> get_init;
    get_init  	( get_chroma_tmp    				   ) --> get_init;
    get_init  	( get_done       					     ) --> v_filter;
	  v_filter 	  ( vertical_loop 					     ) --> out;
	  out 		    ( chroma_out 						       ) --> out;
	  out 	    	( chroma_out_done 					   ) --> get_init;
  end

  priority
    chroma_out_done > chroma_out ;
  end
  
end
