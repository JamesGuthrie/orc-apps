/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

//This actor will be split in two actors (One for AvcSlice and the other for SvcSlice)
package org.mpeg4.part10.svc.synParser.modular.decodePic;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor ForwardRefPicInfo()
	uint(size=5) DataNumRefIdxLXAct,
	bool         EmptyDpb,
	bool         IsAnIdr,
	bool         IsNewPic,
	uint(size=2) NalRefIdc,
	uint(size=5) NumRefIdxLXActive,
	bool         SkipRefPic,
	uint(size=4) SliceType
		==>
	uint(size=5) DataNumRefIdxLXActOut,
	bool         EmptyDpbOut,
	bool         IsAnIdrOut,
	bool         IsNewPicOut,
	uint(size=2) NalRefIdcOut,
	uint(size=5) NumRefIdxLXActOut,
	uint(size=4) SliceTypeOut
		:

	uint(size=5) numRefIdx;

	forwardRefPic: action IsAnIdr:[idr], IsNewPic:[newPic],
		NalRefIdc:[refIdc], NumRefIdxLXActive:[numRef], SkipRefPic:[skip],
		SliceType:[slcTyp] ==> IsAnIdrOut:[idr], IsNewPicOut:[newPic],
		NalRefIdcOut:[refIdc], NumRefIdxLXActOut:[numRef],
		SliceTypeOut:[slcTyp]
	guard
		not skip
	do
		numRefIdx := numRef;
	end

	dontForwardRefPic: action IsAnIdr:[idr], IsNewPic:[newPic], NalRefIdc:[refIdc],
		NumRefIdxLXActive:[numRef], SkipRefPic:[skip], SliceType:[slcTyp] ==>
	guard
		skip
	end

	forwardResult: action DataNumRefIdxLXAct:[numRef], EmptyDpb:[emptyDpb] ==>
		DataNumRefIdxLXActOut:[numRef], EmptyDpbOut:[emptyDpb]
	end

	generateResult: action ==> DataNumRefIdxLXActOut:[numRefIdx], EmptyDpbOut:[false]
	end

	schedule fsm CheckSkip:
		CheckSkip (forwardRefPic     )--> ForwardResult;
		CheckSkip (dontForwardRefPic )--> GenerateResult;

		ForwardResult  (forwardResult  )--> CheckSkip;
		GenerateResult (generateResult )--> CheckSkip;
	end
end
