/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.svc.synParser.modular.decodePic;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;
import std.util.BitOps.*;

actor DecodeDecRefBasefPicMarking()
	uint(size=4)  HeadSvcExt,
	bool          IsSvc,
	uint(size=2)  NalRefIdc,
	uint(size=2)  SpsExtParam,
	int (size=32) ValVLD
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLDParam
		:

	bool          adaptRefBasePicMode;
	uint(size=31) memMgntCtrlOp;
	uint(size=2)  nalRefIdc;
	bool          slcHeaderRestr;
	bool          storeRefBasePic;
	bool          useRefBasePic;

	nalIsAvc: action IsSvc:[isSvc], NalRefIdc:[nalRefIdc] ==>
	guard
		not isSvc
	end

	nalIsSvc: action HeadSvcExt:[headSvcExt] repeat 2, IsSvc:[isSvc],
		NalRefIdc:[valNalRefIdc], SpsExtParam:[spsExtParam] repeat 2 ==>
	guard
		isSvc
	do
		nalRefIdc      := valNalRefIdc;
		slcHeaderRestr := getFlag(spsExtParam[1],2);
		useRefBasePic  := getFlag(headSvcExt[1],1);
	end

	askStorRefBasePic: action ==> TypeOfVLD:[READ_BITS], VLDParam:[1]
	end

	getStorRefBasePic: action ValVLD:[storeRefBasePicFlag] ==>
	do
		storeRefBasePic := (storeRefBasePicFlag != 0);
	end

	askAdaptRefBasePic: action ==> TypeOfVLD:[READ_BITS], VLDParam:[1]
	guard
		useRefBasePic or storeRefBasePic
	end

	getAdaptRefBasePic: action ValVLD:[adptRefBasPicMod] ==>
	do
		adaptRefBasePicMode := (adptRefBasPicMod != 0);
	end

	askMmco: action ==> TypeOfVLD:[VLD_UE]
	guard
		memMgntCtrlOp != 0
	end

	getMmco: action ValVLD:[mmco] ==>
	do
		memMgntCtrlOp := mmco;
	end

	askDiffPicNumMinus1: action ==> TypeOfVLD:[VLD_UE]
	guard
		memMgntCtrlOp = 1
	end

	getDiffPicNumMinus1: action ValVLD:[diffPic] ==>
	end

	askLongTermPicNum: action ==> TypeOfVLD:[VLD_UE]
	guard
		memMgntCtrlOp = 2
	end

	getLongTermPicNum: action ValVLD:[ltPicNum] ==>
	end

	endDecrefBasePicMarking: action ==> TypeOfVLD:[SKIP_NAL]
	end
end
