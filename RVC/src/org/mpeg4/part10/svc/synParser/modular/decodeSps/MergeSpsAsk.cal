/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.svc.synParser.modular.decodeSps;

actor MergeSpsAsk()
	uint(size=5) NalUnitType,
	uint(size=5) SpsAskedFromPic,
	uint(size=5) SpsAskedFromPps,
	bool         SpsAskedFromSpsSvc
		==>
	uint(size=5) NumSpsAsked,
	uint(size=4) NumSpsExtAsked,
	uint(size=2) SenderOfRequest
		:

	uint(size=2) GET_SPS_FROM_PIC = 0;
	uint(size=2) GET_SPS_FROM_PPS = 1;
	uint(size=2) GET_SPS_FROM_SVC = 2;

	uint(size=5) NAL_SLICE_NON_IDR = 1;
	uint(size=5) NAL_SLICE_IDR     = 5;
	uint(size=5) NAL_PPS           = 8;
	uint(size=5) NAL_SUBSET_SPS    = 15;
	uint(size=5) NAL_SVC_SLICE     = 20;

	uint(size=5) nalUnitTp;

	getNalUnitType.isPic: action NalUnitType:[nalUnitType] ==>
	guard
		nalUnitType = NAL_SLICE_NON_IDR or nalUnitType = NAL_SLICE_IDR
		or nalUnitType = NAL_SVC_SLICE
	do
		nalUnitTp := nalUnitType;
	end

	getNalUnitType.isPps: action NalUnitType:[nalUnitType] ==>
	guard
		nalUnitType = NAL_PPS
	end

	getNalUnitType.isSubSps: action NalUnitType:[nalUnitType] ==>
		SenderOfRequest:[GET_SPS_FROM_SVC]
	guard
		nalUnitType = NAL_SUBSET_SPS
	end

	skipForwardInfo: action NalUnitType:[nalUnitType] ==>
	end

	getSpsForAvcSlice: action SpsAskedFromPic:[numSps] ==>
		SenderOfRequest:[GET_SPS_FROM_PIC], NumSpsAsked:[numSps]
	guard
		nalUnitTp != NAL_SVC_SLICE
	end

	getSpsForSvcSlice: action SpsAskedFromPic:[numSps] ==>
		SenderOfRequest :[GET_SPS_FROM_PIC], NumSpsAsked:[numSps],
		NumSpsExtAsked:[numSps]
	guard
		nalUnitTp = NAL_SVC_SLICE
	end

	getSpsForPps: action SpsAskedFromPps:[numSps] ==>
		SenderOfRequest:[GET_SPS_FROM_PPS], NumSpsAsked:[numSps]
	end

	schedule fsm GetNaluType:
		GetNaluType (getNalUnitType.isPic )--> GetSpsForPic;
		GetNaluType (getNalUnitType.isPps    )--> GetSpsForPps;
		GetNaluType (getNalUnitType.isSubSps )--> GetNaluType;
		GetNaluType (skipForwardInfo         )--> GetNaluType;

		GetSpsForPic  (getSpsForAvcSlice )--> GetNaluType;
		GetSpsForPic  (getSpsForSvcSlice )--> GetNaluType;
		GetSpsForPps (getSpsForPps )--> GetNaluType;
	end
	priority
		getNalUnitType > skipForwardInfo;
	end
end