/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package org.mpeg4.part10.svc.synParser.modular;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor DecodePrefixNalUnit()
	uint(size=2)  NalRefIdc,
	int (size=32) ValVLD
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLDParam
		:

	bool DEBUG;

	askNalUnitHeadSvcExt: action ==>
		TypeOfVLD:[[READ_BITS : for int i in 0 .. 10]] repeat 11,
		VLDParam:[1, 1, 6, 1, 3, 4, 3, 1, 1, 1, 2]
	end

	getNalUnitHeadSvcExt: action ValVLD:[valDecoded] repeat 11 ==>
	do
		if(DEBUG)then
			println("idr_flag : "+valDecoded[1]);
			println("priority_id : "+valDecoded[2]);
			println("no_inter_layer_pred_flag : "+valDecoded[3]);
			println("dependency_id : "+valDecoded[4]);
			println("quality_id : "+valDecoded[5]);
			println("temporal_id : "+valDecoded[6]);
			println("use_ref_base_pic_flag : "+valDecoded[7]);
			println("discardable_flag : "+valDecoded[8]);
			println("output_flag : "+valDecoded[9]);
		end
	end

	getNalRefIdc.isEqualTo0: action NalRefIdc:[nalRefIdc] ==>
		TypeOfVLD:[SKIP_NAL]
	guard
		nalRefIdc = 0
	end

	getNalRefIdc.isNotEqualTo0: action NalRefIdc:[nalRefIdc] ==>
		TypeOfVLD:[READ_BITS], VLDParam:[1]
	guard
		nalRefIdc != 0
	end

	
end