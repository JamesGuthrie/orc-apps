/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.svc.synParser.modular.decodePic;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor MgntLayer()
	bool          IsSvcSlice,
	int (size=32) ValVLD,

	int (size=6)  Header1TypeOfVLD,
	int (size=32) Header1VLDParam,
	int (size=6)  Header2AvcTypeOfVLD,
	int (size=32) Header2AvcVLDParam,
	int (size=6)  Header2SvcTypeOfVLD,
	int (size=32) Header2SvcVLDParam,
	uint(size=5)  DecRefPicMarkingTypeOfVLD,
	int (size=32) DecRefPicMarkingNbBitsToRead,
	uint(size=5)  DecRefBasePicMarkTypeOfVLD,
	int (size=32) DecRefBasePicMarkNbBitsToRead,
	uint(size=5)  RefPicListTypeOfVLD,
	int (size=32) RefPicListNbBitsToRead,
	int (size=6)  DataTypeOfVLD,
	int (size=32) DataVLDParam,
	int (size=6)  MbLayerTypeOfVLD,
	int (size=32) MbLayerVLDParam,
	uint(size=5)  MbPredTypeOfVLD,
	int (size=32) MbPredNbBitsToRead,
	uint(size=5)  SubMbPredTypeOfVLD,
	int (size=32) SubMbPredNbBitsToRead,
	int (size=6)  ResTypeOfVLD,
	int (size=32) ResActorLaunched,
	uint(size=5)  ResBlkCavlcTypeOfVLD,
	int (size=32) ResBlkCavlcVLD_Param
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLD_Param,
	int (size=32) Header1ValVLD,
	int (size=32) Header2AvcValVLD,
	int (size=32) Header2SvcValVLD,
	int (size=32) DecRefPicMarkingValVLD,
	int (size=32) DecRefBasePicMarkValVLD,
	int (size=32) RefPicListValVLD,
	int (size=32) DataValVLD,
	int (size=32) MbLayerValVLD,
	int (size=32) MbPredValVLD,
	int (size=32) SubMbPredValVLD,
	int (size=32) ResBlkCavlcValVLD
		:

	bool          isSvc;
	uint(size=8)  callStack[16];
	uint(size=32) nbParamToDecod := 0;
	uint(size=3)  stackIdx;

	initialize ==>
	do
		stackIdx := 0;
		callStack[0] := SLICE_HEADER1;
	end

	getNewSlice: action IsSvcSlice:[isSvcSlice] ==>
	do
		isSvc :=isSvcSlice;
	end

	findOutNextActor.isSliceHeader1: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER1
	end

	findOutNextActor.isSliceHeader2Avc: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER2 and not isSvc
	end

	findOutNextActor.isSliceHeader2Svc: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER2 and isSvc
	end

	findOutNextActor.isRefPicMark: action ==>
	guard
		callStack[stackIdx] = REF_PIC_MARKING
	end

	findOutNextActor.isRefPicList: action ==>
	guard
		callStack[stackIdx] = REF_PIC_LIST
	end

	findOutNextActor.isSliceData: action ==>
	guard
		callStack[stackIdx] = SLICE_DATA
	end

	findOutNextActor.isMbLayer: action ==>
	guard
		callStack[stackIdx] = MB_LAYER
	end

	findOutNextActor.isMbPred: action ==>
	guard
		callStack[stackIdx] = MB_PRED
	end

	findOutNextActor.isSubMbPred: action ==>
	guard
		callStack[stackIdx] = SUB_MB_PRED
	end

	findOutNextActor.isResidual: action ==>
	guard
		callStack[stackIdx] = RESIDUAL
	end

	findOutNextActor.isResidualCavlc: action ==>
	guard
		callStack[stackIdx] = RESIDUAL_BLOCK_CAVLC
	end

	SliceHeader1.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		Header1ValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	SliceHeader1.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	SliceHeader1.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	SliceHeader1.FunctionWithoutParam: action Header1TypeOfVLD :[ValTypeOfVLD] ==>
		TypeOfVLD :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	SliceHeader1.FunctionWith1Param: action
		Header1TypeOfVLD :[ValTypeOfVLD],
		Header1VLDParam  :[Param]
			==>
		TypeOfVLD       :[ValTypeOfVLD],
		VLD_Param       :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	SliceHeader1.LaunchActor: action
		Header1TypeOfVLD :[Function],
		Header1VLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx       := (stackIdx + 1) &0x0F;
		callStack[stackIdx] := Actor;
	end

	SliceHeader1.Done: action Header1TypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	end

	SlcHead2Avc.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		Header2AvcValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	SlcHead2Avc.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	SlcHead2Avc.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	SlcHead2Avc.FunctionWithoutParam: action Header2AvcTypeOfVLD :[ValTypeOfVLD] ==>
		TypeOfVLD :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	SlcHead2Avc.FunctionWith1Param: action
		Header2AvcTypeOfVLD :[ValTypeOfVLD],
		Header2AvcVLDParam  :[Param]
			==>
		TypeOfVLD       :[ValTypeOfVLD],
		VLD_Param       :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	SlcHead2Avc.LaunchActor: action
		Header2AvcTypeOfVLD :[Function],
		Header2AvcVLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	SlcHead2Avc.Done: action Header2AvcTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	SlcHead2Svc.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		Header2SvcValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	SlcHead2Svc.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	SlcHead2Svc.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	SlcHead2Svc.FunctionWithoutParam: action Header2SvcTypeOfVLD :[ValTypeOfVLD] ==>
		TypeOfVLD :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	SlcHead2Svc.FunctionWith1Param: action
		Header2SvcTypeOfVLD :[ValTypeOfVLD],
		Header2SvcVLDParam  :[Param]
			==>
		TypeOfVLD       :[ValTypeOfVLD],
		VLD_Param       :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	SlcHead2Svc.LaunchActor: action
		Header2SvcTypeOfVLD :[Function],
		Header2SvcVLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	SlcHead2Svc.Done: action Header2SvcTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	RefPicMark.GetVLDVal.Launch: action
		ValVLD                 :[VLDecoding]
			==>
		DecRefPicMarkingValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	RefPicMark.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	RefPicMark.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	RefPicMark.FunctionWithoutParam: action
		DecRefPicMarkingTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD                 :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	RefPicMark.FunctionWith1Param: action
		DecRefPicMarkingTypeOfVLD    :[ValTypeOfVLD],
		DecRefPicMarkingNbBitsToRead :[Param]
			==>
		TypeOfVLD :[ValTypeOfVLD],
		VLD_Param :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	RefPicMark.Done: action DecRefPicMarkingTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	RefPicList.GetVLDVal.Launch: action
		ValVLD           :[VLDecoding]
			==>
		RefPicListValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	RefPicList.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	RefPicList.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	RefPicList.FunctionWithoutParam: action
		RefPicListTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD           :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	RefPicList.FunctionWith1Param: action
		RefPicListTypeOfVLD    :[ValTypeOfVLD],
		RefPicListNbBitsToRead :[Param]
			==>
		TypeOfVLD              :[ValTypeOfVLD],
		VLD_Param              :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	RefPicList.Done: action RefPicListTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	SliceData.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		DataValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	SliceData.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	SliceData.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	SliceData.FunctionWithoutParam: action
		DataTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD     :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	SliceData.FunctionWith1Param: action
		DataTypeOfVLD :[ValTypeOfVLD],
		DataVLDParam  :[Param]
			==>
		TypeOfVLD     :[ValTypeOfVLD],
		VLD_Param     :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	SliceData.LaunchActor: action
		DataTypeOfVLD :[Function],
		DataVLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	SliceData.Done: action DataTypeOfVLD :[Function] ==> TypeOfVLD :[SKIP_NAL]
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	MbLayer.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==> MbLayerValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	MbLayer.GetVLDVal.Done: action ==> 
	guard
		nbParamToDecod = 0
	end

	MbLayer.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	MbLayer.FunctionWithoutParam: action
		MbLayerTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD        :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	MbLayer.FunctionWith1Param: action
		MbLayerTypeOfVLD :[ValTypeOfVLD],
		MbLayerVLDParam  :[Param]
			==>
		TypeOfVLD        :[ValTypeOfVLD],
		VLD_Param        :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	MbLayer.LaunchActor : action
		MbLayerTypeOfVLD :[Function],
		MbLayerVLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	MbLayer.Done: action
		MbLayerTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	MbPred.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		MbPredValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	MbPred.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	MbPred.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	MbPred.FunctionWithoutParam: action MbPredTypeOfVLD :[ValTypeOfVLD] ==>
		TypeOfVLD       :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	MbPred.FunctionWith1Param: action
		MbPredTypeOfVLD    :[ValTypeOfVLD],
		MbPredNbBitsToRead :[VldParam]
			==>
		TypeOfVLD          :[ValTypeOfVLD],
		VLD_Param          :[VldParam]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	MbPred.Done: action MbPredTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	SubMbPred.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
			SubMbPredValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	SubMbPred.GetVLDVal.Done: action ==>
	guard
		nbParamToDecod = 0
	end

	SubMbPred.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	SubMbPred.FunctionWithoutParam: action SubMbPredTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD          :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	SubMbPred.FunctionWith1Param: action
		SubMbPredTypeOfVLD    :[ValTypeOfVLD],
		SubMbPredNbBitsToRead :[VldParam]
			==>
		TypeOfVLD             :[ValTypeOfVLD],
		VLD_Param             :[VldParam]
	guard
			NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	SubMbPred.Done: action
		SubMbPredTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end


	Residual.LaunchActor: action
		ResTypeOfVLD     :[Function],
		ResActorLaunched :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	Residual.Done: action
		ResTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	ResBlkCavlc.GetVLDVal.Launch: action
		ValVLD            :[VLDecoding]
			==>
		ResBlkCavlcValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	ResBlkCavlc.GetVLDVal.Done: action
			==>
	guard
		nbParamToDecod = 0
	end

	ResBlkCavlc.FunctionWithoutParam: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD            :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	ResBlkCavlc.FunctionWith1Param: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
		ResBlkCavlcVLD_Param :[Param]
			==>
		TypeOfVLD            :[ValTypeOfVLD],
		VLD_Param            :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	ResBlkCavlc.FunctionWith2Param: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
		ResBlkCavlcVLD_Param :[Param1 , Param2]
			==>
		TypeOfVLD            :[ValTypeOfVLD],
		VLD_Param            :[Param1 , Param2]
	guard
		NbParamForFunction(ValTypeOfVLD) = 2
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	ResBlkCavlc.WaitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	ResBlkCavlc.Done: action
		ResBlkCavlcTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	schedule fsm GetNewSlice:
		GetNewSlice (getNewSlice )--> LaunchSlcHead;

		FindOutNextActor (findOutNextActor.isSliceHeader1    )--> LaunchSlcHead;
		FindOutNextActor (findOutNextActor.isSliceHeader2Avc )--> LaunchSlcHead2Avc;
		FindOutNextActor (findOutNextActor.isSliceHeader2Svc )--> LaunchSlcHead2Svc;
		FindOutNextActor (findOutNextActor.isRefPicMark      )--> LaunchRefPicMark;
		FindOutNextActor (findOutNextActor.isRefPicList      )--> LaunchRefPicList;
		FindOutNextActor (findOutNextActor.isSliceData       )--> LaunchSliceData;
		FindOutNextActor (findOutNextActor.isMbLayer         )--> LaunchMbLayer;
		FindOutNextActor (findOutNextActor.isMbPred          )--> LaunchMbPred;
		FindOutNextActor (findOutNextActor.isSubMbPred       )--> LaunchSubMbPred;
		FindOutNextActor (findOutNextActor.isResidual        )--> LaunchResidual;
		FindOutNextActor (findOutNextActor.isResidualCavlc   )--> LaunchResBlkCavlc;

		LaunchSlcHead (SliceHeader1.FunctionWithoutParam )--> LaunchSlcHead;
		LaunchSlcHead (SliceHeader1.FunctionWith1Param   )--> LaunchSlcHead;
		LaunchSlcHead (SliceHeader1.WaitVLDVal           )--> LaunchSliceHeaderGetVLDVal;
		LaunchSlcHead (SliceHeader1.LaunchActor          )--> FindOutNextActor;
		LaunchSlcHead (SliceHeader1.Done                 )--> GetNewSlice;
			LaunchSliceHeaderGetVLDVal (SliceHeader1.GetVLDVal.Launch )--> LaunchSliceHeaderGetVLDVal;
			LaunchSliceHeaderGetVLDVal (SliceHeader1.GetVLDVal.Done   )--> LaunchSlcHead;

		LaunchSlcHead2Avc (SlcHead2Avc.FunctionWithoutParam )--> LaunchSlcHead2Avc;
		LaunchSlcHead2Avc (SlcHead2Avc.FunctionWith1Param   )--> LaunchSlcHead2Avc;
		LaunchSlcHead2Avc (SlcHead2Avc.WaitVLDVal           )--> LaunchSlcHead2AvcGetVLDVal;
		LaunchSlcHead2Avc (SlcHead2Avc.LaunchActor          )--> FindOutNextActor;
		LaunchSlcHead2Avc (SlcHead2Avc.Done                 )--> FindOutNextActor;
			LaunchSlcHead2AvcGetVLDVal (SlcHead2Avc.GetVLDVal.Launch )--> LaunchSlcHead2AvcGetVLDVal;
			LaunchSlcHead2AvcGetVLDVal (SlcHead2Avc.GetVLDVal.Done   )--> LaunchSlcHead2Avc;

		LaunchSlcHead2Svc (SlcHead2Svc.FunctionWithoutParam )--> LaunchSlcHead2Svc;
		LaunchSlcHead2Svc (SlcHead2Svc.FunctionWith1Param   )--> LaunchSlcHead2Svc;
		LaunchSlcHead2Svc (SlcHead2Svc.WaitVLDVal           )--> LaunchSlcHead2SvcGetVLDVal;
		LaunchSlcHead2Svc (SlcHead2Svc.LaunchActor          )--> FindOutNextActor;
		LaunchSlcHead2Svc (SlcHead2Svc.Done                 )--> FindOutNextActor;
			LaunchSlcHead2SvcGetVLDVal (SlcHead2Svc.GetVLDVal.Launch )--> LaunchSlcHead2SvcGetVLDVal;
			LaunchSlcHead2SvcGetVLDVal (SlcHead2Svc.GetVLDVal.Done   )--> LaunchSlcHead2Svc;
	
		LaunchRefPicMark (RefPicMark.FunctionWithoutParam )--> LaunchRefPicMark;
		LaunchRefPicMark (RefPicMark.FunctionWith1Param   )--> LaunchRefPicMark;
		LaunchRefPicMark (RefPicMark.WaitVLDVal           )--> LaunchRefPicMarkGetVLDVal;
		LaunchRefPicMark (RefPicMark.Done                 )--> LaunchSlcHead2Avc;
			LaunchRefPicMarkGetVLDVal (RefPicMark.GetVLDVal.Launch )--> LaunchRefPicMarkGetVLDVal;
			LaunchRefPicMarkGetVLDVal (RefPicMark.GetVLDVal.Done   )--> LaunchRefPicMark;
		
		LaunchRefPicList (RefPicList.FunctionWithoutParam )--> LaunchRefPicList;
		LaunchRefPicList (RefPicList.FunctionWith1Param   )--> LaunchRefPicList;
		LaunchRefPicList (RefPicList.WaitVLDVal           )--> LaunchRefPicListGetVLDVal;
		LaunchRefPicList (RefPicList.Done                 )--> LaunchSlcHead2Avc;
			LaunchRefPicListGetVLDVal (RefPicList.GetVLDVal.Launch )--> LaunchRefPicListGetVLDVal;
			LaunchRefPicListGetVLDVal (RefPicList.GetVLDVal.Done   )--> LaunchRefPicList;
	
		LaunchSliceData   (SliceData.FunctionWithoutParam   )--> LaunchSliceData;
		LaunchSliceData   (SliceData.FunctionWith1Param     )--> LaunchSliceData;
		LaunchSliceData   (SliceData.WaitVLDVal             )--> LaunchSliceDataGetVLDVal;
		LaunchSliceData   (SliceData.LaunchActor            )--> FindOutNextActor;
		LaunchSliceData   (SliceData.Done                   )--> FindOutNextActor;
			LaunchSliceDataGetVLDVal   (SliceData.GetVLDVal.Launch )--> LaunchSliceDataGetVLDVal;
			LaunchSliceDataGetVLDVal   (SliceData.GetVLDVal.Done   )--> LaunchSliceData;
		
		LaunchMbLayer    (MbLayer.FunctionWithoutParam    )--> LaunchMbLayer;
		LaunchMbLayer    (MbLayer.FunctionWith1Param      )--> LaunchMbLayer;
		LaunchMbLayer    (MbLayer.WaitVLDVal              )--> LaunchMbLayerGetVLDVal;
		LaunchMbLayer    (MbLayer.Done                    )--> FindOutNextActor;
		LaunchMbLayer    (MbLayer.LaunchActor             )--> FindOutNextActor;
			LaunchMbLayerGetVLDVal    (MbLayer.GetVLDVal.Launch    )--> LaunchMbLayerGetVLDVal;
			LaunchMbLayerGetVLDVal    (MbLayer.GetVLDVal.Done      )--> LaunchMbLayer;
		
		LaunchMbPred    (MbPred.FunctionWithoutParam    )--> LaunchMbPred;
		LaunchMbPred    (MbPred.FunctionWith1Param      )--> LaunchMbPred;
		LaunchMbPred    (MbPred.WaitVLDVal              )--> LaunchMbPredGetVLDVal;
		LaunchMbPred    (MbPred.Done                    )--> FindOutNextActor;
			LaunchMbPredGetVLDVal    (MbPred.GetVLDVal.Launch )--> LaunchMbPredGetVLDVal;
			LaunchMbPredGetVLDVal    (MbPred.GetVLDVal.Done   )--> LaunchMbPred;
		
		LaunchSubMbPred (SubMbPred.FunctionWithoutParam )--> LaunchSubMbPred;
		LaunchSubMbPred (SubMbPred.FunctionWith1Param   )--> LaunchSubMbPred;
		LaunchSubMbPred (SubMbPred.WaitVLDVal           )--> LaunchSubMbPredGetVLDVal;
		LaunchSubMbPred (SubMbPred.Done                 )--> FindOutNextActor;
			LaunchSubMbPredGetVLDVal (SubMbPred.GetVLDVal.Launch )--> LaunchSubMbPredGetVLDVal;
			LaunchSubMbPredGetVLDVal (SubMbPred.GetVLDVal.Done   )--> LaunchSubMbPred;
	
		LaunchResidual  (Residual.Done                  )--> FindOutNextActor;
		LaunchResidual  (Residual.LaunchActor           )--> FindOutNextActor;
	
		LaunchResBlkCavlc (ResBlkCavlc.FunctionWithoutParam )--> LaunchResBlkCavlc;
		LaunchResBlkCavlc (ResBlkCavlc.FunctionWith1Param   )--> LaunchResBlkCavlc;
		LaunchResBlkCavlc (ResBlkCavlc.FunctionWith2Param   )--> LaunchResBlkCavlc;
		LaunchResBlkCavlc (ResBlkCavlc.WaitVLDVal           )--> LaunchResBlkCavlcGetVLDVal;
		LaunchResBlkCavlc (ResBlkCavlc.Done                 )--> FindOutNextActor;
			LaunchResBlkCavlcGetVLDVal (ResBlkCavlc.GetVLDVal.Launch      )--> LaunchResBlkCavlcGetVLDVal;
			LaunchResBlkCavlcGetVLDVal (ResBlkCavlc.GetVLDVal.Done        )--> LaunchResBlkCavlc;
	end
	priority
		SliceHeader1.FunctionWithoutParam > SliceHeader1.FunctionWith1Param > SliceHeader1.WaitVLDVal > SliceHeader1.LaunchActor;
		SliceHeader1.LaunchActor      > SliceHeader1.Done;
		SliceHeader1.GetVLDVal.Launch > SliceHeader1.GetVLDVal.Done;

		SlcHead2Avc.FunctionWithoutParam > SlcHead2Avc.FunctionWith1Param > SlcHead2Avc.WaitVLDVal > SlcHead2Avc.LaunchActor;
		SlcHead2Avc.LaunchActor > SlcHead2Avc.Done;
		SlcHead2Avc.GetVLDVal.Launch > SlcHead2Avc.GetVLDVal.Done;

		SlcHead2Svc.FunctionWithoutParam > SlcHead2Svc.FunctionWith1Param > SlcHead2Svc.WaitVLDVal > SlcHead2Svc.LaunchActor;
		SlcHead2Svc.LaunchActor > SlcHead2Svc.Done;
		SlcHead2Svc.GetVLDVal.Launch > SlcHead2Svc.GetVLDVal.Done;

		RefPicMark.FunctionWithoutParam  > RefPicMark.FunctionWith1Param  > RefPicMark.WaitVLDVal > RefPicMark.Done;
		RefPicMark.GetVLDVal.Launch > RefPicMark.GetVLDVal.Done;
		RefPicList.FunctionWithoutParam  > RefPicList.FunctionWith1Param  > RefPicList.WaitVLDVal > RefPicList.Done;
		RefPicList.GetVLDVal.Launch > RefPicList.GetVLDVal.Done;

		SliceData.FunctionWithoutParam   > SliceData.FunctionWith1Param   > SliceData.WaitVLDVal          > SliceData.LaunchActor        > SliceData.Done;
		SliceData.GetVLDVal.Launch       > SliceData.GetVLDVal.Done;
		MbLayer.FunctionWithoutParam     > MbLayer.FunctionWith1Param     > MbLayer.WaitVLDVal             > MbLayer.LaunchActor         > MbLayer.Done;
		MbLayer.GetVLDVal.Launch         > MbLayer.GetVLDVal.Done;
		MbPred.FunctionWithoutParam      > MbPred.FunctionWith1Param      > MbPred.WaitVLDVal              > MbPred.Done;
		MbPred.GetVLDVal.Launch          > MbPred.GetVLDVal.Done;
		SubMbPred.FunctionWithoutParam   > SubMbPred.FunctionWith1Param   > SubMbPred.WaitVLDVal           > SubMbPred.Done;
		SubMbPred.GetVLDVal.Launch       > SubMbPred.GetVLDVal.Done;
		ResBlkCavlc.FunctionWithoutParam > ResBlkCavlc.FunctionWith1Param > ResBlkCavlc.FunctionWith2Param > ResBlkCavlc.WaitVLDVal > ResBlkCavlc.Done;
		ResBlkCavlc.GetVLDVal.Launch     > ResBlkCavlc.GetVLDVal.Done;
	end
end
