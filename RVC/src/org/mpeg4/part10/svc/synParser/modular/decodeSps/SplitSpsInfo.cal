/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.svc.synParser.modular.decodeSps;

actor SplitSpsInfo()
	int (size=32) Parameters,
	uint(size=2)  SenderOfRequest
		==>
	uint(size=32) AvcDataParam,
	int (size=32) AvcHeaderParam,
	uint(size=32) PpsParameters,
	int (size=32) SubSpsParameters,
	uint(size=32) SvcDataParam,
	int (size=32) SvcHeaderParam
		:

	uint(size=2) GET_SPS_FROM_AVC    = 0;
	uint(size=2) GET_SPS_FROM_PPS    = 1;
	uint(size=2) GET_SPS_FROM_SVC    = 2;
	uint(size=2) GET_SPS_FROM_SUBSET = 3;

	uint(size=32) nbValLeft;

	selectOutput.avc: action SenderOfRequest:[sender],
		Parameters:[sizeOfHeaderList] ==>
	guard
		sender = GET_SPS_FROM_AVC
	do
		nbValLeft := sizeOfHeaderList;
	end

	selectOutput.pps: action SenderOfRequest:[send], Parameters:[szOfList] ==>
	guard
		send = GET_SPS_FROM_PPS
	do
		nbValLeft := szOfList;
	end

	selectOutput.subset: action SenderOfRequest:[send], Parameters:[szOfList] ==>
	guard
		send = GET_SPS_FROM_SUBSET
	do
		nbValLeft := szOfList;
	end

	selectOutput.svc: action SenderOfRequest:[sender],
		Parameters:[sizeOfHeaderList] ==>
	guard
		sender = GET_SPS_FROM_SVC
	do
		nbValLeft := sizeOfHeaderList;
	end

	getInfoForSubset.launch: action Parameters:[parameterValue] ==> 
		SubSpsParameters:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForSubset.done: action ==>
	guard
		nbValLeft = 0
	end

	getInfoForPps.launch: action Parameters:[parameterValue] ==>
		PpsParameters:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForPps.done: action ==>
	guard
		nbValLeft = 0
	end

	getInfoForAvcHeader.launch: action Parameters:[parameterValue] ==> 
		AvcHeaderParam:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForAvcHeader.done: action Parameters:[sizeOfDataList] ==>
	guard
		nbValLeft = 0
	do
		nbValLeft := sizeOfDataList;
	end

	getInfoForAvcData.launch: action Parameters:[parameterValue] ==>
		AvcDataParam:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForAvcData.done: action ==>
	guard
		nbValLeft = 0
	end

	getInfoForSvcHeader.launch: action Parameters:[parameterValue] ==> 
		SvcHeaderParam:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForSvcHeader.done: action Parameters:[sizeOfDataList] ==>
	guard
		nbValLeft = 0
	do
		nbValLeft := sizeOfDataList;
	end

	getInfoForSvcData.launch: action Parameters:[parameterValue] ==>
		SvcDataParam:[parameterValue]
	guard
		nbValLeft > 0
	do
		nbValLeft := nbValLeft - 1;
	end

	getInfoForSvcData.done: action ==>
	guard
		nbValLeft = 0
	end

	schedule fsm SelectOutput:
		SelectOutput (selectOutput.avc    )--> GetInfoForAvcHeader;
		SelectOutput (selectOutput.pps    )--> GetInfoForPps;
		SelectOutput (selectOutput.subset )--> GetInfoForSubset;
		SelectOutput (selectOutput.svc    )--> GetInfoForSvcHeader;

		GetInfoForSubset (getInfoForSubset.launch )--> GetInfoForSubset;
		GetInfoForSubset (getInfoForSubset.done   )--> SelectOutput;

		GetInfoForPps (getInfoForPps.launch )--> GetInfoForPps;
		GetInfoForPps (getInfoForPps.done   )--> SelectOutput;

		GetInfoForAvcHeader (getInfoForAvcHeader.launch )--> GetInfoForAvcHeader;
		GetInfoForAvcHeader (getInfoForAvcHeader.done   )--> GetInfoForAvcData;
		GetInfoForAvcData (getInfoForAvcData.launch )--> GetInfoForAvcData;
		GetInfoForAvcData (getInfoForAvcData.done   )--> SelectOutput;

		GetInfoForSvcHeader (getInfoForSvcHeader.launch )--> GetInfoForSvcHeader;
		GetInfoForSvcHeader (getInfoForSvcHeader.done   )--> GetInfoForSvcData;
		GetInfoForSvcData (getInfoForSvcData.launch )--> GetInfoForSvcData;
		GetInfoForSvcData (getInfoForSvcData.done   )--> SelectOutput;
	end
end