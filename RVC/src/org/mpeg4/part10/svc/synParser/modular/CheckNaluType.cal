/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package org.mpeg4.part10.svc.synParser.modular;

import std.util.BitOps.*;

actor CheckNaluType()
	uint(size=8) RbspByte,
	bool         NewNal,

	bool         SpsSkipNal,
	bool         SeiSkipNal,
	bool         PpsSkipNal,
	bool         PicSkipNal
		==>
	uint(size=8) SpsRbsp,
	bool         SpsNewNal,
	uint(size=5) NalUnitType,

	uint(size=8) SeiRbsp,
	bool         SeiNewNal,

	uint(size=8) PpsRbsp,
	bool         PpsNewNal,

	uint(size=8) PicRbsp,
	bool         PicNewNal,
	bool         PicIsAnIdr,
	uint(size=2) PicNalRefIdc,
	bool             PicIsSvc,
	uint(size=4) HeadSvcExt,
	uint(size=5) PicNalUnitType
		:


/*
* 
* Constants 
*
*/
	uint(size=5) NAL_SLICE_NON_IDR =  1;
	uint(size=5) NAL_SLICE_IDR     =  5;
	uint(size=5) NAL_SEI           =  6;
	uint(size=5) NAL_SPS           =  7;
	uint(size=5) NAL_PPS           =  8;
	uint(size=5) NAL_PREFIX_NAL    = 14;
	uint(size=5) NAL_SUBSET_SPS    = 15;
	uint(size=5) NAL_SVC_SLICE     = 20;

	bool DEBUG_FLAG_DECODED = true;

/*
* 
* State variables 
*
*/

	uint(size=5) nal_unit_type := 0;
	uint(size=2) nalRefIdc   := 0;


/*
* 
* Actions 
*
*/

	WaitForNewNal: action NewNal:[IsNewNal], RbspByte:[ValRbsp] ==>
	guard
		IsNewNal = false
	end

	NewNalDetected: action NewNal:[IsNewNal] ==>
	guard
		IsNewNal = true
	end

	ReadNaluType: action NewNal:[IsNewNal], RbspByte:[ValRbsp] ==>
		NalUnitType:[nal_unit_type]
	do
		nal_unit_type := (ValRbsp & 0x1F);
		nalRefIdc   := (ValRbsp >> 5) & 0x03;
		if(DEBUG_FLAG_DECODED)then
			println("nal_unit_type:"+nal_unit_type+"; nalRefIdc:"+nalRefIdc);
		end
	end

	IsSps: action ==>
	guard
		(nal_unit_type = NAL_SPS) or (nal_unit_type = NAL_SUBSET_SPS)
	do
		if(DEBUG_FLAG_DECODED)then
			if(nal_unit_type = NAL_SPS) then
				println("Is Sps");
			else
				println("Is SubsetSps");
			end
		end	
	end

	IsPps: action ==>
	guard
		nal_unit_type = NAL_PPS
	do
		if(DEBUG_FLAG_DECODED)then
			println("Is Pps");
		end	
	end

	IsAvcSlice: action ==> PicIsAnIdr:[isIdrSlice],	PicNalRefIdc:[nalRefIdc],
		PicIsSvc:[false], PicNalUnitType:[nal_unit_type]
	guard
		nal_unit_type = NAL_SLICE_IDR or nal_unit_type = NAL_SLICE_NON_IDR
	do
		bool isIdrSlice = (nal_unit_type = NAL_SLICE_IDR);
		
		if(DEBUG_FLAG_DECODED)then
			if(isIdrSlice) then
				println("Is SliceIdr");
			else
				println("Is SliceNonIdr");
			end
		end	
	end

	IsSvcSlice: action NewNal:[IsNewNal] repeat 3, RbspByte:[ValRbsp]repeat 3
		==> PicIsAnIdr:[isIdrSlice], PicNalRefIdc:[nalRefIdc],
		PicIsSvc:[true], HeadSvcExt:[headSvcExt] repeat 2,
		PicNalUnitType:[nal_unit_type]
	guard
		nal_unit_type = NAL_SVC_SLICE
	do
		bool isIdrSlice = ( (ValRbsp[0]&0x20) != 0 );
		uint(size=4) headSvcExt[2];
		bool noInterLayPred = ((ValRbsp[1] & 0x80) != 0);
		bool useRefBasePicMark = ((ValRbsp[2] & 0x10) != 0);

		headSvcExt[0] := (ValRbsp[1] & 0x0F);
		headSvcExt[1] := setFlag(noInterLayPred, 0,
			setFlag(useRefBasePicMark, 1, 0));
		if(DEBUG_FLAG_DECODED)then
			if(isIdrSlice) then
				println("Is SliceIdr");
			else
				println("Is SliceNonIdr");
			end
		end	
	end

	IsSei: action ==>
	guard
		nal_unit_type = NAL_SEI
	do
		if(DEBUG_FLAG_DECODED)then
			println("Is Sei");
		end	
	end

	IsPrefix: action ==> PicNalUnitType:[nal_unit_type], PicNalRefIdc:[nalRefIdc]
	guard
		nal_unit_type = NAL_PREFIX_NAL
	do
		if(DEBUG_FLAG_DECODED)then
			println("Is Prefix");
		end	
	end

	NalUnitType_Unknown: action ==>
//	guard
		/*nal_unit_type != NAL_SVC_SLICE*/
	do
		if(DEBUG_FLAG_DECODED)then
			println("NalUnitType_Unknown");
		end
	end

	Sps.ReadData: action
			NewNal    :[IsNewNal],
			RbspByte  :[ValRbsp]
				==>
			SpsNewNal :[false],
			SpsRbsp   :[ValRbsp]
		guard
			IsNewNal   = false
		end

	Sps.EndOfNal: action
			NewNal    :[IsNewNal]
				==>
			SpsNewNal :[true]
		guard
			IsNewNal = true
		end

	Sps.EndOfProcess: action
			SpsSkipNal:[EndOfProcessing]
				==>
		guard
			EndOfProcessing = true
		end

	Sei.ReadData: action
			NewNal    :[IsNewNal],
			RbspByte  :[ValRbsp]
				==>
			SeiNewNal :[false],
			SeiRbsp   :[ValRbsp]
		guard
			IsNewNal   = false
		end

	Sei.EndOfNal: action
			NewNal    :[IsNewNal]
				==>
			SeiNewNal :[true]
		guard
			IsNewNal = true
		end

	Sei.EndOfProcess: action
			SeiSkipNal:[EndOfProcessing]
				==>
		guard
			EndOfProcessing = true
		end	

	Pps.ReadData: action
			NewNal    :[IsNewNal],
			RbspByte  :[ValRbsp]
				==>
			PpsNewNal :[false],
			PpsRbsp   :[ValRbsp]
		guard
			IsNewNal   = false
		end

	Pps.EndOfNal: action
			NewNal    :[IsNewNal]
				==>
			PpsNewNal :[true]
		guard
			IsNewNal = true
		end

	Pps.EndOfProcess: action
			PpsSkipNal:[EndOfProcessing]
				==>
		guard
			EndOfProcessing = true
		end

	SliceHAndS.ReadData: action
			NewNal    :[IsNewNal],
			RbspByte  :[ValRbsp]
				==>
			PicNewNal :[false],
			PicRbsp   :[ValRbsp]
		guard
			IsNewNal   = false
		end

	SliceHAndS.EndOfNal: action
			NewNal    :[IsNewNal]
				==>
			PicNewNal :[true]
		guard
			IsNewNal = true
		end

	SliceHAndS.EndOfProcess: action
			PicSkipNal:[EndOfProcessing]
				==>
		guard
			EndOfProcessing = true
		end

	schedule fsm WaitForNewNal:
		WaitForNewNal        (WaitForNewNal            )--> WaitForNewNal;
		WaitForNewNal        (NewNalDetected           )--> ReadNaluType;

		ReadNaluType         (ReadNaluType             )--> CheckNaluType;

		CheckNaluType        (IsAvcSlice               )--> ReadData4Slice;
//		CheckNaluType        (IsSvcSlice               )--> ReadData4Slice;
		CheckNaluType        (IsSps                    )--> ReadData4Sps;
		CheckNaluType        (IsPps                    )--> ReadData4Pps;
//		CheckNaluType        (IsSei                    )--> undefined;
		CheckNaluType        (IsPrefix                 )--> ReadData4Slice;
		CheckNaluType        (NalUnitType_Unknown      )--> WaitForNewNal;

		ReadData4Sps         (Sps.ReadData             )--> ReadData4Sps;
		ReadData4Sps         (Sps.EndOfNal             )--> SpsWaitEndOfProcess;

		SpsWaitEndOfProcess  (Sps.EndOfProcess         )--> ReadNaluType;

		ReadData4Pps         (Pps.ReadData             )--> ReadData4Pps;
		ReadData4Pps         (Pps.EndOfNal             )--> PpsWaitEndOfProcess;

		PpsWaitEndOfProcess  (Pps.EndOfProcess         )--> ReadNaluType;

		ReadData4Slice       (SliceHAndS.ReadData      )--> ReadData4Slice;
		ReadData4Slice       (SliceHAndS.EndOfNal      )--> SliceWaitEndOfProcess;

		SliceWaitEndOfProcess (SliceHAndS.EndOfProcess )--> ReadNaluType;
	end
	priority
		WaitForNewNal       > NewNalDetected;	
		IsSvcSlice          > IsAvcSlice > IsPps  >  IsSps;
		IsSps               > IsPrefix   > NalUnitType_Unknown;
		Sps.ReadData        > Sps.EndOfNal;
		Pps.ReadData        > Pps.EndOfNal;
		SliceHAndS.ReadData > SliceHAndS.EndOfNal;
	end
end