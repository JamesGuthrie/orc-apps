/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.svc.synParser.modular.decodePic;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor MgntDecodePic()
	int (size=6)  Header1TypeOfVLD,
	int (size=32) Header1VLDParam,
	int (size=32) ValDecoding
		==>
	int (size=32) Header1ValDecod,
	uint(size=5)  TypeOfVLD,
	int (size=32) VldParam
		:

	uint(size=8)  callStack[16];
	uint(size=32) nbParamToDecod := 0;
	uint(size=3)  stackIdx;

	initialize ==>
	do
		stackIdx     := 0;
		callStack[0] := SLICE_HEADER1;
	end

	findOutNextActor.isSliceHeader1: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER1
	end

	getVldVal.done: action ==>
	guard
		nbParamToDecod = 0
	end

	waitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	sliceHeader1.vld.withoutParam: action Header1TypeOfVLD:[typeOfVld] ==>
		TypeOfVLD:[typeOfVld]
	guard
		NbParamForFunction(typeOfVld) = 0,
		typeOfVld  != SKIP_NAL
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceHeader1.vld.with1Param: action Header1TypeOfVLD:[typeOfVld],
		Header1VLDParam:[param] ==> TypeOfVLD:[typeOfVld], VldParam:[param]
	guard
		NbParamForFunction(typeOfVld) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceHeader1.getVldVal: action ValDecoding:[valDecoded] ==>
		Header1ValDecod:[valDecoded]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	sliceHeader1.launchActor: action Header1TypeOfVLD:[typeOfVld],
		Header1VLDParam:[actorLaunched] ==>
	guard
		typeOfVld = LAUNCH_ACTOR
	do
		stackIdx       := (stackIdx + 1) &0x0F;
		callStack[stackIdx] := actorLaunched;
	end

	sliceHeader1.done: action Header1TypeOfVLD:[typeOfVld] ==>
	TypeOfVLD:[SKIP_NAL] //Delete me !!
	guard
		typeOfVld = SKIP_NAL
	end

	schedule fsm FindOutNextActor:
		FindOutNextActor (findOutNextActor.isSliceHeader1    )--> LaunchSlcHead;

		LaunchSlcHead (sliceHeader1.vld         )--> LaunchSlcHead;
		LaunchSlcHead (waitVLDVal               )--> SlcHeadGetVLDVal;
		LaunchSlcHead (sliceHeader1.launchActor )--> FindOutNextActor;
		LaunchSlcHead (sliceHeader1.done        )--> LaunchSlcHead;
			SlcHeadGetVLDVal (sliceHeader1.getVldVal )--> SlcHeadGetVLDVal;
			SlcHeadGetVLDVal (getVldVal.done         )--> LaunchSlcHead;
	end
	priority
		sliceHeader1.vld > waitVLDVal > sliceHeader1.launchActor > sliceHeader1.done;
	end
end
