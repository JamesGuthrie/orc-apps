/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), 
in the course of development of the ISO/IEC 23002-4 for reference purposes and its performance may 
not have been optimized. This software module is an implementation of one or more tools as specified 
by the ISO/IEC 23002-4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, 
and make derivative works of this software module or modifications thereof for use in implementations 
of the ISO/IEC 23002-4  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing 
patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU 
Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the ISO/IEC 23002-4 once 
the ISO/IEC 23002-4 has been adopted; and (2) to develop the ISO/IEC 23002-4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed 
software module or modifications thereof in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a 
royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works 
for use in implementations of the ISO/IEC 23002-4 in products that satisfy conformance criteria (if any), 
and to the extent that such originally developed software module or portions of it are included in 
the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be 
required to make, use, or sell the originally developed software module or portions thereof included in 
the ISO/IEC 23002-4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that 
it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with 
applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole 
purpose of developing the ISO/IEC 23002-4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign 
or donate the code to a third party and to inhibit third parties from using the code for products that 
do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.

This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 

*****************************************************************************/
package org.mpeg4.part10.svc;
import std.util.BitOps.*;

actor Algo_RUS_init_residu_tab(bool luma) int(size=32) In_NAL, int(size=16) In_SPS ==> int (size=16)X16 , int (size=16) XK16, int (size=16) XP16, int (size=16)Y16 , int (size=16) YK16, int (size=16) YP16 
:
  
  int n:=0;
  int nx := 0;
  int ny := 0; 
  int refW;
  int refH;
  int scaledW;
  int scaledH;
  int seq_scaled_ref_layer_left_offset := 0;
  int seq_scaled_ref_layer_top_offset := 0;
  int chroma_phase_x_plus1_flag:=0;
   
  //non_diadic, is_cropping, RefLayerPicWidthInSamples, RefLayerPicHeightInSamples, ScaledRefLayerPicWidthInSamples, ScaledRefLayerPicHeightInSamples
  List( type:int(size=32), size=6 ) in_nal := [ 0 : for int i in 1 .. 6 ]; 
  List( type:int(size=16), size=1920 ) x16 := [ 0 : for int i in 1 .. 1920 ];
  List( type:int(size=16), size=1920 ) xk16 := [ 0 : for int i in 1 .. 1920 ];
  List( type:int(size=16), size=1920 ) xp16 := [ 0 : for int i in 1 .. 1920 ];
  List( type:int(size=16), size=1080 ) y16 := [ 0 : for int i in 1 .. 1080 ];
  List( type:int(size=16), size=1080 ) yk16 := [ 0 : for int i in 1 .. 1080 ];
  List( type:int(size=16), size=1080 ) yp16 := [ 0 : for int i in 1 .. 1080 ];
    
  get_In_NAL: action In_NAL:[f] ==>
  guard
    n < 6
  do
    in_nal[n] := f;
    n := n+1;
    if n = 6 then
      refW := in_nal[2];
      refH := in_nal[3];
  	  scaledW := in_nal[4];
  	  scaledH := in_nal[5];
    end
  end
  
  get_In_SPS: action In_SPS:[f] ==>
  guard
    n>5 and n < 9
  do
    if n = 6 then
      seq_scaled_ref_layer_left_offset := f;
      if in_nal[1] = 0 then seq_scaled_ref_layer_left_offset := 0; end
    else
    if n=7 then 
      seq_scaled_ref_layer_top_offset := f;
      if in_nal[1] = 0 then seq_scaled_ref_layer_top_offset := 0; end
    else
      chroma_phase_x_plus1_flag := f;
    end
    end
    n := n+1;
  end
     
  init_residu_tab: action ==>
  var 
    int scaleX, int scaleY, int k1, int p1, int x1, int offset_x, int offset_y
  do
  	  scaleX := ( lshift( refW, 16) + rshift( scaledW, 1) ) / scaledW;
	  if(luma) then
	    scaleY := ( lshift( refW, 15) + rshift( scaledW, 1) ) / scaledW;
	    offset_x := 2*seq_scaled_ref_layer_left_offset;
	    offset_y := 2*seq_scaled_ref_layer_top_offset;
	  else  //name = "chroma" 
	    scaleY := ( lshift( refW, 14) + rshift( scaledW, 1) ) / scaledW;
	    offset_x := seq_scaled_ref_layer_left_offset;
	    offset_y := seq_scaled_ref_layer_top_offset;
	  end
	   
	  foreach int i in 0 .. scaledW do
	    if(luma) then
	      k1 := rshift((i*scaleX + scaleY - 30720),12);
		else  //name = "chroma"
		  k1 := rshift((i*scaleX + (2 + chroma_phase_x_plus1_flag) * scaleY + 2048),12) - 4 * (2 + chroma_phase_x_plus1_flag);
		end
		if k1 < 0 then
			k1 := 0;
		end
		
		x1 := rshift(k1, 4);
		k1 := k1 - x1 * 16;
		if(luma) then
		  if k1 > 7  and (x1 + 1) < scaledW then
		    p1 := ( x1 + 1 );
		  else 
		    p1 := x1;
		  end
		else  //name = "chroma"
		  if k1 > 7  and (x1 + 1) < rshift(scaledW,1) then
		    p1 := ( x1 + 1 );
		  else 
		    p1 := x1;
		  end
		end
		x16[i+offset_x] := x1; 
		xk16[i+offset_x] := k1; 
		xp16[i+offset_x] := p1;
	  end
	  
	  scaleX := ( lshift( refH, 16) + rshift( scaledH, 1) ) / scaledH;
	  scaleY := ( lshift( refH, 15) + rshift( scaledH, 1) ) / scaledH;
	  
	  foreach int i in 0 .. scaledH do
	    k1 := rshift((i*scaleX + scaleY - 30720),12);
		if k1 < 0 then
			k1 := 0;
		end
		
		x1 := rshift(k1, 4);
		k1 := k1 - x1 * 16;
		
		if(luma) then
		  if k1 > 7  and (x1 + 1) < scaledH then
		    p1 := ( x1 + 1 );
		  else  
		    p1 := x1;
		  end
		else  //name = "chroma"
		  if k1 > 7  and (x1 + 1) < rshift(scaledH,1) then
		    p1 := ( x1 + 1 );
		  else 
		    p1 := x1;
		  end
		end
		
		y16[i+offset_y] := x1; 
		yk16[i+offset_y] := k1; 
		yp16[i+offset_y] := p1;
	  end 
  end
  
  X16_XK16_XP16_out: action ==> X16:[ a ],XK16:[ b ], XP16:[ c ]
  guard
    nx < scaledW
  var int a, int b, int c   
  do
     a := x16[nx];
     b := xk16[nx];
     c := xp16[nx];
     nx := nx +1;
  end
  
  Y16_YK16_YP16_out: action ==> Y16:[ a ],YK16:[ b ], YP16:[ c ]
  guard
    ny < scaledH
  var int a, int b, int c   
  do
     a := y16[ny];
     b := yk16[ny];
     c := yp16[ny];
     ny := ny +1;
  end
  
  
  out_done: action ==>
  guard
    nx = scaledW and ny = scaledH
  do
    n:=0;
    nx := 0;
    ny:=0;
  end
  
  schedule fsm get_init:

    get_init  	 ( get_In_NAL     		 ) --> get_init;
    get_init  	 ( get_In_SPS					 ) --> init_res_tab;
    init_res_tab ( init_residu_tab 		 ) --> out;    
    out 		     ( X16_XK16_XP16_out 	 ) --> out;
    out 		     ( Y16_YK16_YP16_out 	 ) --> out;
    out 	  	   ( out_done 				   ) --> get_init;
  end

end
