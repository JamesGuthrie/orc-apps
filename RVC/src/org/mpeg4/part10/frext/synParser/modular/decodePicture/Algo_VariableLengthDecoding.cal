/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package org.mpeg4.part10.frext.synParser.modular.decodePicture;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;
import org.mpeg4.part10.cbp.synParser.modular.cavlcLookUpTables.*;
import org.mpeg4.part10.frext.synParser.modular.decodePicture.cabacDecoding.*;
import org.mpeg4.part10.cbp.MacroBlockInfo.*;
import std.util.BitOps.*;

actor Algo_VariableLengthDecoding()
	uint(size=8)  RbspByte,
	bool          NewNal,

	uint(size=5)   TypeOfVLD,
	int (size=32)  VLD_Param
		==>
	int (size=32)  ValDecoded
		:

	bool DEBUG_FLAG_DECODED = false;


	//Contains the Byte which is currently read.
	uint(size=16) WorkingByte      := 0;
	//Contains the number of bit which are not read yet in WorkingByte
	uint(size=4)  CountBufferRbsp  := 0;
	//Contains up to 4 next byte in the flow. It helps for more_rbsp_data()
	//and Cabac initialisation
	uint(size=3)  SizeBufferRbsp   := 0;
	List(type: uint(size=8), size=4) BufferRbsp := [0: for int s in 0 .. 3];
	/* ue(v) and Cavlc coeff_token()*/
	bool          Bit1Found       := false;
	uint(size=5)  leadingZeroBits := 0;
	/* ue(v) only */
	int (size=31) CodeNum         := 0;
	/* u(n) */
	uint(size=5)  BitsCount       := 0;
	uint(size=31) ReadValue       := 0;
	uint(size=1)  TeVal           := 0;
	/* more_rbsp_data() */
	bool          NewNalAlreadyDetected  := false;

	/* Cavlc */
	uint(size=5) NbBitsRead;
	/* Cavlc coeff_token */
	uint(size=3) Idx_nC;
	uint(size=6) coeff_token;
	/* Cavlc total_zeros and run_before */
	uint(size=3) ValRead         := 0;
	/* Cavlc total_zeros */
	uint(size=2) IdxmaxNumCoeff  := 0;
	uint(size=4) TotalCoeffParam := 0;
	/* Cavlc run_before */
	uint(size=8) IdxzerosLeft    := 0;

	/* Cabac inittialisation */
	int (size=3) cabacInitIdc;
	int (size=6) pStateIdx[640];
	int (size=8) sliceQpY;
	uint(size=1) valMPS[640];
	/* Cabac Arithmetic Decoding */
	int (size=16) codIRange;
	int (size=16) codIOffset;
	/* Cabac Mb type parsing */
	uint(size=5)  syntaxElement;
	int (size=6)  binIdx;
	uint(size=1)  binVal;
	uint(size=32) binString;
	uint(size=32) binStringPrefix;
	uint(size=3)  cabacFLRemainBits;
	bool          hasSuffix     := false;
	bool          prefixDecoded := false;

	uint(size=4)  ctxBlockCat;
	uint(size=6)  mbTypeNeighbours[2];
	bool          neighboursAvail[2];
	uint(size=16) neighboursAddr[2];
	uint(size=2)  neighboursCbpLuma[2];
	uint(size=2)  neighboursCbpChroma[2];
	uint(size=4)  neighboursIntraPredC[2];
	uint(size=6)  prevCbp;
	int(size=8)   prevMbQpDelta;
	uint(size=1)  priorDecBinVal[4];

	uint(size=11) ctxIdx;
	bool          byPass = false;

	/* Cabac procedures */

	// Table 9-39
	procedure getCtxIdx(uint(size=11) ctxIdxOffset)
	begin
		uint(size=2)  ctxIdxInc;

		//Remove these variable when the bug #49 will be fixed
		uint(size=1) priorTab[2];
		bool         isCurrMbTab[2];
		uint(size=1) neighbourCbf[2] = [0,0];
		uint(size=4) cbpLuma[2] = [0,0];
		uint(size=2) luma8x8BlkIdx[2] = [0,0];


		if(ctxIdxOffset != 85) then
			if(binIdx = 0) then
				if(ctxIdxOffset = 0 or ctxIdxOffset = 3 or ctxIdxOffset = 27) then
					ctxIdxInc := getCtxIdxIncMbType(neighboursAvail,
						mbTypeNeighbours, ctxIdxOffset);
				elsif(ctxIdxOffset = 11 or ctxIdxOffset = 24) then
	//				ctxIdxInc := getCtxIdxIncMbSkipFlag([neighbourAAvail,
	//					neighbourBAvail], [mbTypeNeighbourA, mbTypeNeighbourB]);
				elsif(ctxIdxOffset = 40 or ctxIdxOffset = 47) then
					/*ctxIdxInc := getCtxIdxIncMvdLX(uint(size=11) ctxIdxOffset,
						bool neighbourAvail[2], uint(size=6) neighbourMbType[2],
						uint(size=1) neighbourMbPartIdx[2], bool isL0,
						uint(size=4) subMbType[2], int(size=16) mvdLX[2][2]);*/
				elsif(ctxIdxOffset = 54) then
					/*ctxIdxInc := getCtxIdxIncRefIdx();*/
				elsif(ctxIdxOffset = 60) then
					// /!\ should be the previous Mb and not the neighbour for avail
					// and mbtype
					ctxIdxInc := getCtxIdxIncMbQpDelta(neighboursAvail[0],
						mbTypeNeighbours[0], prevCbp,  prevMbQpDelta);
				elsif(ctxIdxOffset = 64) then
					ctxIdxInc := getCtxIdxIncIntraChromPred(neighboursAvail,
						mbTypeNeighbours, neighboursIntraPredC);
				elsif(ctxIdxOffset = 70) then
					/* We don't manage field */
	//				ctxIdxInc := getCtxIdxIncMbFieldDec([neighbourAAvail,
	//					neighbourBAvail], [true, true]);
				elsif(ctxIdxOffset = 73 or ctxIdxOffset = 77) then
					priorTab    := [0,0];
					isCurrMbTab := [false,false];
					ctxIdxInc := getCtxIdxIncCodBlkPattern(binIdx, ctxIdxOffset, 
						neighboursAvail, mbTypeNeighbours, isCurrMbTab/*[false, false]*/,
						neighboursCbpLuma, 1, priorTab/*[0,0]*/,
						neighboursCbpChroma);
				elsif(ctxIdxOffset = 399) then
					/*ctxIdxInc := getCtxIdxIncTrsfSz8x8(bool neighbourAvail[2],
						bool neighbourTrsfSz8x8[2]);*/
				else
					ctxIdxInc := 0;
				end
			elsif(binIdx = 1)then
				if(ctxIdxOffset = 3 or ctxIdxOffset = 17 or ctxIdxOffset = 32) then
					ctxIdxInc    := 0;
					ctxIdxOffset := 276;
				elsif(ctxIdxOffset = 73 or ctxIdxOffset = 77) then
					priorTab    := [priorDecBinVal[0],0];
					isCurrMbTab := [true,false];
					ctxIdxInc := getCtxIdxIncCodBlkPattern(binIdx, ctxIdxOffset, 
						neighboursAvail, mbTypeNeighbours, isCurrMbTab/*[true, false]*/,
						neighboursCbpLuma, 1, priorTab/*[priorDecBinVal[0],0]*/,
						neighboursCbpChroma);
					if(ctxIdxOffset = 77)then
						ctxIdxInc := ctxIdxInc + 4;
					end
				elsif(ctxIdxOffset = 14 or ctxIdxOffset = 21 or ctxIdxOffset = 36)
					then
					ctxIdxInc := 1;
				elsif(ctxIdxOffset = 27 or ctxIdxOffset = 40 or ctxIdxOffset = 47
					or ctxIdxOffset = 64) then
					ctxIdxInc := 3;
				elsif(ctxIdxOffset = 54) then
					ctxIdxInc := 4;
				elsif(ctxIdxOffset = 60) then
					ctxIdxInc := 2;
				else
					ctxIdxInc := 0;
				end
			elsif(binIdx = 2) then
				if(ctxIdxOffset = 14 or ctxIdxOffset = 27 or ctxIdxOffset = 36)
					then
					/* We don't manage field */
	//				ctxIdxInc := getCtxIdxIncMbFieldDec([neighbourAAvail,
	//					neighbourBAvail], [true, true]);
					if(ctxIdxOffset = 27) then
						ctxIdxInc := ctxIdxInc + 4;
					else
						ctxIdxInc := ctxIdxInc + 2;
					end
				elsif(ctxIdxOffset = 73) then
					priorTab    := [0,priorDecBinVal[0]];
					isCurrMbTab := [false,true];
					ctxIdxInc := getCtxIdxIncCodBlkPattern(binIdx, ctxIdxOffset, 
						neighboursAvail, mbTypeNeighbours, isCurrMbTab/*[false,true]*/,
						neighboursCbpLuma, 1, priorTab/*[0,priorDecBinVal[0]]*/,
						neighboursCbpChroma);
				elsif(ctxIdxOffset = 3 or ctxIdxOffset = 60 or ctxIdxOffset = 64)
					then
					ctxIdxInc := 3;
				elsif(ctxIdxOffset = 17 or ctxIdxOffset = 32) then
					ctxIdxInc := 1;
				elsif(ctxIdxOffset = 21) then
					ctxIdxInc := 2;
				elsif(ctxIdxOffset = 40 or ctxIdxOffset = 47) then
					ctxIdxInc := 4;
				elsif(ctxIdxOffset = 54) then
					ctxIdxInc := 5;
				else
					ctxIdxInc := 0;
				end
			elsif(binIdx = 3) then
				if(ctxIdxOffset = 3) then
					ctxIdxInc := 4;
				elsif(ctxIdxOffset = 17 or ctxIdxOffset = 32) then
					ctxIdxInc := 2;
				elsif(ctxIdxOffset = 27 or ctxIdxOffset = 40 or ctxIdxOffset = 47
					or ctxIdxOffset = 54) then
					ctxIdxInc := 5;
				elsif(ctxIdxOffset = 36 or ctxIdxOffset = 60) then
					ctxIdxInc := 3;
				else
					priorTab    := [priorDecBinVal[2],priorDecBinVal[1]];
					isCurrMbTab := [true,true];
					ctxIdxInc := getCtxIdxIncCodBlkPattern(binIdx, ctxIdxOffset, 
						neighboursAvail, mbTypeNeighbours, isCurrMbTab/*[true,true]*/,
						neighboursCbpLuma, 1, priorTab/*[priorDecBinVal[2],priorDecBinVal[1]]*/,
						neighboursCbpChroma);
				end
			elsif(binIdx = 4) then
				if(ctxIdxOffset = 3 or ctxIdxOffset = 17 or ctxIdxOffset = 32) then
					/* We don't manage field */
	//				ctxIdxInc := getCtxIdxIncMbFieldDec([neighbourAAvail,
	//					neighbourBAvail], [true, true]);
					if(ctxIdxOffset = 3) then
						ctxIdxInc := ctxIdxInc + 5;
					else
						ctxIdxInc := ctxIdxInc + 2;
					end
				elsif(ctxIdxOffset = 27 or ctxIdxOffset = 54) then
					ctxIdxInc := 5;
				elsif(ctxIdxOffset = 36 or ctxIdxOffset = 60) then
					ctxIdxInc := 3;
				elsif(ctxIdxOffset = 40 or ctxIdxOffset = 47) then
					ctxIdxInc := 6;
				end
			elsif(binIdx = 5) then
				if(ctxIdxOffset = 3) then
					/* We don't manage field */
	//				ctxIdxInc := 6 + getCtxIdxIncMbFieldDec([neighbourAAvail,
	//					neighbourBAvail], [true, true]);
				elsif(ctxIdxOffset = 17 or ctxIdxOffset = 32 or ctxIdxOffset = 36
					or ctxIdxOffset = 60) then
					ctxIdxInc := 3;
				elsif(ctxIdxOffset = 27 or ctxIdxOffset = 54) then
					ctxIdxInc := 5;
				elsif(ctxIdxOffset = 40 or ctxIdxOffset = 47) then
					ctxIdxInc := 6;
				end
			else
				if(ctxIdxOffset = 3) then
					ctxIdxInc := 7;
				elsif(ctxIdxOffset = 17 or ctxIdxOffset = 32 or ctxIdxOffset = 60)
					then
					ctxIdxInc := 3;
				elsif(ctxIdxOffset = 27 or ctxIdxOffset = 54) then
					ctxIdxInc := 5;
				elsif(ctxIdxOffset = 40 or ctxIdxOffset = 47) then
					ctxIdxInc := 6;
				end
			end
		else
			ctxIdxInc := getCtxIdxIncCodedBlockFlag(neighboursAvail, mbTypeNeighbours, neighbourCbf,
				ctxBlockCat, neighboursAddr, cbpLuma, luma8x8BlkIdx);
			ctxIdxInc := ctxIdxInc + ctxIdxBlockCatOffset[0][ctxBlockCat];
		end

		ctxIdx := ctxIdxOffset + ctxIdxInc;
	end

	//9.3.3.2.1
	procedure decodeDecision()
	begin
		uint(size=2) qCodIRangeIdx;
		uint(size=8) codIRangeLPS;

		qCodIRangeIdx := (codIRange >> 6) & 0x03;
		codIRangeLPS  := rangeTabLPS[pStateIdx[ctxIdx]][qCodIRangeIdx];
		codIRange     := codIRange - codIRangeLPS;

		if(codIOffset >= codIRange) then
			binVal     := 1 - valMPS[ctxIdx];
			codIOffset := codIOffset - codIRange;
			codIRange  := codIRangeLPS;
			
			if pStateIdx[ctxIdx] = 0 then
				valMPS[ctxIdx] := 1 - valMPS[ctxIdx];
			end
			pStateIdx[ctxIdx] := transIdxLPS[pStateIdx[ctxIdx]];
		else
			binVal := valMPS[ctxIdx]; 
			pStateIdx[ctxIdx] := transIdxMPS[pStateIdx[ctxIdx]];
		end

		if(not isCabacFL(syntaxElement, not prefixDecoded)) then
			binString := binString << 1;
			binString := binString + binVal;
		end
	end

	/* Read bits procedure */
	uint(size=32) Out_ReadNBits;
	procedure ReadNBitsInWorkingByte(uint(size=32) InitialValue, uint(size=4) NbBitsToRead)
	begin
			Out_ReadNBits    := InitialValue << NbBitsToRead;
			Out_ReadNBits    := Out_ReadNBits + selectBits(WorkingByte >> (8-NbBitsToRead), 0 , NbBitsToRead);
			WorkingByte     := WorkingByte << NbBitsToRead;
			CountBufferRbsp := CountBufferRbsp - NbBitsToRead;
	end


	//Syntaxe decoding have finished the decoding of this Nal
	IsEndOfNal: action TypeOfVLD :[Func] ==>
	guard
		Func    = SKIP_NAL
	do
		CountBufferRbsp := 0;
		SizeBufferRbsp  := 0;
	end

	//We skip all bytes in the current nal
	WaitForNewNal: action NewNal :[IsNewNal], RbspByte :[ValRbsp] ==>
	guard
		IsNewNal = false
	end

	NewNalDetected: action NewNal :[IsNewNal] ==>
	guard
		IsNewNal = true
	do
		SizeBufferRbsp := 0;
	end

	NewNalHasBeenSent: action ==>
	guard
		NewNalAlreadyDetected = true
	end

	ResetNewNalAlreadyDetected: action ==>
	do
		NewNalAlreadyDetected := false;
	end

	IsMoreRbspData: action TypeOfVLD :[ValTypeOfVLD] ==>
	guard
		ValTypeOfVLD = MORE_RBSP_DATA
	end

	CheckSizeBufferRbsp.IsEqualOrSupTo2: action ==> ValDecoded :[1]
	guard
		SizeBufferRbsp >= 2
	end

	CheckSizeBufferRbsp.IsEqualTo1: action ==> ValDecoded :[IsMoreDataInRbsp]
	guard
		SizeBufferRbsp = 1
	var
		uint(size=1) IsMoreDataInRbsp
	do
		if(((WorkingByte = 0 and (BufferRbsp[0] & 0xFF) = 0x03) or 
		   ((BufferRbsp[0] & 0xFF) = 0x80)) and (CountBufferRbsp = 0) )then
			IsMoreDataInRbsp := 0;
		else
			IsMoreDataInRbsp := 1;
		end
	end

	CheckSizeBufferRbsp.IsEqualTo0: action ==> ValDecoded :[IsMoreDataInRbsp]
	guard
		SizeBufferRbsp = 0
	var
		uint(size=1) IsMoreDataInRbsp
	do
		IsMoreDataInRbsp :=
			if( (WorkingByte & 0xFF) = 0x80 )then
				 0
			else
				1
			end;
	end

	FillBufferRbsp: action RbspByte :[ValRbspByte], NewNal :[ValNewNal] ==>
	guard
		SizeBufferRbsp        < 4,
		ValNewNal             = false,
		NewNalAlreadyDetected = false
	do
		BufferRbsp[3]  := BufferRbsp[2];
		BufferRbsp[2]  := BufferRbsp[1];
		BufferRbsp[1]  := BufferRbsp[0];
		BufferRbsp[0]  := ValRbspByte;
		SizeBufferRbsp := SizeBufferRbsp + 1;
	end

	FutureNewNalDetected: action NewNal :[IsNewNal] ==>
	guard
		IsNewNal              = true,
		NewNalAlreadyDetected = false
	do
		NewNalAlreadyDetected := true;
	end

	IsVldUe: action TypeOfVLD :[ValTypeOfVLD] ==>
	guard
		ValTypeOfVLD = VLD_UE
	do
		Bit1Found       := false;
		leadingZeroBits := 0;
		CodeNum         := 0;
	end

	IsVldSe: action TypeOfVLD :[ValTypeOfVLD] ==>
	guard
		ValTypeOfVLD = VLD_SE
	do
		Bit1Found       := false;
		leadingZeroBits := 0;
		CodeNum         := 0;
	end

	IsReadBits: action TypeOfVLD :[ValTypeOfVLD], VLD_Param :[ValNbBits] ==>
	guard
		ValTypeOfVLD = READ_BITS
	do
		BitsCount := ValNbBits;
		ReadValue := 0;
		TeVal     := 0;
	end

	IsVldTe.u: action TypeOfVLD :[ValTypeOfVLD], VLD_Param :[TypeOfVld] ==>
	guard
		ValTypeOfVLD = VLD_TE,
		TypeOfVld    = 1
	do
		BitsCount := 1;
		ReadValue := 0;
		TeVal     := 1;
	end

	IsVldTe.ue: action TypeOfVLD :[ValTypeOfVLD], VLD_Param :[TypeOfVld] ==>
	guard
		ValTypeOfVLD = VLD_TE,
		TypeOfVld    > 1
	do
		Bit1Found       := false;
		leadingZeroBits := 0;
		CodeNum         := 0;
	end

	IsCavlcCoeffToken: action TypeOfVLD :[ValTypeOfVLD], VLD_Param :[nC] ==>
	guard
		ValTypeOfVLD = CAVLC_COEFF_TOKEN
	do
		Idx_nC :=
			if(nC < 0)then
				if(nC = -1)then
					 4
				else
					5
				end
			else
				if(nC >=8)then
					3
				else
					if(nC >=4)then
						2
					else
						nC/2
					end
				end
			end;
		coeff_token := 0;
		NbBitsRead := 0;
	end

	IsCavlcTotalZeros: action TypeOfVLD :[ValTypeOfVLD], 
		VLD_Param :[maxNumCoeff , TotalCoeff] ==>
	guard
		ValTypeOfVLD = CAVLC_TOTAL_ZEROS
	do
		IdxmaxNumCoeff :=
			if(maxNumCoeff = 4) then
				0
			else
				if(maxNumCoeff=8) then
					1
				else
					2
				end
			end;
		NbBitsRead      := 0;
		ValRead         := 0;
		TotalCoeffParam := TotalCoeff & 0x0F;
	end

	IsCavlcRunBefore: action TypeOfVLD :[ValTypOfVLD], VLD_Param :[zerosLeft] ==>
	guard
		ValTypOfVLD = CAVLC_RUN_BEFORE
	do
		IdxzerosLeft :=
			if(zerosLeft > 0 and zerosLeft <= 6) then
				zerosLeft - 1
			else
				6
			end;
		NbBitsRead      := 0;
		ValRead         := 0;
	end

	isCabacInit: action TypeOfVLD:[typeOfVld], VLD_Param:[cabacInit, qpValue] ==>
	guard
		typeOfVld = CABAC_INIT
	do
		cabacInitIdc := cabacInit;
		sliceQpY     := qpValue;
	end

	isCabacDecod.withoutParam: action TypeOfVLD:[typeOfVld] ==>
	guard
		isCabacDecoding(typeOfVld)
	do
		binIdx        := -1;
		binString     :=  0;
		syntaxElement := typeOfVld;

		//Needed for FL decoding.
		cabacFLRemainBits :=
			if(syntaxElement != CABAC_REM_INTRA4x4_8x8_PRED_MODE) then
				1
			else
				3
			end;
	end

	isCabacDecod.with1Param: action TypeOfVLD:[typeOfVld], VLD_Param:[param]
		==>
	guard
		typeOfVld = CABAC_CODED_BLOCK_FLAG 
	do
		binIdx        := -1;
		binString     :=  0;
		syntaxElement := typeOfVld;

		ctxBlockCat := param;
		cabacFLRemainBits := 1;
	end

	isCabacDecod.with2Param: action TypeOfVLD:[typeOfVld],
		VLD_Param:[param] repeat 2 ==>
	guard
		typeOfVld = CABAC_INTRA_CHROMA_PRED_MODE or
		typeOfVld = CABAC_CODED_BLOCK_PATERN or
		typeOfVld = CABAC_MB_QP_DELTA
	do
		binIdx        := -1;
		binString     :=  0;
		syntaxElement := typeOfVld;

		if(typeOfVld = CABAC_INTRA_CHROMA_PRED_MODE) then
			neighboursIntraPredC[0] := param[0];
			neighboursIntraPredC[1] := param[1];
		else if (typeOfVld = CABAC_CODED_BLOCK_PATERN) then
			neighboursCbpLuma[0]   := param[0] mod 16;
			neighboursCbpLuma[1]   := param[1] mod 16;
			neighboursCbpChroma[0] := param[0]  /  16;
			neighboursCbpChroma[1] := param[1]  /  16;
			cabacFLRemainBits := 4;
			prefixDecoded := false;
			hasSuffix     := true;
		else
			prevCbp := param[0];
			prevMbQpDelta := param[1];
		end end
	end

	IsCavlcLevelPrefix: action TypeOfVLD :[ValTypeOfVLD] ==>
	guard
		ValTypeOfVLD = CAVLC_LEVEL_PREFIX
	do
		Bit1Found       := false;
		leadingZeroBits := 0;
	end

	IsByteAligned: action TypeOfVLD :[ValTypeOfVLD] ==>
	guard
		ValTypeOfVLD = BYTE_ALIGNED_REQUIRED
	do
		if(CountBufferRbsp != 8)then
			CountBufferRbsp := 0;
		end
	end

	isCabacInitMbVal: action TypeOfVLD:[typeOfVld], VLD_Param:[param] repeat 5
		==>
	guard
		typeOfVld = CABAC_INIT_MB_VAL
	do
		neighboursAvail[0] := getFlag(param[0], 0);
		neighboursAvail[1] := getFlag(param[0], 1);
		mbTypeNeighbours[0] := param[1];
		mbTypeNeighbours[1] := param[2];
		neighboursAddr[0]   := param[3];
		neighboursAddr[1]   := param[4];
	end

	Buffer.IsEmpty: action ==>
	guard
		CountBufferRbsp = 0,
		SizeBufferRbsp  > 0
	do
		CountBufferRbsp := 8;
		SizeBufferRbsp  := SizeBufferRbsp - 1;
		WorkingByte     := BufferRbsp[SizeBufferRbsp];
	end

	Buffer.IsNotEmpty: action ==>
	guard
		CountBufferRbsp > 0
	end

	GetCodeNum.Launch: action ==>
	var
		uint(size=5) NbBitsToAdd
	do
		if(not Bit1Found)then
			while( ((WorkingByte & 0x80) = 0) and (CountBufferRbsp > 0))
			do
				CountBufferRbsp := CountBufferRbsp - 1;
				WorkingByte     := WorkingByte << 1;
				leadingZeroBits := leadingZeroBits + 1;
			end
			if(CountBufferRbsp > 0)then
				leadingZeroBits := leadingZeroBits + 1;
				Bit1Found       := true;
			end
		end
		if(Bit1Found)then
			NbBitsToAdd :=
				if(CountBufferRbsp < leadingZeroBits)then
					CountBufferRbsp
				else
					leadingZeroBits
				end;
			ReadNBitsInWorkingByte(CodeNum,NbBitsToAdd);
			CodeNum         := Out_ReadNBits;
			leadingZeroBits := leadingZeroBits - NbBitsToAdd;
		end
	end

	GetCodeNum.Finished: action ==>
	guard
		leadingZeroBits = 0
	end

	GetCodeNum.NotFinished: action ==>
	guard
		leadingZeroBits != 0
	end

	SendUeValue: action ==> ValDecoded :[CodeNum]
	do
		CodeNum := CodeNum - 1;
	end

	SendSeValue: action ==> ValDecoded :[CodeNum]
	do
		//CodeNum computed is equal to CodeNum + 1
		if( (CodeNum mod 2) = 0 )then
			CodeNum := CodeNum / 2;
		else
			CodeNum := -CodeNum / 2;
		end
	end

	Get_u.Launch: action ==>
	var
		uint(size=5) NbBitsToAdd
	do
		NbBitsToAdd :=
			if(CountBufferRbsp < BitsCount)then
				CountBufferRbsp
			else
				BitsCount
			end;
		ReadNBitsInWorkingByte(ReadValue,NbBitsToAdd);
		ReadValue       := Out_ReadNBits;
		BitsCount       := BitsCount - NbBitsToAdd;
	end

	Get_u.Finished: action ==>
	guard
		BitsCount = 0
	end

	Get_u.NotFinished: action ==>
	guard
		BitsCount != 0
	end

	SendUValue: action ==> ValDecoded :[ValueDec]
	var
		uint(size=31) ValueDec
	do
		ValueDec := ReadValue ^ TeVal;
	end

	GetCavlcCoeffToken.Launch: action ==>
	var
		//delete me! (Bug in the front-end)
		bool titi
	do
		ReadNBitsInWorkingByte(coeff_token,1);
		coeff_token := Out_ReadNBits;
		NbBitsRead  := NbBitsRead + 1;
		titi := TotalCoeffValid[Idx_nC][(NbBitsRead - 1) & 0x0F][coeff_token & 0x3F];
		while((not titi) and (CountBufferRbsp > 0))
		do
			ReadNBitsInWorkingByte(coeff_token,1);
			coeff_token := Out_ReadNBits;
			NbBitsRead  := NbBitsRead + 1;
			titi := TotalCoeffValid[Idx_nC][(NbBitsRead - 1) & 0x0F][coeff_token & 0x3F];
		end
	end

	GetCavlcCoeffToken.NotFinished: action ==>
	guard
		TotalCoeffValid[Idx_nC][(NbBitsRead - 1) & 0x0F][coeff_token & 0x3F] = false
	end

	GetCavlcCoeffToken.Finished: action ==>
		ValDecoded:[ TotalCoeffValue[Idx_nC][(NbBitsRead-1) & 0x0F][coeff_token & 0x3F] ]
	do
		if(DEBUG_FLAG_DECODED)then
			println("Cavlc CoeffToken; Idx_nc :" + Idx_nC + " ; NbBitsRead : "+NbBitsRead+ " ; coeff_token : "+coeff_token);
		end
	end

	GetCavlcLevelPrefix.Launch: action ==>
	do
		while( ((WorkingByte & 0x80) = 0) and (CountBufferRbsp > 0))
		do
			CountBufferRbsp := CountBufferRbsp - 1;
			WorkingByte     := WorkingByte << 1;
			leadingZeroBits := leadingZeroBits + 1;
		end
		if(CountBufferRbsp > 0)then
			Bit1Found       := true;
			/* We read the one bit value */
			CountBufferRbsp := CountBufferRbsp - 1;
			WorkingByte     := WorkingByte << 1;
		end
	end

	GetCavlcLevelPrefix.NotFinished: action ==>
	guard
		not Bit1Found
	end

	GetCavlcLevelPrefix.Finished: action ==> ValDecoded :[leadingZeroBits]
	guard
		Bit1Found
	end

	GetCavlcTotalZeros.Launch: action ==>
	var
		//delete me!
		bool titi
	do
		ReadNBitsInWorkingByte(ValRead,1);
		ValRead := Out_ReadNBits;
		NbBitsRead      := NbBitsRead + 1;
		titi := TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][NbBitsRead & 0x0F][ValRead & 0x07];
		while((not titi) and (CountBufferRbsp > 0))
		do
			ReadNBitsInWorkingByte(ValRead,1);
			ValRead    := Out_ReadNBits;
			NbBitsRead := NbBitsRead + 1;
			titi := TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][NbBitsRead & 0x0F][ValRead & 0x07];
		end
	end

	GetCavlcTotalZeros.NotFinished: action ==>
	guard
		not TotalZerosValid[IdxmaxNumCoeff][TotalCoeffParam][NbBitsRead & 0x0F][ValRead & 0x07]
	end

	GetCavlcTotalZeros.Finished: action ==>
		ValDecoded :[TotalZerosValue[IdxmaxNumCoeff][TotalCoeffParam][NbBitsRead & 0x0F][ValRead & 0x07]]
	do
		if(DEBUG_FLAG_DECODED)then
			println("Cavlc TotalZeros; Idx :" + IdxmaxNumCoeff +" ; TotalCoeff :"+TotalCoeffParam+ " ; NbBitsRead : "+NbBitsRead+ " ; Codeword : "+ValRead);
		end
	end

	GetCavlcRunBefore.Launch: action ==>
	var
		//delete me!
		bool titi
	do
		ReadNBitsInWorkingByte(ValRead,1);
		ValRead    := Out_ReadNBits;
		NbBitsRead := NbBitsRead + 1;
		titi := RunBeforeValid[IdxzerosLeft][NbBitsRead & 0x0F][ValRead & 0x07];
		while((not titi) and (CountBufferRbsp > 0))
		do
			ReadNBitsInWorkingByte(ValRead,1);
			ValRead    := Out_ReadNBits;
			NbBitsRead := NbBitsRead + 1;
			titi := RunBeforeValid[IdxzerosLeft][NbBitsRead & 0x0F][ValRead & 0x07];
		end
	end

	GetCavlcRunBefore.NotFinished: action ==>
	guard
		not RunBeforeValid[IdxzerosLeft][NbBitsRead & 0x0F][ValRead & 0x07]
	end

	GetCavlcRunBefore.Finished: action ==>
		ValDecoded :[RunBeforeValue[IdxzerosLeft][NbBitsRead & 0x0F][ValRead & 0x07]]
	do
		if(DEBUG_FLAG_DECODED)then
			print("Run Before; Idx :" + IdxzerosLeft +" ; Run Before :"+RunBeforeValue[IdxzerosLeft][NbBitsRead & 0x0F][ValRead & 0x07]);
			println(" ; NbBitsRead : "+NbBitsRead+ " ; Codeword : "+ValRead);
		end
	end

/******* Cabac Decoding *******/

	/* Initialization process */
	cabacInitContextVar: action ==>
	do
		int preCtxState;

		foreach int i in 0 .. 459 do
			//Should be modify : CabacContextInit I and PB should be merged and
			//we should use the index cabacInitIdc + 1
			preCtxState :=
				if(cabacInitIdc = -1) then
					computePreCtxState(sliceQpY, Cabac_Context_Init_I[i][0],
						Cabac_Context_Init_I[i][1])
				else
					computePreCtxState(sliceQpY, Cabac_Context_Init_PB
						[cabacInitIdc][i][0], Cabac_Context_Init_PB
						[cabacInitIdc][i][1])
				end;				
			if(preCtxState  <=  63)  then
				pStateIdx[i] := 63 - preCtxState;
				valMPS[i]    := 0 ;
			else 
				pStateIdx[i] := preCtxState - 64;
				valMPS[i]    := 1;
			end
		end
	end

	cabacInitArithDecod: action ==>
	guard
		SizeBufferRbsp >= 2
	do
		uint(size=4) nbBitInFirstByte = CountBufferRbsp;

		codIRange	:= 0x01FE;
		ReadNBitsInWorkingByte(0, CountBufferRbsp);

		CountBufferRbsp := 8;
		SizeBufferRbsp  := SizeBufferRbsp - 1;
		WorkingByte     := BufferRbsp[SizeBufferRbsp];

		ReadNBitsInWorkingByte(Out_ReadNBits, 9- nbBitInFirstByte);
		codIOffset := Out_ReadNBits;
	end

	cabacGetCtxIdx: action ==>
	do
		uint(size=11) ctxIdxOffset;

		binIdx := binIdx + 1;

		//Only needed for Fixed Lenght decoding
		cabacFLRemainBits := cabacFLRemainBits - 1;

		ctxIdxOffset := getCtxIdxOff(syntaxElement,prefixDecoded);
		getCtxIdx(ctxIdxOffset);
		//Begining of DecodeBin(ctxIdx)
//		if(byPass) then
			
//		elsif(ctxIdx = 276)then

/*		else*/ if(ctxIdx != 276 and not byPass) then
			decodeDecision();
		end
	end

	cabacRenormD.launch: action ==>
	guard
		codIRange < 0x0100
	do
		codIRange := codIRange << 1;
		ReadNBitsInWorkingByte(codIOffset, 1);
		codIOffset := Out_ReadNBits;
	end

	cabacRenormD.skip: action ==>
	guard
		codIRange >= 0x0100
	end

	cabacCheckBinarization.done: action ==> ValDecoded:[decodedVal]
	guard
		binarizationDone(binIdx, binString, syntaxElement, cabacFLRemainBits, binVal, not prefixDecoded),
		not hasSuffix or prefixDecoded
	do
		int(size=32) decodedVal;

		decodedVal :=
			if(isCabacFL(syntaxElement, not prefixDecoded)) then
				binString + (binVal << binIdx)
			else if(syntaxElement = CABAC_INTRA_CHROMA_PRED_MODE) then
				if(binVal = 1)then
					3
				else
					binIdx
				end
			else if(syntaxElement = CABAC_CODED_BLOCK_PATERN) then
				if(binVal = 1)then
					(2 << 4) + binStringPrefix
				else
					(binIdx << 4) + binStringPrefix
				end
			else if(syntaxElement = CABAC_MB_QP_DELTA) then
				if( ((binIdx + 1) & 1) = 0 )then
					(binIdx + 1) / 2
				else
					-binIdx / 2
				end
			else
				getBinarizationValue(binIdx, binString)
			end end end end;
		hasSuffix := false;
	end

	cabacCheckBinarization.notFinished: action ==>
	do
		if(isCabacFL(syntaxElement, not prefixDecoded)) then
			binString := binString + (binVal << binIdx);
		end
		//Only needed by coded_block_pattern
		priorDecBinVal[binIdx] := binVal;
	end

	cabacInitForSuffix: action ==>
	guard
		binarizationDone(binIdx, binString, syntaxElement, cabacFLRemainBits, binVal, not prefixDecoded)
	do
		prefixDecoded   := true;
		binStringPrefix := binString + (binVal << binIdx);
		binIdx          := -1;
		binString       :=  0;
	end

/*
*
* Scheduler
*
*/

	schedule fsm CheckVLDType:
		CheckVLDType    (IsEndOfNal         )--> WaitForNewNal;
		CheckVLDType    (IsByteAligned      )--> CheckVLDType;
		CheckVLDType    (IsVldUe            )--> VLDecoding_Ue;
		CheckVLDType    (IsVldSe            )--> VLDecoding_Se;
		CheckVLDType    (IsVldTe.ue         )--> VLDecoding_Ue;
		CheckVLDType    (IsVldTe.u          )--> Decode_u;
		CheckVLDType    (IsReadBits         )--> Decode_u;
		CheckVLDType    (IsMoreRbspData     )--> FillBuffer;
		CheckVLDType    (IsCavlcLevelPrefix )--> DecCavlcLevPre;
		CheckVLDType    (IsCavlcCoeffToken  )--> DecCavlcCofTkn;
		CheckVLDType    (IsCavlcTotalZeros  )--> DecCavlcTotZer;
		CheckVLDType    (IsCavlcRunBefore   )--> DecCavlcRunBef;
		CheckVLDType    (isCabacInit        )--> CabacInitContextVar;
		CheckVLDType    (isCabacInitMbVal   )--> CheckVLDType;
		CheckVLDType    (isCabacDecod       )--> CabacGetCtxIdx;

		/* more_rbsp_data() */
		FillBuffer      (FillBufferRbsp                      )--> FillBuffer;
		FillBuffer      (FutureNewNalDetected                )--> CheckBuffer;
		FillBuffer      (CheckSizeBufferRbsp.IsEqualOrSupTo2 )--> CheckVLDType;
		FillBuffer      (NewNalHasBeenSent                   )--> CheckBuffer;
		CheckBuffer     (CheckSizeBufferRbsp                 )--> CheckVLDType;

		/* Skip the others values of the Rbsp */
		WaitForNewNal   (NewNalHasBeenSent          )--> ResetNewNal;
		WaitForNewNal   (WaitForNewNal              )--> WaitForNewNal2;
		WaitForNewNal   (NewNalDetected             )--> CheckVLDType;
		ResetNewNal     (ResetNewNalAlreadyDetected )--> CheckVLDType;
		WaitForNewNal2  (WaitForNewNal              )--> WaitForNewNal2;
		WaitForNewNal2  (NewNalDetected             )--> CheckVLDType;

		/* ue(v) decoding process */
			/*Fill in the WorkingByte if it's empty*/
		VLDecoding_Ue   (Buffer                 )--> GetCodeNum4ue;
		VLDecoding_Ue   (FillBufferRbsp         )--> VLDecoding_Ue;
		GetCodeNum4ue   (GetCodeNum.Launch      )--> CheckCodeNum4ue;
		CheckCodeNum4ue (GetCodeNum.NotFinished )--> VLDecoding_Ue;
		CheckCodeNum4ue (GetCodeNum.Finished    )--> SendUeValue;
		SendUeValue     (SendUeValue            )--> CheckVLDType;

		/* se(v) decoding process */
			/*Fill in the WorkingByte if it's empty*/
		VLDecoding_Se   (Buffer                 )--> GetCodeNum4se;
		VLDecoding_Se   (FillBufferRbsp         )--> VLDecoding_Se;
		GetCodeNum4se   (GetCodeNum.Launch      )--> CheckCodeNum4se;
		CheckCodeNum4se (GetCodeNum.NotFinished )--> VLDecoding_Se;
		CheckCodeNum4se (GetCodeNum.Finished    )--> SendUeValse;
		SendUeValse     (SendSeValue            )--> CheckVLDType;

		/* u(n) decoding process */
			/*Fill in the WorkingByte if it's empty*/
		Decode_u        (Buffer            )--> Get_u;
		Decode_u        (FillBufferRbsp    )--> Decode_u;
		Get_u           (Get_u.Launch      )--> Check_u_Val;
		Check_u_Val     (Get_u.NotFinished )--> Decode_u;
		Check_u_Val     (Get_u.Finished    )--> SendUValue;
		SendUValue      (SendUValue        )--> CheckVLDType;

		/* Cavlc coeff_token() decoding process */
			/*Fill in the WorkingByte if it's empty*/
		DecCavlcCofTkn  (Buffer                         )--> GetCavlcCofTkn;
		DecCavlcCofTkn  (FillBufferRbsp                 )--> DecCavlcCofTkn;
		GetCavlcCofTkn   (GetCavlcCoeffToken.Launch     )--> ChckCavlcCofTkn;
		ChckCavlcCofTkn (GetCavlcCoeffToken.NotFinished )--> DecCavlcCofTkn;
		ChckCavlcCofTkn (GetCavlcCoeffToken.Finished    )--> CheckVLDType;

		/* Cavlc level_prefix decoding process */
			/*Fill in the WorkingByte if it's empty*/
		DecCavlcLevPre  (Buffer                          )--> GetCavlcLevPre;
		DecCavlcLevPre  (FillBufferRbsp                  )--> DecCavlcLevPre;
		GetCavlcLevPre  (GetCavlcLevelPrefix.Launch      )--> ChckCavlcLevPre;
		ChckCavlcLevPre (GetCavlcLevelPrefix.NotFinished )--> DecCavlcLevPre;
		ChckCavlcLevPre (GetCavlcLevelPrefix.Finished    )--> CheckVLDType;

		/* Cavlc total_zeros decoding process */
			/*Fill in the WorkingByte if it's empty*/
		DecCavlcTotZer  (Buffer                         )--> GetCavlcTotZer;
		DecCavlcTotZer  (FillBufferRbsp                 )--> DecCavlcTotZer;
		GetCavlcTotZer  (GetCavlcTotalZeros.Launch      )--> ChckCavlcTotZer;
		ChckCavlcTotZer (GetCavlcTotalZeros.NotFinished )--> DecCavlcTotZer;
		ChckCavlcTotZer (GetCavlcTotalZeros.Finished    )--> CheckVLDType;

		/* Cavlc run_before decoding process */
			/*Fill in the WorkingByte if it's empty*/
		DecCavlcRunBef  (Buffer                        )--> GetCavlcRunBef;
		DecCavlcRunBef  (FillBufferRbsp                )--> DecCavlcRunBef;
		GetCavlcRunBef  (GetCavlcRunBefore.Launch      )--> ChckCavlcRunBef;
		ChckCavlcRunBef (GetCavlcRunBefore.NotFinished )--> DecCavlcRunBef;
		ChckCavlcRunBef (GetCavlcRunBefore.Finished    )--> CheckVLDType;

		/* Cabac Init */
		CabacInitContextVar (cabacInitContextVar )--> CabacInitArithDecod;
		CabacInitArithDecod (Buffer.IsEmpty      )--> CabacInitArithDecod;
		CabacInitArithDecod (cabacInitArithDecod )--> CheckVLDType;
		CabacInitArithDecod (FillBufferRbsp      )--> CabacInitArithDecod;

		/* Cabac Decode Syntax Element */
		CabacGetCtxIdx     (cabacGetCtxIdx )--> CabacFillOutBuffer;
		CabacFillOutBuffer (Buffer         )--> RenormD;
		CabacFillOutBuffer (FillBufferRbsp )--> CabacFillOutBuffer;
		RenormD (cabacRenormD.launch )--> CabacFillOutBuffer;
		RenormD (cabacRenormD.skip   )--> CabacCheckBinarization;
		CabacCheckBinarization (cabacCheckBinarization.notFinished )--> CabacGetCtxIdx;
		CabacCheckBinarization (cabacInitForSuffix                 )--> CabacGetCtxIdx;
		CabacCheckBinarization (cabacCheckBinarization.done        )--> CheckVLDType;
	end
	
	priority
		NewNalHasBeenSent               > WaitForNewNal                        > NewNalDetected;
		IsVldUe                         > IsReadBits                           > IsCavlcLevelPrefix;  
		IsCavlcLevelPrefix              > IsCavlcRunBefore > IsCavlcCoeffToken > IsVldSe;
		IsVldSe                         > IsVldTe.ue       > IsVldTe.u         > FillBufferRbsp;
		FillBufferRbsp                  > IsMoreRbspData   > IsByteAligned     > IsEndOfNal;
		CheckSizeBufferRbsp             > FillBufferRbsp                       > FutureNewNalDetected > NewNalHasBeenSent;
		GetCodeNum.NotFinished          > GetCodeNum.Finished;
		Buffer.IsNotEmpty               > Buffer.IsEmpty                       > FillBufferRbsp;
		GetCavlcCoeffToken.NotFinished  > GetCavlcCoeffToken.Finished;
		GetCavlcLevelPrefix.NotFinished > GetCavlcLevelPrefix.Finished;
		GetCavlcTotalZeros.NotFinished  > GetCavlcTotalZeros.Finished;
		GetCavlcRunBefore.NotFinished   > GetCavlcRunBefore.Finished;
		Buffer > cabacInitArithDecod    > FillBufferRbsp;
		cabacCheckBinarization.done     > cabacInitForSuffix > cabacCheckBinarization.notFinished;
	end
end