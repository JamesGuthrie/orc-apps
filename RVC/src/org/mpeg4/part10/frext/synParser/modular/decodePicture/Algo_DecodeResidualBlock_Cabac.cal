/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.frext.synParser.modular.decodePicture;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;

actor Algo_DecodeResidualBlock_Cabac(bool DEBUG)
	int (size=8)  Parameters,
	int (size=32) ValVLD
		==>
//	bool          Last,
//	uint(size=4)  Run,
	uint(size=5)  TotalCoeff,
	uint(size=5)  TypeOfVLD,
//	int (size=12) Value,
	int (size=32) VldParam
		:

	bool         codedBlock;
	uint(size=4) ctxBlockCat;
//	uint(size=7) maxNumCoeff;
	bool         significantCoeff;
	uint(size=5) startIdx;

	readParameters: action Parameters:[ctxBlkCat, maxNumCoeffVal, strIdx,
		endIdx] ==>
	do
		ctxBlockCat := ctxBlkCat;
//		maxNumCoeff := maxNumCoeffVal;
		startIdx := strIdx;
	end

	askCodedBlockFlag: action ==> TypeOfVLD:[CABAC_CODED_BLOCK_FLAG],
		VldParam:[ctxBlockCat]
//	guard
//		maxNumCoeff = 64 ==> We don't need this guard because Decode Residual
//      doesn't launch this actor
	end

	getCodedBlockFlag: action ValVLD:[codedBlkFlag] ==>
	do
		codedBlock := (codedBlkFlag != 0);
		if(DEBUG) then
			println("coded_block_flag : "+codedBlkFlag);
		end
	end

	askSignificantCoeff: action ==> TypeOfVLD:[CABAC_SIGNIFICANT_COEFF_FLAG],
		VldParam:[startIdx]
	guard
		codedBlock
	end

	getSignificantCoeff: action ValVLD:[signCoeffFlag] ==>
	do
		significantCoeff := (signCoeffFlag != 0);
		if(DEBUG) then
			println("significant_coeff_flag : "+signCoeffFlag);
		end
	end

	askLastSignCoeff: action ==> TypeOfVLD:[CABAC_LAST_SIGNIFICANT_COEFF_FLAG]
	guard
		significantCoeff
	end

	getLastSignCoeff: action ValVLD:[significantLastCoeff] ==>
	do
		if(DEBUG) then
			println("last_significant_coeff_flag : "+ significantLastCoeff);
		end
	end

	sendEndOfDecoding: action ==> TypeOfVLD:[SKIP_NAL]
	end

	schedule fsm ReadParam:
		ReadParam         (readParameters    )--> AskCodedBlockFlag;
		AskCodedBlockFlag (askCodedBlockFlag )--> GetCodedBlockFlag;
		GetCodedBlockFlag (getCodedBlockFlag )--> CheckCodedBlockFlag;
		CheckCodedBlockFlag (askSignificantCoeff )--> GetSignificantCoeff;
		CheckCodedBlockFlag (sendEndOfDecoding   )--> CheckSignCoeffFlag;

		GetSignificantCoeff (getSignificantCoeff )--> CheckSignCoeffFlag;
		CheckSignCoeffFlag  (askLastSignCoeff    )--> GetLastSignCoeff;

		GetLastSignCoeff (getLastSignCoeff )--> ReadParam;

	end
	priority
	end
end