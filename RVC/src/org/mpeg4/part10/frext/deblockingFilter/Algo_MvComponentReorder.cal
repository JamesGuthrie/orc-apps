/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.frext.deblockingFilter;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;

actor Algo_MvComponentReorder()
	uint(size=6)  MbType,
	uint(size=4)  SubMbType,
	int (size=16) Mv,
	uint(size=4)  RefIdx,
	uint(size=32) FrameToRead,
	uint(size=2)  SelectList
		==>
	int (size=16) MvOut4Dbf,
	uint(size=4)  RefIdxTab,
	uint(size=6)  PartSZ,
	int (size=32) ReadFrame4Dbf
		:

	int (size=16) MvTab[2][16][2];
	int (size=32) frameTab[2][16];
	uint(size=4)  refIdxTab[2][16];

	uint(size=6) mb_type;
	uint(size=3) MbPartIdxMax;
	uint(size=3) MbPartIdx;
	uint(size=3) SizeMbMv;
	uint(size=3) SubMbPartIdxMax;
	uint(size=3) SubMbPartIdx;
	uint(size=3) SizeSubMbMv;
	uint(size=2) NbListToGet;
	uint(size=2) numList;

	GetMbType: action MbType :[MacroBlkType] ==>
	do
		mb_type      := MacroBlkType;
		MbPartIdx    := 0;
		MbPartIdxMax := NumMbPart(MacroBlkType);
		SizeMbMv     := SizeMbPart(MacroBlkType);
		foreach int i in 0 .. 1
		do
			foreach int j in 0 .. 15
			do
				frameTab[i][j] := -1;
				refIdxTab[i][j] := -1;
			end
		end
	end

	GetListSel4Mb: action SelectList:[listSelected] ==>
	guard
		MbPartIdx  < MbPartIdxMax,
		SizeMbMv  != SZ_8x8
	do
		NbListToGet :=
			if(listSelected != BIPRED)then
				1
			else
				2
			end;
		numList :=
			if(listSelected = PRED_L1) then
				1
			else
				0
			end;
	end

	GetMv.Launch16x16: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[16,16]
	guard
		SizeMbMv    = SZ_16x16,
		NbListToGet > 0
	do
		foreach int i in 0 .. 15
		do
			MvTab[numList][i]     := [Mvx,Mvy];
			frameTab[numList][i]  := frame;
			refIdxTab[numList][i] := refIdx;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch16x8: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[16,8]
	guard
		SizeMbMv    = SZ_16x8,
		NbListToGet > 0
	do
		foreach int i in 0 .. 7
		do
			MvTab[numList][i+(8*(MbPartIdx & 1))] := [Mvx,Mvy];
			frameTab[numList][i+(8*(MbPartIdx & 1))] := frame;
			refIdxTab[numList][i+(8*(MbPartIdx & 1))] := refIdx;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch8x16: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[8,16]
	guard
		SizeMbMv    = SZ_8x16,
		NbListToGet > 0
	do
		foreach int i in 0 .. 3
		do
			MvTab[numList][    i+(4*(MbPartIdx & 1))] := [Mvx,Mvy];
			MvTab[numList][8 + i+(4*(MbPartIdx & 1))] := [Mvx,Mvy];
			frameTab[numList][    i+(4*(MbPartIdx & 1))] := frame;
			frameTab[numList][8 + i+(4*(MbPartIdx & 1))] := frame;
			refIdxTab[numList][    i+(4*(MbPartIdx & 1))] := refIdx;
			refIdxTab[numList][8 + i+(4*(MbPartIdx & 1))] := refIdx;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch_B_Skip: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[4,4]
	guard
		   mb_type = BLOCK_TYPE_B_SKIP
		or mb_type = BLOCK_TYPE_B_DIRECT_16x16,
		NbListToGet > 0
	var
		uint(size=3) localMbPartIdx    = MbPartIdx  /  4,
		uint(size=3) localSubMbPartIdx = MbPartIdx mod 4
	do
		MvTab[numList][4*(localMbPartIdx&3) + (localSubMbPartIdx&3)]     := [Mvx,Mvy];
		frameTab[numList][4*(localMbPartIdx&3) + (localSubMbPartIdx&3)] := frame;
		refIdxTab[numList][4*(localMbPartIdx&3) + (localSubMbPartIdx&3)] := refIdx;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Done: action ==>
	guard
		NbListToGet = 0
	do
		MbPartIdx := MbPartIdx + 1;
	end

	GetMv.Launch8x8: action SubMbType:[ValSubMbType] ==>
	guard
		MbPartIdx  < MbPartIdxMax,
		SizeMbMv   = SZ_8x8
	do
		SubMbPartIdx    := 0;
		SubMbPartIdxMax := NumSubMbPart(mb_type,ValSubMbType);
		SizeSubMbMv     := SizeSubMbPart(mb_type,ValSubMbType);
	end

	GetListSel4SubMb: action SelectList:[listSelected] ==>
	guard
		SubMbPartIdx < SubMbPartIdxMax
	do
		NbListToGet :=
			if(listSelected != BIPRED)then
				1
			else
				2
			end;
		numList :=
			if(listSelected = PRED_L1) then
				1
			else
				0
			end;
	end

	GetSubMv.Launch8x8: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[8,8]
	guard
		SizeSubMbMv = SZ_8x8,
		NbListToGet > 0
	do
		foreach int i in 0 .. 3
		do
			MvTab[numList][i + 4*(MbPartIdx&3)] := [Mvx,Mvy];
			frameTab[numList][i + 4*(MbPartIdx&3)] := frame;
			refIdxTab[numList][i + 4*(MbPartIdx&3)] := refIdx;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch8x4: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ :[8,4]
	guard
		SizeSubMbMv = SZ_8x4,
		NbListToGet > 0
	do
		MvTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1)]     := [Mvx,Mvy];
		MvTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1) + 1] := [Mvx,Mvy];
		frameTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1)] := frame;
		frameTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1) + 1] := frame;
		refIdxTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1)] := refIdx;
		refIdxTab[numList][4*(MbPartIdx&3) + 2*(SubMbPartIdx&1) + 1] := refIdx;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch4x8: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[4,8]
	guard
		SizeSubMbMv = SZ_4x8,
		NbListToGet > 0
	do
		MvTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1)]     := [Mvx,Mvy];
		MvTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1) + 2] := [Mvx,Mvy];
		frameTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1)] := frame;
		frameTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1) + 2] := frame;
		refIdxTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1)] := refIdx;
		refIdxTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&1) + 2] := refIdx;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch4x4: action Mv:[Mvx, Mvy], RefIdx :[refIdx],
		FrameToRead:[frame] ==> PartSZ:[4,4]
	guard
		SizeSubMbMv = SZ_4x4,
		NbListToGet > 0
	do
		MvTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&3)]     := [Mvx,Mvy];
		frameTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&3)] := frame;
		refIdxTab[numList][4*(MbPartIdx&3) + (SubMbPartIdx&3)] := refIdx;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Done: action ==>
	guard
		NbListToGet = 0
	do
		SubMbPartIdx := SubMbPartIdx + 1;
	end

	GetSubMvInfo.Done: action ==>
	guard
		SubMbPartIdx = SubMbPartIdxMax
	do
		MbPartIdx := MbPartIdx + 1;
	end

	SendParameters: action ==> ReadFrame4Dbf :[frameNumOut] repeat 32,
			MvOut4Dbf:[mvOut] repeat 64, RefIdxTab :[refIdxTable] repeat 32
	guard
		MbPartIdx = MbPartIdxMax
	do
		int(size=32) frameNumOut[32];
		int(size=16) mvOut[64];
		int(size=16) refIdxTable[32];
		uint(size=4) InverseScan4x4Tab[16] =
			[ 0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15 ];

		foreach int numList in 0 .. 1
		do
			foreach int i in 0 .. 15
			do
				frameNumOut[numList*16 + i] := frameTab[numList][InverseScan4x4Tab[i]];
				refIdxTable[numList*16 + i] := refIdxTab[numList][InverseScan4x4Tab[i]];
				mvOut[numList*32 + i]       := MvTab[numList][InverseScan4x4Tab[i]][0];
				mvOut[numList*32 + i+16]    := MvTab[numList][InverseScan4x4Tab[i]][1];
			end
		end
	end

	schedule fsm GetMbType:
		GetMbType        (GetMbType           )--> GetListSel4Mb;

		GetListSel4Mb    (GetListSel4Mb       )--> GetMv;
		GetListSel4Mb    (GetMv.Launch8x8     )--> GetListSel4SubMb;
		GetListSel4Mb    (SendParameters      )--> GetMbType;

		GetMv            (GetMv.Launch16x16   )--> GetMv;
		GetMv            (GetMv.Launch16x8    )--> GetMv;
		GetMv            (GetMv.Launch8x16    )--> GetMv;
		GetMv            (GetMv.Launch_B_Skip )--> GetMv;
		GetMv            (GetMv.Done          )--> GetListSel4Mb;

		GetListSel4SubMb (GetListSel4SubMb    )--> GetSubMv;
		GetListSel4SubMb (GetSubMvInfo.Done   )--> GetListSel4Mb;

		GetSubMv         (GetSubMv.Launch8x8  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch8x4  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch4x8  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch4x4  )--> GetSubMv;
		GetSubMv         (GetSubMv.Done       )--> GetListSel4SubMb;
	end

end