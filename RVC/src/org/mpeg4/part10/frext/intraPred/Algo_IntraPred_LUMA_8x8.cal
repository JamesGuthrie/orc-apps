/********************************************************************************

This software module was originally developed by Gildas Cocherel IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

 
*****************************************************************************/
package org.mpeg4.part10.frext.intraPred;

actor Algo_IntraPred_LUMA_8x8 ()
	int(size=16) Y_LEFT,     // List
  	int(size=16) Y_UP,       // List
  	int(size=16) Y_UP_LEFT,  // point
  	int(size=16) Y_UP_RIGHT, // point
  	uint(size=1) AVAIL,      // up, left, up_left, up_right availability List
  	uint(size=4) PredMode
  	==>
  	int(size=9) MPR
  	:

	/*sum_temp variable used for summing different sum procedures */  
  	int(size=2)  left_avail;
  	int(size=2)  up_avail;
  	int(size=2)  up_left_avail;
  	int(size=2)  up_right_avail;
  
  	int(size=16) y_up_left;
  	int(size=16) y_up_right[8] := [ 0 : for int i in 0 .. 7 ];
  	int(size=16) y_left[8]     := [ 0 : for int i in 0 .. 7 ];
  	int(size=16) y_up[8]       := [ 0 : for int i in 0 .. 7 ];
  
  	int(size=16) mpr[64]       := [ 0 : for int i in 0 .. 63];
  
	/**************************************************************************
	 *
	 *************************************************************************/
	read.avail: action AVAIL:[avail] repeat 3 ==>
  	do
	    left_avail     := avail[0];
	    up_avail       := avail[1];
	    up_left_avail  := avail[2];
	    up_right_avail := avail[3];
  	end
	/**************************************************************************
	 * 
	 *************************************************************************/
  	readpix.l.av: action Y_LEFT:[x] repeat 8 ==>
  	guard left_avail = 1
  	do
	    y_left := [ x[i] :  for int i in 0 .. 7 ];
  	end
  	readpix.l.no: action ==>
  	guard left_avail = 0
  	end
  
  	readpix.u.av: action Y_UP:[x] repeat 8 ==>
  	guard up_avail = 1
  	do
	    y_up := [ x[i] :  for int i in 0 .. 7 ];
  	end
  	readpix.u.no: action ==>
  	guard up_avail = 0
  	end
  
  	readpix.ul.av: action Y_UP_LEFT:[x] ==>
  	guard up_left_avail = 1
  	do
	    y_up_left := x;
  	end
  	readpix.ul.no: action ==>
  	guard up_left_avail = 0
  	end
 	readpix.ur.av: action Y_UP_RIGHT:[x] repeat 8 ==>
  	guard up_right_avail = 1
  	do
	    y_up_right := [ x[i] :  for int i in 0 .. 7 ];
  	end
  	readpix.ur.no: action ==>
  	guard up_right_avail = 0
  	end
	/**************************************************************************
	 * 
	 *************************************************************************/
  	write.mode0: action PredMode:[mode] ==>
	    MPR:[[l[i]  : for int i in  0 .. 7, for int j in 0 .. 7]] repeat 64
  	guard 
	  	mode = 0
	var
		int(size=16) l[8]
  	do
  	 	if up_left_avail = 1 then
  	 		l[0] := (y_up_left + 2*y_up[0] + y_up[1] + 2) >> 2;
  	 	else
  	 	 	l[0] := (3*y_up[0] + y_up[1] + 2) >> 2;
  	 	end
  	 	foreach int i in 1 .. 6 do
  			l[i] := (y_up[i-1] + 2*y_up[i] + y_up[i+1] + 2) >> 2; 
  		end 
  	 	if up_right_avail = 1 then
  	 		l[7] := (y_up[6] + 2*y_up[7] + y_up_right[0] + 2) >> 2;
  	 	else
  	 	 	l[7] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  	 	end
  	end
	/**************************************************************************
	 * 
	 *************************************************************************/
  	write.mode1: action PredMode:[mode] ==>
    	MPR:[[l[i]  : for int i in  0 .. 7, for int j in 0 .. 7]] repeat 64
  	guard 
	  	mode = 1 
	var
		int(size=16) l[8]
  	do
  	 	if up_left_avail = 1 then
  	 		l[0] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 	else
  	 	 	l[0] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 	end
  	 	foreach int i in 1 .. 6 do
  			l[i] := (y_left[i-1] + 2*y_left[i] + y_left[i+1] + 2) >> 2; 
  		end 
  		l[7] := (y_left[6] + 3*y_left[7] + 2) >> 2;
  	end
	/**************************************************************************
	 * 
	 *************************************************************************/
  	write.mode2: action PredMode:[mode] ==>
    	MPR:[[s0  : for int i in  0 .. 7, for int j in 0 .. 7]] repeat 64
   	guard 
  		mode = 2 
   	var
    	int(size=16) l[8],
    	int(size=16) t[8],
    	int(size=16) s0 := 1<<7
   	do
 		if left_avail = 1 then
  			if up_left_avail = 1 then
  	 			l[0] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 		else
  	 	 		l[0] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 		end
  	 		foreach int i in 1 .. 6 do
  				l[i] := (y_left[i-1] + 2*y_left[i] + y_left[i+1] + 2) >> 2; 
  			end 
  			l[7] := (y_left[6] + 3*y_left[7] + 2) >> 2;
  		end
		if up_avail = 1 then
  	 		if up_left_avail = 1 then
  	 			t[0] := (y_up_left + 2*y_up[0] + y_up[1] + 2) >> 2;
  	 		else
	  	 	 	t[0] := (3*y_up[0] + y_up[1] + 2) >> 2;
  		 	end
	  	 	foreach int i in 1 .. 6 do
  				t[i] := (y_up[i-1] + 2*y_up[i] + y_up[i+1] + 2) >> 2; 
	  		end 
  		 	if up_right_avail = 1 then
  	 			t[7] := (y_up[6] + 2*y_up[7] + y_up_right[0] + 2) >> 2;
  	 		else
	  	 	 	t[7] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  		 	end
  		 end
 
 		if left_avail = 1 then
			if up_avail = 1 then
				// no edge
				s0 := 0;
				foreach int i in 0 .. 7 do
					s0 := s0 + l[i] + t[i] ; 
				end
				s0 := ( s0 + 8 ) >> 4 ;
			else 
				// upper edge
				s0 := 0;
				foreach int i in 0 .. 7 do
					s0 := s0 + l[i]; 
				end
				s0 := ( s0 + 4 ) >> 4 ;
			end
		else
			if up_avail = 1 then
				// left edge
				s0 := 0;
				foreach int i in 0 .. 7 do
					s0 := s0 + t[i] ; 
				end
				s0 := ( s0 + 4 ) >> 3 ;
			end
		end
	end
	/**************************************************************************
	 * 
	 *************************************************************************/
   	write.mode3: action PredMode:[mode] ==>
	    MPR:[[( l[i+j] + 2 * l[i+j+1] + l[i+j+2] + 2 ) >> 2: for int i in  0 .. 7, for int j in 0 .. 7]] repeat 64
  	guard 
	  	mode = 3 
	var
		int(size=16) l[17]
   	do
 		if up_left_avail = 1 then
  	 		l[0] := (y_up_left + 2*y_up[0] + y_up[1] + 2) >> 2;
  	 	else
	  	 	l[0] := (3*y_up[0] + y_up[1] + 2) >> 2;
  	 	end
	 	foreach int i in 1 .. 6 do
  			l[i] := (y_up[i-1] + 2*y_up[i] + y_up[i+1] + 2) >> 2; 
		end 
  	 	if up_right_avail = 1 then
  			l[7] := (y_up[6] + 2*y_up[7]       + y_up_right[0] + 2) >> 2;
  			l[8] := (y_up[7] + 2*y_up_right[0] + y_up_right[1] + 2) >> 2;
  			foreach int i in 9 .. 14 do
  				l[i] := (y_up_right[i-1] + 2*y_up_right[i] + y_up_right[i+1] + 2) >> 2; 
			end
  			l[15] := (y_up_right[6] + 3*y_up_right[7] + 2) >> 2;
  			l[16] := l[15];
  		else
	 	 	l[7] := (y_up[6] + 3*y_up[7] + 2) >> 2;
	 	 	foreach int i in 8 .. 16 do
  				l[i] := y_up[7]; 
			end
  	 	end
	end
	/**************************************************************************
	 * 
	 *************************************************************************/
   	write.mode4: action PredMode:[mode] ==>
    	MPR:[mpr] repeat 64
   	guard 
  		mode = 4 
	var
		int(size=16) l[16]
	do
		l[0] := (y_left[6] + 3*y_left[7] + 2) >> 2;
		foreach int i in 0 .. 5 do
  			l[6-i] := (y_left[i] + 2*y_left[i+1] + y_left[i+2] + 2) >> 2; 
		end
		l[8] := (y_left[0] + 2*y_up_left + y_up[0] + 2) >> 2;
		if up_left_avail = 1 then
  	 		l[7] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[9] := (y_up_left + 2*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	else
  	 		l[7] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[9] := (3*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	end
		foreach int i in 0 .. 5 do
  			l[i+10] := (y_up[i] + 2*y_up[i+1] + y_up[i+2] + 2) >> 2; 
		end
	  	if up_right_avail = 1 then
  	 		l[16] := (y_up[6] + 2*y_up[7] + y_up_right[0] + 2) >> 2;
  	 	else
  	 	 	l[16] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  	 	end
		//To initializate the macroblock
		foreach int j in 0 .. 7 do
			foreach int i in 0 .. 7 do
				mpr[(7-j)*8+i] := ( l[i+j] + 2*l[i+j+1] + l[i+j+2] + 2 ) >> 2 ;
			end
		end
   	end
	/**************************************************************************
	 * 
	 *************************************************************************/
   	write.mode5: action PredMode:[mode] ==>
    	MPR:[mpr] repeat 64
   	guard 
  		mode = 5 
	var
		int(size=16) l[16]
   	do
		foreach int i in 0 .. 5 do
  			l[5-i] := (y_left[i] + 2*y_left[i+1] + y_left[i+2] + 2) >> 2; 
		end
		if up_left_avail = 1 then
  	 		l[6] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[7] := (y_left[0] + 2*y_up_left + y_up[0]   + 2) >> 2;
  	 		l[8] := (y_up_left + 2*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	else
  	 		l[6] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[7] := (y_left[0] + 2*y_up_left + y_up[0]   + 2) >> 2;  // warning y_up_left no avail
  	 		l[8] := (3*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	end	
		foreach int i in 0 .. 5 do
  			l[i+9] := (y_up[i] + 2*y_up[i+1] + y_up[i+2] + 2) >> 2; 
		end
	  	if up_right_avail = 1 then
  	 		l[15] := (y_up[6] + 2*y_up[7] + y_up_right[0] + 2) >> 2;
  	 	else
  	 	 	l[15] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  	 	end
		//To initializate the top left to the bottom left of the macroblock
		//2
		foreach int i in 0 .. 5 do
			mpr[(i+2)*8] := (l[5-i] + 2*l[6-i] + l[7-i] + 2) >> 2; 
		end
		//4+1
		foreach int i in 0 .. 3 do
			mpr[(i+4)*8+1] := (l[5-i] + 2*l[6-i] + l[7-i] + 2) >> 2; 
		end
		//6+2
		foreach int i in 0 .. 1 do
			mpr[(i+6)*8+2] := (l[5-i] + 2*l[6-i] + l[7-i] + 2) >> 2; 
		end
		//0
		foreach int i in 0 .. 7 do
			mpr[i] := (l[7+i] + l[8+i] + 1) >> 1; 
		end
		//1
		foreach int i in 0 .. 7 do
			mpr[i+1*8] := (l[6+i] + 2*l[7+i] + l[8+i] + 2) >> 2; 
		end
		//2+1
		foreach int i in 0 .. 6 do
			mpr[i+2*8+1] := (l[7+i] + l[8+i] + 1) >> 1; 
		end
		//3+1
		foreach int i in 0 .. 7 do
			mpr[i+3*8+1] := (l[6+i] + 2*l[7+i] + l[8+i] + 2) >> 2; 
		end
		//4+2
		foreach int i in 0 .. 6 do
			mpr[i+4*8+2] := (l[7+i] + l[8+i] + 1) >> 1; 
		end
		//5+2
		foreach int i in 0 .. 5 do
			mpr[i+5*8+1] := (l[6+i] + 2*l[7+i] + l[8+i] + 2) >> 2; 
		end	
		//6+3
		foreach int i in 0 .. 4 do
			mpr[i+6*8+3] := (l[7+i] + l[8+i] + 1) >> 1; 
		end
		//7+3
		foreach int i in 0 .. 4 do
			mpr[i+7*8+3] := (l[6+i] + 2*l[7+i] + l[8+i] + 2) >> 2; 
		end	
   	end	
	/**************************************************************************
	 * 
	 *************************************************************************/
   	write.mode6: action PredMode:[mode] ==>
    	MPR:[mpr] repeat 64
   	guard 
  		mode = 6 
 	var
		int(size=16) l[16]
   	do
   		l[0] := (y_left[6] + 3*y_left[7] + 2) >> 2;
		foreach int i in 0 .. 5 do
  			l[6-i] := (y_left[i] + 2*y_left[i+1] + y_left[i+2] + 2) >> 2; 
		end
		l[8] := (y_left[0] + 2*y_up_left + y_up[0] + 2) >> 2;
		if up_left_avail = 1 then
  	 		l[7] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[9] := (y_up_left + 2*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	else
  	 		l[7] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 		l[9] := (3*y_up[0]   + y_up[1]   + 2) >> 2;
  	 	end
   		foreach int i in 0 .. 5 do
  			l[i+10] := (y_up[i] + 2*y_up[i+1] + y_up[i+2] + 2) >> 2; 
		end
 		l[16] := (y_up[5] + 2*y_up[6] + y_up[7] + 2) >> 2;
		//To initializate the top left to the bottom right of the macroblock every two lines
		//0
		foreach int i in 0 .. 7 do
			mpr[i*8] := (l[8-i] + l[7-i] + 1) >> 1; 
		end
		//1+2
		foreach int i in 0 .. 6 do
			mpr[(i+1)*8+2] := (l[8-i] + l[7-i] + 1) >> 1; 
		end
		//2+4
		foreach int i in 0 .. 5 do
			mpr[(i+2)*8+4] := (l[8-i] + l[7-i] + 1) >> 1; 
		end
		//3+6
		foreach int i in 0 .. 4 do
			mpr[(i+3)*8+6] := (l[8-i] + l[7-i] + 1) >> 1; 
		end
		//To initializate the top left to the bottom right of the macroblock every other two lines
		//1+1
		foreach int i in 0 .. 6 do
			mpr[(i+1)*8+1] := (l[8-i] + 2*l[7-i] + l[6-i] + 2) >> 2; 
		end
		//2+3
		foreach int i in 0 .. 5 do
			mpr[(i+2)*8+3] := (l[8-i] + 2*l[7-i] + l[6-i] + 2) >> 2; 
		end
		//3+5
		foreach int i in 0 .. 4 do
			mpr[(i+3)*8+5] := (l[8-i] + 2*l[7-i] + l[6-i] + 2) >> 2; 
		end
		//4+7
		foreach int i in 0 .. 3 do
			mpr[(i+4)*8+7] := (l[8-i] + 2*l[7-i] + l[6-i] + 2) >> 2; 
		end
		//To initializate the top left to the top right of the macroblock
		//0+1
		foreach int i in 0 .. 6 do
			mpr[i+1] := (l[9+i] + 2*l[8+i] + l[7+i] + 2) >> 2; 
		end
		//1+3
		foreach int i in 0 .. 4 do
			mpr[i+1*8+3] := (l[9+i] + 2*l[8+i] + l[7+i] + 2) >> 2; 
		end
		//2+5
		foreach int i in 0 .. 2 do
			mpr[i+2*8+5] := (l[9+i] + 2*l[8+i] + l[7+i] + 2) >> 2; 
		end
		//3+7
		mpr[3*8+7] := (l[9] + 2*l[8] + l[7] + 2) >> 2;
    end
	/**************************************************************************
	 * 
	 *************************************************************************/
   	write.mode7: action PredMode:[mode] ==>
		MPR:[mpr] repeat 64
   	guard 
  		mode = 7
  	var
		int(size=16) l[13]
   	do
   	 	if up_left_avail = 1 then
  	 		l[0] := (y_up_left + 2*y_up[0] + y_up[1] + 2) >> 2;
  	 	else
  	 	 	l[0] := (3*y_up[0] + y_up[1] + 2) >> 2;
  	 	end
  	 	foreach int i in 1 .. 6 do
  			l[i] := (y_up[i-1] + 2*y_up[i] + y_up[i+1] + 2) >> 2; 
  		end 
  	 	if up_right_avail = 1 then
  	 		l[7] := (y_up[6] + 2*y_up[7]       + y_up_right[0] + 2) >> 2;
  	 		l[8] := (y_up[7] + 2*y_up_right[0] + y_up_right[1] + 2) >> 2;
	  	 	foreach int i in 1 .. 5 do
  				l[i+8] := (y_up_right[i-1] + 2*y_up_right[i] + y_up_right[i+1] + 2) >> 2; 
	  		end 
  	 		l[7] := (y_up[6] + 2*y_up[7] + y_up_right[0] + 2) >> 2;
  	 	else
  	 	 	l[7] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  	 	 	foreach int i in 8 .. 12 do
  				l[i] := y_up[7]; 
	  		end 
  	 	end
		//To initializate all the macroblock
	 	foreach int i in 0 .. 3 do
	 	 	foreach int j in 0 .. 7 do
	 	 		mpr[16*i+j]     := (l[i+j] + l[i+j+1]              + 1) >> 1;
	 	 		mpr[16*(i+1)+j] := (l[i+j] + 2*l[i+j+1] + l[i+j+2] + 2) >> 2;
	 	 	end
	 	end
    end
	/**************************************************************************
	 * 
	 *************************************************************************/
	write.mode8: action PredMode:[mode] ==>
	    MPR:[mpr] repeat 64
	guard 
  		mode = 8 
   	var
		int(size=16) l[9]
   	do
    	 if up_left_avail = 1 then
  	 		l[0] := (y_up_left + 2*y_left[0] + y_left[1] + 2) >> 2;
  	 	else
  	 	 	l[0] := (3*y_left[0] + y_left[1] + 2) >> 2;
  	 	end
  	 	foreach int i in 1 .. 6 do
  			l[i] := (y_up[i-1] + 2*y_up[i] + y_up[i+1] + 2) >> 2; 
  		end 
 		l[7] := (y_up[6] + 3*y_up[7] + 2) >> 2;
  	 	l[8] := l[7];
		//To initializate the first line and every two lines
		//0
		foreach int i in 0 .. 7 do
			mpr[i*8] := (l[i] + l[i+1] + 1) >> 1; 
		end
		//2
		foreach int i in 0 .. 6 do
			mpr[i*8+2] := (l[i+1] + l[i+2] + 1) >> 1; 
		end
		//4
		foreach int i in 0 .. 5 do
			mpr[i*8+4] := (l[i+2] + l[i+3] + 1) >> 1; 
		end
		//6
		foreach int i in 0 .. 5 do
			mpr[i*8+6] := (l[i+3] + l[i+4] + 1) >> 1; 
		end	
		//To initializate the second line and every two lines
		//1
		foreach int i in 0 .. 7 do
			mpr[i*8+1] := (l[i] + 2*l[i+1] + l[i+2] + 2) >> 2; 
		end
		//3
		foreach int i in 0 .. 6 do
			mpr[i*8+3] := (l[i+1] + 2*l[i+2] + l[i+3] + 2) >> 2; 
		end
		//5
		foreach int i in 0 .. 5 do
			mpr[i*8+5] := (l[i+2] + 2*l[i+3] + l[i+4] + 2) >> 2; 
		end
		//7
		foreach int i in 0 .. 4 do
			mpr[i*8+7] := (l[i+3] + 2*l[i+4] + l[i+5] + 2) >> 2; 
		end
		//To initializate the bottom right of the macroblock
		//4+6
		foreach int i in 0 .. 1 do
			mpr[4*8+6+i] := l[7]; 
		end
		//5+4
		foreach int i in 0 .. 3 do
			mpr[5*8+4+i] := l[7]; 
		end
		//6+2
		foreach int i in 0 .. 5 do
			mpr[6*8+2+i] := l[7]; 
		end
		//7+0
		foreach int i in 0 .. 7 do
			mpr[7*8+0+i] := l[7]; 
		end
   	end
	/**************************************************************************
	 * 
	 *************************************************************************/
	schedule fsm start:
	  	// start
	    start    (read.avail ) --> readpix0;
	    // readpix
	    readpix0 (readpix.l  ) --> readpix1;
	    readpix1 (readpix.u  ) --> readpix2;
	    readpix2 (readpix.ul ) --> readpix3;
	    readpix3 (readpix.ur ) --> pixdone;
	    // pixdone
	    pixdone  (write      ) --> start;
  	end
end
