/********************************************************************************

This software module was originally developed by Florian Decologne IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

Buffer store edge value from current macrobloc and provide edge for intra-decoding
Edge are provided from bottom to top, then corner, then left to right 
Jerome GORIN IETR/ARTEMIS
gorinje@gmail.com
*****************************************************************************/

//Modified by Jerome Gorin IETR/ARTEMIS <gorinje@gmail.com>
//Modified by Gildas Cocherel IETR/INSA of Rennes
package org.mpeg4.part10.frext.intraPred;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;
import org.mpeg4.part10.Imp_PictureInfo.*;

actor Buffer_Neighbour_8x8()
	uint(size=6) Mb_Type,
	uint(size=8) MB_IN,
	uint(size=7) MbLocation
		==>
	uint(size=16) EDGE :
	// Index of the macroblock in the current line
	uint(size=13) mb_Index;
	uint(size= 6) mb_type;
	//List containing edge pixel value 
	uint(size=16) top_edge[MAX_PICWIDTH_BLK * 16] := [ 0 : for int i in 0 .. MAX_PICWIDTH_BLK * 16 - 1 ];
	uint(size=16) left_edge[16]                   := [ 0 : for int i in 0 .. 15 ];
	uint(size=16) topLeft_edge                    :=   0;
	uint(size=16) result[41]                      := [ 0 : for int i in 0 .. 40 ];
	/**************************************************************************
	 * Mb_Type_OK : Send value of edge needed and store the edge of macroblock decoded
	 *************************************************************************/
	Mb_Type_OK: action
		Mb_Type    :[MbType],
		MbLocation :[MbxInPic , MbyInPic]
			==>
	do
		mb_Index := MbxInPic;
		mb_type  := MbType;
	end
	/**************************************************************************
	 * NOT_EDGE_CALC
	 *************************************************************************/
	NOT_EDGE_CALC: action ==>
	guard
		mb_type != BLOCK_TYPE_I_8x8
	end
	/**************************************************************************
	 * Send the edge needed to process the intra prediction of the current macroblock
	 *************************************************************************/
	CALCEDGE1: action ==> EDGE:[ result ] repeat 41
	guard
		mb_type = BLOCK_TYPE_I_8x8,
		mb_Index < MAX_PICWIDTH_BLK - 1
	do
		result[16]         := topLeft_edge;
		foreach int i in 0 .. 15 do
			result[i]      := left_edge[i];
			result[i+17]   := top_edge[mb_Index * 16 + i];
		end
		foreach int i in 0 .. 7 do
			result[33 + i] := 0;
		end
	end
	/**************************************************************************
	 * Send the edge needed to process the intra prediction of the current macroblock
	 *************************************************************************/
	CALCEDGE2: action ==> EDGE:[ result ] repeat 41
	guard
		mb_type = BLOCK_TYPE_I_8x8,
		mb_Index = MAX_PICWIDTH_BLK - 1
	do
		result[16]         := topLeft_edge;
		foreach int i in 0 .. 15 do
			result[i]      := left_edge[i];
			result[i+17]   := top_edge[mb_Index * 16 + i];
		end
		foreach int i in 0 .. 7 do
			result[33 + i] := top_edge[(mb_Index+1) * 16 + i];
		end
	end
	/**************************************************************************
	 * Receive pixel value from current decoded macroblock
	 *************************************************************************/
	Mb_Neighbour: action MB_IN:[ v ] repeat 16 * 16 ==>
	do
		//Store bottom , right and bottom right edge
		topLeft_edge := top_edge[mb_Index * 16 - 1];
		foreach int i in 0 .. 15 do
			top_edge[mb_Index * 16 + i] := v[15*16+i];
		end
		left_edge := [ v[s * 16 - 1] : for int s in 1 .. 16 ];		
	end
	/**************************************************************************
	 * schedule
	 *************************************************************************/
	schedule fsm Mb_Type :
		Mb_Type      ( Mb_Type_OK    ) --> EDGE_CALC;
		EDGE_CALC    ( NOT_EDGE_CALC ) --> Mb_Neighbour;
		EDGE_CALC    ( CALCEDGE1     ) --> Mb_Neighbour;
		EDGE_CALC    ( CALCEDGE2     ) --> Mb_Neighbour;
		Mb_Neighbour ( Mb_Neighbour  ) --> Mb_Type;
	end
end
