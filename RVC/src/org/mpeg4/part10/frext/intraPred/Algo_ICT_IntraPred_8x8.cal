/********************************************************************************

This software module was originally developed by Gildas Cocherel IETR/INSA of Rennes (France), in the course of development of the <standard> for reference purposes and its performance may not have been optimized. This software module is an implementation of one or more tools as specified by the MPEG-C part 4.
ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works of this software module or modifications thereof for use in implementations of the <standard>  in products that satisfy conformance criteria (if any).
Those intending to use this software module in products are advised that its use may infringe existing patents. ISO/IEC have no liability for use of this software module or modifications thereof.
Copyright is not released for products that do not conform to audiovisual and image-coding related ITU Recommendations and/or ISO/IEC International Standards.
Assurance that the originally developed software module can be used (1) in the <standard> once the <standard> has been adopted; and (2) to develop the MPEG-C part 4:

IETR/INSA of Rennes (France) grants ISO/IEC all rights necessary to include the originally developed software module or modifications thereof in the <standard> and to permit ISO/IEC to offer You a royalty-free, worldwide, non-exclusive, copyright license to copy, distribute, and make derivative works for use in implementations of the MPEG-C part 4 in products that satisfy conformance criteria (if any), and to the extent that such originally developed software module or portions of it are included in the MPEG-C part 4.  To the extent that IETR/INSA of Rennes (France) owns patent rights that would be required to make, use, or sell the originally developed software module or portions thereof included in the MPEG-C part 4 in a conforming product,  IETR/INSA of Rennes (France) will assure the ISO/IEC that it is willing to negotiate licenses under reasonable and non-discriminatory terms and conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications thereof for the sole  purpose of developing the MPEG-C part 4

IETR/INSA of Rennes (France) retains full right to modify and use the code for its own purpose, assign or donate the code to a third party and to inhibit third parties from using the code for products that do not conform to MPEG-related ITU Recommendations and/or ISO/IEC International Standards.
This copyright notice must be included in all copies or derivative works. Copyright (c) ISO/IEC 2008.

*****************************************************************************/
package org.mpeg4.part10.frext.intraPred;
import std.util.Math.*;

actor Algo_ICT_IntraPred_8x8 ()	int(size=16) X ==> int(size= 16) Y :

/******************************************************************************
 * Global
 *****************************************************************************/
	int(size=16) c[8];
	int(size=16) block8x8[64];
 /******************************************************************************
  * ict8x8_1D procedure
   *****************************************************************************/
 	procedure ict8x8_1D(uint(size=8) idx)
 	var
 		int(size=16) a[8],
 		int(size=16) b[8]
 	begin
  		a[0] :=  block8x8[idx+0]       + block8x8[idx+4];
  		a[2] :=  block8x8[idx+0]       - block8x8[idx+4];
  		a[4] := (block8x8[idx+2] >> 1) - block8x8[idx+6];
  		a[6] := (block8x8[idx+6] >> 1) + block8x8[idx+2];
  
		b[0] := a[0] + a[6];
  		b[2] := a[2] + a[4];
  		b[4] := a[2] - a[4];
  		b[6] := a[0] - a[6];
  
  		a[1] := -block8x8[idx+3] + block8x8[idx+5] - block8x8[idx+7] - (block8x8[idx+7] >> 1);
  		a[3] :=  block8x8[idx+1] + block8x8[idx+7] - block8x8[idx+3] - (block8x8[idx+3] >> 1);
  		a[5] := -block8x8[idx+1] + block8x8[idx+7] + block8x8[idx+5] + (block8x8[idx+5] >> 1);
  		a[7] :=  block8x8[idx+3] + block8x8[idx+5] + block8x8[idx+1] + (block8x8[idx+1] >> 1);
  
  		b[1] := (a[7] >> 2) +  a[1];
  		b[3] :=  a[3]       + (a[5] >> 2);
  		b[5] := (a[3] >> 2) -  a[5];
  		b[7] :=  a[7]       - (a[1] >> 2);

  		c[0] := b[0] + b[7];
  		c[1] := b[2] + b[5];
  		c[2] := b[4] + b[3];
  		c[3] := b[6] + b[1];
  		c[4] := b[6] - b[1];
  		c[5] := b[4] - b[3];
  		c[6] := b[2] - b[5];
  		c[7] := b[0] - b[7];
 	end
/******************************************************************************
  * transpose procedure
  *****************************************************************************/
 	procedure transpose()
 	var
 		int(size=16) tmp
 	begin
		foreach uint(size=8) l in 0 .. 7 do
    		foreach uint(size=8) c in l .. 7 do
      			tmp                := block8x8[(l<<3)+c];
      			block8x8[(l<<3)+c] := block8x8[(c<<3)+l];
      			block8x8[(c<<3)+l] := tmp;
    		end
    	end	
 	end
/******************************************************************************
 * GetInput action
 *****************************************************************************/
	GetInput : action X:[x_in] repeat 64 ==>
	do 
		foreach uint(size=8) i in 0 .. 63 do
			block8x8[i] := x_in[i];
		end
		block8x8[0] := block8x8[0] + 32;
    end
/******************************************************************************
 * Ict8x8_1D_Row action
 *****************************************************************************/
	Ict8x8_1D_Row : action ==>
	do
		foreach uint(size=8) i in 0 .. 7 do
      		ict8x8_1D(i<<3);
			foreach uint(size=8) j in 0 .. 7 do
				block8x8[(i<<3)+j] := c[j];
			end
    	end
    	transpose();
    end
/******************************************************************************
 * Ict8x8_1D_Col action
 *****************************************************************************/
	Ict8x8_1D_Col : action ==>
	do
		foreach uint(size=8) i in 0 .. 7 do
      		ict8x8_1D(i<<3);
			foreach uint(size=8) j in 0 .. 7 do
				block8x8[(i<<3)+j] := c[j]>>6;
			end
    	end
    	transpose();
    end
/******************************************************************************
 * PutOutput action
 *****************************************************************************/
	PutOutput : action ==> Y:[block8x8] repeat 64
    end
 /******************************************************************************
 * Scheduler
 *****************************************************************************/	
	schedule fsm getInput_st:
		getInput_st   ( GetInput      ) --> ict8x8_ROW_st;
		ict8x8_ROW_st ( Ict8x8_1D_Row ) --> ict8x8_COL_st;
		ict8x8_COL_st ( Ict8x8_1D_Col ) --> putOutput_st;
		putOutput_st  ( PutOutput     ) --> getInput_st;
	end
end
