/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

// Author: Damien de Saint Jorre ; EPFL <damien.desaintjorre@epfl.ch>

//Modified by Gildas Cocherel IETR/INSA of Rennes (France)
package org.mpeg4.part10.frext.selectMacroblock;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;
import org.mpeg4.part10.Imp_PictureInfo.*;

actor Algo_DemuxParserInfoForBlocks_Luma()
	uint(size=6)  MBType,
	int (size=9)  Coef_ACR,
	bool          ConstrainedIFlag,
	uint(size=4)  PredMode,
	uint(size=7)  MbLocation,
	bool          NeighbourAvail
		==>
	int (size=9)  Coef_ACR_Intra_4x4,
	uint(size=4)  PredMode_4x4,
	bool          NeighbourAvail4x4,

	int (size=9)  Coef_ACR_Intra_8x8,
	uint(size=4)  PredMode_8x8,
	bool          NeighbourAvail8x8,

	int (size=9)  Coef_ACR_Intra_16x16,
	uint(size=4)  PredMode_16x16,
	bool          NeighbourAvail16x16,

	int (size=9)  Coef_ACR_Inter
		:


	List( type:bool, size = MAX_PICWIDTH_BLK) is_intra := [false : for int i in 0 .. MAX_PICWIDTH_BLK-1];
	bool          intra_top_left := false;	
	uint(size=13) curr_pos       := 0;
	bool          CurrValIsIntra := false;
/*
*
* Actions
*
*/

	MBTypeIsPCM: action
			MBType           :[ValMBType],
			ConstrainedIFlag :[c_intra_flag]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_PCM
		do
			CurrValIsIntra := true;
		end


	MBTypeIsIntra4x4: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_4x4
		do
			CurrValIsIntra := true;	
		end

	SendAcr4x4: action
			Coef_ACR           :[ValCoef] repeat 256
				==>
			Coef_ACR_Intra_4x4 :[ValCoef] repeat 256
		end

	SendPredMode4x4: action
			PredMode     :[pred_mode] repeat 16
				==>
			PredMode_4x4 :[pred_mode] repeat 16
		end

	SendNeighbourg4x4: action
			ConstrainedIFlag  :[c_intra_flag],
			MbLocation   :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
			NeighbourAvail4x4 :[NeighA, NeighB, NeighC, NeighD]
		var
			bool NeighA, 
			bool NeighB, 
			bool NeighC, 
			bool NeighD
		do
			curr_pos    := MbLocxInPic;
			NeighA := NeighbourA_Avail && (is_intra[(curr_pos-1) & 0x3F] or not (c_intra_flag));
			NeighB := NeighbourB_Avail && (is_intra[curr_pos & 0x3F] or not (c_intra_flag));
			NeighC := NeighbourC_Avail && (is_intra[(curr_pos+1) & 0x3F] or not (c_intra_flag)) && NeighB;
			NeighD := NeighbourD_Avail && (intra_top_left or not (c_intra_flag));
		end

	MBTypeIsIntra8x8: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType = BLOCK_TYPE_I_8x8
		do
			CurrValIsIntra := true;	
		end

	SendAcr8x8: action
			Coef_ACR           :[ValCoef] repeat 256
				==>
			Coef_ACR_Intra_8x8 :[ValCoef] repeat 256
		end

	SendPredMode8x8: action
			PredMode     :[pred_mode] repeat 4
				==>
			PredMode_8x8 :[pred_mode] repeat 4
		end

	SendNeighbourg8x8: action
			ConstrainedIFlag  :[c_intra_flag],
			MbLocation   :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
			NeighbourAvail8x8 :[NeighA, NeighB, NeighC, NeighD]
		var
			bool NeighA, 
			bool NeighB, 
			bool NeighC, 
			bool NeighD
		do
			curr_pos    := MbLocxInPic;
			NeighA := NeighbourA_Avail && (is_intra[(curr_pos-1) & 0x3F] or not (c_intra_flag));
			NeighB := NeighbourB_Avail && (is_intra[curr_pos & 0x3F] or not (c_intra_flag));
			NeighC := NeighbourC_Avail && (is_intra[(curr_pos+1) & 0x3F] or not (c_intra_flag)) && NeighB;
			NeighD := NeighbourD_Avail && (intra_top_left or not (c_intra_flag));
		end
		
	MBTypeIsIntra16x16: action
			MBType           :[ValMBType]
				==>
		guard
			ValMBType >= BLOCK_TYPE_INTRA_16x16_MIN,
			ValMBType <= BLOCK_TYPE_INTRA_16x16_MAX
		do
			CurrValIsIntra := true;
		end

	SendAcr16x16: action
			Coef_ACR             :[ValCoef] repeat 256
				==>
			Coef_ACR_Intra_16x16 :[ValCoef] repeat 256
		end

	SendPredMode16x16: action
			PredMode       :[pred_mode]
				==>
			PredMode_16x16 :[pred_mode]
		end

	SendNeighbourg16x16: action
			ConstrainedIFlag    :[c_intra_flag],
			MbLocation   :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
			NeighbourAvail16x16 :[NeighA, NeighB, NeighC, NeighD]
		var
			bool NeighA, 
			bool NeighB, 
			bool NeighC, 
			bool NeighD
		do
			curr_pos    := MbLocxInPic;
			NeighA := NeighbourA_Avail && (is_intra[(curr_pos-1) & 0x3F] or not (c_intra_flag));
			NeighB := NeighbourB_Avail && (is_intra[curr_pos & 0x3F] or not (c_intra_flag));
			NeighC := NeighbourC_Avail && (is_intra[(curr_pos+1) & 0x3F] or not (c_intra_flag)) && NeighB;
			NeighD := NeighbourD_Avail && (intra_top_left or not (c_intra_flag));
		end


	MBTypeIsInter: action
			MBType      :[ValMBType]
				==>
		guard
			ValMBType > BLOCK_TYPE_INTRA_MAX
		do
			CurrValIsIntra := false;
		end

	MBTypeIsInterPSkip: action
			MBType      :[ValMBType]/*,
			Coef_ACR       :[ValCoef] repeat 256*/
				==>
			Coef_ACR_Inter :[[0:  for int i in 0 .. 255]] repeat 256
		guard
			ValMBType = BLOCK_TYPE_P_SKIP or ValMBType = BLOCK_TYPE_B_SKIP
		do
			CurrValIsIntra := false;
		end

	SendAcrInter: action
			Coef_ACR       :[ValCoef] repeat 256
				==>
			Coef_ACR_Inter :[ValCoef] repeat 256
		end

	GetCnstrIAndFstMbInter: action
			ConstrainedIFlag :[c_intra_flag]
				==>
		end

	UpdateIsIntra: action
			MbLocation     :[MbLocxInPic , MbLocyInPic],
			NeighbourAvail :[NeighbourA_Avail , NeighbourB_Avail , NeighbourC_Avail , NeighbourD_Avail]
				==>
		do
			curr_pos        := MbLocxInPic;
		end	

	SendInfosDone: action ==>
		do
			intra_top_left     := is_intra[curr_pos];
			is_intra[curr_pos] := CurrValIsIntra;
		end

	schedule fsm CheckMbType:
		CheckMbType         (MBTypeIsPCM             )--> SendPCMInfos1;
		CheckMbType         (MBTypeIsIntra4x4        )--> SendIntra4x4Infos1;
		CheckMbType         (MBTypeIsIntra8x8        )--> SendIntra8x8Infos1;
		CheckMbType         (MBTypeIsIntra16x16      )--> SendIntra16x16Infos1;
		CheckMbType         (MBTypeIsInter           )--> SendInterInfos1;
		CheckMbType         (MBTypeIsInterPSkip      )--> SendInterInfos2;

		SendIntra4x4Infos1   (SendAcr4x4              )--> SendIntra4x4Infos2;
		SendIntra4x4Infos2   (SendPredMode4x4         )--> SendIntra4x4Infos3;
		SendIntra4x4Infos3   (SendNeighbourg4x4       )--> SendIntra4x4Infos4;
		SendIntra4x4Infos4   (SendInfosDone           )--> CheckMbType;

		SendIntra8x8Infos1   (SendAcr8x8              )--> SendIntra8x8Infos2;
		SendIntra8x8Infos2   (SendPredMode8x8         )--> SendIntra8x8Infos3;
		SendIntra8x8Infos3   (SendNeighbourg8x8       )--> SendIntra8x8Infos4;
		SendIntra8x8Infos4   (SendInfosDone           )--> CheckMbType;

		SendIntra16x16Infos1 (SendAcr16x16            )--> SendIntra16x16Infos2;
		SendIntra16x16Infos2 (SendPredMode16x16       )--> SendIntra16x16Infos3;	
		SendIntra16x16Infos3 (SendNeighbourg16x16     )--> SendIntra16x16Infos4;
		SendIntra16x16Infos4 (SendInfosDone           )--> CheckMbType;

		SendInterInfos1      (SendAcrInter            )--> SendInterInfos2;
		SendInterInfos2      (GetCnstrIAndFstMbInter  )--> SendInterInfos3;
		SendInterInfos3      (UpdateIsIntra           )--> SendInterInfos4;
		SendInterInfos4      (SendInfosDone           )--> CheckMbType;

		SendPCMInfos1        (UpdateIsIntra           )--> SendPCMInfos2;
		SendPCMInfos2        (SendInfosDone           )--> CheckMbType;
	end

	priority
		MBTypeIsInterPSkip > MBTypeIsInter > MBTypeIsIntra16x16 > MBTypeIsIntra8x8 > MBTypeIsIntra4x4 > MBTypeIsPCM;
	end

end