/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.cbp.synParser.modular.decodePicture;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;
//Clean me !!
actor MgntDecodePic()
	int (size=32) ValVLD,

	int (size=6)  Header1TypeOfVLD,
	int (size=32) Header1VLDParam,
	int (size=6)  Header2TypeOfVLD,
	int (size=32) Header2VLDParam,
	uint(size=5)  DecRefPicMarkingTypeOfVLD,
	int (size=32) DecRefPicMarkingNbBitsToRead,
	uint(size=5)  RefPicListTypeOfVLD,
	int (size=32) RefPicListNbBitsToRead,
	int (size=6)  DataTypeOfVLD,
	int (size=32) DataVLDParam,
	int (size=6)  MbLayerTypeOfVLD,
	int (size=32) MbLayerVLDParam,
	uint(size=5)  MbPredTypeOfVLD,
	int (size=32) MbPredNbBitsToRead,
	uint(size=5)  SubMbPredTypeOfVLD,
	int (size=32) SubMbPredNbBitsToRead,
	int (size=6)  ResTypeOfVLD,
	int (size=32) ResActorLaunched,
	uint(size=5)  ResBlkCavlcTypeOfVLD,
	int (size=32) ResBlkCavlcVLD_Param
		==>
	uint(size=5)  TypeOfVLD,
	int (size=32) VLD_Param,
	int (size=32) Header1ValVLD,
	int (size=32) Header2ValVLD,
	int (size=32) DecRefPicMarkingValVLD,
	int (size=32) RefPicListValVLD,
	int (size=32) DataValVLD,
	int (size=32) MbLayerValVLD,
	int (size=32) MbPredValVLD,
	int (size=32) SubMbPredValVLD,
	int (size=32) ResBlkCavlcValVLD
		:

	uint(size=8)  callStack[16];
	uint(size=32) nbParamToDecod := 0;
	uint(size=3)  stackIdx;

	initialize ==>
	do
		stackIdx     := 0;
		callStack[0] := SLICE_HEADER1;
	end

	findOutNextActor.isSliceHeader1: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER1
	end

	findOutNextActor.isSliceHeader2: action ==>
	guard
		callStack[stackIdx] = SLICE_HEADER2
	end

	findOutNextActor.isRefPicMark: action ==>
	guard
		callStack[stackIdx] = REF_PIC_MARKING
	end

	findOutNextActor.isRefPicList: action ==>
	guard
		callStack[stackIdx] = REF_PIC_LIST
	end

	findOutNextActor.isSliceData: action ==>
	guard
		callStack[stackIdx] = SLICE_DATA
	end

	findOutNextActor.isMbLayer: action ==>
	guard
		callStack[stackIdx] = MB_LAYER
	end

	findOutNextActor.isMbPred: action ==>
	guard
		callStack[stackIdx] = MB_PRED
	end

	findOutNextActor.isSubMbPred: action ==>
	guard
		callStack[stackIdx] = SUB_MB_PRED
	end

	findOutNextActor.isResidual: action ==>
	guard
		callStack[stackIdx] = RESIDUAL
	end

	findOutNextActor.isResidualCavlc: action ==>
	guard
		callStack[stackIdx] = RESIDUAL_BLOCK_CAVLC
	end

	getVldVal.done: action ==>
	guard
		nbParamToDecod = 0
	end

	waitVLDVal: action ==>
	guard
		nbParamToDecod > 0
	end

	/* Forwarding Slice Header 1 Informations */
	sliceHeader1.vld.withoutParam: action Header1TypeOfVLD:[typeOfVLD] ==>
		TypeOfVLD:[typeOfVLD]
	guard
		NbParamForFunction(typeOfVLD) = 0 and typeOfVLD != SKIP_NAL
	do
		if(typeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	sliceHeader1.vld.with1Param: action Header1TypeOfVLD:[typeOfVLD],
		Header1VLDParam:[param] ==> TypeOfVLD:[typeOfVLD], VLD_Param:[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceHeader1.launchActor: action Header1TypeOfVLD:[typeOfVLD],
		Header1VLDParam:[actorName] ==>
	guard
		typeOfVLD = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := actorName;
	end

	sliceHeader1.done: action Header1TypeOfVLD:[typeOfVLD] ==>
	guard
		typeOfVLD = SKIP_NAL
	end

	getVldVal.sliceHeader1: action ValVLD:[vldVal] ==> Header1ValVLD:[vldVal]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	/* Forwarding Slice Header 2 Informations */
	sliceHeader2.vld.withoutParam: action Header2TypeOfVLD:[typeOfVld] ==>
		TypeOfVLD:[typeOfVld]
	guard
		NbParamForFunction(typeOfVld) = 0 and typeOfVld != SKIP_NAL
	do
		if(typeOfVld != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	sliceHeader2.vld.with1Param: action Header2TypeOfVLD:[typeOfVld],
		Header2VLDParam:[param] ==> TypeOfVLD:[typeOfVld], VLD_Param:[param]
	guard
		NbParamForFunction(typeOfVld) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceHeader2.launchActor: action Header2TypeOfVLD:[typeOfVld],
		Header2VLDParam:[actorName] ==>
	guard
		typeOfVld = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := actorName;
	end

	sliceHeader2.done: action Header2TypeOfVLD:[typeOfVld] ==>
	guard
		typeOfVld = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	getVldVal.sliceHeader2: action ValVLD:[vldVal] ==> Header2ValVLD:[vldVal]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	/* Forwarding Slice RefPicMarking Informations */
	refPicMark.vld.withoutParam: action DecRefPicMarkingTypeOfVLD:[typeOfVLD]
		==> TypeOfVLD:[typeOfVLD]
	guard
		NbParamForFunction(typeOfVLD) = 0 and typeOfVLD != SKIP_NAL
	do
		if(typeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	refPicMark.vld.with1Param: action DecRefPicMarkingTypeOfVLD:[typeOfVLD],
		DecRefPicMarkingNbBitsToRead:[param] ==> TypeOfVLD:[typeOfVLD],
		VLD_Param :[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	refPicMark.done: action DecRefPicMarkingTypeOfVLD:[typeOfVLD] ==>
	guard
		typeOfVLD = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	getVldVal.refPicMark: action ValVLD:[vldVal] ==>
		DecRefPicMarkingValVLD:[vldVal]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	/* Forwarding RefPicList Informations */
	refPicList.vld.withoutParam: action RefPicListTypeOfVLD:[typeOfVLD] ==>
		TypeOfVLD:[typeOfVLD]
	guard
		NbParamForFunction(typeOfVLD) = 0,
		typeOfVLD  != SKIP_NAL
	do
		if(typeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	refPicList.vld.with1Param: action RefPicListTypeOfVLD:[typeOfVLD],
		RefPicListNbBitsToRead:[param] ==> TypeOfVLD:[typeOfVLD],
		VLD_Param:[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	refPicList.done: action RefPicListTypeOfVLD:[typeOfVLD] ==>
	guard
		typeOfVLD = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	getVldVal.refPicList: action ValVLD:[vldVal] ==> RefPicListValVLD:[vldVal]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	/* Forwarding SliceData Informations */
	sliceData.vld.withoutParam: action DataTypeOfVLD:[typeOfVLD] ==>
		TypeOfVLD:[typeOfVLD]
	guard
		NbParamForFunction(typeOfVLD) = 0 and typeOfVLD != SKIP_NAL
	do
		if(typeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	sliceData.vld.with1Param: action DataTypeOfVLD:[typeOfVLD],
		DataVLDParam:[param] ==> TypeOfVLD:[typeOfVLD], VLD_Param:[param]
	guard
		NbParamForFunction(typeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceData.vld.with2Param: action DataTypeOfVLD:[typeOfVLD],
		DataVLDParam:[param] repeat 2 ==> TypeOfVLD:[typeOfVLD],
		VLD_Param:[param] repeat 2
	guard
		NbParamForFunction(typeOfVLD) = 2
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	sliceData.launchActor: action DataTypeOfVLD:[typeOfVLD],
		DataVLDParam:[actorName] ==>
	guard
		typeOfVLD = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := actorName;
	end

	sliceData.done: action DataTypeOfVLD:[typeOfVLD] ==> TypeOfVLD:[typeOfVLD]
	guard
		typeOfVLD = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	getVldVal.sliceData: action ValVLD:[vldVal] ==> DataValVLD:[vldVal]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	mbLayer.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==> MbLayerValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	mbLayer.vld.withoutParam: action
		MbLayerTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD        :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	mbLayer.vld.with1Param: action
		MbLayerTypeOfVLD :[ValTypeOfVLD],
		MbLayerVLDParam  :[Param]
			==>
		TypeOfVLD        :[ValTypeOfVLD],
		VLD_Param        :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	mbLayer.vld.with2Param: action
		MbLayerTypeOfVLD :[ValTypeOfVLD],
		MbLayerVLDParam  :[Param] repeat 2
			==>
		TypeOfVLD        :[ValTypeOfVLD],
		VLD_Param        :[Param] repeat 2
	guard
		NbParamForFunction(ValTypeOfVLD) = 2
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	mbLayer.LaunchActor : action
		MbLayerTypeOfVLD :[Function],
		MbLayerVLDParam  :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	mbLayer.Done: action
		MbLayerTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	mbPred.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
		MbPredValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	mbPred.vld.withoutParam: action MbPredTypeOfVLD :[ValTypeOfVLD] ==>
		TypeOfVLD       :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	mbPred.vld.with1Param: action
		MbPredTypeOfVLD    :[ValTypeOfVLD],
		MbPredNbBitsToRead :[VldParam]
			==>
		TypeOfVLD          :[ValTypeOfVLD],
		VLD_Param          :[VldParam]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	mbPred.vld.with2Param: action
		MbPredTypeOfVLD    :[ValTypeOfVLD],
		MbPredNbBitsToRead :[VldParam] repeat 2
			==>
		TypeOfVLD          :[ValTypeOfVLD],
		VLD_Param          :[VldParam] repeat 2
	guard
		NbParamForFunction(ValTypeOfVLD) = 2
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	mbPred.Done: action MbPredTypeOfVLD :[Function] ==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	subMbPred.GetVLDVal.Launch: action ValVLD :[VLDecoding] ==>
			SubMbPredValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	subMbPred.vld.withoutParam: action SubMbPredTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD          :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD  != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	subMbPred.vld.with1Param: action
		SubMbPredTypeOfVLD    :[ValTypeOfVLD],
		SubMbPredNbBitsToRead :[VldParam]
			==>
		TypeOfVLD             :[ValTypeOfVLD],
		VLD_Param             :[VldParam]
	guard
			NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	subMbPred.Done: action
		SubMbPredTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end


	residual.LaunchActor: action
		ResTypeOfVLD     :[Function],
		ResActorLaunched :[Actor]
			==>
	guard
		Function = LAUNCH_ACTOR
	do
		stackIdx := (stackIdx + 1) & 0x0F;
		callStack[stackIdx] := Actor;
	end

	residual.Done: action
		ResTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	resBlkCavlc.GetVLDVal.Launch: action
		ValVLD            :[VLDecoding]
			==>
		ResBlkCavlcValVLD :[VLDecoding]
	guard
		nbParamToDecod > 0
	do
		nbParamToDecod := nbParamToDecod - 1;
	end

	resBlkCavlc.vld.withoutParam: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD]
			==>
		TypeOfVLD            :[ValTypeOfVLD]
	guard
		NbParamForFunction(ValTypeOfVLD) = 0,
		ValTypeOfVLD != SKIP_NAL
	do
		if(ValTypeOfVLD != BYTE_ALIGNED_REQUIRED)then
			nbParamToDecod := nbParamToDecod + 1;
		end
	end

	resBlkCavlc.vld.with1Param: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
		ResBlkCavlcVLD_Param :[Param]
			==>
		TypeOfVLD            :[ValTypeOfVLD],
		VLD_Param            :[Param]
	guard
		NbParamForFunction(ValTypeOfVLD) = 1
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	resBlkCavlc.FunctionWith2Param: action
		ResBlkCavlcTypeOfVLD :[ValTypeOfVLD],
		ResBlkCavlcVLD_Param :[Param1 , Param2]
			==>
		TypeOfVLD            :[ValTypeOfVLD],
		VLD_Param            :[Param1 , Param2]
	guard
		NbParamForFunction(ValTypeOfVLD) = 2
	do
		nbParamToDecod := nbParamToDecod + 1;
	end

	resBlkCavlc.Done: action
		ResBlkCavlcTypeOfVLD :[Function]
			==>
	guard
		Function = SKIP_NAL
	do
		stackIdx := (stackIdx - 1) & 0x0F;
	end

	schedule fsm FindOutNextActor:
		FindOutNextActor (findOutNextActor.isSliceHeader1    )--> SlcHead;
		FindOutNextActor (findOutNextActor.isSliceHeader2 )--> LaunchSlcHead2Avc;
		FindOutNextActor (findOutNextActor.isRefPicMark      )--> LaunchRefPicMark;
		FindOutNextActor (findOutNextActor.isRefPicList      )--> LaunchRefPicList;
		FindOutNextActor (findOutNextActor.isSliceData       )--> LaunchSliceData;
		FindOutNextActor (findOutNextActor.isMbLayer         )--> LaunchMbLayer;
		FindOutNextActor (findOutNextActor.isMbPred          )--> LaunchMbPred;
		FindOutNextActor (findOutNextActor.isSubMbPred       )--> LaunchSubMbPred;
		FindOutNextActor (findOutNextActor.isResidual        )--> LaunchResidual;
		FindOutNextActor (findOutNextActor.isResidualCavlc   )--> LaunchResBlkCavlc;

		SlcHead (sliceHeader1.vld         )--> SlcHead;
		SlcHead (waitVLDVal               )--> SlcHeadGetVLDVal;
		SlcHead (sliceHeader1.launchActor )--> FindOutNextActor;
		SlcHead (sliceHeader1.done        )--> SlcHead;
			SlcHeadGetVLDVal (getVldVal.sliceHeader1 )--> SlcHeadGetVLDVal;
			SlcHeadGetVLDVal (getVldVal.done         )--> SlcHead;

		LaunchSlcHead2Avc (sliceHeader2.vld )--> LaunchSlcHead2Avc;
		LaunchSlcHead2Avc (waitVLDVal           )--> LaunchSlcHead2AvcGetVLDVal;
		LaunchSlcHead2Avc (sliceHeader2.launchActor          )--> FindOutNextActor;
		LaunchSlcHead2Avc (sliceHeader2.done                 )--> FindOutNextActor;
			LaunchSlcHead2AvcGetVLDVal (getVldVal.sliceHeader2 )--> LaunchSlcHead2AvcGetVLDVal;
			LaunchSlcHead2AvcGetVLDVal (getVldVal.done   )--> LaunchSlcHead2Avc;
	
		LaunchRefPicMark (refPicMark.vld       )--> LaunchRefPicMark;
		LaunchRefPicMark (waitVLDVal           )--> LaunchRefPicMarkGetVLDVal;
		LaunchRefPicMark (refPicMark.done                 )--> LaunchSlcHead2Avc;
			LaunchRefPicMarkGetVLDVal (getVldVal.refPicMark )--> LaunchRefPicMarkGetVLDVal;
			LaunchRefPicMarkGetVLDVal (getVldVal.done   )--> LaunchRefPicMark;
		
		LaunchRefPicList (refPicList.vld       )--> LaunchRefPicList;
		LaunchRefPicList (waitVLDVal           )--> LaunchRefPicListGetVLDVal;
		LaunchRefPicList (refPicList.done                 )--> LaunchSlcHead2Avc;
			LaunchRefPicListGetVLDVal (getVldVal.refPicList )--> LaunchRefPicListGetVLDVal;
			LaunchRefPicListGetVLDVal (getVldVal.done   )--> LaunchRefPicList;
	
		LaunchSliceData   (sliceData.vld          )--> LaunchSliceData;
		LaunchSliceData   (waitVLDVal             )--> LaunchSliceDataGetVLDVal;
		LaunchSliceData   (sliceData.launchActor            )--> FindOutNextActor;
		LaunchSliceData   (sliceData.done                   )--> FindOutNextActor;
			LaunchSliceDataGetVLDVal   (getVldVal.sliceData )--> LaunchSliceDataGetVLDVal;
			LaunchSliceDataGetVLDVal   (getVldVal.done  )--> LaunchSliceData;
		
		LaunchMbLayer    (mbLayer.vld    )--> LaunchMbLayer;
		LaunchMbLayer    (waitVLDVal              )--> LaunchMbLayerGetVLDVal;
		LaunchMbLayer    (mbLayer.Done                    )--> FindOutNextActor;
		LaunchMbLayer    (mbLayer.LaunchActor             )--> FindOutNextActor;
			LaunchMbLayerGetVLDVal    (mbLayer.GetVLDVal.Launch    )--> LaunchMbLayerGetVLDVal;
			LaunchMbLayerGetVLDVal    (getVldVal.done      )--> LaunchMbLayer;
		
		LaunchMbPred    (mbPred.vld    )--> LaunchMbPred;
		LaunchMbPred    (waitVLDVal    )--> LaunchMbPredGetVLDVal;
		LaunchMbPred    (mbPred.Done   )--> FindOutNextActor;
			LaunchMbPredGetVLDVal    (mbPred.GetVLDVal.Launch )--> LaunchMbPredGetVLDVal;
			LaunchMbPredGetVLDVal    (getVldVal.done   )--> LaunchMbPred;
		
		LaunchSubMbPred (subMbPred.vld )--> LaunchSubMbPred;
		LaunchSubMbPred (waitVLDVal           )--> LaunchSubMbPredGetVLDVal;
		LaunchSubMbPred (subMbPred.Done                 )--> FindOutNextActor;
			LaunchSubMbPredGetVLDVal (subMbPred.GetVLDVal.Launch )--> LaunchSubMbPredGetVLDVal;
			LaunchSubMbPredGetVLDVal (getVldVal.done   )--> LaunchSubMbPred;
	
		LaunchResidual  (residual.Done                  )--> FindOutNextActor;
		LaunchResidual  (residual.LaunchActor           )--> FindOutNextActor;
	
		LaunchResBlkCavlc (resBlkCavlc.vld )--> LaunchResBlkCavlc;
		LaunchResBlkCavlc (resBlkCavlc.FunctionWith2Param   )--> LaunchResBlkCavlc;
		LaunchResBlkCavlc (waitVLDVal          )--> LaunchResBlkCavlcGetVLDVal;
		LaunchResBlkCavlc (resBlkCavlc.Done                 )--> FindOutNextActor;
			LaunchResBlkCavlcGetVLDVal (resBlkCavlc.GetVLDVal.Launch      )--> LaunchResBlkCavlcGetVLDVal;
			LaunchResBlkCavlcGetVLDVal (getVldVal.done        )--> LaunchResBlkCavlc;
	end
	priority
		sliceHeader1.vld > waitVLDVal > sliceHeader1.launchActor;
		sliceHeader1.launchActor      > sliceHeader1.done;
		getVldVal.sliceHeader1        > getVldVal.done;

		sliceHeader2.vld > waitVLDVal > sliceHeader2.launchActor;
		sliceHeader2.launchActor > sliceHeader2.done;
		getVldVal.sliceHeader2 > getVldVal.done;

		refPicMark.vld  > waitVLDVal > refPicMark.done;
		getVldVal.refPicMark > getVldVal.done;
		refPicList.vld  > waitVLDVal > refPicList.done;
		getVldVal.refPicList > getVldVal.done;

		sliceData.vld                    > waitVLDVal                     > sliceData.launchActor        > sliceData.done;
		getVldVal.sliceData       > getVldVal.done;
		mbLayer.vld   > waitVLDVal             > mbLayer.LaunchActor         > mbLayer.Done;
		mbLayer.GetVLDVal.Launch         > getVldVal.done;
		mbPred.vld      > waitVLDVal              > mbPred.Done;
		mbPred.GetVLDVal.Launch          > getVldVal.done;
		subMbPred.vld   > waitVLDVal           > subMbPred.Done;
		subMbPred.GetVLDVal.Launch       > getVldVal.done;
		resBlkCavlc.vld > resBlkCavlc.FunctionWith2Param > waitVLDVal > resBlkCavlc.Done;
		resBlkCavlc.GetVLDVal.Launch     > getVldVal.done;
	end
end