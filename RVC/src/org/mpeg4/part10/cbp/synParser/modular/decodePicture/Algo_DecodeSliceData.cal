/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package org.mpeg4.part10.cbp.synParser.modular.decodePicture;

import org.mpeg4.part10.cbp.synParser.modular.decodePicture.decodingFunctions.*;
import std.util.BitOps.*;
import org.mpeg4.part10.Imp_PictureInfo.*;
import org.mpeg4.part10.cbp.MacroBlockInfo.*;

actor Algo_DecodeSliceData(bool IsAvc, bool DEBUG)
	int (size=32) ValVLD,
	int(size=5)   PpsParameters,
	uint(size=32) SpsParameters,
	uint(size=5)  NumRefIdxLXActive,
	int (size=14) SliceHeaderParameters,
	int (size=32) MbLayFeedback,
	uint(size=6)  MbTypeIn
		==>
	int (size=6)  TypeOfVLD,
	int (size=32) VLDParam,
	int (size=16) MbLayerParameters,
	bool          SkipMbLayer,
	uint(size=5)  SzMbSkipped,
	bool          ConstraindedIntraPredFlag,
	uint(size=13) CurrMbAddr,
	uint(size=7)  PicWidthInMb,
	uint(size=7)  MbLocation,
	bool          NeighbourAvail,
	uint(size=2)  LFDisable,
	int(size=6)   Slice_Beta_Offset,
	int(size=6)   Slice_Alpha_C0_Offset,
	bool          NewPic,
	uint(size=6)  MbTypeOut,
	uint(size=6)  MbType4Pred,
	int (size=8)  Qp,
	int (size=8)  Qp_Cb,
	int (size=8)  Qp_Cr
		:

//	uint(size=4) SLICE_TYPE_P  = 0;
	uint(size=4) SLICE_TYPE_B  = 1;
	uint(size=4) SLICE_TYPE_I  = 2;
//	uint(size=4) SLICE_TYPE_SP = 3;
	uint(size=4) SLICE_TYPE_SI = 4;
	bool         CABAC_ENTROPY = true;

	List (type:uint(size=6),size=64) QP_TAB = 
		[
			 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
			10,11,12,13,14,15,16,17,18,19,
			20,21,22,23,24,25,26,27,28,29,
			29,30,31,32,32,33,34,34,35,35,
			36,36,37,37,37,38,38,38,39,39,
			39,39,39,39,39,39,39,39,42,42,
			42,42,42,42
		];

	//Sps Parameters
	uint(size=4)  bit_depth_luma;
	uint(size=4)  bit_depth_chroma;
	uint(size=2)  Chroma_Array_Type;
	uint(size=2)  NumC8x8;
	uint(size=32) PicWidthInMbs;
	uint(size=5)  MbWidthC;
	uint(size=5)  MbHeightC;
	//Pps Parameters
	bool          entropyCodingMode;
	bool          transform_8x8_mode_flag;
	uint(size=5)  num_ref_idx_l0_active;
	uint(size=5)  num_ref_idx_l1_active;
	int (size=5)  chroma_qp_index_offset;
	int (size=5)  second_chroma_qp_index_offset;
	//Slice Header Parameters
	uint(size=32) curr_mb_addr := 0;
	uint(size=7)  MbLocxInPic := 0;
	uint(size=7)  MbLocyInPic := 0;
	bool Is_MbA_Avail;
	bool Is_MbB_Avail;
	bool Is_MbC_Avail;
	bool Is_MbD_Avail;

	int (size=3)  cabacInitIdc;
	uint(size=4)  slice_type;
	bool          MbaffFrameFlag;
	uint(size=13) first_mb_in_slice;
	uint(size=2)  disable_deblocking_filter_idc;
	int(size=6)   slice_beta_offset;
	int(size=6)   slice_alpha_c0_offset;

	bool          moreDataFlag;
	bool          prevMbSkipped;
	uint(size=32) mb_skip_run;
	bool          mb_field_decoding_flag := false;
	bool          direct_8x8_inference_flag;
	bool          constrained_intra_pred_flag;
	int (size=8)  QpValue;
	int (size=8)  Qp_CbValue;
	int (size=8)  Qp_CrValue;
	bool         adaptivBaseMode = false;//!!!!!!!!!!!!!!!!!!!!!
	bool         adaptResidualPred = false;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	uint(size=4) scanIdxEnd = 0; //!!!!!!!!!!!!!!!!!!!!
	uint(size=4) scanIdxStart = 0;//!!!!!!!!!!!!!

	//Size of TotalCoeffTab must be >= PicWidthInMb + 1 and must be equal to pow(2,n) for masking bits easily.
	uint(size=6)  mbTypeTab[POW2_PICWIDTH_BLK_PLUS1];
	uint(size=1)  cbfDcLumaTab[POW2_PICWIDTH_BLK_PLUS1];
	uint(size=16) cbfAcLumaTab[POW2_PICWIDTH_BLK_PLUS1];
	uint(size=16) cbfChromaTab[POW2_PICWIDTH_BLK_PLUS1];
	bool          skipFlagTab[POW2_PICWIDTH_BLK_PLUS1];
	uint(size=5)  TotalCoeffTabLuma[POW2_PICWIDTH_BLK_PLUS1][16];
	uint(size=5)  TotalCoeffTabChroma[2][POW2_PICWIDTH_BLK_PLUS1][16];

	procedure NextMbAddress()
	var
		uint(size=7)  MbLocxInSlc ,
		uint(size=7)  MbLocyInSlc
	begin
		curr_mb_addr := curr_mb_addr + 1;
		MbLocxInPic  := curr_mb_addr mod PicWidthInMbs;
		MbLocyInPic  := curr_mb_addr  /  PicWidthInMbs;
		MbLocxInSlc  := (curr_mb_addr - first_mb_in_slice) mod PicWidthInMbs;
		MbLocyInSlc  := (curr_mb_addr - first_mb_in_slice)  /  PicWidthInMbs;
		Is_MbA_Avail := MbLocxInPic != 0 and (MbLocxInSlc != 0 or MbLocyInSlc != 0);
		Is_MbB_Avail := MbLocyInSlc != 0;
		Is_MbC_Avail := (MbLocyInSlc >= 1 or (MbLocxInSlc + 1) = PicWidthInMbs) and (MbLocxInPic + 1 <  PicWidthInMbs);
		Is_MbD_Avail := (MbLocyInSlc >= 1) and (MbLocxInPic > 0 and (MbLocyInSlc > 1 or MbLocyInSlc = 1 and MbLocxInSlc > 0));
		TotalCoeffTabLuma[(curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1)]      := [0: for int i in 0 .. 15];
		TotalCoeffTabChroma[0][(curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1)] := [0: for int i in 0 .. 15];
		TotalCoeffTabChroma[1][(curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1)] := [0: for int i in 0 .. 15];
		if(DEBUG)then
			println("\n\n\n*** New Mb *** Val = "+curr_mb_addr);
		end
	end

	uint(size=32) NumPic;

	GetSpsAndPpsParameters: action
		PpsParameters         :[PpsParam] repeat 3,
		SpsParameters         :[SpsParam] repeat 9,
		SliceHeaderParameters :[ ValSliceType  , ValFirstMbInSlice,
		                         ValMbaffFrame , Val_Qp,
		                         ValDisDebFil  , ValSliceBetaOffset,
		                         ValSliceAlphaC0Offset, cabacInit],
		NumRefIdxLXActive     :[ValNumRefIdxLXActive] repeat 2
			==>
	var
		uint(size=7)  MbLocxInSlc,
		uint(size=7)  MbLocyInSlc
	do
		if(DEBUG)then
			println("************* New Slice !! ************* : "+NumPic);
			NumPic := NumPic + 1;
		end
		bit_depth_chroma              := SpsParam[0];
		bit_depth_luma                := SpsParam[1];
		Chroma_Array_Type             := SpsParam[2];
		NumC8x8                       := SpsParam[3];
		PicWidthInMbs                 := SpsParam[5];
		direct_8x8_inference_flag     := getFlag(SpsParam[6],0);
		MbWidthC                      := SpsParam[7];
		MbHeightC                     := SpsParam[8];

		chroma_qp_index_offset        := PpsParam[0];
		second_chroma_qp_index_offset := PpsParam[1];
		constrained_intra_pred_flag   := getFlag(PpsParam[2],0);
		entropyCodingMode             := getFlag(PpsParam[2],1);
		transform_8x8_mode_flag       := getFlag(PpsParam[2],2);

		slice_type                    := ValSliceType;
		MbaffFrameFlag                :=
			if(ValMbaffFrame = 0)then
				false
			else
				true
			end;
		num_ref_idx_l0_active         := ValNumRefIdxLXActive[0];
		num_ref_idx_l1_active         := ValNumRefIdxLXActive[1];
		first_mb_in_slice             := ValFirstMbInSlice;
		disable_deblocking_filter_idc := ValDisDebFil;
		slice_beta_offset             := ValSliceBetaOffset;
		slice_alpha_c0_offset         := ValSliceAlphaC0Offset;
		cabacInitIdc                  := cabacInit;
		QpValue                       := Val_Qp;
		Qp_CbValue                    := QP_TAB[(QpValue + chroma_qp_index_offset) & 0x3F];
		Qp_CrValue                    := QP_TAB[(QpValue + second_chroma_qp_index_offset) & 0x3F];

		curr_mb_addr :=
			if(MbaffFrameFlag = false)then
				ValFirstMbInSlice * (1 + 0)
			else
				ValFirstMbInSlice * (1 + 1)
			end;
		MbLocxInPic    := curr_mb_addr mod PicWidthInMbs;
		MbLocyInPic    := curr_mb_addr  /  PicWidthInMbs;
		MbLocxInSlc    := (curr_mb_addr - first_mb_in_slice) mod PicWidthInMbs;
		MbLocyInSlc    := (curr_mb_addr - first_mb_in_slice)  /  PicWidthInMbs;
		Is_MbA_Avail := MbLocxInPic != 0 and (MbLocxInSlc != 0 or MbLocyInSlc != 0);
		Is_MbB_Avail := MbLocyInSlc != 0;
		Is_MbC_Avail := (MbLocyInSlc >= 1) and (MbLocxInPic + 1 <  PicWidthInMbs);
		Is_MbD_Avail := (MbLocyInSlc >= 1) and (MbLocxInPic > 0 and (MbLocyInSlc > 1 or MbLocyInSlc = 1 and MbLocxInSlc > 0));
		moreDataFlag   := true;
		prevMbSkipped  := false;
	end

	SendNewPic.Launch: action ==> NewPic :[true]
	guard
		first_mb_in_slice = 0
	end

	SendNewPic.Skip: action ==>
	guard
		first_mb_in_slice != 0
	end

	/* It's a CABAC Sequence ! */
	EntropyCodingModeFlag.IsEqualToTrue: action ==>
		TypeOfVLD:[BYTE_ALIGNED_REQUIRED, CABAC_INIT], VLDParam:[cabacInitIdc, QpValue, slice_type]
	guard
		entropyCodingMode = CABAC_ENTROPY
	end

	//                                  mb_skip_run
	isNotSliceIorSI.cavlc: action ==> TypeOfVLD:[VLD_UE]
	guard
		not entropyCodingMode,
		slice_type != SLICE_TYPE_I and slice_type != SLICE_TYPE_SI
	end

	isNotSliceIorSI.cabac: action ==> TypeOfVLD:[CABAC_MB_SKIP_FLAG],
		VLDParam:[mbSkipNeighb]
	guard
		entropyCodingMode,
		slice_type != SLICE_TYPE_I and slice_type != SLICE_TYPE_SI
	do
		uint(size=2) mbSkipNeighb;

		mbSkipNeighb := setFlag(skipFlagTab[(curr_mb_addr - 1) &
			MASK_POW2_PICWIDTH_BLK_PLUS1], 1, 0);
		mbSkipNeighb := setFlag(skipFlagTab[(curr_mb_addr - PicWidthInMbs) &
				MASK_POW2_PICWIDTH_BLK_PLUS1], 0, mbSkipNeighb);
		mbSkipNeighb := setFlag(Is_MbA_Avail, 2, mbSkipNeighb);
		mbSkipNeighb := setFlag(Is_MbB_Avail, 3, mbSkipNeighb);
	end

	readMbSkipFlag.isTrue: action ValVLD:[mbSkipFlag] ==>
		TypeOfVLD:[CABAC_END_OF_SLICE_FLAG],
		ConstraindedIntraPredFlag :[constrained_intra_pred_flag],
		CurrMbAddr                :[curr_mb_addr - 1],
		MbLocation                :[prevMbLocxInPic , prevMbLocyInPic],
		NeighbourAvail            :[PrevNeighbourValues]repeat 4,
		PicWidthInMb              :[PicWidthInMbs],
		SkipMbLayer               :[true],
		MbTypeOut                 :[mbTypeOut],
		MbType4Pred               :[mbTypeOut],
		SzMbSkipped               :[16+1+1+4+4],
		LFDisable                 :[disable_deblocking_filter_idc],
		Slice_Beta_Offset         :[slice_beta_offset],
		Slice_Alpha_C0_Offset     :[slice_alpha_c0_offset],
		Qp                        :[QpValue],
		Qp_Cb                     :[Qp_CbValue],
		Qp_Cr                     :[Qp_CrValue],
		NewPic                    :[false]
	guard
		mbSkipFlag = 1
	do
		uint(size=7) prevMbLocxInPic = MbLocxInPic;
		uint(size=7) prevMbLocyInPic = MbLocyInPic;
		bool PrevNeighbourValues[4] =[Is_MbA_Avail , Is_MbB_Avail , Is_MbC_Avail , Is_MbD_Avail];
		uint(size=6) mbTypeOut =
			if(slice_type = SLICE_TYPE_B) then
				BLOCK_TYPE_B_SKIP
			else
				BLOCK_TYPE_P_SKIP
			end;

		skipFlagTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] :=
			true;
		moreDataFlag := false;

		mbTypeTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := mbTypeOut;
		foreach int i in 0 .. 15
		do
			TotalCoeffTabLuma     [curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1]
				[i] := 0;
			TotalCoeffTabChroma[0][curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1]
				[i] := 0;
			TotalCoeffTabChroma[1][curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1]
				[i] := 0;
		end
		cbfDcLumaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := 0;
		cbfAcLumaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := 0;
		cbfChromaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := 0;
	end

	readMbSkipFlag.isFalse: action ValVLD:[mbSkipFlag] ==>
	guard
		mbSkipFlag = 0
	do
		skipFlagTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] :=
			false;
		moreDataFlag := true;
	end

	ReadMbSkipRun.Done: action ValVLD :[ValueOfVLD] ==>
	do
		mb_skip_run   := ValueOfVLD;
		prevMbSkipped := (mb_skip_run > 0);
		if(DEBUG)then
			println("\t\tmb_skip_run : "+ValueOfVLD);
		end
	end

	//for( i=0; i<mb_skip_run; i++ )
	checkMbSkipRun.isNotEqualTo0: action
			==>
		ConstraindedIntraPredFlag :[constrained_intra_pred_flag],
		CurrMbAddr                :[curr_mb_addr - 1],
		MbLocation                :[prevMbLocxInPic , prevMbLocyInPic],
		NeighbourAvail            :[PrevNeighbourValues]repeat 4,
		PicWidthInMb              :[PicWidthInMbs],
		SkipMbLayer               :[true],
		MbTypeOut                 :[mbTypeOut],
		MbType4Pred               :[mbTypeOut],
		SzMbSkipped               :[16+1+1+4+4],
		LFDisable                 :[disable_deblocking_filter_idc],
		Slice_Beta_Offset         :[slice_beta_offset],
		Slice_Alpha_C0_Offset     :[slice_alpha_c0_offset],
		Qp                        :[QpValue],
		Qp_Cb                     :[Qp_CbValue],
		Qp_Cr                     :[Qp_CrValue],
		NewPic                    :[false]
	guard
		mb_skip_run > 0
	do
		uint(size=7) prevMbLocxInPic = MbLocxInPic;
		uint(size=7) prevMbLocyInPic = MbLocyInPic;
		List(type: bool , size=4) PrevNeighbourValues =[Is_MbA_Avail , Is_MbB_Avail , Is_MbC_Avail , Is_MbD_Avail];
		uint(size=6) mbTypeOut =
			if(slice_type = SLICE_TYPE_B) then
				BLOCK_TYPE_B_SKIP
			else
				BLOCK_TYPE_P_SKIP
			end;

		mbTypeTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := mbTypeOut;
		foreach int i in 0 .. 15
		do
			TotalCoeffTabLuma     [curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1][i] := 0;
			TotalCoeffTabChroma[0][curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1][i] := 0;
			TotalCoeffTabChroma[1][curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1][i] := 0;
		end
		NextMbAddress();
		mb_skip_run := mb_skip_run - 1;
	end

	//                                               more_rbsp_data()
	checkMbSkipRun.isEqualTo0: action ==> TypeOfVLD :[askEndOfSlice]
	guard
		mb_skip_run = 0
	do
		uint(size=6) askEndOfSlice =
			if(not entropyCodingMode)then
				MORE_RBSP_DATA
			else
				CABAC_END_OF_SLICE_FLAG
			end;
	end

	readEndOfSlice: action ValVLD :[ValueOfVLD] ==>
	do
		moreDataFlag :=
			if(not entropyCodingMode) then
				ValueOfVLD != 0
			else
				ValueOfVLD = 0
			end;
	end

	CheckMoreDataFlag.IsEqualToTrue: action ==>
	guard
		moreDataFlag = true
	end

	ReadMbFieldDecod.Asked: action
			==>
		//        mb_field_decoding_flag
		TypeOfVLD :[ READ_BITS ],
		VLDParam  :[     1     ]
	guard
		MbaffFrameFlag = true,
		    (curr_mb_addr mod 2 = 0)
		or ((curr_mb_addr mod 2 = 1) and prevMbSkipped)
	end

	ReadMbFieldDecod.Done: action ValVLD :[ValueOfVLD] ==>
	do
		mb_field_decoding_flag :=
			if(ValueOfVLD = 0) then
				false
			else
				true
			end;
		if(DEBUG)then
			println("\t\tmb_field_decoding_flag : "+ValueOfVLD);
		end
	end

	//macroblock_layer()
	SendMbLayerParameters.avc: action ==>
		MbLayerParameters:[Parameters] repeat 41, NewPic:[false]
	guard
		IsAvc
	do
		int(size=16) Parameters[41];
		uint(size=5) NaTab[12];
		uint(size=5) NbTab[12];
		bool        LMbExists;
		bool        AMbExists;
		int(size=8) Flags;

			if(Is_MbA_Avail) then
				NaTab := [ TotalCoeffTabLuma  [(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 5],
				           TotalCoeffTabLuma  [(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 7],
				           TotalCoeffTabLuma  [(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][13],
				           TotalCoeffTabLuma  [(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][15],
				           TotalCoeffTabChroma[0][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 5],
				           TotalCoeffTabChroma[0][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 7],
				           TotalCoeffTabChroma[0][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][13],
				           TotalCoeffTabChroma[0][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][15],
				           TotalCoeffTabChroma[1][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 5],
				           TotalCoeffTabChroma[1][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][ 7],
				           TotalCoeffTabChroma[1][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][13],
				           TotalCoeffTabChroma[1][(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1][15]
				         ];
				LMbExists := true;
			else
				NaTab     := [0:for int i in 0 .. 11];
				LMbExists := false;
			end
			if(Is_MbB_Avail)then
				AMbExists := true;
				NbTab := [ TotalCoeffTabLuma  [(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][10],
				           TotalCoeffTabLuma  [(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][11],
				           TotalCoeffTabLuma  [(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][14],
				           TotalCoeffTabLuma  [(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][15],
				           TotalCoeffTabChroma[0][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][10],
				           TotalCoeffTabChroma[0][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][11],
				           TotalCoeffTabChroma[0][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][14],
				           TotalCoeffTabChroma[0][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][15],
				           TotalCoeffTabChroma[1][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][10],
				           TotalCoeffTabChroma[1][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][11],
				           TotalCoeffTabChroma[1][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][14],
				           TotalCoeffTabChroma[1][(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1][15]
				         ];
			else
				AMbExists := false;
				NbTab := [0:for int i in 0 .. 11];
			end

		Flags := setFlag(direct_8x8_inference_flag, 0, setFlag(transform_8x8_mode_flag, 1,setFlag(mb_field_decoding_flag,2 ,0 ) ));
		Flags := setFlag( entropyCodingMode, 3, setFlag(              LMbExists, 4,setFlag(             AMbExists,5 ,0 ) ));
		Parameters[0]  := Flags;
		Parameters[1]  := slice_type;
		Parameters[2]  := bit_depth_luma;
		Parameters[3]  := bit_depth_chroma;
		Parameters[4]  := Chroma_Array_Type;
		Parameters[5]  := num_ref_idx_l0_active;
		Parameters[6]  := num_ref_idx_l1_active;
		Parameters[7]  := NumC8x8;
		Parameters[8]  := QpValue;
		Parameters[9]  := chroma_qp_index_offset;
		Parameters[10] := second_chroma_qp_index_offset;
		foreach int i in 0 .. 11
		do
			Parameters[11 + i] := NaTab[i];
			Parameters[23 + i] := NbTab[i];
		end
		Parameters[35] := MbWidthC;
		Parameters[36] := MbHeightC;
		Parameters[37] := PicWidthInMbs;
		Parameters[38] := curr_mb_addr;
		Parameters[39] := cbfChromaTab[(curr_mb_addr - 1) & 
			MASK_POW2_PICWIDTH_BLK_PLUS1];
		Parameters[40] := cbfChromaTab[(curr_mb_addr - PicWidthInMbs) &
			MASK_POW2_PICWIDTH_BLK_PLUS1];
	end

	initCabacMbType.launch: action ==> TypeOfVLD:[CABAC_INIT_MB_VAL],
		VLDParam:[param] repeat 8
	guard
		entropyCodingMode
	do
		uint(size=16) param[8];

		param[0] := setFlag(Is_MbA_Avail,0,
			setFlag(Is_MbB_Avail,1,0));
		//mb_type for the Neighbour A
		param[1] :=	mbTypeTab[(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1];
		//mb_type for the Neighbour B
		param[2] :=	mbTypeTab[(curr_mb_addr - PicWidthInMbs) & MASK_POW2_PICWIDTH_BLK_PLUS1];
		param[3] :=	cbfAcLumaTab[(curr_mb_addr - 1) & 
			MASK_POW2_PICWIDTH_BLK_PLUS1];
		param[4] :=	cbfAcLumaTab[(curr_mb_addr - PicWidthInMbs) &
			MASK_POW2_PICWIDTH_BLK_PLUS1];
		param[5] :=
			(cbfDcLumaTab[(curr_mb_addr - 1) & MASK_POW2_PICWIDTH_BLK_PLUS1] << 1)
			+ cbfDcLumaTab[(curr_mb_addr - PicWidthInMbs) &
				MASK_POW2_PICWIDTH_BLK_PLUS1];
		param[6] := curr_mb_addr;
		param[7] := PicWidthInMbs;
	end

	initCabacMbType.skip: action ==>
	guard
		not entropyCodingMode
	end

	SendMbLayerParameters.svc: action ==>
		MbLayerParameters:[parameters] repeat 9, NewPic:[false]
	guard
		not IsAvc
	do
		int(size=8) flags;
		int(size=8) parameters[9];

		flags := setFlag(adaptivBaseMode, 0, setFlag(adaptResidualPred, 1,
			setFlag(transform_8x8_mode_flag, 2, 
			setFlag(direct_8x8_inference_flag, 3, 0))));
		parameters[0] := flags;
		parameters[1]  := bit_depth_chroma;
		parameters[2]  := bit_depth_luma;
		parameters[3]  := Chroma_Array_Type;
		parameters[4] := MbWidthC;
		parameters[5] := MbHeightC;
		parameters[6] := scanIdxStart;
		parameters[7] := scanIdxEnd;
		parameters[8]  := slice_type;	
	end

	DecMacroBlockLayer.Launch: action ==> TypeOfVLD:[ LAUNCH_ACTOR ,
		askEndOfSlice], VLDParam:[functionLaunched],
		ConstraindedIntraPredFlag :[constrained_intra_pred_flag],
		CurrMbAddr                :[curr_mb_addr],
		MbLocation                :[MbLocxInPic , MbLocyInPic],
		NeighbourAvail            :[Is_MbA_Avail , Is_MbB_Avail , Is_MbC_Avail , Is_MbD_Avail],
		PicWidthInMb              :[PicWidthInMbs],
		SkipMbLayer               :[false],
		LFDisable                 :[disable_deblocking_filter_idc],
		Slice_Beta_Offset         :[slice_beta_offset],
		Slice_Alpha_C0_Offset     :[slice_alpha_c0_offset]
	do
		uint(size=6) askEndOfSlice =
			if(not entropyCodingMode)then
				MORE_RBSP_DATA
			else
				CABAC_END_OF_SLICE_FLAG
			end;
		uint(size=8) functionLaunched =
			if(IsAvc) then MB_LAYER else MB_LAYER_SVC end;
	end

	GetTotalCoeffLuma: action MbLayFeedback:[feedback] repeat 54 ==>
	do
		uint(size=2) COEFF_OFF = 3;
		foreach int i in 0 .. 15
		do
			TotalCoeffTabLuma[(curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1)][i]
				:= feedback[COEFF_OFF + i];
			TotalCoeffTabChroma[0][(curr_mb_addr &
				MASK_POW2_PICWIDTH_BLK_PLUS1)][i] :=
				feedback[COEFF_OFF + 16+i];
			TotalCoeffTabChroma[1][(curr_mb_addr & 
				MASK_POW2_PICWIDTH_BLK_PLUS1)][i] :=
				feedback[COEFF_OFF + 32+i];
		end
		QpValue    := feedback[0];
		Qp_CbValue := feedback[1];
		Qp_CrValue := feedback[2];
		cbfDcLumaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] :=
			feedback[51];
		cbfAcLumaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] :=
			feedback[52];
		cbfChromaTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] :=
			feedback[53];
	end
	

	getMbType.isNotIntra: action MbTypeIn:[mbTypeVl] ==> MbTypeOut:[mbTypeVl],
		MbType4Pred:[mbTypeVl], Qp:[QpValue], Qp_Cb:[Qp_CbValue],
		Qp_Cr:[Qp_CrValue]
	guard
		not Mb_IsIntra(mbTypeVl)
	do
		mbTypeTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := mbTypeVl;
	end

	getMbType.isIntraAndNotPCM: action MbTypeIn:[mbTypeVal] ==>
		MbTypeOut:[mbTypeVal], Qp:[QpValue], Qp_Cb:[Qp_CbValue],
		Qp_Cr:[Qp_CrValue]
	guard
		Mb_IsIntra(mbTypeVal) and mbTypeVal != BLOCK_TYPE_I_PCM
	do
		mbTypeTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := mbTypeVal;
	end

	getMbType.isPCM: action MbTypeIn:[mbTypeVal] ==> MbTypeOut:[mbTypeVal]
	guard
		mbTypeVal = BLOCK_TYPE_I_PCM
	do
		mbTypeTab[curr_mb_addr & MASK_POW2_PICWIDTH_BLK_PLUS1] := mbTypeVal;
	end

	LaunchNextMbAddr: action ==>
	do
		NextMbAddress();
	end

	SendEndSliceHeader: action ==> TypeOfVLD :[SKIP_NAL]
	end

	schedule fsm GetSpsAndPpsParameters:
		GetSpsAndPpsParameters (GetSpsAndPpsParameters )--> SendNewPic;
		SendNewPic             (SendNewPic             )--> CheckEntropyCodingModeFlag;

		CheckEntropyCodingModeFlag (EntropyCodingModeFlag.IsEqualToTrue )--> CheckSliceType;
		CheckEntropyCodingModeFlag (isNotSliceIorSI.cavlc               )--> ReadMbSkipRun;
		CheckEntropyCodingModeFlag (isNotSliceIorSI.cabac               )--> ReadMbSkipFlag;
		CheckEntropyCodingModeFlag (CheckMoreDataFlag.IsEqualToTrue     )--> CheckMbAffFrame;

		CheckSliceType (isNotSliceIorSI.cavlc           )--> ReadMbSkipRun;
		CheckSliceType (isNotSliceIorSI.cabac           )--> ReadMbSkipFlag;
		CheckSliceType (CheckMoreDataFlag.IsEqualToTrue )--> CheckMbAffFrame;

		ReadMbSkipRun  (ReadMbSkipRun.Done           )--> CheckMbSkipRun;
		CheckMbSkipRun (checkMbSkipRun.isNotEqualTo0 )--> CheckMbSkipRun;
		CheckMbSkipRun (checkMbSkipRun.isEqualTo0    )--> ReadMoreDataFlag;

		ReadMoreDataFlag   (readEndOfSlice                  )--> CheckMoreDataCavlc;
		CheckMoreDataCavlc (CheckMoreDataFlag.IsEqualToTrue )--> CheckMbAffFrame;
		CheckMoreDataCavlc (LaunchNextMbAddr                )--> EndDecodeSliceData;

		ReadMbSkipFlag     (readMbSkipFlag.isTrue  )--> ReadMoreDataFlag2;
		ReadMbSkipFlag     (readMbSkipFlag.isFalse )--> CheckMbAffFrame;

		CheckMbAffFrame (ReadMbFieldDecod.Asked )--> ReadMbFieldDecod;
		CheckMbAffFrame (initCabacMbType        )--> SendMbLayerParameters;

		ReadMbFieldDecod      (ReadMbFieldDecod.Done     )--> InitCabacMbType;
		InitCabacMbType       (initCabacMbType           )--> SendMbLayerParameters;
		SendMbLayerParameters (SendMbLayerParameters     )--> DecodeMacroBlockLayer;
		DecodeMacroBlockLayer (DecMacroBlockLayer.Launch )--> GetTotalCoeffLuma;
		GetTotalCoeffLuma     (GetTotalCoeffLuma         )--> GetMbType;
		GetMbType             (getMbType                 )--> ReadMoreDataFlag2;
		ReadMoreDataFlag2     (readEndOfSlice            )--> LaunchNextMbAddr;

		LaunchNextMbAddr (LaunchNextMbAddr )--> CheckMoreDataFlag2;

		CheckMoreDataFlag2 (CheckMoreDataFlag.IsEqualToTrue )--> CheckSliceType;
		CheckMoreDataFlag2 (SendEndSliceHeader              )--> GetSpsAndPpsParameters;

		EndDecodeSliceData (SendEndSliceHeader )--> GetSpsAndPpsParameters;
	end
	priority
		EntropyCodingModeFlag.IsEqualToTrue > isNotSliceIorSI;
		isNotSliceIorSI                     > CheckMoreDataFlag.IsEqualToTrue;
		checkMbSkipRun.isNotEqualTo0        > checkMbSkipRun.isEqualTo0;
		CheckMoreDataFlag.IsEqualToTrue     > LaunchNextMbAddr;
		ReadMbFieldDecod.Asked              > SendMbLayerParameters;
		CheckMoreDataFlag.IsEqualToTrue     > SendEndSliceHeader;
	end
end