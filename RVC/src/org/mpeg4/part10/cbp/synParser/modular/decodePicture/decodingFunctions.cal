/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package org.mpeg4.part10.cbp.synParser.modular.decodePicture;

unit decodingFunctions :

	uint(size=6) SKIP_NAL              =  0;

	uint(size=6) READ_BITS             =  1;

	uint(size=6) VLD_UE                =  2;
	uint(size=6) VLD_SE                =  3;
	uint(size=6) VLD_TE                =  4;

	uint(size=6) BYTE_ALIGNED_REQUIRED =  5;
	uint(size=6) MORE_RBSP_DATA        =  6;

	uint(size=6) CAVLC_COEFF_TOKEN     =  7;
	uint(size=6) CAVLC_LEVEL_PREFIX    =  8;
	uint(size=6) CAVLC_TOTAL_ZEROS     =  9;
	uint(size=6) CAVLC_RUN_BEFORE      = 10;

	uint(size=6) CABAC_INIT                             = 11;
	uint(size=6) CABAC_INIT_MB_VAL                      = 12;

	uint(size=6) CABAC_DECOD_MINI                       = 13;

	uint(size=6) CABAC_MB_TYPE_I                        = 13;
	uint(size=6) CABAC_MB_TYPE_SI    	 				= 14;
	uint(size=6) CABAC_MB_TYPE_P_SP  	 				= 15;
	uint(size=6) CABAC_MB_TYPE_B      	 				= 16;
	uint(size=6) CABAC_MB_SKIP_FLAG	    				= 17;
	uint(size=6) CABAC_SUB_MB_TYPE_P_SP   				= 18;
	uint(size=6) CABAC_SUB_MB_TYPE_B	     			= 19; 
	uint(size=6) CABAC_MVD_L0_0_0	     				= 20;
	uint(size=6) CABAC_REF_IDX_L0_L1					= 21;
	uint(size=6) CABAC_MB_QP_DELTA						= 22;
	uint(size=6) CABAC_INTRA_CHROMA_PRED_MODE			= 23;
	uint(size=6) CABAC_PREV_INTRA4x4_8x8_PRED_MODE_FLAG	= 24;
	uint(size=6) CABAC_REM_INTRA4x4_8x8_PRED_MODE 		= 25;
	//uint(size=6) CABAC_MB_FIELD_DECODING_FLAG 		= 26;
	uint(size=6) CABAC_CODED_BLOCK_PATERN               = 27;	
	uint(size=6) CABAC_CODED_BLOCK_FLAG 				= 28;
	uint(size=6) CABAC_SIGNIFICANT_COEFF_FLAG 			= 29;
	uint(size=6) CABAC_LAST_SIGNIFICANT_COEFF_FLAG 		= 30;
	uint(size=6) CABAC_COEFF_ABS_LEVEL_MINUS1 			= 31;
	uint(size=6) CABAC_END_OF_SLICE_FLAG 				= 32;
	uint(size=6) CABAC_TRANSFORM_SIZE_8x8_FLAG 			= 33;
	uint(size=6) CABAC_COEFF_SIGN_FLAG      			= 34;

	uint(size=8) TabNbParamForFunction[35] =
		[ 0, 1, 0, 0, 1, 0, 0, 1, 0, 2,
		  1, 2, 6, 0, 0, 0, 0, 0, 0, 0,
		  0, 0, 2, 2, 0, 0, 0, 2, 1, 1,
		  0, 0, 0, 0];

	function NbParamForFunction(int NumFunction)
					-->
				int(size=8)
			:
				if(NumFunction >= 0)then
					TabNbParamForFunction[NumFunction]
				else
					-1
				end
			end

	int (size=6) LAUNCH_ACTOR      = -1;

	uint(size=8) REF_PIC_MARKING         =   0;
	uint(size=8) REF_PIC_LIST            =   1;
	uint(size=8) MB_LAYER                =   2;
	uint(size=8) SUB_MB_PRED             =   3;
	uint(size=8) MB_PRED                 =   4;
	uint(size=8) RESIDUAL                =   5;
	uint(size=8) RESIDUAL_BLOCK_CAVLC    =   6;
	uint(size=8) RESIDUAL_BLOCK_CABAC    =   7;
	uint(size=8) SPS_SVC_EXTENSION       =   8;
	uint(size=8) SPS_VUI_PARAM_EXTENSION =   9;
	uint(size=8) HRD_PARAMETERS          =  10;
	uint(size=8) SLICE_HEADER1           =  11;
	uint(size=8) SLICE_HEADER2           =  12;
	uint(size=8) SLICE_DATA              =  13;
	uint(size=8) REF_BASE_PIC_MARKING    =  14;
	uint(size=8) SUB_MB_PRED_SVC         =  15;
	uint(size=8) MB_PRED_SVC             =  16;
	uint(size=8) SLICE_DATA_SVC          =  17;
	uint(size=8) MB_LAYER_SVC            =  18;
	uint(size=8) PREFIX_NAL_UNIT         =  19;

	uint(size=8) PAYLOAD_ACTORS_MIN      = 100;
	uint(size=8) SCALABILITY_INFO        = 124;

	function isCabacFL(uint(size=6) syntaxElement, bool isPrefix) --> bool :
		syntaxElement = CABAC_PREV_INTRA4x4_8x8_PRED_MODE_FLAG or
		syntaxElement = CABAC_REM_INTRA4x4_8x8_PRED_MODE or
		syntaxElement = CABAC_CODED_BLOCK_PATERN and isPrefix or
		syntaxElement = CABAC_CODED_BLOCK_FLAG  or
		syntaxElement = CABAC_SIGNIFICANT_COEFF_FLAG  or
		syntaxElement = CABAC_LAST_SIGNIFICANT_COEFF_FLAG or
		syntaxElement = CABAC_END_OF_SLICE_FLAG
	end

	function isCabacU(uint(size=6) syntaxElement) --> bool :
		syntaxElement = CABAC_MB_QP_DELTA
	end

	function isCabacTU(uint(size=6) syntaxElement,  bool isPrefix) --> bool :
		syntaxElement = CABAC_INTRA_CHROMA_PRED_MODE or
		syntaxElement = CABAC_CODED_BLOCK_PATERN and not isPrefix or
		syntaxElement = CABAC_COEFF_ABS_LEVEL_MINUS1 and isPrefix
	end

	function isCabacDecoding(uint(size=6) syntaxElement) --> bool :
		syntaxElement >= CABAC_DECOD_MINI and
		syntaxElement != CABAC_INTRA_CHROMA_PRED_MODE and
		syntaxElement != CABAC_CODED_BLOCK_PATERN and
		syntaxElement != CABAC_MB_QP_DELTA and
		syntaxElement != CABAC_CODED_BLOCK_FLAG and
		syntaxElement != CABAC_SIGNIFICANT_COEFF_FLAG
	end
end