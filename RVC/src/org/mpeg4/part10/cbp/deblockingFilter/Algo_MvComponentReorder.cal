/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.cbp.deblockingFilter;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;

actor Algo_MvComponentReorder()
	uint(size=6)  MbType,
	uint(size=4)  SubMbType,
	int (size=16) Mv,
	uint(size=32) FrameToRead
		==>
	int (size=16) MvOut4Dbf,
	uint(size=6)  PartSZ,
	uint(size=2)  Select,
	int (size=32) ReadFrame4Dbf
		:

	bool DEBUG = false;

	int (size=16) MvTab[2][16][2];
	int (size=32) frameTab[2][16];

	uint(size=6) mb_type;
	uint(size=3) mbPartIdxMax;
	uint(size=3) mbPartIdx;
	uint(size=3) SizeMbMv;
	uint(size=3) subMbPartIdxMax;
	uint(size=3) subMbPartIdx;
	uint(size=3) SizeSubMbMv;
	uint(size=2) NbListToGet;
	uint(size=2) numList;

	GetMbType: action MbType :[MacroBlkType] ==>
	do
		if(DEBUG)then
			println("MbType : "+MacroBlkType);
		end
		mb_type      := MacroBlkType;
		mbPartIdx    := 0;
		mbPartIdxMax := NumMbPart(MacroBlkType);
		SizeMbMv     := SizeMbPart(MacroBlkType);
		foreach int i in 0 .. 1
		do
			foreach int j in 0 .. 15
			do
				frameTab[i][j] := -1;
			end
		end
	end

	GetListSel4Mb: action /*SelectList:[listSelected]*/ ==>
	guard
		mbPartIdx  < mbPartIdxMax,
		SizeMbMv  != SZ_8x8
	do
		NbListToGet := 1;
		numList := 0;
	end

	GetMv.Launch16x16: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[16,16], Select:[PRED_L0]
	guard
		SizeMbMv    = SZ_16x16,
		NbListToGet > 0
	do
		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		foreach int i in 0 .. 15
		do
			MvTab[numList][i]     := [Mvx,Mvy];
			frameTab[numList][i]  := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch16x8: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[16,8], Select:[PRED_L0]
	guard
		SizeMbMv    = SZ_16x8,
		NbListToGet > 0
	do
		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		foreach int i in 0 .. 7
		do
			MvTab[numList][i+(8*(mbPartIdx & 1))] := [Mvx,Mvy];
			frameTab[numList][i+(8*(mbPartIdx & 1))] := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch8x16: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[8,16], Select:[PRED_L0]
	guard
		SizeMbMv    = SZ_8x16,
		NbListToGet > 0
	do
		foreach int i in 0 .. 3
		do
			MvTab[numList][2*(mbPartIdx & 1) +4*i]    := [Mvx,Mvy];
			MvTab[numList][2*(mbPartIdx & 1) +4*i +1] := [Mvx,Mvy];
			frameTab[numList][2*(mbPartIdx & 1) +4*i]    := frame;
			frameTab[numList][2*(mbPartIdx & 1) +4*i +1] := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Launch_B_Skip: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[4,4], Select:[PRED_L0]
	guard
		   mb_type = BLOCK_TYPE_B_SKIP
		or mb_type = BLOCK_TYPE_B_DIRECT_16x16,
		NbListToGet > 0
	var
		uint(size=3) localMbPartIdx    = mbPartIdx  /  4,
		uint(size=3) localSubMbPartIdx = mbPartIdx mod 4
	do
		uint idx = 8*((localMbPartIdx >> 1)&1) + 2*(localMbPartIdx & 1) + 
		            4*((localSubMbPartIdx >> 1)&1) + (localSubMbPartIdx & 1);

		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		MvTab[numList][idx]     := [Mvx,Mvy];
		frameTab[numList][idx] := frame;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetMv.Done: action ==>
	guard
		NbListToGet = 0
	do
		mbPartIdx := mbPartIdx + 1;
	end

	GetMv.Launch8x8: action SubMbType:[ValSubMbType] ==>
	guard
		mbPartIdx  < mbPartIdxMax,
		SizeMbMv   = SZ_8x8
	do
		if(DEBUG)then
			println("SubMbType :"+ValSubMbType);
		end
		subMbPartIdx    := 0;
		subMbPartIdxMax := NumSubMbPart(mb_type,ValSubMbType);
		SizeSubMbMv     := SizeSubMbPart(mb_type,ValSubMbType);
	end

	GetListSel4SubMb: action ==>
	guard
		subMbPartIdx < subMbPartIdxMax
	do
		NbListToGet := 1;
		numList :=0;
	end

	GetSubMv.Launch8x8: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[8,8], Select:[PRED_L0]
	guard
		SizeSubMbMv = SZ_8x8,
		NbListToGet > 0
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1);

		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		foreach int i in 0 .. 1
		do
			MvTab[numList][idx + i]   := [Mvx,Mvy];
			MvTab[numList][idx + i+4] := [Mvx,Mvy];
			frameTab[numList][idx + i]   := frame;
			frameTab[numList][idx + i+4] := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch8x4: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ :[8,4], Select:[PRED_L0]
	guard
		SizeSubMbMv = SZ_8x4,
		NbListToGet > 0
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1) + 4*subMbPartIdx;
		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		foreach uint i in 0 .. 1
		do
			MvTab[numList][idx + i]     := [Mvx,Mvy];
			frameTab[numList][idx + i]  := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch4x8: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[4,8], Select:[PRED_L0]
	guard
		SizeSubMbMv = SZ_4x8,
		NbListToGet > 0
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1) + subMbPartIdx;
		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		foreach uint i in 0 .. 1
		do
			MvTab[numList][idx + 4*i]     := [Mvx,Mvy];
			frameTab[numList][idx + 4*i] := frame;
		end
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Launch4x4: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[4,4], Select:[PRED_L0]
	guard
		SizeSubMbMv = SZ_4x4,
		NbListToGet > 0
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1) + 
		            4*((subMbPartIdx >> 1)&1) + (subMbPartIdx & 1);
		if(DEBUG)then
			println("Mv : ["+Mvx+" ; "+Mvy+"]");
			println("FrameToRead : "+frame);
		end
		MvTab[numList][idx]     := [Mvx,Mvy];
		frameTab[numList][idx] := frame;
		NbListToGet := NbListToGet - 1;
		numList := numList + 1;
	end

	GetSubMv.Done: action ==>
	guard
		NbListToGet = 0
	do
		subMbPartIdx := subMbPartIdx + 1;
	end

	GetSubMvInfo.Done: action ==>
	guard
		subMbPartIdx = subMbPartIdxMax
	do
		mbPartIdx := mbPartIdx + 1;
	end

	SendParameters: action ==> ReadFrame4Dbf :[frameNumOut] repeat 32,
			MvOut4Dbf:[mvOut] repeat 64
	guard
		mbPartIdx = mbPartIdxMax
	do
		int(size=32) frameNumOut[32];
		int(size=16) mvOut[64];

		foreach int numList in 0 .. 1
		do
			foreach int i in 0 .. 15
			do
				frameNumOut[numList*16 + i] := frameTab[numList][i];
				mvOut[numList*32 + i]       := MvTab[numList][i][0];
				mvOut[numList*32 + i+16]    := MvTab[numList][i][1];
			end
		end
	end

	schedule fsm GetMbType:
		GetMbType        (GetMbType           )--> GetListSel4Mb;

		GetListSel4Mb    (GetListSel4Mb       )--> GetMv;
		GetListSel4Mb    (GetMv.Launch8x8     )--> GetListSel4SubMb;
		GetListSel4Mb    (SendParameters      )--> GetMbType;

		GetMv            (GetMv.Launch16x16   )--> GetMv;
		GetMv            (GetMv.Launch16x8    )--> GetMv;
		GetMv            (GetMv.Launch8x16    )--> GetMv;
		GetMv            (GetMv.Launch_B_Skip )--> GetMv;
		GetMv            (GetMv.Done          )--> GetListSel4Mb;

		GetListSel4SubMb (GetListSel4SubMb    )--> GetSubMv;
		GetListSel4SubMb (GetSubMvInfo.Done   )--> GetListSel4Mb;

		GetSubMv         (GetSubMv.Launch8x8  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch8x4  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch4x8  )--> GetSubMv;
		GetSubMv         (GetSubMv.Launch4x4  )--> GetSubMv;
		GetSubMv         (GetSubMv.Done       )--> GetListSel4SubMb;
	end

end