/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
// Author: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>
package org.mpeg4.part10.cbp.deblockingFilter;

import org.mpeg4.part10.cbp.MacroBlockInfo.*;

actor Algo_MvComponentReorder()
	uint(size=32) FrameToRead,
	uint(size=6)  MbType,
	int (size=16) Mv,
	uint(size=4)  SubMbType
		==>
	int (size=16) MvOut4Dbf,
	uint(size=6)  PartSZ,
	int (size=32) ReadFrame4Dbf
		:

	int (size=32) frameTab[16];
	uint(size=6)  mbType;
	uint(size=3)  mbPartIdx;
	uint(size=3)  mbPartIdxMax;
	int (size=16) mvTab[16][2];
	uint(size=3)  sizeMbMv;
	uint(size=3)  sizeSubMbMv;
	uint(size=3)  subMbPartIdx;
	uint(size=3)  subMbPartIdxMax;

	getMbType: action MbType:[macroBlkType] ==>
	do
		mbType    := macroBlkType;
		mbPartIdx := 0;
		mbPartIdxMax := numMbPart(macroBlkType);
		sizeMbMv     := sizeMbPart(macroBlkType);
		foreach int j in 0 .. 15
		do
			frameTab[j] := -1;
		end
	end

	checkMbPartIdx: action ==>
	guard
		mbPartIdx < mbPartIdxMax and sizeMbMv != SZ_8x8
	end

	getMv.launch16x16: action Mv:[mvX, mvY], FrameToRead:[frame] ==>
		PartSZ:[16, 16]
	guard
		sizeMbMv = SZ_16x16
	do
		foreach int i in 0 .. 15
		do
			mvTab[i]    := [mvX, mvY];
			frameTab[i] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	getMv.launch16x8: action Mv:[mvX, mvY], FrameToRead:[frame] ==>
		PartSZ:[16, 8]
	guard
		sizeMbMv = SZ_16x8
	do
		foreach int blkIdx in 8*mbPartIdx .. 8*mbPartIdx + 7
		do
			mvTab[blkIdx]    := [mvX, mvY];
			frameTab[blkIdx] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	getMv.launch8x16: action Mv:[mvX, mvY], FrameToRead:[frame] ==>
		PartSZ:[8, 16]
	guard
		sizeMbMv = SZ_8x16
	do
		uint(size=4) blkIdx;

		foreach int numLine in 0 .. 3
		do
			blkIdx := 2*mbPartIdx + 4*numLine;
			mvTab[blkIdx]    := [mvX, mvY];
			mvTab[blkIdx +1] := [mvX, mvY];
			frameTab[blkIdx]    := frame;
			frameTab[blkIdx +1] := frame;
		end
		mbPartIdx := mbPartIdx + 1;
	end

	getSubMbType: action SubMbType:[subMbType] ==>
	guard
		mbPartIdx < mbPartIdxMax and sizeMbMv = SZ_8x8
	do
		subMbPartIdx    := 0;
		subMbPartIdxMax := numSubMbPart(mbType, subMbType);
		sizeSubMbMv     := SizeSubMbPart(mbType, subMbType);
	end

	checkSubMbPartIdx: action ==>
	guard
		subMbPartIdx < subMbPartIdxMax
	end

	getSubMv.launch8x8: action Mv:[Mvx, Mvy], FrameToRead:[frame] ==>
		PartSZ:[8, 8]
	guard
		sizeSubMbMv = SZ_8x8
	do
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1);

		foreach int i in 0 .. 1
		do
			mvTab[idx + i]   := [Mvx, Mvy];
			mvTab[idx + i+4] := [Mvx, Mvy];
			frameTab[idx + i]   := frame;
			frameTab[idx + i+4] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	getSubMv.launch8x4: action Mv:[Mvx, Mvy], FrameToRead:[frame] ==>
		PartSZ :[8, 4]
	guard
		sizeSubMbMv = SZ_8x4
	do
		uint idx = 8*(mbPartIdx >> 1) + 2*(mbPartIdx & 1) + 4*subMbPartIdx;

		foreach uint i in 0 .. 1
		do
			mvTab[idx + i]    := [Mvx, Mvy];
			frameTab[idx + i] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	getSubMv.launch4x8: action Mv:[Mvx, Mvy], FrameToRead:[frame] ==>
		PartSZ:[4, 8]
	guard
		sizeSubMbMv = SZ_4x8
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1) + subMbPartIdx;

		foreach uint i in 0 .. 1
		do
			mvTab[idx + 4*i]    := [Mvx, Mvy];
			frameTab[idx + 4*i] := frame;
		end
		subMbPartIdx := subMbPartIdx + 1;
	end

	getSubMv.launch4x4: action Mv:[Mvx, Mvy],
		FrameToRead:[frame] ==> PartSZ:[4,4]
	guard
		sizeSubMbMv = SZ_4x4
	do
		uint idx = 8*((mbPartIdx >> 1)&1) + 2*(mbPartIdx & 1) + 
		            4*((subMbPartIdx >> 1)&1) + (subMbPartIdx & 1);

		mvTab[idx]     := [Mvx,Mvy];
		frameTab[idx] := frame;
		subMbPartIdx := subMbPartIdx + 1;
	end

	getSubMvInfo.done: action ==>
	guard
		subMbPartIdx = subMbPartIdxMax
	do
		mbPartIdx := mbPartIdx + 1;
	end

	SendParameters: action ==> ReadFrame4Dbf :[frameNumOut] repeat 32,
			MvOut4Dbf:[mvOut] repeat 64
	guard
		mbPartIdx = mbPartIdxMax
	do
		//We don't use  the last 16 values of frameNumOut (and the last 32 for
		//mvOut) because with Constrained Baseline Profile, we don't manage
		//Bi-Prediction. Nevertheless we have to send 32 (and 64) tokens
		//because the Dbf is compatible to Cbp Description and Progressive High
		//Profile description
		int(size=32) frameNumOut[32] :=[-1: for int s in 0 .. 31];
		int(size=16) mvOut[64] :=[0: for int s in 0 .. 63];
		foreach int i in 0 .. 15
		do
			frameNumOut[i] := frameTab[i];
			mvOut[i]       := mvTab[i][0];
			mvOut[i+16]    := mvTab[i][1];
		end
	end

	schedule fsm GetMbType:
		GetMbType      (getMbType       )--> CheckMbPartIdx;
		CheckMbPartIdx (checkMbPartIdx  )--> GetMv;
		CheckMbPartIdx (getSubMbType    )--> CheckSubMbPartIdx;
		CheckMbPartIdx (SendParameters  )--> GetMbType;

		GetMv (getMv )--> CheckMbPartIdx;

		CheckSubMbPartIdx (checkSubMbPartIdx )--> GetSubMv;
		CheckSubMbPartIdx (getSubMvInfo      )--> CheckMbPartIdx;

		GetSubMv (getSubMv )--> CheckSubMbPartIdx;
	end

end