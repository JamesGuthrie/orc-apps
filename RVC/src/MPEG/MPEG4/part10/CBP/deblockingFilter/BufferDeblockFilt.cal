/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-4 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-4.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-4 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-4 once the ISO/IEC 23002-4 has been adopted; and 
(2) to develop the ISO/IEC 23002-4: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-4 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-4 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-4.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-4 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-4

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2008.
*****************************************************************************/
package MPEG.MPEG4.part10.CBP.deblockingFilter;

import MPEG.Common.Imp_PictureInfo.*;

actor BufferDeblockFilt (int MB_WIDTH)

	bool         FilterEdges,
	uint(size=8) PixValue,
	uint(size=7) MbLocation,
	uint(size=7) PicWidthInMb,
	bool         IsNewPicOrMb
		==>
	uint(size=32) CurrPicInfo,
	uint(size=8)  CurrMbVal
		:

	bool IS_NEW_MB    = false;
	bool IS_NEW_PIC   = true;

	uint(size=8)  picture [MAX_PICWIDTH_PX][MAX_PICHEIGHT_PX];
	uint(size=32) nbMacroBlocksWritten := 0;
	uint(size=8)  nbLineInPic;
	uint(size=8)  locXSent;
	uint(size=8)  locYSent;
	uint(size=7)  picWidthInMb;

	getIsNewPic: action IsNewPicOrMb:[isNewPic] ==>
	end

	writePictureDone: action
		IsNewPicOrMb:[isNewPicOrMb]
			==>
		CurrPicInfo :[nbMacroBlocksWritten, picWidthInMb]
	guard
		isNewPicOrMb = IS_NEW_PIC
	do
		nbLineInPic := nbMacroBlocksWritten / picWidthInMb;
		locXSent    := 0;
		locYSent    := 0;
	end

	getWriteAddr: action
		PicWidthInMb :[valPicWidthInMb],
		IsNewPicOrMb :[isNewPicOrMb]
			==>
	guard
		isNewPicOrMb = IS_NEW_MB
	do
		nbMacroBlocksWritten := nbMacroBlocksWritten + 1;
		picWidthInMb         := valPicWidthInMb;
	end

	writeData.Chroma : action 
		MbLocation :[MbLocxInPic , MbLocyInPic],
		PixValue   :[pixValue] repeat MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
			==>
	guard
		MB_WIDTH = MB_WIDTH_CHROMA
	do
		foreach int y in 0 .. MB_WIDTH - 1
		do
			foreach int x in 0 .. MB_WIDTH - 1
			do
				picture[MbLocxInPic * MB_WIDTH + x][MbLocyInPic * MB_WIDTH + y] := pixValue[y * MB_WIDTH + x];
			end
		end
	end

	writeData.Luma : action
		MbLocation :[MbLocxInPic , MbLocyInPic],
		PixValue   :[pixValue] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
			==>
	guard
		MB_WIDTH = MB_WIDTH_LUMA
	do
		foreach int y in 0 .. MB_WIDTH - 1
		do
			foreach int x in 0 .. MB_WIDTH - 1
			do
				picture[MbLocxInPic * MB_WIDTH + x][MbLocyInPic * MB_WIDTH + y] := pixValue[y * MB_WIDTH + x];
			end
		end
	end

	sendPicture.launch.Chroma : action
			==>
		CurrMbVal :[currMbVal] repeat MB_WIDTH_CHROMA*MB_WIDTH_CHROMA
	guard
		locYSent < nbLineInPic,
		MB_WIDTH = MB_WIDTH_CHROMA
	var
		uint(size=8) currMbVal[MB_WIDTH_CHROMA*MB_WIDTH_CHROMA]
	do
		foreach int y in 0 .. MB_WIDTH - 1
		do
			foreach int x in 0 .. MB_WIDTH - 1
			do
				currMbVal[y * MB_WIDTH + x] := picture[locXSent * MB_WIDTH + x][locYSent * MB_WIDTH + y];
			end
		end
		locXSent := locXSent + 1;
		if(locXSent = picWidthInMb)then
			locXSent := 0;
			locYSent := locYSent + 1;
		end
	end

	sendPicture.launch.Luma : action
			==>
		CurrMbVal :[currMbVal] repeat MB_WIDTH_LUMA*MB_WIDTH_LUMA
	guard
		locYSent < nbLineInPic,
		MB_WIDTH = MB_WIDTH_LUMA
	var
		uint(size=8) currMbVal[MB_WIDTH_LUMA*MB_WIDTH_LUMA]
	do
		foreach int y in 0 .. MB_WIDTH - 1
		do
			foreach int x in 0 .. MB_WIDTH - 1
			do
				currMbVal[y * MB_WIDTH + x] := picture[locXSent * MB_WIDTH + x][locYSent * MB_WIDTH + y];
			end
		end
		locXSent := locXSent + 1;
		if(locXSent = picWidthInMb)then
			locXSent := 0;
			locYSent := locYSent + 1;
		end
	end

	sendPicture.done : action ==>
	guard
		locYSent = nbLineInPic
	do
		nbMacroBlocksWritten := 0;
	end

	getFilterInfo: action FilterEdges :[filterLeft, filterInternal, filterTop]
		==>
	end

	schedule fsm  GetIsNewPic:
		GetIsNewPic (getIsNewPic      )--> GetNextMb;

		GetNextMb   (getWriteAddr     )--> WriteMb;
		GetNextMb   (writePictureDone )--> SendPicture;

		WriteMb     (writeData        )--> GetFilterInfo;

		SendPicture (sendPicture.launch )--> SendPicture;
		SendPicture (sendPicture.done )--> GetNextMb;

		GetFilterInfo (getFilterInfo )--> GetNextMb;
	end
end